
MP3MultiChannel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000170c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000395c  08017294  08017294  00027294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801abf0  0801abf0  0003062c  2**0
                  CONTENTS
  4 .ARM          00000008  0801abf0  0801abf0  0002abf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801abf8  0801abf8  0003062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801abf8  0801abf8  0002abf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801abfc  0801abfc  0002abfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000062c  20000000  0801ac00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003ffcc  20000640  0801b22c  00030640  2**5
                  ALLOC
 10 ._user_heap_stack 00000c04  2004060c  0801b22c  0004060c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003062c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ccfa  00000000  00000000  0003065c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000061ca  00000000  00000000  0005d356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002180  00000000  00000000  00063520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e88  00000000  00000000  000656a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007541  00000000  00000000  00067528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c5f6  00000000  00000000  0006ea69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010691c  00000000  00000000  0009b05f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a197b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c88  00000000  00000000  001a19cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000640 	.word	0x20000640
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801727c 	.word	0x0801727c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000644 	.word	0x20000644
 800020c:	0801727c 	.word	0x0801727c

08000210 <xmp3_PolyphaseStereo>:


// void PolyphaseStereo(short *pcm, int *vbuf, const int *coefBase)
	.thumb_func
xmp3_PolyphaseStereo:
    stmfd    sp!, {r4-r11, r14}
 8000210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
	//; clear out stack space for 2 local variables (4 bytes each)
    sub        sp, sp, #8
 8000214:	b082      	sub	sp, #8
    str        PCM , [sp, #4]                // sp[1] = pcm pointer
 8000216:	9001      	str	r0, [sp, #4]

    // special case, output sample 0
    mov        SUM1LL, #RNDVAL               // load rndVal (low 32)
 8000218:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
    mov        SUM1RL, #RNDVAL               // load rndVal (low 32)
 800021c:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
    mov        SUM1LH, #0
 8000220:	f04f 0500 	mov.w	r5, #0
    mov        SUM1RH, #0
 8000224:	f04f 0900 	mov.w	r9, #0

    MC0S    0
 8000228:	f852 cb04 	ldr.w	ip, [r2], #4
 800022c:	f852 eb04 	ldr.w	lr, [r2], #4
 8000230:	6808      	ldr	r0, [r1, #0]
 8000232:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 8000234:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000238:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
 800023c:	f1ce 0e00 	rsb	lr, lr, #0
 8000240:	fbc3 450e 	smlal	r4, r5, r3, lr
 8000244:	f8d1 30dc 	ldr.w	r3, [r1, #220]	; 0xdc
 8000248:	fbc0 890c 	smlal	r8, r9, r0, ip
 800024c:	fbc3 890e 	smlal	r8, r9, r3, lr
    MC0S    1
 8000250:	f852 cb04 	ldr.w	ip, [r2], #4
 8000254:	f852 eb04 	ldr.w	lr, [r2], #4
 8000258:	6848      	ldr	r0, [r1, #4]
 800025a:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800025c:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000260:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
 8000264:	f1ce 0e00 	rsb	lr, lr, #0
 8000268:	fbc3 450e 	smlal	r4, r5, r3, lr
 800026c:	f8d1 30d8 	ldr.w	r3, [r1, #216]	; 0xd8
 8000270:	fbc0 890c 	smlal	r8, r9, r0, ip
 8000274:	fbc3 890e 	smlal	r8, r9, r3, lr
    MC0S    2
 8000278:	f852 cb04 	ldr.w	ip, [r2], #4
 800027c:	f852 eb04 	ldr.w	lr, [r2], #4
 8000280:	6888      	ldr	r0, [r1, #8]
 8000282:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8000284:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000288:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
 800028c:	f1ce 0e00 	rsb	lr, lr, #0
 8000290:	fbc3 450e 	smlal	r4, r5, r3, lr
 8000294:	f8d1 30d4 	ldr.w	r3, [r1, #212]	; 0xd4
 8000298:	fbc0 890c 	smlal	r8, r9, r0, ip
 800029c:	fbc3 890e 	smlal	r8, r9, r3, lr
    MC0S    3
 80002a0:	f852 cb04 	ldr.w	ip, [r2], #4
 80002a4:	f852 eb04 	ldr.w	lr, [r2], #4
 80002a8:	68c8      	ldr	r0, [r1, #12]
 80002aa:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80002ac:	fbc0 450c 	smlal	r4, r5, r0, ip
 80002b0:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80002b4:	f1ce 0e00 	rsb	lr, lr, #0
 80002b8:	fbc3 450e 	smlal	r4, r5, r3, lr
 80002bc:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
 80002c0:	fbc0 890c 	smlal	r8, r9, r0, ip
 80002c4:	fbc3 890e 	smlal	r8, r9, r3, lr
    MC0S    4
 80002c8:	f852 cb04 	ldr.w	ip, [r2], #4
 80002cc:	f852 eb04 	ldr.w	lr, [r2], #4
 80002d0:	6908      	ldr	r0, [r1, #16]
 80002d2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80002d4:	fbc0 450c 	smlal	r4, r5, r0, ip
 80002d8:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
 80002dc:	f1ce 0e00 	rsb	lr, lr, #0
 80002e0:	fbc3 450e 	smlal	r4, r5, r3, lr
 80002e4:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
 80002e8:	fbc0 890c 	smlal	r8, r9, r0, ip
 80002ec:	fbc3 890e 	smlal	r8, r9, r3, lr
    MC0S    5
 80002f0:	f852 cb04 	ldr.w	ip, [r2], #4
 80002f4:	f852 eb04 	ldr.w	lr, [r2], #4
 80002f8:	6948      	ldr	r0, [r1, #20]
 80002fa:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 80002fc:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000300:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
 8000304:	f1ce 0e00 	rsb	lr, lr, #0
 8000308:	fbc3 450e 	smlal	r4, r5, r3, lr
 800030c:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
 8000310:	fbc0 890c 	smlal	r8, r9, r0, ip
 8000314:	fbc3 890e 	smlal	r8, r9, r3, lr
    MC0S    6
 8000318:	f852 cb04 	ldr.w	ip, [r2], #4
 800031c:	f852 eb04 	ldr.w	lr, [r2], #4
 8000320:	6988      	ldr	r0, [r1, #24]
 8000322:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8000324:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000328:	f8d1 0098 	ldr.w	r0, [r1, #152]	; 0x98
 800032c:	f1ce 0e00 	rsb	lr, lr, #0
 8000330:	fbc3 450e 	smlal	r4, r5, r3, lr
 8000334:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
 8000338:	fbc0 890c 	smlal	r8, r9, r0, ip
 800033c:	fbc3 890e 	smlal	r8, r9, r3, lr
    MC0S    7
 8000340:	f852 cb04 	ldr.w	ip, [r2], #4
 8000344:	f852 eb04 	ldr.w	lr, [r2], #4
 8000348:	69c8      	ldr	r0, [r1, #28]
 800034a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800034c:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000350:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
 8000354:	f1ce 0e00 	rsb	lr, lr, #0
 8000358:	fbc3 450e 	smlal	r4, r5, r3, lr
 800035c:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
 8000360:	fbc0 890c 	smlal	r8, r9, r0, ip
 8000364:	fbc3 890e 	smlal	r8, r9, r3, lr

    ldr        PCM, [sp, #4]         // load pcm pointer
 8000368:	9801      	ldr	r0, [sp, #4]
    mov        MAXPOS, #0x7f00
 800036a:	f44f 4efe 	mov.w	lr, #32512	; 0x7f00
    orr        MAXPOS, MAXPOS, #0xff
 800036e:	f04e 0eff 	orr.w	lr, lr, #255	; 0xff
    
    C64TOS    SUM1LL, SUM1LH, SIGN, MAXPOS
 8000372:	ea4f 6494 	mov.w	r4, r4, lsr #26
 8000376:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800037a:	f304 040f 	ssat	r4, #16, r4
    C64TOS    SUM1RL, SUM1RH, SIGN, MAXPOS
 800037e:	ea4f 6898 	mov.w	r8, r8, lsr #26
 8000382:	ea48 1889 	orr.w	r8, r8, r9, lsl #6
 8000386:	f308 080f 	ssat	r8, #16, r8

    strh    SUM1LL, [PCM, #(2*0)]
 800038a:	8004      	strh	r4, [r0, #0]
    strh    SUM1RL, [PCM, #(2*1)]
 800038c:	f8a0 8002 	strh.w	r8, [r0, #2]

	// special case, output sample 16
    add        COEF, COEF, #(4*(256-16))    // coef = coefBase + 256 (was coefBase + 16 after MC0S block)
 8000390:	f502 7270 	add.w	r2, r2, #960	; 0x3c0
    add        VB1, VB1, #(4*1024)          // vb1 = vbuf + 64*16
 8000394:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    
    mov        SUM1LL, #RNDVAL              // load rndVal (low 32)
 8000398:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
    mov        SUM1RL, #RNDVAL              // load rndVal (low 32)
 800039c:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
    mov        SUM1LH, #0
 80003a0:	f04f 0500 	mov.w	r5, #0
    mov        SUM1RH, #0
 80003a4:	f04f 0900 	mov.w	r9, #0

    MC1S    0
 80003a8:	f852 cb04 	ldr.w	ip, [r2], #4
 80003ac:	6808      	ldr	r0, [r1, #0]
 80003ae:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 80003b2:	fbc0 450c 	smlal	r4, r5, r0, ip
 80003b6:	fbc3 890c 	smlal	r8, r9, r3, ip
    MC1S    1
 80003ba:	f852 cb04 	ldr.w	ip, [r2], #4
 80003be:	6848      	ldr	r0, [r1, #4]
 80003c0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 80003c4:	fbc0 450c 	smlal	r4, r5, r0, ip
 80003c8:	fbc3 890c 	smlal	r8, r9, r3, ip
    MC1S    2
 80003cc:	f852 cb04 	ldr.w	ip, [r2], #4
 80003d0:	6888      	ldr	r0, [r1, #8]
 80003d2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80003d6:	fbc0 450c 	smlal	r4, r5, r0, ip
 80003da:	fbc3 890c 	smlal	r8, r9, r3, ip
    MC1S    3
 80003de:	f852 cb04 	ldr.w	ip, [r2], #4
 80003e2:	68c8      	ldr	r0, [r1, #12]
 80003e4:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80003e8:	fbc0 450c 	smlal	r4, r5, r0, ip
 80003ec:	fbc3 890c 	smlal	r8, r9, r3, ip
    MC1S    4
 80003f0:	f852 cb04 	ldr.w	ip, [r2], #4
 80003f4:	6908      	ldr	r0, [r1, #16]
 80003f6:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 80003fa:	fbc0 450c 	smlal	r4, r5, r0, ip
 80003fe:	fbc3 890c 	smlal	r8, r9, r3, ip
    MC1S    5
 8000402:	f852 cb04 	ldr.w	ip, [r2], #4
 8000406:	6948      	ldr	r0, [r1, #20]
 8000408:	f8d1 3094 	ldr.w	r3, [r1, #148]	; 0x94
 800040c:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000410:	fbc3 890c 	smlal	r8, r9, r3, ip
    MC1S    6
 8000414:	f852 cb04 	ldr.w	ip, [r2], #4
 8000418:	6988      	ldr	r0, [r1, #24]
 800041a:	f8d1 3098 	ldr.w	r3, [r1, #152]	; 0x98
 800041e:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000422:	fbc3 890c 	smlal	r8, r9, r3, ip
    MC1S    7
 8000426:	f852 cb04 	ldr.w	ip, [r2], #4
 800042a:	69c8      	ldr	r0, [r1, #28]
 800042c:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8000430:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000434:	fbc3 890c 	smlal	r8, r9, r3, ip

    ldr     PCM, [sp, #4]        // load pcm pointer
 8000438:	9801      	ldr	r0, [sp, #4]
    mov     MAXPOS, #0x7f00
 800043a:	f44f 4efe 	mov.w	lr, #32512	; 0x7f00
    orr     MAXPOS, MAXPOS, #0xff
 800043e:	f04e 0eff 	orr.w	lr, lr, #255	; 0xff
    
    C64TOS  SUM1LL, SUM1LH, SIGN, MAXPOS
 8000442:	ea4f 6494 	mov.w	r4, r4, lsr #26
 8000446:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800044a:	f304 040f 	ssat	r4, #16, r4
    C64TOS  SUM1RL, SUM1RH, SIGN, MAXPOS
 800044e:	ea4f 6898 	mov.w	r8, r8, lsr #26
 8000452:	ea48 1889 	orr.w	r8, r8, r9, lsl #6
 8000456:	f308 080f 	ssat	r8, #16, r8

    strh    SUM1LL, [PCM, #(2*(2*16+0))]
 800045a:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
    strh    SUM1RL, [PCM, #(2*(2*16+1))]
 800045e:	f8a0 8042 	strh.w	r8, [r0, #66]	; 0x42

    // main convolution loop: sum1L = samples 1, 2, 3, ... 15   sum2L = samples 31, 30, ... 17
    sub        COEF, COEF, #(4*(264-16))    //; coef = coefBase + 16 (was coefBase + 264 after MC1S block)
 8000462:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
    sub        VB1, VB1, #(4*(1024-64))     //; vb1 = vbuf + 64 (was vbuf + 64*16 after MC1S block)
 8000466:	f5a1 6170 	sub.w	r1, r1, #3840	; 0xf00
    mov        I, #15                       //; loop counter, count down
 800046a:	f04f 0c0f 	mov.w	ip, #15
    add        PCM, PCM, #(2*2)             //; pcm+=2
 800046e:	f100 0004 	add.w	r0, r0, #4

08000472 <LoopPS>:
    
LoopPS:
    str        I, [sp, #0]                  //; sp[0] = i (loop counter)
 8000472:	f8cd c000 	str.w	ip, [sp]
    str        PCM, [sp, #4]                //; sp[1] = pcm (pointer to pcm buffer)
 8000476:	9001      	str	r0, [sp, #4]
    
    mov        SUM1LL, #RNDVAL              //; load rndVal (low 32)
 8000478:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
    mov        SUM1RL, #RNDVAL              //; load rndVal (low 32)
 800047c:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
    mov        SUM2LL, #RNDVAL              //; load rndVal (low 32)
 8000480:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
    mov        SUM2RL, #RNDVAL              //; load rndVal (low 32)
 8000484:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
    
    mov        SUM1LH, #0
 8000488:	f04f 0500 	mov.w	r5, #0
    mov        SUM1RH, #0
 800048c:	f04f 0900 	mov.w	r9, #0
    mov        SUM2LH, #0
 8000490:	f04f 0700 	mov.w	r7, #0
    mov        SUM2RH, #0
 8000494:	f04f 0b00 	mov.w	fp, #0

    MC2S    0
 8000498:	f852 cb04 	ldr.w	ip, [r2], #4
 800049c:	f852 eb04 	ldr.w	lr, [r2], #4
 80004a0:	6808      	ldr	r0, [r1, #0]
 80004a2:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 80004a4:	fbc0 450c 	smlal	r4, r5, r0, ip
 80004a8:	fbc0 670e 	smlal	r6, r7, r0, lr
 80004ac:	f1ce 0e00 	rsb	lr, lr, #0
 80004b0:	fbc3 670c 	smlal	r6, r7, r3, ip
 80004b4:	fbc3 450e 	smlal	r4, r5, r3, lr
 80004b8:	f8d1 30dc 	ldr.w	r3, [r1, #220]	; 0xdc
 80004bc:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
 80004c0:	fbc3 890e 	smlal	r8, r9, r3, lr
 80004c4:	fbc3 ab0c 	smlal	sl, fp, r3, ip
 80004c8:	f1ce 0e00 	rsb	lr, lr, #0
 80004cc:	fbc0 890c 	smlal	r8, r9, r0, ip
 80004d0:	fbc0 ab0e 	smlal	sl, fp, r0, lr
    MC2S    1
 80004d4:	f852 cb04 	ldr.w	ip, [r2], #4
 80004d8:	f852 eb04 	ldr.w	lr, [r2], #4
 80004dc:	6848      	ldr	r0, [r1, #4]
 80004de:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80004e0:	fbc0 450c 	smlal	r4, r5, r0, ip
 80004e4:	fbc0 670e 	smlal	r6, r7, r0, lr
 80004e8:	f1ce 0e00 	rsb	lr, lr, #0
 80004ec:	fbc3 670c 	smlal	r6, r7, r3, ip
 80004f0:	fbc3 450e 	smlal	r4, r5, r3, lr
 80004f4:	f8d1 30d8 	ldr.w	r3, [r1, #216]	; 0xd8
 80004f8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
 80004fc:	fbc3 890e 	smlal	r8, r9, r3, lr
 8000500:	fbc3 ab0c 	smlal	sl, fp, r3, ip
 8000504:	f1ce 0e00 	rsb	lr, lr, #0
 8000508:	fbc0 890c 	smlal	r8, r9, r0, ip
 800050c:	fbc0 ab0e 	smlal	sl, fp, r0, lr
    MC2S    2
 8000510:	f852 cb04 	ldr.w	ip, [r2], #4
 8000514:	f852 eb04 	ldr.w	lr, [r2], #4
 8000518:	6888      	ldr	r0, [r1, #8]
 800051a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800051c:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000520:	fbc0 670e 	smlal	r6, r7, r0, lr
 8000524:	f1ce 0e00 	rsb	lr, lr, #0
 8000528:	fbc3 670c 	smlal	r6, r7, r3, ip
 800052c:	fbc3 450e 	smlal	r4, r5, r3, lr
 8000530:	f8d1 30d4 	ldr.w	r3, [r1, #212]	; 0xd4
 8000534:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
 8000538:	fbc3 890e 	smlal	r8, r9, r3, lr
 800053c:	fbc3 ab0c 	smlal	sl, fp, r3, ip
 8000540:	f1ce 0e00 	rsb	lr, lr, #0
 8000544:	fbc0 890c 	smlal	r8, r9, r0, ip
 8000548:	fbc0 ab0e 	smlal	sl, fp, r0, lr
    MC2S    3
 800054c:	f852 cb04 	ldr.w	ip, [r2], #4
 8000550:	f852 eb04 	ldr.w	lr, [r2], #4
 8000554:	68c8      	ldr	r0, [r1, #12]
 8000556:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8000558:	fbc0 450c 	smlal	r4, r5, r0, ip
 800055c:	fbc0 670e 	smlal	r6, r7, r0, lr
 8000560:	f1ce 0e00 	rsb	lr, lr, #0
 8000564:	fbc3 670c 	smlal	r6, r7, r3, ip
 8000568:	fbc3 450e 	smlal	r4, r5, r3, lr
 800056c:	f8d1 30d0 	ldr.w	r3, [r1, #208]	; 0xd0
 8000570:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8000574:	fbc3 890e 	smlal	r8, r9, r3, lr
 8000578:	fbc3 ab0c 	smlal	sl, fp, r3, ip
 800057c:	f1ce 0e00 	rsb	lr, lr, #0
 8000580:	fbc0 890c 	smlal	r8, r9, r0, ip
 8000584:	fbc0 ab0e 	smlal	sl, fp, r0, lr
    MC2S    4
 8000588:	f852 cb04 	ldr.w	ip, [r2], #4
 800058c:	f852 eb04 	ldr.w	lr, [r2], #4
 8000590:	6908      	ldr	r0, [r1, #16]
 8000592:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8000594:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000598:	fbc0 670e 	smlal	r6, r7, r0, lr
 800059c:	f1ce 0e00 	rsb	lr, lr, #0
 80005a0:	fbc3 670c 	smlal	r6, r7, r3, ip
 80005a4:	fbc3 450e 	smlal	r4, r5, r3, lr
 80005a8:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
 80005ac:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
 80005b0:	fbc3 890e 	smlal	r8, r9, r3, lr
 80005b4:	fbc3 ab0c 	smlal	sl, fp, r3, ip
 80005b8:	f1ce 0e00 	rsb	lr, lr, #0
 80005bc:	fbc0 890c 	smlal	r8, r9, r0, ip
 80005c0:	fbc0 ab0e 	smlal	sl, fp, r0, lr
    MC2S    5
 80005c4:	f852 cb04 	ldr.w	ip, [r2], #4
 80005c8:	f852 eb04 	ldr.w	lr, [r2], #4
 80005cc:	6948      	ldr	r0, [r1, #20]
 80005ce:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 80005d0:	fbc0 450c 	smlal	r4, r5, r0, ip
 80005d4:	fbc0 670e 	smlal	r6, r7, r0, lr
 80005d8:	f1ce 0e00 	rsb	lr, lr, #0
 80005dc:	fbc3 670c 	smlal	r6, r7, r3, ip
 80005e0:	fbc3 450e 	smlal	r4, r5, r3, lr
 80005e4:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
 80005e8:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
 80005ec:	fbc3 890e 	smlal	r8, r9, r3, lr
 80005f0:	fbc3 ab0c 	smlal	sl, fp, r3, ip
 80005f4:	f1ce 0e00 	rsb	lr, lr, #0
 80005f8:	fbc0 890c 	smlal	r8, r9, r0, ip
 80005fc:	fbc0 ab0e 	smlal	sl, fp, r0, lr
    MC2S    6
 8000600:	f852 cb04 	ldr.w	ip, [r2], #4
 8000604:	f852 eb04 	ldr.w	lr, [r2], #4
 8000608:	6988      	ldr	r0, [r1, #24]
 800060a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800060c:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000610:	fbc0 670e 	smlal	r6, r7, r0, lr
 8000614:	f1ce 0e00 	rsb	lr, lr, #0
 8000618:	fbc3 670c 	smlal	r6, r7, r3, ip
 800061c:	fbc3 450e 	smlal	r4, r5, r3, lr
 8000620:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
 8000624:	f8d1 0098 	ldr.w	r0, [r1, #152]	; 0x98
 8000628:	fbc3 890e 	smlal	r8, r9, r3, lr
 800062c:	fbc3 ab0c 	smlal	sl, fp, r3, ip
 8000630:	f1ce 0e00 	rsb	lr, lr, #0
 8000634:	fbc0 890c 	smlal	r8, r9, r0, ip
 8000638:	fbc0 ab0e 	smlal	sl, fp, r0, lr
    MC2S    7
 800063c:	f852 cb04 	ldr.w	ip, [r2], #4
 8000640:	f852 eb04 	ldr.w	lr, [r2], #4
 8000644:	69c8      	ldr	r0, [r1, #28]
 8000646:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000648:	fbc0 450c 	smlal	r4, r5, r0, ip
 800064c:	fbc0 670e 	smlal	r6, r7, r0, lr
 8000650:	f1ce 0e00 	rsb	lr, lr, #0
 8000654:	fbc3 670c 	smlal	r6, r7, r3, ip
 8000658:	fbc3 450e 	smlal	r4, r5, r3, lr
 800065c:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
 8000660:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
 8000664:	fbc3 890e 	smlal	r8, r9, r3, lr
 8000668:	fbc3 ab0c 	smlal	sl, fp, r3, ip
 800066c:	f1ce 0e00 	rsb	lr, lr, #0
 8000670:	fbc0 890c 	smlal	r8, r9, r0, ip
 8000674:	fbc0 ab0e 	smlal	sl, fp, r0, lr
    
    add        VB1, VB1, #(4*64)    //; vb1 += 64
 8000678:	f501 7180 	add.w	r1, r1, #256	; 0x100
    
    ldr        PCM, [sp, #4]        //; load pcm pointer
 800067c:	9801      	ldr	r0, [sp, #4]
    mov        MAXPOS, #0x7f00
 800067e:	f44f 4efe 	mov.w	lr, #32512	; 0x7f00
    orr        MAXPOS, MAXPOS, #0xff
 8000682:	f04e 0eff 	orr.w	lr, lr, #255	; 0xff
    
    C64TOS    SUM1LL, SUM1LH, SIGN, MAXPOS
 8000686:	ea4f 6494 	mov.w	r4, r4, lsr #26
 800068a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800068e:	f304 040f 	ssat	r4, #16, r4
    C64TOS    SUM1RL, SUM1RH, SIGN, MAXPOS
 8000692:	ea4f 6898 	mov.w	r8, r8, lsr #26
 8000696:	ea48 1889 	orr.w	r8, r8, r9, lsl #6
 800069a:	f308 080f 	ssat	r8, #16, r8
    C64TOS    SUM2LL, SUM2LH, SIGN, MAXPOS
 800069e:	ea4f 6696 	mov.w	r6, r6, lsr #26
 80006a2:	ea46 1687 	orr.w	r6, r6, r7, lsl #6
 80006a6:	f306 060f 	ssat	r6, #16, r6
    C64TOS    SUM2RL, SUM2RH, SIGN, MAXPOS
 80006aa:	ea4f 6a9a 	mov.w	sl, sl, lsr #26
 80006ae:	ea4a 1a8b 	orr.w	sl, sl, fp, lsl #6
 80006b2:	f30a 0a0f 	ssat	sl, #16, sl
    
    ldr        I, [sp, #0]            //; load loop counter
 80006b6:	f8dd c000 	ldr.w	ip, [sp]
    add        CF2, PCM, I, lsl #3    //; CF2 = PCM + 4*i (short offset)
 80006ba:	eb00 0ecc 	add.w	lr, r0, ip, lsl #3
    strh    SUM2LL, [CF2], #2    	  //; *(pcm + 2*2*i + 0)
 80006be:	f82e 6b02 	strh.w	r6, [lr], #2
    strh    SUM2RL, [CF2], #2         //; *(pcm + 2*2*i + 1)
 80006c2:	f82e ab02 	strh.w	sl, [lr], #2

    strh    SUM1LL, [PCM], #2         //; *(pcm + 0)
 80006c6:	f820 4b02 	strh.w	r4, [r0], #2
    strh    SUM1RL, [PCM], #2         //; *(pcm + 1)
 80006ca:	f820 8b02 	strh.w	r8, [r0], #2
    
    subs    I, I, #1
 80006ce:	f1bc 0c01 	subs.w	ip, ip, #1
    bne     LoopPS
 80006d2:	f47f aece 	bne.w	8000472 <LoopPS>

    // restore stack pointer
    add        sp, sp, #8
 80006d6:	b002      	add	sp, #8

    ldmfd    sp!, {r4-r11, pc}
 80006d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080006dc <xmp3_PolyphaseMono>:


// void PolyphaseMono(short *pcm, int *vbuf, const int *coefBase)
	.thumb_func
xmp3_PolyphaseMono:
    stmfd    sp!, {r4-r11, r14}
 80006dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
// clear out stack space for 4 local variables (4 bytes each)
    sub        sp, sp, #8
 80006e0:	b082      	sub	sp, #8
    str        PCM, [sp, #4]            //; sp[1] = pcm pointer
 80006e2:	9001      	str	r0, [sp, #4]

// special case, output sample 0
    mov        SUM1LL, #RNDVAL          //; load rndVal (low 32)
 80006e4:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
    mov        SUM1LH, #0
 80006e8:	f04f 0500 	mov.w	r5, #0

    MC0M    0
 80006ec:	f852 cb04 	ldr.w	ip, [r2], #4
 80006f0:	f852 eb04 	ldr.w	lr, [r2], #4
 80006f4:	6808      	ldr	r0, [r1, #0]
 80006f6:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 80006f8:	f1ce 0e00 	rsb	lr, lr, #0
 80006fc:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000700:	fbc3 450e 	smlal	r4, r5, r3, lr
    MC0M    1
 8000704:	f852 cb04 	ldr.w	ip, [r2], #4
 8000708:	f852 eb04 	ldr.w	lr, [r2], #4
 800070c:	6848      	ldr	r0, [r1, #4]
 800070e:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8000710:	f1ce 0e00 	rsb	lr, lr, #0
 8000714:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000718:	fbc3 450e 	smlal	r4, r5, r3, lr
    MC0M    2
 800071c:	f852 cb04 	ldr.w	ip, [r2], #4
 8000720:	f852 eb04 	ldr.w	lr, [r2], #4
 8000724:	6888      	ldr	r0, [r1, #8]
 8000726:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8000728:	f1ce 0e00 	rsb	lr, lr, #0
 800072c:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000730:	fbc3 450e 	smlal	r4, r5, r3, lr
    MC0M    3
 8000734:	f852 cb04 	ldr.w	ip, [r2], #4
 8000738:	f852 eb04 	ldr.w	lr, [r2], #4
 800073c:	68c8      	ldr	r0, [r1, #12]
 800073e:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8000740:	f1ce 0e00 	rsb	lr, lr, #0
 8000744:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000748:	fbc3 450e 	smlal	r4, r5, r3, lr
    MC0M    4
 800074c:	f852 cb04 	ldr.w	ip, [r2], #4
 8000750:	f852 eb04 	ldr.w	lr, [r2], #4
 8000754:	6908      	ldr	r0, [r1, #16]
 8000756:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8000758:	f1ce 0e00 	rsb	lr, lr, #0
 800075c:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000760:	fbc3 450e 	smlal	r4, r5, r3, lr
    MC0M    5
 8000764:	f852 cb04 	ldr.w	ip, [r2], #4
 8000768:	f852 eb04 	ldr.w	lr, [r2], #4
 800076c:	6948      	ldr	r0, [r1, #20]
 800076e:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8000770:	f1ce 0e00 	rsb	lr, lr, #0
 8000774:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000778:	fbc3 450e 	smlal	r4, r5, r3, lr
    MC0M    6
 800077c:	f852 cb04 	ldr.w	ip, [r2], #4
 8000780:	f852 eb04 	ldr.w	lr, [r2], #4
 8000784:	6988      	ldr	r0, [r1, #24]
 8000786:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8000788:	f1ce 0e00 	rsb	lr, lr, #0
 800078c:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000790:	fbc3 450e 	smlal	r4, r5, r3, lr
    MC0M    7
 8000794:	f852 cb04 	ldr.w	ip, [r2], #4
 8000798:	f852 eb04 	ldr.w	lr, [r2], #4
 800079c:	69c8      	ldr	r0, [r1, #28]
 800079e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80007a0:	f1ce 0e00 	rsb	lr, lr, #0
 80007a4:	fbc0 450c 	smlal	r4, r5, r0, ip
 80007a8:	fbc3 450e 	smlal	r4, r5, r3, lr

    ldr        PCM, [sp, #4]        // load pcm pointer
 80007ac:	9801      	ldr	r0, [sp, #4]
    mov        MAXPOS, #0x7f00
 80007ae:	f44f 4efe 	mov.w	lr, #32512	; 0x7f00
    orr        MAXPOS, MAXPOS, #0xff
 80007b2:	f04e 0eff 	orr.w	lr, lr, #255	; 0xff
    
    C64TOS    	SUM1LL, SUM1LH, SIGN, MAXPOS
 80007b6:	ea4f 6494 	mov.w	r4, r4, lsr #26
 80007ba:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80007be:	f304 040f 	ssat	r4, #16, r4
    strh    	SUM1LL, [PCM, #(2*0)]
 80007c2:	8004      	strh	r4, [r0, #0]

    // special case, output sample 16
    add        COEF, COEF, #(4*(256-16))    // coef = coefBase + 256 (was coefBase + 16 after MC0M block)
 80007c4:	f502 7270 	add.w	r2, r2, #960	; 0x3c0
    add        VB1, VB1, #(4*1024)          // vb1 = vbuf + 64*16
 80007c8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    
    mov        SUM1LL, #RNDVAL              // load rndVal (low 32)
 80007cc:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
    mov        SUM1LH, #0
 80007d0:	f04f 0500 	mov.w	r5, #0

    MC1M    0
 80007d4:	f852 cb04 	ldr.w	ip, [r2], #4
 80007d8:	6808      	ldr	r0, [r1, #0]
 80007da:	fbc0 450c 	smlal	r4, r5, r0, ip
    MC1M    1
 80007de:	f852 cb04 	ldr.w	ip, [r2], #4
 80007e2:	6848      	ldr	r0, [r1, #4]
 80007e4:	fbc0 450c 	smlal	r4, r5, r0, ip
    MC1M    2
 80007e8:	f852 cb04 	ldr.w	ip, [r2], #4
 80007ec:	6888      	ldr	r0, [r1, #8]
 80007ee:	fbc0 450c 	smlal	r4, r5, r0, ip
    MC1M    3
 80007f2:	f852 cb04 	ldr.w	ip, [r2], #4
 80007f6:	68c8      	ldr	r0, [r1, #12]
 80007f8:	fbc0 450c 	smlal	r4, r5, r0, ip
    MC1M    4
 80007fc:	f852 cb04 	ldr.w	ip, [r2], #4
 8000800:	6908      	ldr	r0, [r1, #16]
 8000802:	fbc0 450c 	smlal	r4, r5, r0, ip
    MC1M    5
 8000806:	f852 cb04 	ldr.w	ip, [r2], #4
 800080a:	6948      	ldr	r0, [r1, #20]
 800080c:	fbc0 450c 	smlal	r4, r5, r0, ip
    MC1M    6
 8000810:	f852 cb04 	ldr.w	ip, [r2], #4
 8000814:	6988      	ldr	r0, [r1, #24]
 8000816:	fbc0 450c 	smlal	r4, r5, r0, ip
    MC1M    7
 800081a:	f852 cb04 	ldr.w	ip, [r2], #4
 800081e:	69c8      	ldr	r0, [r1, #28]
 8000820:	fbc0 450c 	smlal	r4, r5, r0, ip

    ldr        PCM, [sp, #4]        // load pcm pointer
 8000824:	9801      	ldr	r0, [sp, #4]
    mov        MAXPOS, #0x7f00
 8000826:	f44f 4efe 	mov.w	lr, #32512	; 0x7f00
    orr        MAXPOS, MAXPOS, #0xff
 800082a:	f04e 0eff 	orr.w	lr, lr, #255	; 0xff
    
    C64TOS    SUM1LL, SUM1LH, SIGN, MAXPOS
 800082e:	ea4f 6494 	mov.w	r4, r4, lsr #26
 8000832:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8000836:	f304 040f 	ssat	r4, #16, r4

    strh    SUM1LL, [PCM, #(2*16)]
 800083a:	8404      	strh	r4, [r0, #32]

    //; main convolution loop: sum1L = samples 1, 2, 3, ... 15   sum2L = samples 31, 30, ... 17
    sub        COEF, COEF, #(4*(264-16))    //; coef = coefBase + 16 (was coefBase + 264 after MC1M block)
 800083c:	f5a2 7278 	sub.w	r2, r2, #992	; 0x3e0
    sub        VB1, VB1, #(4*(1024-64))     //; vb1 = vbuf + 64 (was vbuf + 64*16 after MC1M block)
 8000840:	f5a1 6170 	sub.w	r1, r1, #3840	; 0xf00
    mov        I, #15                       //; loop counter, count down
 8000844:	f04f 0c0f 	mov.w	ip, #15
    add        PCM, PCM, #(2)               //; pcm++
 8000848:	f100 0002 	add.w	r0, r0, #2

0800084c <LoopPM>:

LoopPM:
    str        I, [sp, #0]                  //; sp[0] = i (loop counter)
 800084c:	f8cd c000 	str.w	ip, [sp]
    str        PCM, [sp, #4]                //; sp[1] = pcm (pointer to pcm buffer)
 8000850:	9001      	str	r0, [sp, #4]
    
    mov        SUM1LL, #RNDVAL              //; load rndVal (low 32)
 8000852:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
    mov        SUM2LL, #RNDVAL              //; load rndVal (low 32)
 8000856:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
    mov        SUM1LH, #0
 800085a:	f04f 0500 	mov.w	r5, #0
    mov        SUM2LH, #0
 800085e:	f04f 0700 	mov.w	r7, #0

    MC2M    0
 8000862:	f852 cb04 	ldr.w	ip, [r2], #4
 8000866:	f852 eb04 	ldr.w	lr, [r2], #4
 800086a:	6808      	ldr	r0, [r1, #0]
 800086c:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
 800086e:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000872:	fbc0 670e 	smlal	r6, r7, r0, lr
 8000876:	f1ce 0e00 	rsb	lr, lr, #0
 800087a:	fbc3 450e 	smlal	r4, r5, r3, lr
 800087e:	fbc3 670c 	smlal	r6, r7, r3, ip
    MC2M    1
 8000882:	f852 cb04 	ldr.w	ip, [r2], #4
 8000886:	f852 eb04 	ldr.w	lr, [r2], #4
 800088a:	6848      	ldr	r0, [r1, #4]
 800088c:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800088e:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000892:	fbc0 670e 	smlal	r6, r7, r0, lr
 8000896:	f1ce 0e00 	rsb	lr, lr, #0
 800089a:	fbc3 450e 	smlal	r4, r5, r3, lr
 800089e:	fbc3 670c 	smlal	r6, r7, r3, ip
    MC2M    2
 80008a2:	f852 cb04 	ldr.w	ip, [r2], #4
 80008a6:	f852 eb04 	ldr.w	lr, [r2], #4
 80008aa:	6888      	ldr	r0, [r1, #8]
 80008ac:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80008ae:	fbc0 450c 	smlal	r4, r5, r0, ip
 80008b2:	fbc0 670e 	smlal	r6, r7, r0, lr
 80008b6:	f1ce 0e00 	rsb	lr, lr, #0
 80008ba:	fbc3 450e 	smlal	r4, r5, r3, lr
 80008be:	fbc3 670c 	smlal	r6, r7, r3, ip
    MC2M    3
 80008c2:	f852 cb04 	ldr.w	ip, [r2], #4
 80008c6:	f852 eb04 	ldr.w	lr, [r2], #4
 80008ca:	68c8      	ldr	r0, [r1, #12]
 80008cc:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 80008ce:	fbc0 450c 	smlal	r4, r5, r0, ip
 80008d2:	fbc0 670e 	smlal	r6, r7, r0, lr
 80008d6:	f1ce 0e00 	rsb	lr, lr, #0
 80008da:	fbc3 450e 	smlal	r4, r5, r3, lr
 80008de:	fbc3 670c 	smlal	r6, r7, r3, ip
    MC2M    4
 80008e2:	f852 cb04 	ldr.w	ip, [r2], #4
 80008e6:	f852 eb04 	ldr.w	lr, [r2], #4
 80008ea:	6908      	ldr	r0, [r1, #16]
 80008ec:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80008ee:	fbc0 450c 	smlal	r4, r5, r0, ip
 80008f2:	fbc0 670e 	smlal	r6, r7, r0, lr
 80008f6:	f1ce 0e00 	rsb	lr, lr, #0
 80008fa:	fbc3 450e 	smlal	r4, r5, r3, lr
 80008fe:	fbc3 670c 	smlal	r6, r7, r3, ip
    MC2M    5
 8000902:	f852 cb04 	ldr.w	ip, [r2], #4
 8000906:	f852 eb04 	ldr.w	lr, [r2], #4
 800090a:	6948      	ldr	r0, [r1, #20]
 800090c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 800090e:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000912:	fbc0 670e 	smlal	r6, r7, r0, lr
 8000916:	f1ce 0e00 	rsb	lr, lr, #0
 800091a:	fbc3 450e 	smlal	r4, r5, r3, lr
 800091e:	fbc3 670c 	smlal	r6, r7, r3, ip
    MC2M    6
 8000922:	f852 cb04 	ldr.w	ip, [r2], #4
 8000926:	f852 eb04 	ldr.w	lr, [r2], #4
 800092a:	6988      	ldr	r0, [r1, #24]
 800092c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800092e:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000932:	fbc0 670e 	smlal	r6, r7, r0, lr
 8000936:	f1ce 0e00 	rsb	lr, lr, #0
 800093a:	fbc3 450e 	smlal	r4, r5, r3, lr
 800093e:	fbc3 670c 	smlal	r6, r7, r3, ip
    MC2M    7
 8000942:	f852 cb04 	ldr.w	ip, [r2], #4
 8000946:	f852 eb04 	ldr.w	lr, [r2], #4
 800094a:	69c8      	ldr	r0, [r1, #28]
 800094c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800094e:	fbc0 450c 	smlal	r4, r5, r0, ip
 8000952:	fbc0 670e 	smlal	r6, r7, r0, lr
 8000956:	f1ce 0e00 	rsb	lr, lr, #0
 800095a:	fbc3 450e 	smlal	r4, r5, r3, lr
 800095e:	fbc3 670c 	smlal	r6, r7, r3, ip
    
    add        VB1, VB1, #(4*64)    //; vb1 += 64
 8000962:	f501 7180 	add.w	r1, r1, #256	; 0x100
    
    ldr        PCM, [sp, #4]        //; load pcm pointer
 8000966:	9801      	ldr	r0, [sp, #4]
    mov        MAXPOS, #0x7f00
 8000968:	f44f 4efe 	mov.w	lr, #32512	; 0x7f00
    orr        MAXPOS, MAXPOS, #0xff
 800096c:	f04e 0eff 	orr.w	lr, lr, #255	; 0xff
    
    C64TOS    SUM1LL, SUM1LH, SIGN, MAXPOS
 8000970:	ea4f 6494 	mov.w	r4, r4, lsr #26
 8000974:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8000978:	f304 040f 	ssat	r4, #16, r4
    C64TOS    SUM2LL, SUM2LH, SIGN, MAXPOS
 800097c:	ea4f 6696 	mov.w	r6, r6, lsr #26
 8000980:	ea46 1687 	orr.w	r6, r6, r7, lsl #6
 8000984:	f306 060f 	ssat	r6, #16, r6
    
    ldr        I, [sp, #0]            //; load loop counter*/
 8000988:	f8dd c000 	ldr.w	ip, [sp]
    add        CF2, PCM, I, lsl #2   // ; CF2 = PCM + 2*i (short offset)*/
 800098c:	eb00 0e8c 	add.w	lr, r0, ip, lsl #2
    strh    SUM2LL, [CF2], #2    	  //; (pcm + 2*i + 0)
 8000990:	f82e 6b02 	strh.w	r6, [lr], #2
    strh    SUM1LL, [PCM], #2         //; (pcm + 0) ; pcm++
 8000994:	f820 4b02 	strh.w	r4, [r0], #2
    
    subs    I, I, #1
 8000998:	f1bc 0c01 	subs.w	ip, ip, #1
    bne        LoopPM
 800099c:	f47f af56 	bne.w	800084c <LoopPM>

    //; restore stack pointer
    add        sp, sp, #8
 80009a0:	b002      	add	sp, #8

    ldmfd    sp!, {r4-r11, pc}
 80009a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080009b0 <memchr>:
 80009b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80009b4:	2a10      	cmp	r2, #16
 80009b6:	db2b      	blt.n	8000a10 <memchr+0x60>
 80009b8:	f010 0f07 	tst.w	r0, #7
 80009bc:	d008      	beq.n	80009d0 <memchr+0x20>
 80009be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80009c2:	3a01      	subs	r2, #1
 80009c4:	428b      	cmp	r3, r1
 80009c6:	d02d      	beq.n	8000a24 <memchr+0x74>
 80009c8:	f010 0f07 	tst.w	r0, #7
 80009cc:	b342      	cbz	r2, 8000a20 <memchr+0x70>
 80009ce:	d1f6      	bne.n	80009be <memchr+0xe>
 80009d0:	b4f0      	push	{r4, r5, r6, r7}
 80009d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80009d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80009da:	f022 0407 	bic.w	r4, r2, #7
 80009de:	f07f 0700 	mvns.w	r7, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80009e8:	3c08      	subs	r4, #8
 80009ea:	ea85 0501 	eor.w	r5, r5, r1
 80009ee:	ea86 0601 	eor.w	r6, r6, r1
 80009f2:	fa85 f547 	uadd8	r5, r5, r7
 80009f6:	faa3 f587 	sel	r5, r3, r7
 80009fa:	fa86 f647 	uadd8	r6, r6, r7
 80009fe:	faa5 f687 	sel	r6, r5, r7
 8000a02:	b98e      	cbnz	r6, 8000a28 <memchr+0x78>
 8000a04:	d1ee      	bne.n	80009e4 <memchr+0x34>
 8000a06:	bcf0      	pop	{r4, r5, r6, r7}
 8000a08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000a0c:	f002 0207 	and.w	r2, r2, #7
 8000a10:	b132      	cbz	r2, 8000a20 <memchr+0x70>
 8000a12:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000a16:	3a01      	subs	r2, #1
 8000a18:	ea83 0301 	eor.w	r3, r3, r1
 8000a1c:	b113      	cbz	r3, 8000a24 <memchr+0x74>
 8000a1e:	d1f8      	bne.n	8000a12 <memchr+0x62>
 8000a20:	2000      	movs	r0, #0
 8000a22:	4770      	bx	lr
 8000a24:	3801      	subs	r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	2d00      	cmp	r5, #0
 8000a2a:	bf06      	itte	eq
 8000a2c:	4635      	moveq	r5, r6
 8000a2e:	3803      	subeq	r0, #3
 8000a30:	3807      	subne	r0, #7
 8000a32:	f015 0f01 	tst.w	r5, #1
 8000a36:	d107      	bne.n	8000a48 <memchr+0x98>
 8000a38:	3001      	adds	r0, #1
 8000a3a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000a3e:	bf02      	ittt	eq
 8000a40:	3001      	addeq	r0, #1
 8000a42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000a46:	3001      	addeq	r0, #1
 8000a48:	bcf0      	pop	{r4, r5, r6, r7}
 8000a4a:	3801      	subs	r0, #1
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_uldivmod>:
 8000a50:	b953      	cbnz	r3, 8000a68 <__aeabi_uldivmod+0x18>
 8000a52:	b94a      	cbnz	r2, 8000a68 <__aeabi_uldivmod+0x18>
 8000a54:	2900      	cmp	r1, #0
 8000a56:	bf08      	it	eq
 8000a58:	2800      	cmpeq	r0, #0
 8000a5a:	bf1c      	itt	ne
 8000a5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a60:	f04f 30ff 	movne.w	r0, #4294967295
 8000a64:	f000 b974 	b.w	8000d50 <__aeabi_idiv0>
 8000a68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a70:	f000 f806 	bl	8000a80 <__udivmoddi4>
 8000a74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a7c:	b004      	add	sp, #16
 8000a7e:	4770      	bx	lr

08000a80 <__udivmoddi4>:
 8000a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a84:	9d08      	ldr	r5, [sp, #32]
 8000a86:	4604      	mov	r4, r0
 8000a88:	468e      	mov	lr, r1
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d14d      	bne.n	8000b2a <__udivmoddi4+0xaa>
 8000a8e:	428a      	cmp	r2, r1
 8000a90:	4694      	mov	ip, r2
 8000a92:	d969      	bls.n	8000b68 <__udivmoddi4+0xe8>
 8000a94:	fab2 f282 	clz	r2, r2
 8000a98:	b152      	cbz	r2, 8000ab0 <__udivmoddi4+0x30>
 8000a9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9e:	f1c2 0120 	rsb	r1, r2, #32
 8000aa2:	fa20 f101 	lsr.w	r1, r0, r1
 8000aa6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aaa:	ea41 0e03 	orr.w	lr, r1, r3
 8000aae:	4094      	lsls	r4, r2
 8000ab0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab4:	0c21      	lsrs	r1, r4, #16
 8000ab6:	fbbe f6f8 	udiv	r6, lr, r8
 8000aba:	fa1f f78c 	uxth.w	r7, ip
 8000abe:	fb08 e316 	mls	r3, r8, r6, lr
 8000ac2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ac6:	fb06 f107 	mul.w	r1, r6, r7
 8000aca:	4299      	cmp	r1, r3
 8000acc:	d90a      	bls.n	8000ae4 <__udivmoddi4+0x64>
 8000ace:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ad6:	f080 811f 	bcs.w	8000d18 <__udivmoddi4+0x298>
 8000ada:	4299      	cmp	r1, r3
 8000adc:	f240 811c 	bls.w	8000d18 <__udivmoddi4+0x298>
 8000ae0:	3e02      	subs	r6, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	1a5b      	subs	r3, r3, r1
 8000ae6:	b2a4      	uxth	r4, r4
 8000ae8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aec:	fb08 3310 	mls	r3, r8, r0, r3
 8000af0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af4:	fb00 f707 	mul.w	r7, r0, r7
 8000af8:	42a7      	cmp	r7, r4
 8000afa:	d90a      	bls.n	8000b12 <__udivmoddi4+0x92>
 8000afc:	eb1c 0404 	adds.w	r4, ip, r4
 8000b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b04:	f080 810a 	bcs.w	8000d1c <__udivmoddi4+0x29c>
 8000b08:	42a7      	cmp	r7, r4
 8000b0a:	f240 8107 	bls.w	8000d1c <__udivmoddi4+0x29c>
 8000b0e:	4464      	add	r4, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b16:	1be4      	subs	r4, r4, r7
 8000b18:	2600      	movs	r6, #0
 8000b1a:	b11d      	cbz	r5, 8000b24 <__udivmoddi4+0xa4>
 8000b1c:	40d4      	lsrs	r4, r2
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e9c5 4300 	strd	r4, r3, [r5]
 8000b24:	4631      	mov	r1, r6
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d909      	bls.n	8000b42 <__udivmoddi4+0xc2>
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	f000 80ef 	beq.w	8000d12 <__udivmoddi4+0x292>
 8000b34:	2600      	movs	r6, #0
 8000b36:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	4631      	mov	r1, r6
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	fab3 f683 	clz	r6, r3
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	d14a      	bne.n	8000be0 <__udivmoddi4+0x160>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xd4>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 80f9 	bhi.w	8000d46 <__udivmoddi4+0x2c6>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	469e      	mov	lr, r3
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0e0      	beq.n	8000b24 <__udivmoddi4+0xa4>
 8000b62:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b66:	e7dd      	b.n	8000b24 <__udivmoddi4+0xa4>
 8000b68:	b902      	cbnz	r2, 8000b6c <__udivmoddi4+0xec>
 8000b6a:	deff      	udf	#255	; 0xff
 8000b6c:	fab2 f282 	clz	r2, r2
 8000b70:	2a00      	cmp	r2, #0
 8000b72:	f040 8092 	bne.w	8000c9a <__udivmoddi4+0x21a>
 8000b76:	eba1 010c 	sub.w	r1, r1, ip
 8000b7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7e:	fa1f fe8c 	uxth.w	lr, ip
 8000b82:	2601      	movs	r6, #1
 8000b84:	0c20      	lsrs	r0, r4, #16
 8000b86:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b8a:	fb07 1113 	mls	r1, r7, r3, r1
 8000b8e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b92:	fb0e f003 	mul.w	r0, lr, r3
 8000b96:	4288      	cmp	r0, r1
 8000b98:	d908      	bls.n	8000bac <__udivmoddi4+0x12c>
 8000b9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000b9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ba2:	d202      	bcs.n	8000baa <__udivmoddi4+0x12a>
 8000ba4:	4288      	cmp	r0, r1
 8000ba6:	f200 80cb 	bhi.w	8000d40 <__udivmoddi4+0x2c0>
 8000baa:	4643      	mov	r3, r8
 8000bac:	1a09      	subs	r1, r1, r0
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb4:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc0:	45a6      	cmp	lr, r4
 8000bc2:	d908      	bls.n	8000bd6 <__udivmoddi4+0x156>
 8000bc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bcc:	d202      	bcs.n	8000bd4 <__udivmoddi4+0x154>
 8000bce:	45a6      	cmp	lr, r4
 8000bd0:	f200 80bb 	bhi.w	8000d4a <__udivmoddi4+0x2ca>
 8000bd4:	4608      	mov	r0, r1
 8000bd6:	eba4 040e 	sub.w	r4, r4, lr
 8000bda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bde:	e79c      	b.n	8000b1a <__udivmoddi4+0x9a>
 8000be0:	f1c6 0720 	rsb	r7, r6, #32
 8000be4:	40b3      	lsls	r3, r6
 8000be6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bee:	fa20 f407 	lsr.w	r4, r0, r7
 8000bf2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf6:	431c      	orrs	r4, r3
 8000bf8:	40f9      	lsrs	r1, r7
 8000bfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bfe:	fa00 f306 	lsl.w	r3, r0, r6
 8000c02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c06:	0c20      	lsrs	r0, r4, #16
 8000c08:	fa1f fe8c 	uxth.w	lr, ip
 8000c0c:	fb09 1118 	mls	r1, r9, r8, r1
 8000c10:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c14:	fb08 f00e 	mul.w	r0, r8, lr
 8000c18:	4288      	cmp	r0, r1
 8000c1a:	fa02 f206 	lsl.w	r2, r2, r6
 8000c1e:	d90b      	bls.n	8000c38 <__udivmoddi4+0x1b8>
 8000c20:	eb1c 0101 	adds.w	r1, ip, r1
 8000c24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c28:	f080 8088 	bcs.w	8000d3c <__udivmoddi4+0x2bc>
 8000c2c:	4288      	cmp	r0, r1
 8000c2e:	f240 8085 	bls.w	8000d3c <__udivmoddi4+0x2bc>
 8000c32:	f1a8 0802 	sub.w	r8, r8, #2
 8000c36:	4461      	add	r1, ip
 8000c38:	1a09      	subs	r1, r1, r0
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c40:	fb09 1110 	mls	r1, r9, r0, r1
 8000c44:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	458e      	cmp	lr, r1
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x1e2>
 8000c50:	eb1c 0101 	adds.w	r1, ip, r1
 8000c54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c58:	d26c      	bcs.n	8000d34 <__udivmoddi4+0x2b4>
 8000c5a:	458e      	cmp	lr, r1
 8000c5c:	d96a      	bls.n	8000d34 <__udivmoddi4+0x2b4>
 8000c5e:	3802      	subs	r0, #2
 8000c60:	4461      	add	r1, ip
 8000c62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c66:	fba0 9402 	umull	r9, r4, r0, r2
 8000c6a:	eba1 010e 	sub.w	r1, r1, lr
 8000c6e:	42a1      	cmp	r1, r4
 8000c70:	46c8      	mov	r8, r9
 8000c72:	46a6      	mov	lr, r4
 8000c74:	d356      	bcc.n	8000d24 <__udivmoddi4+0x2a4>
 8000c76:	d053      	beq.n	8000d20 <__udivmoddi4+0x2a0>
 8000c78:	b15d      	cbz	r5, 8000c92 <__udivmoddi4+0x212>
 8000c7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000c7e:	eb61 010e 	sbc.w	r1, r1, lr
 8000c82:	fa01 f707 	lsl.w	r7, r1, r7
 8000c86:	fa22 f306 	lsr.w	r3, r2, r6
 8000c8a:	40f1      	lsrs	r1, r6
 8000c8c:	431f      	orrs	r7, r3
 8000c8e:	e9c5 7100 	strd	r7, r1, [r5]
 8000c92:	2600      	movs	r6, #0
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	f1c2 0320 	rsb	r3, r2, #32
 8000c9e:	40d8      	lsrs	r0, r3
 8000ca0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca4:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca8:	4091      	lsls	r1, r2
 8000caa:	4301      	orrs	r1, r0
 8000cac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb0:	fa1f fe8c 	uxth.w	lr, ip
 8000cb4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cb8:	fb07 3610 	mls	r6, r7, r0, r3
 8000cbc:	0c0b      	lsrs	r3, r1, #16
 8000cbe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cc2:	fb00 f60e 	mul.w	r6, r0, lr
 8000cc6:	429e      	cmp	r6, r3
 8000cc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x260>
 8000cce:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd6:	d22f      	bcs.n	8000d38 <__udivmoddi4+0x2b8>
 8000cd8:	429e      	cmp	r6, r3
 8000cda:	d92d      	bls.n	8000d38 <__udivmoddi4+0x2b8>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4463      	add	r3, ip
 8000ce0:	1b9b      	subs	r3, r3, r6
 8000ce2:	b289      	uxth	r1, r1
 8000ce4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ce8:	fb07 3316 	mls	r3, r7, r6, r3
 8000cec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf0:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x28a>
 8000cf8:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d00:	d216      	bcs.n	8000d30 <__udivmoddi4+0x2b0>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d914      	bls.n	8000d30 <__udivmoddi4+0x2b0>
 8000d06:	3e02      	subs	r6, #2
 8000d08:	4461      	add	r1, ip
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d10:	e738      	b.n	8000b84 <__udivmoddi4+0x104>
 8000d12:	462e      	mov	r6, r5
 8000d14:	4628      	mov	r0, r5
 8000d16:	e705      	b.n	8000b24 <__udivmoddi4+0xa4>
 8000d18:	4606      	mov	r6, r0
 8000d1a:	e6e3      	b.n	8000ae4 <__udivmoddi4+0x64>
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	e6f8      	b.n	8000b12 <__udivmoddi4+0x92>
 8000d20:	454b      	cmp	r3, r9
 8000d22:	d2a9      	bcs.n	8000c78 <__udivmoddi4+0x1f8>
 8000d24:	ebb9 0802 	subs.w	r8, r9, r2
 8000d28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	e7a3      	b.n	8000c78 <__udivmoddi4+0x1f8>
 8000d30:	4646      	mov	r6, r8
 8000d32:	e7ea      	b.n	8000d0a <__udivmoddi4+0x28a>
 8000d34:	4620      	mov	r0, r4
 8000d36:	e794      	b.n	8000c62 <__udivmoddi4+0x1e2>
 8000d38:	4640      	mov	r0, r8
 8000d3a:	e7d1      	b.n	8000ce0 <__udivmoddi4+0x260>
 8000d3c:	46d0      	mov	r8, sl
 8000d3e:	e77b      	b.n	8000c38 <__udivmoddi4+0x1b8>
 8000d40:	3b02      	subs	r3, #2
 8000d42:	4461      	add	r1, ip
 8000d44:	e732      	b.n	8000bac <__udivmoddi4+0x12c>
 8000d46:	4630      	mov	r0, r6
 8000d48:	e709      	b.n	8000b5e <__udivmoddi4+0xde>
 8000d4a:	4464      	add	r4, ip
 8000d4c:	3802      	subs	r0, #2
 8000d4e:	e742      	b.n	8000bd6 <__udivmoddi4+0x156>

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d58:	f3bf 8f4f 	dsb	sy
}
 8000d5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d5e:	f3bf 8f6f 	isb	sy
}
 8000d62:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <SCB_EnableICache+0x48>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d6c:	f3bf 8f4f 	dsb	sy
}
 8000d70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d72:	f3bf 8f6f 	isb	sy
}
 8000d76:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <SCB_EnableICache+0x48>)
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <SCB_EnableICache+0x48>)
 8000d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d82:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d84:	f3bf 8f4f 	dsb	sy
}
 8000d88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d8a:	f3bf 8f6f 	isb	sy
}
 8000d8e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <SCB_EnableDCache+0x84>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000dae:	f3bf 8f4f 	dsb	sy
}
 8000db2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <SCB_EnableDCache+0x84>)
 8000db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dba:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	0b5b      	lsrs	r3, r3, #13
 8000dc0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000dc4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	08db      	lsrs	r3, r3, #3
 8000dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000dce:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	015a      	lsls	r2, r3, #5
 8000dd4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000dd8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dde:	4911      	ldr	r1, [pc, #68]	; (8000e24 <SCB_EnableDCache+0x84>)
 8000de0:	4313      	orrs	r3, r2
 8000de2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	60ba      	str	r2, [r7, #8]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1ef      	bne.n	8000dd0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	1e5a      	subs	r2, r3, #1
 8000df4:	60fa      	str	r2, [r7, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1e5      	bne.n	8000dc6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000dfa:	f3bf 8f4f 	dsb	sy
}
 8000dfe:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <SCB_EnableDCache+0x84>)
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <SCB_EnableDCache+0x84>)
 8000e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e0c:	f3bf 8f4f 	dsb	sy
}
 8000e10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e12:	f3bf 8f6f 	isb	sy
}
 8000e16:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8000e3a:	2320      	movs	r3, #32
 8000e3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e3e:	f3bf 8f4f 	dsb	sy
}
 8000e42:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8000e44:	e00b      	b.n	8000e5e <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 8000e46:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <SCB_CleanDCache_by_Addr+0x54>)
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4413      	add	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	dcf0      	bgt.n	8000e46 <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e64:	f3bf 8f4f 	dsb	sy
}
 8000e68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e6a:	f3bf 8f6f 	isb	sy
}
 8000e6e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8000e70:	bf00      	nop
 8000e72:	371c      	adds	r7, #28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <getavail>:
}sPlayersData;

sPlayersData gPlayersData = { PLAYERS_COUNT };


static inline uint32_t getavail(uint32_t wr, uint32_t rd, uint32_t size) {
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  if(wr >= rd) return (wr - rd);
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d303      	bcc.n	8000e9c <getavail+0x1c>
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	e004      	b.n	8000ea6 <getavail+0x26>
  else return (size - rd + wr);
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad2      	subs	r2, r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4413      	add	r3, r2
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <getfree>:

static inline uint32_t getfree(uint32_t wr, uint32_t rd, uint32_t size) {
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
  return size - getavail(wr, rd, size);
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f7ff ffdc 	bl	8000e80 <getavail>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	1a9b      	subs	r3, r3, r2
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HandleSaiDma>:

static void HandleSaiDma(uint32_t *buffer, uint32_t size)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b087      	sub	sp, #28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t samples_per_channel = size / PLAYERS_COUNT;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	08db      	lsrs	r3, r3, #3
 8000ee6:	60fb      	str	r3, [r7, #12]

  for(int i = 0; i < PLAYERS_COUNT; i++)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	e086      	b.n	8000ffc <HandleSaiDma+0x124>
  {
    if(gPlayersData.player[i].playing && getavail(gPlayersData.player[i].buffer_wr, gPlayersData.player[i].buffer_rd, gPlayersData.player[i].bufferSize) >= samples_per_channel)
 8000eee:	4a4a      	ldr	r2, [pc, #296]	; (8001018 <HandleSaiDma+0x140>)
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	21b0      	movs	r1, #176	; 0xb0
 8000ef4:	fb01 f303 	mul.w	r3, r1, r3
 8000ef8:	4413      	add	r3, r2
 8000efa:	3389      	adds	r3, #137	; 0x89
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d071      	beq.n	8000fe8 <HandleSaiDma+0x110>
 8000f04:	4a44      	ldr	r2, [pc, #272]	; (8001018 <HandleSaiDma+0x140>)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	21b0      	movs	r1, #176	; 0xb0
 8000f0a:	fb01 f303 	mul.w	r3, r1, r3
 8000f0e:	4413      	add	r3, r2
 8000f10:	33b0      	adds	r3, #176	; 0xb0
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	4a40      	ldr	r2, [pc, #256]	; (8001018 <HandleSaiDma+0x140>)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	21b0      	movs	r1, #176	; 0xb0
 8000f1a:	fb01 f303 	mul.w	r3, r1, r3
 8000f1e:	4413      	add	r3, r2
 8000f20:	33ac      	adds	r3, #172	; 0xac
 8000f22:	6819      	ldr	r1, [r3, #0]
 8000f24:	4a3c      	ldr	r2, [pc, #240]	; (8001018 <HandleSaiDma+0x140>)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	24b0      	movs	r4, #176	; 0xb0
 8000f2a:	fb04 f303 	mul.w	r3, r4, r3
 8000f2e:	4413      	add	r3, r2
 8000f30:	3394      	adds	r3, #148	; 0x94
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	f7ff ffa3 	bl	8000e80 <getavail>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d852      	bhi.n	8000fe8 <HandleSaiDma+0x110>
    {
      for(int j = 0; j < samples_per_channel; j++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	e04a      	b.n	8000fde <HandleSaiDma+0x106>
      {
        gTdmFinalBuffer[j * PLAYERS_COUNT + i] = gPlayersData.player[i].buffer[gPlayersData.player[i].buffer_rd];
 8000f48:	4a33      	ldr	r2, [pc, #204]	; (8001018 <HandleSaiDma+0x140>)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	21b0      	movs	r1, #176	; 0xb0
 8000f4e:	fb01 f303 	mul.w	r3, r1, r3
 8000f52:	4413      	add	r3, r2
 8000f54:	3398      	adds	r3, #152	; 0x98
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	492f      	ldr	r1, [pc, #188]	; (8001018 <HandleSaiDma+0x140>)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	20b0      	movs	r0, #176	; 0xb0
 8000f5e:	fb00 f303 	mul.w	r3, r0, r3
 8000f62:	440b      	add	r3, r1
 8000f64:	33ac      	adds	r3, #172	; 0xac
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	441a      	add	r2, r3
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	00d9      	lsls	r1, r3, #3
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	440b      	add	r3, r1
 8000f74:	6812      	ldr	r2, [r2, #0]
 8000f76:	4929      	ldr	r1, [pc, #164]	; (800101c <HandleSaiDma+0x144>)
 8000f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if(gPlayersData.player[i].buffer_rd + 1 >= gPlayersData.player[i].bufferSize)
 8000f7c:	4a26      	ldr	r2, [pc, #152]	; (8001018 <HandleSaiDma+0x140>)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	21b0      	movs	r1, #176	; 0xb0
 8000f82:	fb01 f303 	mul.w	r3, r1, r3
 8000f86:	4413      	add	r3, r2
 8000f88:	33ac      	adds	r3, #172	; 0xac
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	4922      	ldr	r1, [pc, #136]	; (8001018 <HandleSaiDma+0x140>)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	20b0      	movs	r0, #176	; 0xb0
 8000f94:	fb00 f303 	mul.w	r3, r0, r3
 8000f98:	440b      	add	r3, r1
 8000f9a:	3394      	adds	r3, #148	; 0x94
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d309      	bcc.n	8000fb6 <HandleSaiDma+0xde>
          gPlayersData.player[i].buffer_rd = 0;
 8000fa2:	4a1d      	ldr	r2, [pc, #116]	; (8001018 <HandleSaiDma+0x140>)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	21b0      	movs	r1, #176	; 0xb0
 8000fa8:	fb01 f303 	mul.w	r3, r1, r3
 8000fac:	4413      	add	r3, r2
 8000fae:	33ac      	adds	r3, #172	; 0xac
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	e010      	b.n	8000fd8 <HandleSaiDma+0x100>
        else gPlayersData.player[i].buffer_rd++;
 8000fb6:	4a18      	ldr	r2, [pc, #96]	; (8001018 <HandleSaiDma+0x140>)
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	21b0      	movs	r1, #176	; 0xb0
 8000fbc:	fb01 f303 	mul.w	r3, r1, r3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	33ac      	adds	r3, #172	; 0xac
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	4913      	ldr	r1, [pc, #76]	; (8001018 <HandleSaiDma+0x140>)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	20b0      	movs	r0, #176	; 0xb0
 8000fce:	fb00 f303 	mul.w	r3, r0, r3
 8000fd2:	440b      	add	r3, r1
 8000fd4:	33ac      	adds	r3, #172	; 0xac
 8000fd6:	601a      	str	r2, [r3, #0]
      for(int j = 0; j < samples_per_channel; j++)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d8b0      	bhi.n	8000f48 <HandleSaiDma+0x70>
 8000fe6:	e006      	b.n	8000ff6 <HandleSaiDma+0x11e>
      }
    } else {
      memset(buffer, 0, size * sizeof(*buffer));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	461a      	mov	r2, r3
 8000fee:	2100      	movs	r1, #0
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f015 fcf5 	bl	80169e0 <memset>
  for(int i = 0; i < PLAYERS_COUNT; i++)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	2b07      	cmp	r3, #7
 8001000:	f77f af75 	ble.w	8000eee <HandleSaiDma+0x16>
    }
  }

  SCB_CleanDCache_by_Addr(buffer, size);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	4619      	mov	r1, r3
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff0d 	bl	8000e28 <SCB_CleanDCache_by_Addr>
}
 800100e:	bf00      	nop
 8001010:	371c      	adds	r7, #28
 8001012:	46bd      	mov	sp, r7
 8001014:	bd90      	pop	{r4, r7, pc}
 8001016:	bf00      	nop
 8001018:	20000034 	.word	0x20000034
 800101c:	20035e80 	.word	0x20035e80

08001020 <HAL_SAI_TxCpltCallback>:

void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  HandleSaiDma(&gTdmFinalBuffer[TDM_BUFFER_SIZE / 2], TDM_BUFFER_SIZE / 2);
 8001028:	f44f 7110 	mov.w	r1, #576	; 0x240
 800102c:	4803      	ldr	r0, [pc, #12]	; (800103c <HAL_SAI_TxCpltCallback+0x1c>)
 800102e:	f7ff ff53 	bl	8000ed8 <HandleSaiDma>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20036780 	.word	0x20036780

08001040 <HAL_SAI_TxHalfCpltCallback>:

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HandleSaiDma(&gTdmFinalBuffer[0], TDM_BUFFER_SIZE / 2);
 8001048:	f44f 7110 	mov.w	r1, #576	; 0x240
 800104c:	4803      	ldr	r0, [pc, #12]	; (800105c <HAL_SAI_TxHalfCpltCallback+0x1c>)
 800104e:	f7ff ff43 	bl	8000ed8 <HandleSaiDma>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20035e80 	.word	0x20035e80

08001060 <StartCommTask>:


void StartCommTask(void *argument)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8001066:	af00      	add	r7, sp, #0
 8001068:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800106c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001070:	6018      	str	r0, [r3, #0]
  sPlayersData *playersdata = (sPlayersData *)argument;
 8001072:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8001076:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
  char *str;

  FATFS fs = {0};
 8001080:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8001084:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001088:	4618      	mov	r0, r3
 800108a:	f44f 730e 	mov.w	r3, #568	; 0x238
 800108e:	461a      	mov	r2, r3
 8001090:	2100      	movs	r1, #0
 8001092:	f015 fca5 	bl	80169e0 <memset>
  FRESULT res;

  while(1) {
    res = f_mount(&fs, SDPath, 1);
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	2201      	movs	r2, #1
 800109c:	4997      	ldr	r1, [pc, #604]	; (80012fc <StartCommTask+0x29c>)
 800109e:	4618      	mov	r0, r3
 80010a0:	f00a f92e 	bl	800b300 <f_mount>
 80010a4:	4603      	mov	r3, r0
 80010a6:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
    if(res == FR_OK)
 80010aa:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d004      	beq.n	80010bc <StartCommTask+0x5c>
      break;
    osDelay(500);
 80010b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b6:	f00b fb8b 	bl	800c7d0 <osDelay>
    res = f_mount(&fs, SDPath, 1);
 80010ba:	e7ec      	b.n	8001096 <StartCommTask+0x36>
      break;
 80010bc:	bf00      	nop
  }

  memset(gTdmFinalBuffer, 0, sizeof(gTdmFinalBuffer));
 80010be:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 80010c2:	2100      	movs	r1, #0
 80010c4:	488e      	ldr	r0, [pc, #568]	; (8001300 <StartCommTask+0x2a0>)
 80010c6:	f015 fc8b 	bl	80169e0 <memset>

  for(int i = 0; i < PLAYERS_COUNT; i++) {
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80010d0:	e100      	b.n	80012d4 <StartCommTask+0x274>
    memset(&playersdata->player[i], 0, sizeof(playersdata->player[i]));
 80010d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80010d6:	22b0      	movs	r2, #176	; 0xb0
 80010d8:	fb02 f303 	mul.w	r3, r2, r3
 80010dc:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80010e0:	4413      	add	r3, r2
 80010e2:	3304      	adds	r3, #4
 80010e4:	22b0      	movs	r2, #176	; 0xb0
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f015 fc79 	bl	80169e0 <memset>

    str = (char *)pvPortMalloc(12); sprintf(str, "player%d", i+1); playersdata->player[i].name = str;
 80010ee:	200c      	movs	r0, #12
 80010f0:	f00e ffd0 	bl	8010094 <pvPortMalloc>
 80010f4:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 80010f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80010fc:	3301      	adds	r3, #1
 80010fe:	461a      	mov	r2, r3
 8001100:	4980      	ldr	r1, [pc, #512]	; (8001304 <StartCommTask+0x2a4>)
 8001102:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 8001106:	f015 fc73 	bl	80169f0 <siprintf>
 800110a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800110e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8001112:	21b0      	movs	r1, #176	; 0xb0
 8001114:	fb01 f303 	mul.w	r3, r1, r3
 8001118:	4413      	add	r3, r2
 800111a:	3304      	adds	r3, #4
 800111c:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8001120:	601a      	str	r2, [r3, #0]
    str = (char *)pvPortMalloc(16); sprintf(str, "mutexPlayer%d", i+1); mutexPlayer_attributes.name = str;
 8001122:	2010      	movs	r0, #16
 8001124:	f00e ffb6 	bl	8010094 <pvPortMalloc>
 8001128:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 800112c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8001130:	3301      	adds	r3, #1
 8001132:	461a      	mov	r2, r3
 8001134:	4974      	ldr	r1, [pc, #464]	; (8001308 <StartCommTask+0x2a8>)
 8001136:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 800113a:	f015 fc59 	bl	80169f0 <siprintf>
 800113e:	4a73      	ldr	r2, [pc, #460]	; (800130c <StartCommTask+0x2ac>)
 8001140:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8001144:	6013      	str	r3, [r2, #0]
    str = (char *)pvPortMalloc(16); sprintf(str, "taskPlayer%d", i+1); taskPlayer_attributes.name = str;
 8001146:	2010      	movs	r0, #16
 8001148:	f00e ffa4 	bl	8010094 <pvPortMalloc>
 800114c:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
 8001150:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8001154:	3301      	adds	r3, #1
 8001156:	461a      	mov	r2, r3
 8001158:	496d      	ldr	r1, [pc, #436]	; (8001310 <StartCommTask+0x2b0>)
 800115a:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 800115e:	f015 fc47 	bl	80169f0 <siprintf>
 8001162:	4a6c      	ldr	r2, [pc, #432]	; (8001314 <StartCommTask+0x2b4>)
 8001164:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8001168:	6013      	str	r3, [r2, #0]

    sprintf(playersdata->player[i].file, "music/%d.mp3", i+1);
 800116a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800116e:	22b0      	movs	r2, #176	; 0xb0
 8001170:	fb02 f303 	mul.w	r3, r2, r3
 8001174:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8001178:	4413      	add	r3, r2
 800117a:	f103 0008 	add.w	r0, r3, #8
 800117e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8001182:	3301      	adds	r3, #1
 8001184:	461a      	mov	r2, r3
 8001186:	4964      	ldr	r1, [pc, #400]	; (8001318 <StartCommTask+0x2b8>)
 8001188:	f015 fc32 	bl	80169f0 <siprintf>

    playersdata->player[i].enabled = 0;
 800118c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8001190:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8001194:	21b0      	movs	r1, #176	; 0xb0
 8001196:	fb01 f303 	mul.w	r3, r1, r3
 800119a:	4413      	add	r3, r2
 800119c:	3388      	adds	r3, #136	; 0x88
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
    playersdata->player[i].playing = 0;
 80011a2:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80011a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80011aa:	21b0      	movs	r1, #176	; 0xb0
 80011ac:	fb01 f303 	mul.w	r3, r1, r3
 80011b0:	4413      	add	r3, r2
 80011b2:	3389      	adds	r3, #137	; 0x89
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
    playersdata->player[i].volume = 100;
 80011b8:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80011bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80011c0:	21b0      	movs	r1, #176	; 0xb0
 80011c2:	fb01 f303 	mul.w	r3, r1, r3
 80011c6:	4413      	add	r3, r2
 80011c8:	338b      	adds	r3, #139	; 0x8b
 80011ca:	2264      	movs	r2, #100	; 0x64
 80011cc:	701a      	strb	r2, [r3, #0]

    playersdata->player[i].bufferSize = SAMPLE_BUFFER_SIZE;
 80011ce:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80011d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80011d6:	21b0      	movs	r1, #176	; 0xb0
 80011d8:	fb01 f303 	mul.w	r3, r1, r3
 80011dc:	4413      	add	r3, r2
 80011de:	3394      	adds	r3, #148	; 0x94
 80011e0:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 80011e4:	601a      	str	r2, [r3, #0]
    playersdata->player[i].buffer = gSamplesBuffer[i];
 80011e6:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80011ea:	4613      	mov	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4413      	add	r3, r2
 80011f0:	02db      	lsls	r3, r3, #11
 80011f2:	4a4a      	ldr	r2, [pc, #296]	; (800131c <StartCommTask+0x2bc>)
 80011f4:	441a      	add	r2, r3
 80011f6:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80011fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80011fe:	20b0      	movs	r0, #176	; 0xb0
 8001200:	fb00 f303 	mul.w	r3, r0, r3
 8001204:	440b      	add	r3, r1
 8001206:	3398      	adds	r3, #152	; 0x98
 8001208:	601a      	str	r2, [r3, #0]
    playersdata->player[i].sampleBufferSize = MP3_SAMPLE_SIZE;
 800120a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800120e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8001212:	21b0      	movs	r1, #176	; 0xb0
 8001214:	fb01 f303 	mul.w	r3, r1, r3
 8001218:	4413      	add	r3, r2
 800121a:	33a8      	adds	r3, #168	; 0xa8
 800121c:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8001220:	601a      	str	r2, [r3, #0]
    playersdata->player[i].sampleBuffer = gSampleBuffer[i];
 8001222:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8001226:	4613      	mov	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4413      	add	r3, r2
 800122c:	025b      	lsls	r3, r3, #9
 800122e:	4a3c      	ldr	r2, [pc, #240]	; (8001320 <StartCommTask+0x2c0>)
 8001230:	441a      	add	r2, r3
 8001232:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8001236:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800123a:	20b0      	movs	r0, #176	; 0xb0
 800123c:	fb00 f303 	mul.w	r3, r0, r3
 8001240:	440b      	add	r3, r1
 8001242:	33a4      	adds	r3, #164	; 0xa4
 8001244:	601a      	str	r2, [r3, #0]
    playersdata->player[i].fileBufferSize = FILE_BUFFER_SIZE;
 8001246:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800124a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800124e:	21b0      	movs	r1, #176	; 0xb0
 8001250:	fb01 f303 	mul.w	r3, r1, r3
 8001254:	4413      	add	r3, r2
 8001256:	33a0      	adds	r3, #160	; 0xa0
 8001258:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800125c:	601a      	str	r2, [r3, #0]
    playersdata->player[i].fileBuffer = gFileBuffer[i];
 800125e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8001262:	031b      	lsls	r3, r3, #12
 8001264:	4a2f      	ldr	r2, [pc, #188]	; (8001324 <StartCommTask+0x2c4>)
 8001266:	441a      	add	r2, r3
 8001268:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800126c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8001270:	20b0      	movs	r0, #176	; 0xb0
 8001272:	fb00 f303 	mul.w	r3, r0, r3
 8001276:	440b      	add	r3, r1
 8001278:	339c      	adds	r3, #156	; 0x9c
 800127a:	601a      	str	r2, [r3, #0]

    playersdata->player[i].mutex = osMutexNew(&mutexPlayer_attributes);
 800127c:	4823      	ldr	r0, [pc, #140]	; (800130c <StartCommTask+0x2ac>)
 800127e:	f00b fad5 	bl	800c82c <osMutexNew>
 8001282:	4601      	mov	r1, r0
 8001284:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8001288:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800128c:	20b0      	movs	r0, #176	; 0xb0
 800128e:	fb00 f303 	mul.w	r3, r0, r3
 8001292:	4413      	add	r3, r2
 8001294:	338c      	adds	r3, #140	; 0x8c
 8001296:	6019      	str	r1, [r3, #0]
    playersdata->player[i].task = osThreadNew(StartPlayerTask, &playersdata->player[i], &taskPlayer_attributes);
 8001298:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800129c:	22b0      	movs	r2, #176	; 0xb0
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80012a6:	4413      	add	r3, r2
 80012a8:	3304      	adds	r3, #4
 80012aa:	4a1a      	ldr	r2, [pc, #104]	; (8001314 <StartCommTask+0x2b4>)
 80012ac:	4619      	mov	r1, r3
 80012ae:	481e      	ldr	r0, [pc, #120]	; (8001328 <StartCommTask+0x2c8>)
 80012b0:	f00b f9e8 	bl	800c684 <osThreadNew>
 80012b4:	4601      	mov	r1, r0
 80012b6:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80012ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80012be:	20b0      	movs	r0, #176	; 0xb0
 80012c0:	fb00 f303 	mul.w	r3, r0, r3
 80012c4:	4413      	add	r3, r2
 80012c6:	3390      	adds	r3, #144	; 0x90
 80012c8:	6019      	str	r1, [r3, #0]
  for(int i = 0; i < PLAYERS_COUNT; i++) {
 80012ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80012ce:	3301      	adds	r3, #1
 80012d0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80012d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80012d8:	2b07      	cmp	r3, #7
 80012da:	f77f aefa 	ble.w	80010d2 <StartCommTask+0x72>
  }

  HandleSaiDma(gTdmFinalBuffer, TDM_BUFFER_SIZE);
 80012de:	f44f 6190 	mov.w	r1, #1152	; 0x480
 80012e2:	4807      	ldr	r0, [pc, #28]	; (8001300 <StartCommTask+0x2a0>)
 80012e4:	f7ff fdf8 	bl	8000ed8 <HandleSaiDma>
  HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t*)gTdmFinalBuffer, TDM_BUFFER_SIZE);
 80012e8:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80012ec:	4904      	ldr	r1, [pc, #16]	; (8001300 <StartCommTask+0x2a0>)
 80012ee:	480f      	ldr	r0, [pc, #60]	; (800132c <StartCommTask+0x2cc>)
 80012f0:	f003 fd36 	bl	8004d60 <HAL_SAI_Transmit_DMA>

  for(;;)
  {
    osDelay(1);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f00b fa6b 	bl	800c7d0 <osDelay>
 80012fa:	e7fb      	b.n	80012f4 <StartCommTask+0x294>
 80012fc:	20037090 	.word	0x20037090
 8001300:	20035e80 	.word	0x20035e80
 8001304:	080172b8 	.word	0x080172b8
 8001308:	080172c4 	.word	0x080172c4
 800130c:	20000024 	.word	0x20000024
 8001310:	080172d4 	.word	0x080172d4
 8001314:	20000000 	.word	0x20000000
 8001318:	080172e4 	.word	0x080172e4
 800131c:	20009e78 	.word	0x20009e78
 8001320:	20000e78 	.word	0x20000e78
 8001324:	2002de78 	.word	0x2002de78
 8001328:	08001331 	.word	0x08001331
 800132c:	2000065c 	.word	0x2000065c

08001330 <StartPlayerTask>:
  }
}

void StartPlayerTask(void *argument)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
 8001336:	af02      	add	r7, sp, #8
 8001338:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800133c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8001340:	6018      	str	r0, [r3, #0]
  sPlayerData *playerdata = (sPlayerData *)argument;
 8001342:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001346:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
  HMP3Decoder mp3Handler = MP3InitDecoder();
 8001350:	f00f f884 	bl	801045c <MP3InitDecoder>
 8001354:	f8c7 028c 	str.w	r0, [r7, #652]	; 0x28c
  uint8_t playing;
  uint8_t enabled;
  uint8_t changed;
  float volume;

  FIL file = {0};
 8001358:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800135c:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001360:	4618      	mov	r0, r3
 8001362:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001366:	461a      	mov	r2, r3
 8001368:	2100      	movs	r1, #0
 800136a:	f015 fb39 	bl	80169e0 <memset>

  uint8_t *tempfilebuffer;
  int16_t *mp3buffer;


  playing = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7

  while(1)
  {
    osMutexAcquire(playerdata->mutex, portMAX_DELAY);
 8001374:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137c:	f04f 31ff 	mov.w	r1, #4294967295
 8001380:	4618      	mov	r0, r3
 8001382:	f00b faed 	bl	800c960 <osMutexAcquire>
    filebuffer = playerdata->fileBuffer;
 8001386:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800138a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800138e:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
    filebuffersize = playerdata->fileBufferSize;
 8001392:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001396:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800139a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
    samplebuffer = playerdata->sampleBuffer;
 800139e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80013a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80013a6:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
    buffer = playerdata->buffer;
 80013aa:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80013ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013b2:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
    stereo = (int16_t *)buffer;
 80013b6:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 80013ba:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
    buffersize = playerdata->bufferSize;
 80013be:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80013c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c6:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
    volume = playerdata->volume * 0.01f;
 80013ca:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80013ce:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013da:	ed9f 7ad9 	vldr	s14, [pc, #868]	; 8001740 <StartPlayerTask+0x410>
 80013de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e2:	edc7 7a9c 	vstr	s15, [r7, #624]	; 0x270
    enabled = playerdata->enabled;
 80013e6:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80013ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80013ee:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
    changed = playerdata->changed;
 80013f2:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80013f6:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80013fa:	f887 326e 	strb.w	r3, [r7, #622]	; 0x26e
    osMutexRelease(playerdata->mutex);
 80013fe:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001406:	4618      	mov	r0, r3
 8001408:	f00b fb08 	bl	800ca1c <osMutexRelease>

    if(changed) {
 800140c:	f897 326e 	ldrb.w	r3, [r7, #622]	; 0x26e
 8001410:	2b00      	cmp	r3, #0
 8001412:	d06b      	beq.n	80014ec <StartPlayerTask+0x1bc>
      osMutexAcquire(playerdata->mutex, portMAX_DELAY);
 8001414:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141c:	f04f 31ff 	mov.w	r1, #4294967295
 8001420:	4618      	mov	r0, r3
 8001422:	f00b fa9d 	bl	800c960 <osMutexAcquire>
      playerdata->buffer_rd = 0;
 8001426:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800142a:	2200      	movs	r2, #0
 800142c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
      playerdata->buffer_wr = 0;
 8001430:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001434:	2200      	movs	r2, #0
 8001436:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
      playerdata->changed = 0;
 800143a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      if(playing) {
 8001444:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 8001448:	2b00      	cmp	r3, #0
 800144a:	d01b      	beq.n	8001484 <StartPlayerTask+0x154>
        playing = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
        osMutexRelease(playerdata->mutex);
 8001452:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145a:	4618      	mov	r0, r3
 800145c:	f00b fade 	bl	800ca1c <osMutexRelease>
        memset(buffer, 0, buffersize * sizeof(*buffer));
 8001460:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	461a      	mov	r2, r3
 8001468:	2100      	movs	r1, #0
 800146a:	f8d7 027c 	ldr.w	r0, [r7, #636]	; 0x27c
 800146e:	f015 fab7 	bl	80169e0 <memset>
        res = f_close(&file);
 8001472:	f107 0318 	add.w	r3, r7, #24
 8001476:	4618      	mov	r0, r3
 8001478:	f00a fc5e 	bl	800bd38 <f_close>
 800147c:	4603      	mov	r3, r0
 800147e:	f887 326d 	strb.w	r3, [r7, #621]	; 0x26d
 8001482:	e006      	b.n	8001492 <StartPlayerTask+0x162>
        if(res != FR_OK) {

        }
      } else {
        osMutexRelease(playerdata->mutex);
 8001484:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148c:	4618      	mov	r0, r3
 800148e:	f00b fac5 	bl	800ca1c <osMutexRelease>
      }

      if(enabled) {
 8001492:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 8001496:	2b00      	cmp	r3, #0
 8001498:	d028      	beq.n	80014ec <StartPlayerTask+0x1bc>
        res = f_open(&file, playerdata->file, FA_READ);
 800149a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800149e:	1d19      	adds	r1, r3, #4
 80014a0:	f107 0318 	add.w	r3, r7, #24
 80014a4:	2201      	movs	r2, #1
 80014a6:	4618      	mov	r0, r3
 80014a8:	f009 ff8e 	bl	800b3c8 <f_open>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f887 326d 	strb.w	r3, [r7, #621]	; 0x26d
        if(res != FR_OK) {
 80014b2:	f897 326d 	ldrb.w	r3, [r7, #621]	; 0x26d
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00b      	beq.n	80014d2 <StartPlayerTask+0x1a2>
          playerdata->enabled = 0;
 80014ba:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
          enabled = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
          playing = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
 80014d0:	e00c      	b.n	80014ec <StartPlayerTask+0x1bc>
        } else {
          playing = 1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
          filesize = f_size(&file);
 80014d8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80014dc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80014e6:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80014ea:	601a      	str	r2, [r3, #0]
        }

      }
    }

    playerdata->playing = playing;
 80014ec:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80014f0:	f897 22a7 	ldrb.w	r2, [r7, #679]	; 0x2a7
 80014f4:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85

    if(playing) {
 80014f8:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 8241 	beq.w	8001984 <StartPlayerTask+0x654>

      if(f_eof(&file)) {
 8001502:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001506:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800150a:	699a      	ldr	r2, [r3, #24]
 800150c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001510:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	429a      	cmp	r2, r3
 8001518:	d114      	bne.n	8001544 <StartPlayerTask+0x214>
        f_lseek(&file, 0);
 800151a:	f107 0318 	add.w	r3, r7, #24
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f00a fc38 	bl	800bd96 <f_lseek>
        filesize = f_size(&file);
 8001526:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800152a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001534:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8001538:	601a      	str	r2, [r3, #0]
        playerdata->playing = 0;
 800153a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
      }

      toread = filebuffersize;
 8001544:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8001548:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
      if(toread > filesize)
 800154c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001550:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 800155a:	429a      	cmp	r2, r3
 800155c:	d906      	bls.n	800156c <StartPlayerTask+0x23c>
        toread = filesize;
 800155e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001562:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0

      res = f_read(&file, filebuffer, toread, &read);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	f107 0018 	add.w	r0, r7, #24
 8001574:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8001578:	f8d7 1288 	ldr.w	r1, [r7, #648]	; 0x288
 800157c:	f00a f9e4 	bl	800b948 <f_read>
 8001580:	4603      	mov	r3, r0
 8001582:	f887 326d 	strb.w	r3, [r7, #621]	; 0x26d
      if(res != FR_OK) {
 8001586:	f897 326d 	ldrb.w	r3, [r7, #621]	; 0x26d
 800158a:	2b00      	cmp	r3, #0
 800158c:	f040 81fe 	bne.w	800198c <StartPlayerTask+0x65c>
        continue;
      }

      syncword = MP3FindSyncWord(filebuffer, read);
 8001590:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001594:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4619      	mov	r1, r3
 800159c:	f8d7 0288 	ldr.w	r0, [r7, #648]	; 0x288
 80015a0:	f00e ff67 	bl	8010472 <MP3FindSyncWord>
 80015a4:	f8c7 0268 	str.w	r0, [r7, #616]	; 0x268
      if(syncword <= ERR_MP3_INDATA_UNDERFLOW)
 80015a8:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	da10      	bge.n	80015d2 <StartPlayerTask+0x2a2>
      {
        filesize -= read;
 80015b0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80015b4:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80015be:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	1ad2      	subs	r2, r2, r3
 80015c6:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80015ca:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80015ce:	601a      	str	r2, [r3, #0]
        continue;
 80015d0:	e1df      	b.n	8001992 <StartPlayerTask+0x662>
      }
      if(syncword > 0)
 80015d2:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	dd21      	ble.n	800161e <StartPlayerTask+0x2ee>
      {
        f_lseek(&file, f_tell(&file) - read + syncword);
 80015da:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80015de:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80015e2:	699a      	ldr	r2, [r3, #24]
 80015e4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80015e8:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	1ad2      	subs	r2, r2, r3
 80015f0:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80015f4:	441a      	add	r2, r3
 80015f6:	f107 0318 	add.w	r3, r7, #24
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00a fbca 	bl	800bd96 <f_lseek>
        filesize -= syncword;
 8001602:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001606:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8001610:	1ad2      	subs	r2, r2, r3
 8001612:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001616:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800161a:	601a      	str	r2, [r3, #0]
        continue;
 800161c:	e1b9      	b.n	8001992 <StartPlayerTask+0x662>
      }

      syncword = MP3GetNextFrameInfo(mp3Handler, &mp3Info, filebuffer);
 800161e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001622:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8001626:	4619      	mov	r1, r3
 8001628:	f8d7 028c 	ldr.w	r0, [r7, #652]	; 0x28c
 800162c:	f00e fffa 	bl	8010624 <MP3GetNextFrameInfo>
 8001630:	f8c7 0268 	str.w	r0, [r7, #616]	; 0x268
      if(syncword != ERR_MP3_NONE)
 8001634:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8001638:	2b00      	cmp	r3, #0
 800163a:	d025      	beq.n	8001688 <StartPlayerTask+0x358>
      {
        if(filesize > 2)
 800163c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001640:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b02      	cmp	r3, #2
 8001648:	f240 81a2 	bls.w	8001990 <StartPlayerTask+0x660>
        {
          f_lseek(&file, f_tell(&file) - read + 2);
 800164c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001650:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8001654:	699a      	ldr	r2, [r3, #24]
 8001656:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800165a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	1c9a      	adds	r2, r3, #2
 8001664:	f107 0318 	add.w	r3, r7, #24
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f00a fb93 	bl	800bd96 <f_lseek>
          filesize -= 2;
 8001670:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001674:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	1e9a      	subs	r2, r3, #2
 800167c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001680:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8001684:	601a      	str	r2, [r3, #0]
        }
        continue;
 8001686:	e183      	b.n	8001990 <StartPlayerTask+0x660>
      }

      tempfilebuffer = filebuffer;
 8001688:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800168c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8001690:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8001694:	601a      	str	r2, [r3, #0]
      mp3buffer = (int16_t *)samplebuffer;
 8001696:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800169a:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
      syncword = MP3Decode(mp3Handler, &tempfilebuffer, (int*)&filesize, mp3buffer, 0);
 800169e:	f107 0210 	add.w	r2, r7, #16
 80016a2:	f107 010c 	add.w	r1, r7, #12
 80016a6:	2300      	movs	r3, #0
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80016ae:	f8d7 028c 	ldr.w	r0, [r7, #652]	; 0x28c
 80016b2:	f00f f809 	bl	80106c8 <MP3Decode>
 80016b6:	f8c7 0268 	str.w	r0, [r7, #616]	; 0x268

      if(syncword != ERR_MP3_NONE)
 80016ba:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d010      	beq.n	80016e4 <StartPlayerTask+0x3b4>
      {
        filesize -= read;
 80016c2:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80016c6:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80016d0:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	1ad2      	subs	r2, r2, r3
 80016d8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80016dc:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 80016e0:	601a      	str	r2, [r3, #0]
        continue;
 80016e2:	e156      	b.n	8001992 <StartPlayerTask+0x662>
      }

      MP3GetLastFrameInfo(mp3Handler, &mp3Info);
 80016e4:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80016e8:	4619      	mov	r1, r3
 80016ea:	f8d7 028c 	ldr.w	r0, [r7, #652]	; 0x28c
 80016ee:	f00e ff39 	bl	8010564 <MP3GetLastFrameInfo>

      if(mp3Info.samprate == 0 || mp3Info.nChans <= 0) {
 80016f2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <StartPlayerTask+0x3d2>
 80016fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80016fe:	2b00      	cmp	r3, #0
 8001700:	dc10      	bgt.n	8001724 <StartPlayerTask+0x3f4>
        filesize -= read;
 8001702:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001706:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001710:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	1ad2      	subs	r2, r2, r3
 8001718:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800171c:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8001720:	601a      	str	r2, [r3, #0]
        continue;
 8001722:	e136      	b.n	8001992 <StartPlayerTask+0x662>
      }

      if(volume < 1.0f) {
 8001724:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8001728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800172c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001734:	d52d      	bpl.n	8001792 <StartPlayerTask+0x462>
        for(int i = 0; i < mp3Info.outputSamps; i++) {
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800173c:	e023      	b.n	8001786 <StartPlayerTask+0x456>
 800173e:	bf00      	nop
 8001740:	3c23d70a 	.word	0x3c23d70a
          mp3buffer[i] = (float)mp3buffer[i] * volume;
 8001744:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800174e:	4413      	add	r3, r2
 8001750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001754:	ee07 3a90 	vmov	s15, r3
 8001758:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800175c:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 8001760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001764:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800176e:	4413      	add	r3, r2
 8001770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001774:	ee17 2a90 	vmov	r2, s15
 8001778:	b212      	sxth	r2, r2
 800177a:	801a      	strh	r2, [r3, #0]
        for(int i = 0; i < mp3Info.outputSamps; i++) {
 800177c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8001780:	3301      	adds	r3, #1
 8001782:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8001786:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800178a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800178e:	429a      	cmp	r2, r3
 8001790:	dbd8      	blt.n	8001744 <StartPlayerTask+0x414>
        }
      }

      while(getfree(playerdata->buffer_wr, playerdata->buffer_rd, playerdata->bufferSize) <= mp3Info.outputSamps / 2)
 8001792:	e002      	b.n	800179a <StartPlayerTask+0x46a>
        osDelay(1);
 8001794:	2001      	movs	r0, #1
 8001796:	f00b f81b 	bl	800c7d0 <osDelay>
      while(getfree(playerdata->buffer_wr, playerdata->buffer_rd, playerdata->bufferSize) <= mp3Info.outputSamps / 2)
 800179a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800179e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 80017a2:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80017a6:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80017aa:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80017ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b2:	461a      	mov	r2, r3
 80017b4:	f7ff fb7d 	bl	8000eb2 <getfree>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80017be:	2b00      	cmp	r3, #0
 80017c0:	da00      	bge.n	80017c4 <StartPlayerTask+0x494>
 80017c2:	3301      	adds	r3, #1
 80017c4:	105b      	asrs	r3, r3, #1
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d9e4      	bls.n	8001794 <StartPlayerTask+0x464>

      if(mp3Info.nChans == 2) {
 80017ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d167      	bne.n	80018a2 <StartPlayerTask+0x572>
        for(int i = 0; i < mp3Info.outputSamps;) {
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80017d8:	e05c      	b.n	8001894 <StartPlayerTask+0x564>
          stereo[playerdata->buffer_wr * 2] = (float)mp3buffer[i++] * volume;
 80017da:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	f8c7 2298 	str.w	r2, [r7, #664]	; 0x298
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80017ea:	4413      	add	r3, r2
 80017ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f8:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 80017fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001800:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001804:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 800180e:	4413      	add	r3, r2
 8001810:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001814:	ee17 2a90 	vmov	r2, s15
 8001818:	b212      	sxth	r2, r2
 800181a:	801a      	strh	r2, [r3, #0]
          stereo[playerdata->buffer_wr * 2 + 1] = (float)mp3buffer[i++] * volume;
 800181c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	f8c7 2298 	str.w	r2, [r7, #664]	; 0x298
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 800182c:	4413      	add	r3, r2
 800182e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001832:	ee07 3a90 	vmov	s15, r3
 8001836:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800183a:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 800183e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001842:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001846:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	3302      	adds	r3, #2
 800184e:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 8001852:	4413      	add	r3, r2
 8001854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001858:	ee17 2a90 	vmov	r2, s15
 800185c:	b212      	sxth	r2, r2
 800185e:	801a      	strh	r2, [r3, #0]

          if(playerdata->buffer_wr + 1 >= playerdata->bufferSize)
 8001860:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001864:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001872:	429a      	cmp	r2, r3
 8001874:	d305      	bcc.n	8001882 <StartPlayerTask+0x552>
            playerdata->buffer_wr = 0;
 8001876:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800187a:	2200      	movs	r2, #0
 800187c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8001880:	e008      	b.n	8001894 <StartPlayerTask+0x564>
          else playerdata->buffer_wr++;
 8001882:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001886:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001890:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        for(int i = 0; i < mp3Info.outputSamps;) {
 8001894:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8001898:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 800189c:	429a      	cmp	r2, r3
 800189e:	db9c      	blt.n	80017da <StartPlayerTask+0x4aa>
 80018a0:	e05a      	b.n	8001958 <StartPlayerTask+0x628>
        }
      } else if(mp3Info.nChans == 1) {
 80018a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d156      	bne.n	8001958 <StartPlayerTask+0x628>
        for(int i = 0; i < mp3Info.outputSamps; i++) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80018b0:	e04c      	b.n	800194c <StartPlayerTask+0x61c>
          mp3buffer[i] = (float)mp3buffer[i] * volume;
 80018b2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80018bc:	4413      	add	r3, r2
 80018be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ca:	edd7 7a9c 	vldr	s15, [r7, #624]	; 0x270
 80018ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d2:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80018dc:	4413      	add	r3, r2
 80018de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e2:	ee17 2a90 	vmov	r2, s15
 80018e6:	b212      	sxth	r2, r2
 80018e8:	801a      	strh	r2, [r3, #0]
          stereo[playerdata->buffer_wr * 2] = mp3buffer[i];
 80018ea:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80018f4:	441a      	add	r2, r3
 80018f6:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80018fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 8001904:	440b      	add	r3, r1
 8001906:	f9b2 2000 	ldrsh.w	r2, [r2]
 800190a:	801a      	strh	r2, [r3, #0]
          stereo[playerdata->buffer_wr * 2 + 1] = mp3buffer[i];
 800190c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8001916:	441a      	add	r2, r3
 8001918:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800191c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 8001928:	440b      	add	r3, r1
 800192a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800192e:	801a      	strh	r2, [r3, #0]
          playerdata->buffer_wr++;
 8001930:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8001934:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800193e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        for(int i = 0; i < mp3Info.outputSamps; i++) {
 8001942:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001946:	3301      	adds	r3, #1
 8001948:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 800194c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8001950:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8001954:	429a      	cmp	r2, r3
 8001956:	dbac      	blt.n	80018b2 <StartPlayerTask+0x582>
        }
      }

      playerdata->playing = 1;
 8001958:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85


      filesize -= read;
 8001962:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001966:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001970:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	1ad2      	subs	r2, r2, r3
 8001978:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 800197c:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	e4f7      	b.n	8001374 <StartPlayerTask+0x44>
    } else {
      osDelay(1);
 8001984:	2001      	movs	r0, #1
 8001986:	f00a ff23 	bl	800c7d0 <osDelay>
 800198a:	e4f3      	b.n	8001374 <StartPlayerTask+0x44>
        continue;
 800198c:	bf00      	nop
 800198e:	e4f1      	b.n	8001374 <StartPlayerTask+0x44>
        continue;
 8001990:	bf00      	nop
    osMutexAcquire(playerdata->mutex, portMAX_DELAY);
 8001992:	e4ef      	b.n	8001374 <StartPlayerTask+0x44>

08001994 <main>:
    }
  }
}

int main(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  SCB_EnableICache();
 8001998:	f7ff f9dc 	bl	8000d54 <SCB_EnableICache>
  SCB_EnableDCache();
 800199c:	f7ff fa00 	bl	8000da0 <SCB_EnableDCache>

  HAL_Init();
 80019a0:	f000 fdfc 	bl	800259c <HAL_Init>

  SystemClock_Config();
 80019a4:	f000 f824 	bl	80019f0 <SystemClock_Config>

  MX_GPIO_Init();
 80019a8:	f000 f9c8 	bl	8001d3c <MX_GPIO_Init>
  MX_DMA_Init();
 80019ac:	f000 f988 	bl	8001cc0 <MX_DMA_Init>
  MX_SAI2_Init();
 80019b0:	f000 f88e 	bl	8001ad0 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80019b4:	f000 f8e6 	bl	8001b84 <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 80019b8:	f000 f952 	bl	8001c60 <MX_USART1_UART_Init>
  //MX_IWDG_Init();
  MX_TIM5_Init();
 80019bc:	f000 f902 	bl	8001bc4 <MX_TIM5_Init>
  MX_FATFS_Init();
 80019c0:	f007 f848 	bl	8008a54 <MX_FATFS_Init>

  osKernelInitialize();
 80019c4:	f00a fdaa 	bl	800c51c <osKernelInitialize>

  taskCommHandle = osThreadNew(StartCommTask, &gPlayersData, &taskComm_attributes);
 80019c8:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <main+0x4c>)
 80019ca:	4906      	ldr	r1, [pc, #24]	; (80019e4 <main+0x50>)
 80019cc:	4806      	ldr	r0, [pc, #24]	; (80019e8 <main+0x54>)
 80019ce:	f00a fe59 	bl	800c684 <osThreadNew>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4a05      	ldr	r2, [pc, #20]	; (80019ec <main+0x58>)
 80019d6:	6013      	str	r3, [r2, #0]

  osKernelStart();
 80019d8:	f00a fdf6 	bl	800c5c8 <osKernelStart>

  while (1)
 80019dc:	e7fe      	b.n	80019dc <main+0x48>
 80019de:	bf00      	nop
 80019e0:	08017354 	.word	0x08017354
 80019e4:	20000034 	.word	0x20000034
 80019e8:	08001061 	.word	0x08001061
 80019ec:	20000a14 	.word	0x20000a14

080019f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b094      	sub	sp, #80	; 0x50
 80019f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f6:	f107 0320 	add.w	r3, r7, #32
 80019fa:	2230      	movs	r2, #48	; 0x30
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f014 ffee 	bl	80169e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	4b2c      	ldr	r3, [pc, #176]	; (8001ac8 <SystemClock_Config+0xd8>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	4a2b      	ldr	r2, [pc, #172]	; (8001ac8 <SystemClock_Config+0xd8>)
 8001a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a20:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <SystemClock_Config+0xd8>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a2c:	4b27      	ldr	r3, [pc, #156]	; (8001acc <SystemClock_Config+0xdc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a26      	ldr	r2, [pc, #152]	; (8001acc <SystemClock_Config+0xdc>)
 8001a32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <SystemClock_Config+0xdc>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001a44:	2309      	movs	r3, #9
 8001a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a52:	2302      	movs	r3, #2
 8001a54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a5c:	2310      	movs	r3, #16
 8001a5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001a60:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001a64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a66:	2302      	movs	r3, #2
 8001a68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001a6a:	2309      	movs	r3, #9
 8001a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6e:	f107 0320 	add.w	r3, r7, #32
 8001a72:	4618      	mov	r0, r3
 8001a74:	f001 fd78 	bl	8003568 <HAL_RCC_OscConfig>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001a7e:	f000 f9d9 	bl	8001e34 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a82:	f001 fd21 	bl	80034c8 <HAL_PWREx_EnableOverDrive>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001a8c:	f000 f9d2 	bl	8001e34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a90:	230f      	movs	r3, #15
 8001a92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a94:	2302      	movs	r3, #2
 8001a96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001aa0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2107      	movs	r1, #7
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f001 fffe 	bl	8003ab0 <HAL_RCC_ClockConfig>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001aba:	f000 f9bb 	bl	8001e34 <Error_Handler>
  }
}
 8001abe:	bf00      	nop
 8001ac0:	3750      	adds	r7, #80	; 0x50
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40007000 	.word	0x40007000

08001ad0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA1.Instance = SAI2_Block_A;
 8001ad4:	4b29      	ldr	r3, [pc, #164]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001ad6:	4a2a      	ldr	r2, [pc, #168]	; (8001b80 <MX_SAI2_Init+0xb0>)
 8001ad8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ada:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001ae0:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_32;
 8001ae6:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001ae8:	22e0      	movs	r2, #224	; 0xe0
 8001aea:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001aec:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001af2:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001af8:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001afe:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001b04:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001b12:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001b16:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b24:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 256;
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001b32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001b38:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b44:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001b58:	2280      	movs	r2, #128	; 0x80
 8001b5a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 8;
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001b5e:	2208      	movs	r2, #8
 8001b60:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <MX_SAI2_Init+0xac>)
 8001b6a:	f002 fef7 	bl	800495c <HAL_SAI_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_SAI2_Init+0xa8>
  {
    Error_Handler();
 8001b74:	f000 f95e 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	2000065c 	.word	0x2000065c
 8001b80:	40015c04 	.word	0x40015c04

08001b84 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <MX_SDMMC1_SD_Init+0x38>)
 8001b8a:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <MX_SDMMC1_SD_Init+0x3c>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <MX_SDMMC1_SD_Init+0x38>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <MX_SDMMC1_SD_Init+0x38>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <MX_SDMMC1_SD_Init+0x38>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <MX_SDMMC1_SD_Init+0x38>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <MX_SDMMC1_SD_Init+0x38>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <MX_SDMMC1_SD_Init+0x38>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	20000740 	.word	0x20000740
 8001bc0:	40012c00 	.word	0x40012c00

08001bc4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bca:	f107 0310 	add.w	r3, r7, #16
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <MX_TIM5_Init+0x94>)
 8001be4:	4a1d      	ldr	r2, [pc, #116]	; (8001c5c <MX_TIM5_Init+0x98>)
 8001be6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108-1;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <MX_TIM5_Init+0x94>)
 8001bea:	226b      	movs	r2, #107	; 0x6b
 8001bec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <MX_TIM5_Init+0x94>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF;
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <MX_TIM5_Init+0x94>)
 8001bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <MX_TIM5_Init+0x94>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <MX_TIM5_Init+0x94>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c08:	4813      	ldr	r0, [pc, #76]	; (8001c58 <MX_TIM5_Init+0x94>)
 8001c0a:	f004 feec 	bl	80069e6 <HAL_TIM_Base_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001c14:	f000 f90e 	bl	8001e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	4619      	mov	r1, r3
 8001c24:	480c      	ldr	r0, [pc, #48]	; (8001c58 <MX_TIM5_Init+0x94>)
 8001c26:	f004 ff35 	bl	8006a94 <HAL_TIM_ConfigClockSource>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001c30:	f000 f900 	bl	8001e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_TIM5_Init+0x94>)
 8001c42:	f005 f92b 	bl	8006e9c <HAL_TIMEx_MasterConfigSynchronization>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001c4c:	f000 f8f2 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000884 	.word	0x20000884
 8001c5c:	40000c00 	.word	0x40000c00

08001c60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <MX_USART1_UART_Init+0x58>)
 8001c66:	4a15      	ldr	r2, [pc, #84]	; (8001cbc <MX_USART1_UART_Init+0x5c>)
 8001c68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <MX_USART1_UART_Init+0x58>)
 8001c6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <MX_USART1_UART_Init+0x58>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <MX_USART1_UART_Init+0x58>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <MX_USART1_UART_Init+0x58>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <MX_USART1_UART_Init+0x58>)
 8001c86:	220c      	movs	r2, #12
 8001c88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <MX_USART1_UART_Init+0x58>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <MX_USART1_UART_Init+0x58>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c96:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <MX_USART1_UART_Init+0x58>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <MX_USART1_UART_Init+0x58>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ca2:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <MX_USART1_UART_Init+0x58>)
 8001ca4:	f005 f988 	bl	8006fb8 <HAL_UART_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001cae:	f000 f8c1 	bl	8001e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200008d0 	.word	0x200008d0
 8001cbc:	40011000 	.word	0x40011000

08001cc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <MX_DMA_Init+0x78>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a1b      	ldr	r2, [pc, #108]	; (8001d38 <MX_DMA_Init+0x78>)
 8001ccc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <MX_DMA_Init+0x78>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2106      	movs	r1, #6
 8001ce2:	2039      	movs	r0, #57	; 0x39
 8001ce4:	f000 fdc5 	bl	8002872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001ce8:	2039      	movs	r0, #57	; 0x39
 8001cea:	f000 fdde 	bl	80028aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 12, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	210c      	movs	r1, #12
 8001cf2:	203a      	movs	r0, #58	; 0x3a
 8001cf4:	f000 fdbd 	bl	8002872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001cf8:	203a      	movs	r0, #58	; 0x3a
 8001cfa:	f000 fdd6 	bl	80028aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 9, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2109      	movs	r1, #9
 8001d02:	203b      	movs	r0, #59	; 0x3b
 8001d04:	f000 fdb5 	bl	8002872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001d08:	203b      	movs	r0, #59	; 0x3b
 8001d0a:	f000 fdce 	bl	80028aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 9, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2109      	movs	r1, #9
 8001d12:	2045      	movs	r0, #69	; 0x45
 8001d14:	f000 fdad 	bl	8002872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001d18:	2045      	movs	r0, #69	; 0x45
 8001d1a:	f000 fdc6 	bl	80028aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 12, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	210c      	movs	r1, #12
 8001d22:	2046      	movs	r0, #70	; 0x46
 8001d24:	f000 fda5 	bl	8002872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001d28:	2046      	movs	r0, #70	; 0x46
 8001d2a:	f000 fdbe 	bl	80028aa <HAL_NVIC_EnableIRQ>

}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800

08001d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08c      	sub	sp, #48	; 0x30
 8001d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d52:	4b35      	ldr	r3, [pc, #212]	; (8001e28 <MX_GPIO_Init+0xec>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a34      	ldr	r2, [pc, #208]	; (8001e28 <MX_GPIO_Init+0xec>)
 8001d58:	f043 0310 	orr.w	r3, r3, #16
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <MX_GPIO_Init+0xec>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d6a:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <MX_GPIO_Init+0xec>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a2e      	ldr	r2, [pc, #184]	; (8001e28 <MX_GPIO_Init+0xec>)
 8001d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b2c      	ldr	r3, [pc, #176]	; (8001e28 <MX_GPIO_Init+0xec>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <MX_GPIO_Init+0xec>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a28      	ldr	r2, [pc, #160]	; (8001e28 <MX_GPIO_Init+0xec>)
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <MX_GPIO_Init+0xec>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9a:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <MX_GPIO_Init+0xec>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a22      	ldr	r2, [pc, #136]	; (8001e28 <MX_GPIO_Init+0xec>)
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <MX_GPIO_Init+0xec>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <MX_GPIO_Init+0xec>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <MX_GPIO_Init+0xec>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <MX_GPIO_Init+0xec>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <MX_GPIO_Init+0xec>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <MX_GPIO_Init+0xec>)
 8001dd0:	f043 0308 	orr.w	r3, r3, #8
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <MX_GPIO_Init+0xec>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_D3_Pin|LED_D4_Pin|LED_D5_Pin|LED_D6_Pin, GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2178      	movs	r1, #120	; 0x78
 8001de6:	4811      	ldr	r0, [pc, #68]	; (8001e2c <MX_GPIO_Init+0xf0>)
 8001de8:	f001 fb54 	bl	8003494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SDMMC1_DETECT_Pin */
  GPIO_InitStruct.Pin = SDMMC1_DETECT_Pin;
 8001dec:	2304      	movs	r3, #4
 8001dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df0:	2300      	movs	r3, #0
 8001df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001df4:	2301      	movs	r3, #1
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SDMMC1_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	480c      	ldr	r0, [pc, #48]	; (8001e30 <MX_GPIO_Init+0xf4>)
 8001e00:	f001 f984 	bl	800310c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D3_Pin LED_D4_Pin LED_D5_Pin */
  GPIO_InitStruct.Pin = LED_D3_Pin|LED_D4_Pin|LED_D5_Pin|LED_D6_Pin;
 8001e04:	2378      	movs	r3, #120	; 0x78
 8001e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4804      	ldr	r0, [pc, #16]	; (8001e2c <MX_GPIO_Init+0xf0>)
 8001e1c:	f001 f976 	bl	800310c <HAL_GPIO_Init>

}
 8001e20:	bf00      	nop
 8001e22:	3730      	adds	r7, #48	; 0x30
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020c00 	.word	0x40020c00
 8001e30:	40020400 	.word	0x40020400

08001e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e38:	b672      	cpsid	i
}
 8001e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <Error_Handler+0x8>
	...

08001e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e68:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_MspInit+0x4c>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	210f      	movs	r1, #15
 8001e7a:	f06f 0001 	mvn.w	r0, #1
 8001e7e:	f000 fcf8 	bl	8002872 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800

08001e90 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b0ac      	sub	sp, #176	; 0xb0
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ea8:	f107 0318 	add.w	r3, r7, #24
 8001eac:	2284      	movs	r2, #132	; 0x84
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f014 fd95 	bl	80169e0 <memset>
  if(hsd->Instance==SDMMC1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a73      	ldr	r2, [pc, #460]	; (8002088 <HAL_SD_MspInit+0x1f8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	f040 80de 	bne.w	800207e <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001ec2:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8001ec6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed4:	f107 0318 	add.w	r3, r7, #24
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f002 f80d 	bl	8003ef8 <HAL_RCCEx_PeriphCLKConfig>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001ee4:	f7ff ffa6 	bl	8001e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001ee8:	4b68      	ldr	r3, [pc, #416]	; (800208c <HAL_SD_MspInit+0x1fc>)
 8001eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eec:	4a67      	ldr	r2, [pc, #412]	; (800208c <HAL_SD_MspInit+0x1fc>)
 8001eee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ef2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef4:	4b65      	ldr	r3, [pc, #404]	; (800208c <HAL_SD_MspInit+0x1fc>)
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f00:	4b62      	ldr	r3, [pc, #392]	; (800208c <HAL_SD_MspInit+0x1fc>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	4a61      	ldr	r2, [pc, #388]	; (800208c <HAL_SD_MspInit+0x1fc>)
 8001f06:	f043 0304 	orr.w	r3, r3, #4
 8001f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0c:	4b5f      	ldr	r3, [pc, #380]	; (800208c <HAL_SD_MspInit+0x1fc>)
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f18:	4b5c      	ldr	r3, [pc, #368]	; (800208c <HAL_SD_MspInit+0x1fc>)
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	4a5b      	ldr	r2, [pc, #364]	; (800208c <HAL_SD_MspInit+0x1fc>)
 8001f1e:	f043 0308 	orr.w	r3, r3, #8
 8001f22:	6313      	str	r3, [r2, #48]	; 0x30
 8001f24:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_SD_MspInit+0x1fc>)
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001f30:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f44:	2303      	movs	r3, #3
 8001f46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f4a:	230c      	movs	r3, #12
 8001f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f54:	4619      	mov	r1, r3
 8001f56:	484e      	ldr	r0, [pc, #312]	; (8002090 <HAL_SD_MspInit+0x200>)
 8001f58:	f001 f8d8 	bl	800310c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f74:	230c      	movs	r3, #12
 8001f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4844      	ldr	r0, [pc, #272]	; (8002094 <HAL_SD_MspInit+0x204>)
 8001f82:	f001 f8c3 	bl	800310c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001f86:	4b44      	ldr	r3, [pc, #272]	; (8002098 <HAL_SD_MspInit+0x208>)
 8001f88:	4a44      	ldr	r2, [pc, #272]	; (800209c <HAL_SD_MspInit+0x20c>)
 8001f8a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001f8c:	4b42      	ldr	r3, [pc, #264]	; (8002098 <HAL_SD_MspInit+0x208>)
 8001f8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f92:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f94:	4b40      	ldr	r3, [pc, #256]	; (8002098 <HAL_SD_MspInit+0x208>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f9a:	4b3f      	ldr	r3, [pc, #252]	; (8002098 <HAL_SD_MspInit+0x208>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fa0:	4b3d      	ldr	r3, [pc, #244]	; (8002098 <HAL_SD_MspInit+0x208>)
 8001fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fa6:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fa8:	4b3b      	ldr	r3, [pc, #236]	; (8002098 <HAL_SD_MspInit+0x208>)
 8001faa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fae:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fb0:	4b39      	ldr	r3, [pc, #228]	; (8002098 <HAL_SD_MspInit+0x208>)
 8001fb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fb6:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001fb8:	4b37      	ldr	r3, [pc, #220]	; (8002098 <HAL_SD_MspInit+0x208>)
 8001fba:	2220      	movs	r2, #32
 8001fbc:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fbe:	4b36      	ldr	r3, [pc, #216]	; (8002098 <HAL_SD_MspInit+0x208>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001fc4:	4b34      	ldr	r3, [pc, #208]	; (8002098 <HAL_SD_MspInit+0x208>)
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001fca:	4b33      	ldr	r3, [pc, #204]	; (8002098 <HAL_SD_MspInit+0x208>)
 8001fcc:	2203      	movs	r2, #3
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001fd0:	4b31      	ldr	r3, [pc, #196]	; (8002098 <HAL_SD_MspInit+0x208>)
 8001fd2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001fd6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001fd8:	4b2f      	ldr	r3, [pc, #188]	; (8002098 <HAL_SD_MspInit+0x208>)
 8001fda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001fe0:	482d      	ldr	r0, [pc, #180]	; (8002098 <HAL_SD_MspInit+0x208>)
 8001fe2:	f000 fc7d 	bl	80028e0 <HAL_DMA_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001fec:	f7ff ff22 	bl	8001e34 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a29      	ldr	r2, [pc, #164]	; (8002098 <HAL_SD_MspInit+0x208>)
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ff6:	4a28      	ldr	r2, [pc, #160]	; (8002098 <HAL_SD_MspInit+0x208>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001ffc:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <HAL_SD_MspInit+0x210>)
 8001ffe:	4a29      	ldr	r2, [pc, #164]	; (80020a4 <HAL_SD_MspInit+0x214>)
 8002000:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8002002:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <HAL_SD_MspInit+0x210>)
 8002004:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002008:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800200a:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <HAL_SD_MspInit+0x210>)
 800200c:	2240      	movs	r2, #64	; 0x40
 800200e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002010:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <HAL_SD_MspInit+0x210>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002016:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <HAL_SD_MspInit+0x210>)
 8002018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800201c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800201e:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <HAL_SD_MspInit+0x210>)
 8002020:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002024:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002026:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_SD_MspInit+0x210>)
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800202c:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <HAL_SD_MspInit+0x210>)
 800202e:	2220      	movs	r2, #32
 8002030:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002032:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <HAL_SD_MspInit+0x210>)
 8002034:	2200      	movs	r2, #0
 8002036:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_SD_MspInit+0x210>)
 800203a:	2204      	movs	r2, #4
 800203c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800203e:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_SD_MspInit+0x210>)
 8002040:	2203      	movs	r2, #3
 8002042:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_SD_MspInit+0x210>)
 8002046:	2200      	movs	r2, #0
 8002048:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_SD_MspInit+0x210>)
 800204c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002050:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8002052:	4813      	ldr	r0, [pc, #76]	; (80020a0 <HAL_SD_MspInit+0x210>)
 8002054:	f000 fc44 	bl	80028e0 <HAL_DMA_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 800205e:	f7ff fee9 	bl	8001e34 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <HAL_SD_MspInit+0x210>)
 8002066:	63da      	str	r2, [r3, #60]	; 0x3c
 8002068:	4a0d      	ldr	r2, [pc, #52]	; (80020a0 <HAL_SD_MspInit+0x210>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 8, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2108      	movs	r1, #8
 8002072:	2031      	movs	r0, #49	; 0x31
 8002074:	f000 fbfd 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002078:	2031      	movs	r0, #49	; 0x31
 800207a:	f000 fc16 	bl	80028aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800207e:	bf00      	nop
 8002080:	37b0      	adds	r7, #176	; 0xb0
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40012c00 	.word	0x40012c00
 800208c:	40023800 	.word	0x40023800
 8002090:	40020800 	.word	0x40020800
 8002094:	40020c00 	.word	0x40020c00
 8002098:	200007c4 	.word	0x200007c4
 800209c:	40026458 	.word	0x40026458
 80020a0:	20000824 	.word	0x20000824
 80020a4:	400264a0 	.word	0x400264a0

080020a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <HAL_TIM_Base_MspInit+0x38>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d10b      	bne.n	80020d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <HAL_TIM_Base_MspInit+0x3c>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4a09      	ldr	r2, [pc, #36]	; (80020e4 <HAL_TIM_Base_MspInit+0x3c>)
 80020c0:	f043 0308 	orr.w	r3, r3, #8
 80020c4:	6413      	str	r3, [r2, #64]	; 0x40
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <HAL_TIM_Base_MspInit+0x3c>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40000c00 	.word	0x40000c00
 80020e4:	40023800 	.word	0x40023800

080020e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b0aa      	sub	sp, #168	; 0xa8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002100:	f107 0310 	add.w	r3, r7, #16
 8002104:	2284      	movs	r2, #132	; 0x84
 8002106:	2100      	movs	r1, #0
 8002108:	4618      	mov	r0, r3
 800210a:	f014 fc69 	bl	80169e0 <memset>
  if(huart->Instance==USART1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a54      	ldr	r2, [pc, #336]	; (8002264 <HAL_UART_MspInit+0x17c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	f040 80a0 	bne.w	800225a <HAL_UART_MspInit+0x172>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800211a:	2340      	movs	r3, #64	; 0x40
 800211c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800211e:	2300      	movs	r3, #0
 8002120:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002122:	f107 0310 	add.w	r3, r7, #16
 8002126:	4618      	mov	r0, r3
 8002128:	f001 fee6 	bl	8003ef8 <HAL_RCCEx_PeriphCLKConfig>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002132:	f7ff fe7f 	bl	8001e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002136:	4b4c      	ldr	r3, [pc, #304]	; (8002268 <HAL_UART_MspInit+0x180>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a4b      	ldr	r2, [pc, #300]	; (8002268 <HAL_UART_MspInit+0x180>)
 800213c:	f043 0310 	orr.w	r3, r3, #16
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b49      	ldr	r3, [pc, #292]	; (8002268 <HAL_UART_MspInit+0x180>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	4b46      	ldr	r3, [pc, #280]	; (8002268 <HAL_UART_MspInit+0x180>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a45      	ldr	r2, [pc, #276]	; (8002268 <HAL_UART_MspInit+0x180>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b43      	ldr	r3, [pc, #268]	; (8002268 <HAL_UART_MspInit+0x180>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002166:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800216a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002174:	2301      	movs	r3, #1
 8002176:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217a:	2303      	movs	r3, #3
 800217c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002180:	2307      	movs	r3, #7
 8002182:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800218a:	4619      	mov	r1, r3
 800218c:	4837      	ldr	r0, [pc, #220]	; (800226c <HAL_UART_MspInit+0x184>)
 800218e:	f000 ffbd 	bl	800310c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002192:	4b37      	ldr	r3, [pc, #220]	; (8002270 <HAL_UART_MspInit+0x188>)
 8002194:	4a37      	ldr	r2, [pc, #220]	; (8002274 <HAL_UART_MspInit+0x18c>)
 8002196:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002198:	4b35      	ldr	r3, [pc, #212]	; (8002270 <HAL_UART_MspInit+0x188>)
 800219a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800219e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021a0:	4b33      	ldr	r3, [pc, #204]	; (8002270 <HAL_UART_MspInit+0x188>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a6:	4b32      	ldr	r3, [pc, #200]	; (8002270 <HAL_UART_MspInit+0x188>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021ac:	4b30      	ldr	r3, [pc, #192]	; (8002270 <HAL_UART_MspInit+0x188>)
 80021ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021b4:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <HAL_UART_MspInit+0x188>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ba:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <HAL_UART_MspInit+0x188>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80021c0:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_UART_MspInit+0x188>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021c6:	4b2a      	ldr	r3, [pc, #168]	; (8002270 <HAL_UART_MspInit+0x188>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021cc:	4b28      	ldr	r3, [pc, #160]	; (8002270 <HAL_UART_MspInit+0x188>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80021d2:	4827      	ldr	r0, [pc, #156]	; (8002270 <HAL_UART_MspInit+0x188>)
 80021d4:	f000 fb84 	bl	80028e0 <HAL_DMA_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80021de:	f7ff fe29 	bl	8001e34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a22      	ldr	r2, [pc, #136]	; (8002270 <HAL_UART_MspInit+0x188>)
 80021e6:	671a      	str	r2, [r3, #112]	; 0x70
 80021e8:	4a21      	ldr	r2, [pc, #132]	; (8002270 <HAL_UART_MspInit+0x188>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <HAL_UART_MspInit+0x190>)
 80021f0:	4a22      	ldr	r2, [pc, #136]	; (800227c <HAL_UART_MspInit+0x194>)
 80021f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80021f4:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_UART_MspInit+0x190>)
 80021f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021fc:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <HAL_UART_MspInit+0x190>)
 80021fe:	2240      	movs	r2, #64	; 0x40
 8002200:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002202:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <HAL_UART_MspInit+0x190>)
 8002204:	2200      	movs	r2, #0
 8002206:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_UART_MspInit+0x190>)
 800220a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800220e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002210:	4b19      	ldr	r3, [pc, #100]	; (8002278 <HAL_UART_MspInit+0x190>)
 8002212:	2200      	movs	r2, #0
 8002214:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002216:	4b18      	ldr	r3, [pc, #96]	; (8002278 <HAL_UART_MspInit+0x190>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <HAL_UART_MspInit+0x190>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <HAL_UART_MspInit+0x190>)
 8002224:	2200      	movs	r2, #0
 8002226:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002228:	4b13      	ldr	r3, [pc, #76]	; (8002278 <HAL_UART_MspInit+0x190>)
 800222a:	2200      	movs	r2, #0
 800222c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800222e:	4812      	ldr	r0, [pc, #72]	; (8002278 <HAL_UART_MspInit+0x190>)
 8002230:	f000 fb56 	bl	80028e0 <HAL_DMA_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 800223a:	f7ff fdfb 	bl	8001e34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a0d      	ldr	r2, [pc, #52]	; (8002278 <HAL_UART_MspInit+0x190>)
 8002242:	66da      	str	r2, [r3, #108]	; 0x6c
 8002244:	4a0c      	ldr	r2, [pc, #48]	; (8002278 <HAL_UART_MspInit+0x190>)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 12, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	210c      	movs	r1, #12
 800224e:	2025      	movs	r0, #37	; 0x25
 8002250:	f000 fb0f 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002254:	2025      	movs	r0, #37	; 0x25
 8002256:	f000 fb28 	bl	80028aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800225a:	bf00      	nop
 800225c:	37a8      	adds	r7, #168	; 0xa8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40011000 	.word	0x40011000
 8002268:	40023800 	.word	0x40023800
 800226c:	40020000 	.word	0x40020000
 8002270:	20000954 	.word	0x20000954
 8002274:	40026440 	.word	0x40026440
 8002278:	200009b4 	.word	0x200009b4
 800227c:	400264b8 	.word	0x400264b8

08002280 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_a;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b0aa      	sub	sp, #168	; 0xa8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002288:	f107 0310 	add.w	r3, r7, #16
 800228c:	2284      	movs	r2, #132	; 0x84
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f014 fba5 	bl	80169e0 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a47      	ldr	r2, [pc, #284]	; (80023b8 <HAL_SAI_MspInit+0x138>)
 800229c:	4293      	cmp	r3, r2
 800229e:	f040 8086 	bne.w	80023ae <HAL_SAI_MspInit+0x12e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80022a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022a6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 316;
 80022a8:	f44f 739e 	mov.w	r3, #316	; 0x13c
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80022ae:	2302      	movs	r3, #2
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 7;
 80022b2:	2307      	movs	r3, #7
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80022b6:	2300      	movs	r3, #0
 80022b8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80022ba:	2301      	movs	r3, #1
 80022bc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80022be:	2300      	movs	r3, #0
 80022c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80022c2:	2300      	movs	r3, #0
 80022c4:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c6:	f107 0310 	add.w	r3, r7, #16
 80022ca:	4618      	mov	r0, r3
 80022cc:	f001 fe14 	bl	8003ef8 <HAL_RCCEx_PeriphCLKConfig>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_SAI_MspInit+0x5a>
    {
      Error_Handler();
 80022d6:	f7ff fdad 	bl	8001e34 <Error_Handler>
    }

    if (SAI2_client == 0)
 80022da:	4b38      	ldr	r3, [pc, #224]	; (80023bc <HAL_SAI_MspInit+0x13c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d113      	bne.n	800230a <HAL_SAI_MspInit+0x8a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80022e2:	4b37      	ldr	r3, [pc, #220]	; (80023c0 <HAL_SAI_MspInit+0x140>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	4a36      	ldr	r2, [pc, #216]	; (80023c0 <HAL_SAI_MspInit+0x140>)
 80022e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44
 80022ee:	4b34      	ldr	r3, [pc, #208]	; (80023c0 <HAL_SAI_MspInit+0x140>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	2105      	movs	r1, #5
 80022fe:	205b      	movs	r0, #91	; 0x5b
 8002300:	f000 fab7 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8002304:	205b      	movs	r0, #91	; 0x5b
 8002306:	f000 fad0 	bl	80028aa <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 800230a:	4b2c      	ldr	r3, [pc, #176]	; (80023bc <HAL_SAI_MspInit+0x13c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	4a2a      	ldr	r2, [pc, #168]	; (80023bc <HAL_SAI_MspInit+0x13c>)
 8002312:	6013      	str	r3, [r2, #0]
    /**SAI2_A_Block_A GPIO Configuration
    PD11     ------> SAI2_SD_A
    PD12     ------> SAI2_FS_A
    PD13     ------> SAI2_SCK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002314:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002318:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002322:	2301      	movs	r3, #1
 8002324:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002328:	2303      	movs	r3, #3
 800232a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 800232e:	2308      	movs	r3, #8
 8002330:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002334:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002338:	4619      	mov	r1, r3
 800233a:	4822      	ldr	r0, [pc, #136]	; (80023c4 <HAL_SAI_MspInit+0x144>)
 800233c:	f000 fee6 	bl	800310c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream1;
 8002340:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <HAL_SAI_MspInit+0x148>)
 8002342:	4a22      	ldr	r2, [pc, #136]	; (80023cc <HAL_SAI_MspInit+0x14c>)
 8002344:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_0;
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_SAI_MspInit+0x148>)
 8002348:	2200      	movs	r2, #0
 800234a:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800234c:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <HAL_SAI_MspInit+0x148>)
 800234e:	2240      	movs	r2, #64	; 0x40
 8002350:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002352:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_SAI_MspInit+0x148>)
 8002354:	2200      	movs	r2, #0
 8002356:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8002358:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_SAI_MspInit+0x148>)
 800235a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800235e:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_SAI_MspInit+0x148>)
 8002362:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002366:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002368:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_SAI_MspInit+0x148>)
 800236a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800236e:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8002370:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <HAL_SAI_MspInit+0x148>)
 8002372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002376:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_SAI_MspInit+0x148>)
 800237a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800237e:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <HAL_SAI_MspInit+0x148>)
 8002382:	2200      	movs	r2, #0
 8002384:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8002386:	4810      	ldr	r0, [pc, #64]	; (80023c8 <HAL_SAI_MspInit+0x148>)
 8002388:	f000 faaa 	bl	80028e0 <HAL_DMA_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_SAI_MspInit+0x116>
    {
      Error_Handler();
 8002392:	f7ff fd4f 	bl	8001e34 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <HAL_SAI_MspInit+0x148>)
 800239a:	671a      	str	r2, [r3, #112]	; 0x70
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <HAL_SAI_MspInit+0x148>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a08      	ldr	r2, [pc, #32]	; (80023c8 <HAL_SAI_MspInit+0x148>)
 80023a6:	66da      	str	r2, [r3, #108]	; 0x6c
 80023a8:	4a07      	ldr	r2, [pc, #28]	; (80023c8 <HAL_SAI_MspInit+0x148>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6393      	str	r3, [r2, #56]	; 0x38

    }
}
 80023ae:	bf00      	nop
 80023b0:	37a8      	adds	r7, #168	; 0xa8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40015c04 	.word	0x40015c04
 80023bc:	20037080 	.word	0x20037080
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40020c00 	.word	0x40020c00
 80023c8:	200006e0 	.word	0x200006e0
 80023cc:	40026428 	.word	0x40026428

080023d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <NMI_Handler+0x4>

080023d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023da:	e7fe      	b.n	80023da <HardFault_Handler+0x4>

080023dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <MemManage_Handler+0x4>

080023e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e6:	e7fe      	b.n	80023e6 <BusFault_Handler+0x4>

080023e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ec:	e7fe      	b.n	80023ec <UsageFault_Handler+0x4>

080023ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002400:	f000 f918 	bl	8002634 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002404:	f00c fec4 	bl	800f190 <xTaskGetSchedulerState>
 8002408:	4603      	mov	r3, r0
 800240a:	2b01      	cmp	r3, #1
 800240c:	d001      	beq.n	8002412 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800240e:	f00d fdab 	bl	800ff68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <USART1_IRQHandler+0x10>)
 800241e:	f004 fe19 	bl	8007054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200008d0 	.word	0x200008d0

0800242c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <SDMMC1_IRQHandler+0x10>)
 8002432:	f003 fa2d 	bl	8005890 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000740 	.word	0x20000740

08002440 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <DMA2_Stream1_IRQHandler+0x10>)
 8002446:	f000 fbeb 	bl	8002c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200006e0 	.word	0x200006e0

08002454 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <DMA2_Stream2_IRQHandler+0x10>)
 800245a:	f000 fbe1 	bl	8002c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000954 	.word	0x20000954

08002468 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <DMA2_Stream3_IRQHandler+0x10>)
 800246e:	f000 fbd7 	bl	8002c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200007c4 	.word	0x200007c4

0800247c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <DMA2_Stream6_IRQHandler+0x10>)
 8002482:	f000 fbcd 	bl	8002c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000824 	.word	0x20000824

08002490 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <DMA2_Stream7_IRQHandler+0x10>)
 8002496:	f000 fbc3 	bl	8002c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200009b4 	.word	0x200009b4

080024a4 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <SAI2_IRQHandler+0x10>)
 80024aa:	f002 fd09 	bl	8004ec0 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2000065c 	.word	0x2000065c

080024b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c0:	4a14      	ldr	r2, [pc, #80]	; (8002514 <_sbrk+0x5c>)
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <_sbrk+0x60>)
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024cc:	4b13      	ldr	r3, [pc, #76]	; (800251c <_sbrk+0x64>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <_sbrk+0x64>)
 80024d6:	4a12      	ldr	r2, [pc, #72]	; (8002520 <_sbrk+0x68>)
 80024d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <_sbrk+0x64>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d207      	bcs.n	80024f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024e8:	f014 fa28 	bl	801693c <__errno>
 80024ec:	4603      	mov	r3, r0
 80024ee:	220c      	movs	r2, #12
 80024f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295
 80024f6:	e009      	b.n	800250c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <_sbrk+0x64>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024fe:	4b07      	ldr	r3, [pc, #28]	; (800251c <_sbrk+0x64>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	4a05      	ldr	r2, [pc, #20]	; (800251c <_sbrk+0x64>)
 8002508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800250a:	68fb      	ldr	r3, [r7, #12]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20050000 	.word	0x20050000
 8002518:	00000a00 	.word	0x00000a00
 800251c:	20037084 	.word	0x20037084
 8002520:	20040610 	.word	0x20040610

08002524 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <SystemInit+0x20>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	4a05      	ldr	r2, [pc, #20]	; (8002544 <SystemInit+0x20>)
 8002530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002580 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800254c:	480d      	ldr	r0, [pc, #52]	; (8002584 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800254e:	490e      	ldr	r1, [pc, #56]	; (8002588 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002550:	4a0e      	ldr	r2, [pc, #56]	; (800258c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002554:	e002      	b.n	800255c <LoopCopyDataInit>

08002556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800255a:	3304      	adds	r3, #4

0800255c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800255c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002560:	d3f9      	bcc.n	8002556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002562:	4a0b      	ldr	r2, [pc, #44]	; (8002590 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002564:	4c0b      	ldr	r4, [pc, #44]	; (8002594 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002568:	e001      	b.n	800256e <LoopFillZerobss>

0800256a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800256a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800256c:	3204      	adds	r2, #4

0800256e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002570:	d3fb      	bcc.n	800256a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002572:	f7ff ffd7 	bl	8002524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002576:	f014 f9e7 	bl	8016948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800257a:	f7ff fa0b 	bl	8001994 <main>
  bx  lr    
 800257e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002580:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002588:	2000062c 	.word	0x2000062c
  ldr r2, =_sidata
 800258c:	0801ac00 	.word	0x0801ac00
  ldr r2, =_sbss
 8002590:	20000640 	.word	0x20000640
  ldr r4, =_ebss
 8002594:	2004060c 	.word	0x2004060c

08002598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002598:	e7fe      	b.n	8002598 <ADC_IRQHandler>
	...

0800259c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_Init+0x34>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <HAL_Init+0x34>)
 80025a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025aa:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <HAL_Init+0x34>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a07      	ldr	r2, [pc, #28]	; (80025d0 <HAL_Init+0x34>)
 80025b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b8:	2003      	movs	r0, #3
 80025ba:	f000 f94f 	bl	800285c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025be:	200f      	movs	r0, #15
 80025c0:	f000 f808 	bl	80025d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025c4:	f7ff fc3c 	bl	8001e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023c00 	.word	0x40023c00

080025d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_InitTick+0x54>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_InitTick+0x58>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f967 	bl	80028c6 <HAL_SYSTICK_Config>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e00e      	b.n	8002620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b0f      	cmp	r3, #15
 8002606:	d80a      	bhi.n	800261e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002608:	2200      	movs	r2, #0
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	f04f 30ff 	mov.w	r0, #4294967295
 8002610:	f000 f92f 	bl	8002872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002614:	4a06      	ldr	r2, [pc, #24]	; (8002630 <HAL_InitTick+0x5c>)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e000      	b.n	8002620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
}
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	200005b8 	.word	0x200005b8
 800262c:	200005c0 	.word	0x200005c0
 8002630:	200005bc 	.word	0x200005bc

08002634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_IncTick+0x20>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_IncTick+0x24>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4413      	add	r3, r2
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <HAL_IncTick+0x24>)
 8002646:	6013      	str	r3, [r2, #0]
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	200005c0 	.word	0x200005c0
 8002658:	20037088 	.word	0x20037088

0800265c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return uwTick;
 8002660:	4b03      	ldr	r3, [pc, #12]	; (8002670 <HAL_GetTick+0x14>)
 8002662:	681b      	ldr	r3, [r3, #0]
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20037088 	.word	0x20037088

08002674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800267c:	f7ff ffee 	bl	800265c <HAL_GetTick>
 8002680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d005      	beq.n	800269a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <HAL_Delay+0x44>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4413      	add	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800269a:	bf00      	nop
 800269c:	f7ff ffde 	bl	800265c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d8f7      	bhi.n	800269c <HAL_Delay+0x28>
  {
  }
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200005c0 	.word	0x200005c0

080026bc <__NVIC_SetPriorityGrouping>:
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <__NVIC_SetPriorityGrouping+0x40>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d8:	4013      	ands	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ea:	4a04      	ldr	r2, [pc, #16]	; (80026fc <__NVIC_SetPriorityGrouping+0x40>)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	60d3      	str	r3, [r2, #12]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000ed00 	.word	0xe000ed00
 8002700:	05fa0000 	.word	0x05fa0000

08002704 <__NVIC_GetPriorityGrouping>:
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <__NVIC_GetPriorityGrouping+0x18>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	f003 0307 	and.w	r3, r3, #7
}
 8002712:	4618      	mov	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <__NVIC_EnableIRQ>:
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	2b00      	cmp	r3, #0
 8002730:	db0b      	blt.n	800274a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	f003 021f 	and.w	r2, r3, #31
 8002738:	4907      	ldr	r1, [pc, #28]	; (8002758 <__NVIC_EnableIRQ+0x38>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	2001      	movs	r0, #1
 8002742:	fa00 f202 	lsl.w	r2, r0, r2
 8002746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000e100 	.word	0xe000e100

0800275c <__NVIC_SetPriority>:
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	6039      	str	r1, [r7, #0]
 8002766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276c:	2b00      	cmp	r3, #0
 800276e:	db0a      	blt.n	8002786 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	490c      	ldr	r1, [pc, #48]	; (80027a8 <__NVIC_SetPriority+0x4c>)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	0112      	lsls	r2, r2, #4
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	440b      	add	r3, r1
 8002780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002784:	e00a      	b.n	800279c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4908      	ldr	r1, [pc, #32]	; (80027ac <__NVIC_SetPriority+0x50>)
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	3b04      	subs	r3, #4
 8002794:	0112      	lsls	r2, r2, #4
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	440b      	add	r3, r1
 800279a:	761a      	strb	r2, [r3, #24]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000e100 	.word	0xe000e100
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <NVIC_EncodePriority>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f1c3 0307 	rsb	r3, r3, #7
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	bf28      	it	cs
 80027ce:	2304      	movcs	r3, #4
 80027d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3304      	adds	r3, #4
 80027d6:	2b06      	cmp	r3, #6
 80027d8:	d902      	bls.n	80027e0 <NVIC_EncodePriority+0x30>
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3b03      	subs	r3, #3
 80027de:	e000      	b.n	80027e2 <NVIC_EncodePriority+0x32>
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	401a      	ands	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f8:	f04f 31ff 	mov.w	r1, #4294967295
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	43d9      	mvns	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	4313      	orrs	r3, r2
}
 800280a:	4618      	mov	r0, r3
 800280c:	3724      	adds	r7, #36	; 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002828:	d301      	bcc.n	800282e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800282a:	2301      	movs	r3, #1
 800282c:	e00f      	b.n	800284e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <SysTick_Config+0x40>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002836:	210f      	movs	r1, #15
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	f7ff ff8e 	bl	800275c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <SysTick_Config+0x40>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <SysTick_Config+0x40>)
 8002848:	2207      	movs	r2, #7
 800284a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	e000e010 	.word	0xe000e010

0800285c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff29 	bl	80026bc <__NVIC_SetPriorityGrouping>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002884:	f7ff ff3e 	bl	8002704 <__NVIC_GetPriorityGrouping>
 8002888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	6978      	ldr	r0, [r7, #20]
 8002890:	f7ff ff8e 	bl	80027b0 <NVIC_EncodePriority>
 8002894:	4602      	mov	r2, r0
 8002896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff5d 	bl	800275c <__NVIC_SetPriority>
}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff31 	bl	8002720 <__NVIC_EnableIRQ>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ffa2 	bl	8002818 <SysTick_Config>
 80028d4:	4603      	mov	r3, r0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028ec:	f7ff feb6 	bl	800265c <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e099      	b.n	8002a30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0201 	bic.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800291c:	e00f      	b.n	800293e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800291e:	f7ff fe9d 	bl	800265c <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b05      	cmp	r3, #5
 800292a:	d908      	bls.n	800293e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2220      	movs	r2, #32
 8002930:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2203      	movs	r2, #3
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e078      	b.n	8002a30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1e8      	bne.n	800291e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	4b38      	ldr	r3, [pc, #224]	; (8002a38 <HAL_DMA_Init+0x158>)
 8002958:	4013      	ands	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800296a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002976:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002982:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4313      	orrs	r3, r2
 800298e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	2b04      	cmp	r3, #4
 8002996:	d107      	bne.n	80029a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	4313      	orrs	r3, r2
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f023 0307 	bic.w	r3, r3, #7
 80029be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d117      	bne.n	8002a02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00e      	beq.n	8002a02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fb15 	bl	8003014 <DMA_CheckFifoParam>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2240      	movs	r2, #64	; 0x40
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029fe:	2301      	movs	r3, #1
 8002a00:	e016      	b.n	8002a30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 facc 	bl	8002fa8 <DMA_CalcBaseAndBitshift>
 8002a10:	4603      	mov	r3, r0
 8002a12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a18:	223f      	movs	r2, #63	; 0x3f
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	f010803f 	.word	0xf010803f

08002a3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_DMA_Start_IT+0x26>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e048      	b.n	8002af4 <HAL_DMA_Start_IT+0xb8>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d137      	bne.n	8002ae6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fa5e 	bl	8002f4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a94:	223f      	movs	r2, #63	; 0x3f
 8002a96:	409a      	lsls	r2, r3
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0216 	orr.w	r2, r2, #22
 8002aaa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002aba:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d007      	beq.n	8002ad4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0208 	orr.w	r2, r2, #8
 8002ad2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e005      	b.n	8002af2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
 8002af0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b0a:	f7ff fda7 	bl	800265c <HAL_GetTick>
 8002b0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d008      	beq.n	8002b2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2280      	movs	r2, #128	; 0x80
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e052      	b.n	8002bd4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0216 	bic.w	r2, r2, #22
 8002b3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d103      	bne.n	8002b5e <HAL_DMA_Abort+0x62>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0208 	bic.w	r2, r2, #8
 8002b6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b7e:	e013      	b.n	8002ba8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b80:	f7ff fd6c 	bl	800265c <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b05      	cmp	r3, #5
 8002b8c:	d90c      	bls.n	8002ba8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2203      	movs	r2, #3
 8002b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e015      	b.n	8002bd4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1e4      	bne.n	8002b80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bba:	223f      	movs	r2, #63	; 0x3f
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d004      	beq.n	8002bfa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2280      	movs	r2, #128	; 0x80
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00c      	b.n	8002c14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2205      	movs	r2, #5
 8002bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0201 	bic.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002c2c:	4b8e      	ldr	r3, [pc, #568]	; (8002e68 <HAL_DMA_IRQHandler+0x248>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a8e      	ldr	r2, [pc, #568]	; (8002e6c <HAL_DMA_IRQHandler+0x24c>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0a9b      	lsrs	r3, r3, #10
 8002c38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	2208      	movs	r2, #8
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01a      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d013      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0204 	bic.w	r2, r2, #4
 8002c72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c78:	2208      	movs	r2, #8
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c84:	f043 0201 	orr.w	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c90:	2201      	movs	r2, #1
 8002c92:	409a      	lsls	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d012      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00b      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	2201      	movs	r2, #1
 8002cb0:	409a      	lsls	r2, r3
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cba:	f043 0202 	orr.w	r2, r3, #2
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d012      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00b      	beq.n	8002cf8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf0:	f043 0204 	orr.w	r2, r3, #4
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfc:	2210      	movs	r2, #16
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d043      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d03c      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1a:	2210      	movs	r2, #16
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d018      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d108      	bne.n	8002d50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d024      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	4798      	blx	r3
 8002d4e:	e01f      	b.n	8002d90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01b      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4798      	blx	r3
 8002d60:	e016      	b.n	8002d90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d107      	bne.n	8002d80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0208 	bic.w	r2, r2, #8
 8002d7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	2220      	movs	r2, #32
 8002d96:	409a      	lsls	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 808f 	beq.w	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 8087 	beq.w	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db6:	2220      	movs	r2, #32
 8002db8:	409a      	lsls	r2, r3
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	d136      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0216 	bic.w	r2, r2, #22
 8002dd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002de8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <HAL_DMA_IRQHandler+0x1da>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0208 	bic.w	r2, r2, #8
 8002e08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0e:	223f      	movs	r2, #63	; 0x3f
 8002e10:	409a      	lsls	r2, r3
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d07e      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
        }
        return;
 8002e36:	e079      	b.n	8002f2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d01d      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10d      	bne.n	8002e70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d031      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4798      	blx	r3
 8002e64:	e02c      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
 8002e66:	bf00      	nop
 8002e68:	200005b8 	.word	0x200005b8
 8002e6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d023      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
 8002e80:	e01e      	b.n	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10f      	bne.n	8002eb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0210 	bic.w	r2, r2, #16
 8002e9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d032      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d022      	beq.n	8002f1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2205      	movs	r2, #5
 8002ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d307      	bcc.n	8002f08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f2      	bne.n	8002eec <HAL_DMA_IRQHandler+0x2cc>
 8002f06:	e000      	b.n	8002f0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
 8002f2a:	e000      	b.n	8002f2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f2c:	bf00      	nop
    }
  }
}
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	d108      	bne.n	8002f8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f8a:	e007      	b.n	8002f9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	60da      	str	r2, [r3, #12]
}
 8002f9c:	bf00      	nop
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	3b10      	subs	r3, #16
 8002fb8:	4a13      	ldr	r2, [pc, #76]	; (8003008 <DMA_CalcBaseAndBitshift+0x60>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fc2:	4a12      	ldr	r2, [pc, #72]	; (800300c <DMA_CalcBaseAndBitshift+0x64>)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d908      	bls.n	8002fe8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <DMA_CalcBaseAndBitshift+0x68>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	1d1a      	adds	r2, r3, #4
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	659a      	str	r2, [r3, #88]	; 0x58
 8002fe6:	e006      	b.n	8002ff6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	4b08      	ldr	r3, [pc, #32]	; (8003010 <DMA_CalcBaseAndBitshift+0x68>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	aaaaaaab 	.word	0xaaaaaaab
 800300c:	08017390 	.word	0x08017390
 8003010:	fffffc00 	.word	0xfffffc00

08003014 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d11f      	bne.n	800306e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b03      	cmp	r3, #3
 8003032:	d856      	bhi.n	80030e2 <DMA_CheckFifoParam+0xce>
 8003034:	a201      	add	r2, pc, #4	; (adr r2, 800303c <DMA_CheckFifoParam+0x28>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	0800304d 	.word	0x0800304d
 8003040:	0800305f 	.word	0x0800305f
 8003044:	0800304d 	.word	0x0800304d
 8003048:	080030e3 	.word	0x080030e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d046      	beq.n	80030e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800305c:	e043      	b.n	80030e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003066:	d140      	bne.n	80030ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306c:	e03d      	b.n	80030ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003076:	d121      	bne.n	80030bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d837      	bhi.n	80030ee <DMA_CheckFifoParam+0xda>
 800307e:	a201      	add	r2, pc, #4	; (adr r2, 8003084 <DMA_CheckFifoParam+0x70>)
 8003080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003084:	08003095 	.word	0x08003095
 8003088:	0800309b 	.word	0x0800309b
 800308c:	08003095 	.word	0x08003095
 8003090:	080030ad 	.word	0x080030ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      break;
 8003098:	e030      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d025      	beq.n	80030f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030aa:	e022      	b.n	80030f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030b4:	d11f      	bne.n	80030f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030ba:	e01c      	b.n	80030f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d903      	bls.n	80030ca <DMA_CheckFifoParam+0xb6>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d003      	beq.n	80030d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030c8:	e018      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
      break;
 80030ce:	e015      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00e      	beq.n	80030fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
      break;
 80030e0:	e00b      	b.n	80030fa <DMA_CheckFifoParam+0xe6>
      break;
 80030e2:	bf00      	nop
 80030e4:	e00a      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      break;
 80030e6:	bf00      	nop
 80030e8:	e008      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      break;
 80030ea:	bf00      	nop
 80030ec:	e006      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      break;
 80030ee:	bf00      	nop
 80030f0:	e004      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      break;
 80030f2:	bf00      	nop
 80030f4:	e002      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      break;   
 80030f6:	bf00      	nop
 80030f8:	e000      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
      break;
 80030fa:	bf00      	nop
    }
  } 
  
  return status; 
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop

0800310c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	; 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003122:	2300      	movs	r3, #0
 8003124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	e175      	b.n	8003418 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800312c:	2201      	movs	r2, #1
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4013      	ands	r3, r2
 800313e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	429a      	cmp	r2, r3
 8003146:	f040 8164 	bne.w	8003412 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	2b01      	cmp	r3, #1
 8003154:	d005      	beq.n	8003162 <HAL_GPIO_Init+0x56>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d130      	bne.n	80031c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	2203      	movs	r2, #3
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003198:	2201      	movs	r2, #1
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	f003 0201 	and.w	r2, r3, #1
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0303 	and.w	r3, r3, #3
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d017      	beq.n	8003200 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	2203      	movs	r2, #3
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d123      	bne.n	8003254 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	08da      	lsrs	r2, r3, #3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3208      	adds	r2, #8
 8003214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	220f      	movs	r2, #15
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	08da      	lsrs	r2, r3, #3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3208      	adds	r2, #8
 800324e:	69b9      	ldr	r1, [r7, #24]
 8003250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	2203      	movs	r2, #3
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 0203 	and.w	r2, r3, #3
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80be 	beq.w	8003412 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003296:	4b66      	ldr	r3, [pc, #408]	; (8003430 <HAL_GPIO_Init+0x324>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	4a65      	ldr	r2, [pc, #404]	; (8003430 <HAL_GPIO_Init+0x324>)
 800329c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032a0:	6453      	str	r3, [r2, #68]	; 0x44
 80032a2:	4b63      	ldr	r3, [pc, #396]	; (8003430 <HAL_GPIO_Init+0x324>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80032ae:	4a61      	ldr	r2, [pc, #388]	; (8003434 <HAL_GPIO_Init+0x328>)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	089b      	lsrs	r3, r3, #2
 80032b4:	3302      	adds	r3, #2
 80032b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	220f      	movs	r2, #15
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a58      	ldr	r2, [pc, #352]	; (8003438 <HAL_GPIO_Init+0x32c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d037      	beq.n	800334a <HAL_GPIO_Init+0x23e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a57      	ldr	r2, [pc, #348]	; (800343c <HAL_GPIO_Init+0x330>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d031      	beq.n	8003346 <HAL_GPIO_Init+0x23a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a56      	ldr	r2, [pc, #344]	; (8003440 <HAL_GPIO_Init+0x334>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d02b      	beq.n	8003342 <HAL_GPIO_Init+0x236>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a55      	ldr	r2, [pc, #340]	; (8003444 <HAL_GPIO_Init+0x338>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d025      	beq.n	800333e <HAL_GPIO_Init+0x232>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a54      	ldr	r2, [pc, #336]	; (8003448 <HAL_GPIO_Init+0x33c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01f      	beq.n	800333a <HAL_GPIO_Init+0x22e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a53      	ldr	r2, [pc, #332]	; (800344c <HAL_GPIO_Init+0x340>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d019      	beq.n	8003336 <HAL_GPIO_Init+0x22a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a52      	ldr	r2, [pc, #328]	; (8003450 <HAL_GPIO_Init+0x344>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d013      	beq.n	8003332 <HAL_GPIO_Init+0x226>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a51      	ldr	r2, [pc, #324]	; (8003454 <HAL_GPIO_Init+0x348>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00d      	beq.n	800332e <HAL_GPIO_Init+0x222>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a50      	ldr	r2, [pc, #320]	; (8003458 <HAL_GPIO_Init+0x34c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d007      	beq.n	800332a <HAL_GPIO_Init+0x21e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a4f      	ldr	r2, [pc, #316]	; (800345c <HAL_GPIO_Init+0x350>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d101      	bne.n	8003326 <HAL_GPIO_Init+0x21a>
 8003322:	2309      	movs	r3, #9
 8003324:	e012      	b.n	800334c <HAL_GPIO_Init+0x240>
 8003326:	230a      	movs	r3, #10
 8003328:	e010      	b.n	800334c <HAL_GPIO_Init+0x240>
 800332a:	2308      	movs	r3, #8
 800332c:	e00e      	b.n	800334c <HAL_GPIO_Init+0x240>
 800332e:	2307      	movs	r3, #7
 8003330:	e00c      	b.n	800334c <HAL_GPIO_Init+0x240>
 8003332:	2306      	movs	r3, #6
 8003334:	e00a      	b.n	800334c <HAL_GPIO_Init+0x240>
 8003336:	2305      	movs	r3, #5
 8003338:	e008      	b.n	800334c <HAL_GPIO_Init+0x240>
 800333a:	2304      	movs	r3, #4
 800333c:	e006      	b.n	800334c <HAL_GPIO_Init+0x240>
 800333e:	2303      	movs	r3, #3
 8003340:	e004      	b.n	800334c <HAL_GPIO_Init+0x240>
 8003342:	2302      	movs	r3, #2
 8003344:	e002      	b.n	800334c <HAL_GPIO_Init+0x240>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_GPIO_Init+0x240>
 800334a:	2300      	movs	r3, #0
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	f002 0203 	and.w	r2, r2, #3
 8003352:	0092      	lsls	r2, r2, #2
 8003354:	4093      	lsls	r3, r2
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800335c:	4935      	ldr	r1, [pc, #212]	; (8003434 <HAL_GPIO_Init+0x328>)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	3302      	adds	r3, #2
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800336a:	4b3d      	ldr	r3, [pc, #244]	; (8003460 <HAL_GPIO_Init+0x354>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800338e:	4a34      	ldr	r2, [pc, #208]	; (8003460 <HAL_GPIO_Init+0x354>)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003394:	4b32      	ldr	r3, [pc, #200]	; (8003460 <HAL_GPIO_Init+0x354>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033b8:	4a29      	ldr	r2, [pc, #164]	; (8003460 <HAL_GPIO_Init+0x354>)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033be:	4b28      	ldr	r3, [pc, #160]	; (8003460 <HAL_GPIO_Init+0x354>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4013      	ands	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033e2:	4a1f      	ldr	r2, [pc, #124]	; (8003460 <HAL_GPIO_Init+0x354>)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033e8:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <HAL_GPIO_Init+0x354>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800340c:	4a14      	ldr	r2, [pc, #80]	; (8003460 <HAL_GPIO_Init+0x354>)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3301      	adds	r3, #1
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b0f      	cmp	r3, #15
 800341c:	f67f ae86 	bls.w	800312c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003420:	bf00      	nop
 8003422:	bf00      	nop
 8003424:	3724      	adds	r7, #36	; 0x24
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40023800 	.word	0x40023800
 8003434:	40013800 	.word	0x40013800
 8003438:	40020000 	.word	0x40020000
 800343c:	40020400 	.word	0x40020400
 8003440:	40020800 	.word	0x40020800
 8003444:	40020c00 	.word	0x40020c00
 8003448:	40021000 	.word	0x40021000
 800344c:	40021400 	.word	0x40021400
 8003450:	40021800 	.word	0x40021800
 8003454:	40021c00 	.word	0x40021c00
 8003458:	40022000 	.word	0x40022000
 800345c:	40022400 	.word	0x40022400
 8003460:	40013c00 	.word	0x40013c00

08003464 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	887b      	ldrh	r3, [r7, #2]
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
 8003480:	e001      	b.n	8003486 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003482:	2300      	movs	r3, #0
 8003484:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003486:	7bfb      	ldrb	r3, [r7, #15]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]
 80034a0:	4613      	mov	r3, r2
 80034a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034a4:	787b      	ldrb	r3, [r7, #1]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034aa:	887a      	ldrh	r2, [r7, #2]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034b0:	e003      	b.n	80034ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034b2:	887b      	ldrh	r3, [r7, #2]
 80034b4:	041a      	lsls	r2, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	619a      	str	r2, [r3, #24]
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80034d2:	4b23      	ldr	r3, [pc, #140]	; (8003560 <HAL_PWREx_EnableOverDrive+0x98>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a22      	ldr	r2, [pc, #136]	; (8003560 <HAL_PWREx_EnableOverDrive+0x98>)
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
 80034de:	4b20      	ldr	r3, [pc, #128]	; (8003560 <HAL_PWREx_EnableOverDrive+0x98>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80034ea:	4b1e      	ldr	r3, [pc, #120]	; (8003564 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1d      	ldr	r2, [pc, #116]	; (8003564 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034f6:	f7ff f8b1 	bl	800265c <HAL_GetTick>
 80034fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034fc:	e009      	b.n	8003512 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034fe:	f7ff f8ad 	bl	800265c <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800350c:	d901      	bls.n	8003512 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e022      	b.n	8003558 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003512:	4b14      	ldr	r3, [pc, #80]	; (8003564 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800351a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351e:	d1ee      	bne.n	80034fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003520:	4b10      	ldr	r3, [pc, #64]	; (8003564 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a0f      	ldr	r2, [pc, #60]	; (8003564 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800352c:	f7ff f896 	bl	800265c <HAL_GetTick>
 8003530:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003532:	e009      	b.n	8003548 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003534:	f7ff f892 	bl	800265c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003542:	d901      	bls.n	8003548 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e007      	b.n	8003558 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_PWREx_EnableOverDrive+0x9c>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003554:	d1ee      	bne.n	8003534 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40023800 	.word	0x40023800
 8003564:	40007000 	.word	0x40007000

08003568 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003570:	2300      	movs	r3, #0
 8003572:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e291      	b.n	8003aa2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8087 	beq.w	800369a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800358c:	4b96      	ldr	r3, [pc, #600]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b04      	cmp	r3, #4
 8003596:	d00c      	beq.n	80035b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003598:	4b93      	ldr	r3, [pc, #588]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 030c 	and.w	r3, r3, #12
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d112      	bne.n	80035ca <HAL_RCC_OscConfig+0x62>
 80035a4:	4b90      	ldr	r3, [pc, #576]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035b0:	d10b      	bne.n	80035ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b2:	4b8d      	ldr	r3, [pc, #564]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d06c      	beq.n	8003698 <HAL_RCC_OscConfig+0x130>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d168      	bne.n	8003698 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e26b      	b.n	8003aa2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_OscConfig+0x7a>
 80035d4:	4b84      	ldr	r3, [pc, #528]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a83      	ldr	r2, [pc, #524]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 80035da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	e02e      	b.n	8003640 <HAL_RCC_OscConfig+0xd8>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10c      	bne.n	8003604 <HAL_RCC_OscConfig+0x9c>
 80035ea:	4b7f      	ldr	r3, [pc, #508]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a7e      	ldr	r2, [pc, #504]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 80035f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	4b7c      	ldr	r3, [pc, #496]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a7b      	ldr	r2, [pc, #492]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 80035fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	e01d      	b.n	8003640 <HAL_RCC_OscConfig+0xd8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800360c:	d10c      	bne.n	8003628 <HAL_RCC_OscConfig+0xc0>
 800360e:	4b76      	ldr	r3, [pc, #472]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a75      	ldr	r2, [pc, #468]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 8003614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	4b73      	ldr	r3, [pc, #460]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a72      	ldr	r2, [pc, #456]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 8003620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	e00b      	b.n	8003640 <HAL_RCC_OscConfig+0xd8>
 8003628:	4b6f      	ldr	r3, [pc, #444]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a6e      	ldr	r2, [pc, #440]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 800362e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	4b6c      	ldr	r3, [pc, #432]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a6b      	ldr	r2, [pc, #428]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 800363a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d013      	beq.n	8003670 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7ff f808 	bl	800265c <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003650:	f7ff f804 	bl	800265c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	; 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e21f      	b.n	8003aa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003662:	4b61      	ldr	r3, [pc, #388]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0xe8>
 800366e:	e014      	b.n	800369a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fe fff4 	bl	800265c <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003678:	f7fe fff0 	bl	800265c <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b64      	cmp	r3, #100	; 0x64
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e20b      	b.n	8003aa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368a:	4b57      	ldr	r3, [pc, #348]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x110>
 8003696:	e000      	b.n	800369a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d069      	beq.n	800377a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036a6:	4b50      	ldr	r3, [pc, #320]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036b2:	4b4d      	ldr	r3, [pc, #308]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d11c      	bne.n	80036f8 <HAL_RCC_OscConfig+0x190>
 80036be:	4b4a      	ldr	r3, [pc, #296]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d116      	bne.n	80036f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ca:	4b47      	ldr	r3, [pc, #284]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <HAL_RCC_OscConfig+0x17a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d001      	beq.n	80036e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e1df      	b.n	8003aa2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e2:	4b41      	ldr	r3, [pc, #260]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	493d      	ldr	r1, [pc, #244]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f6:	e040      	b.n	800377a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d023      	beq.n	8003748 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003700:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a38      	ldr	r2, [pc, #224]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fe ffa6 	bl	800265c <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003714:	f7fe ffa2 	bl	800265c <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e1bd      	b.n	8003aa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003726:	4b30      	ldr	r3, [pc, #192]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003732:	4b2d      	ldr	r3, [pc, #180]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4929      	ldr	r1, [pc, #164]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
 8003746:	e018      	b.n	800377a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003748:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a26      	ldr	r2, [pc, #152]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 800374e:	f023 0301 	bic.w	r3, r3, #1
 8003752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fe ff82 	bl	800265c <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800375c:	f7fe ff7e 	bl	800265c <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e199      	b.n	8003aa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376e:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d038      	beq.n	80037f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d019      	beq.n	80037c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800378e:	4b16      	ldr	r3, [pc, #88]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 8003790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003792:	4a15      	ldr	r2, [pc, #84]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379a:	f7fe ff5f 	bl	800265c <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a2:	f7fe ff5b 	bl	800265c <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e176      	b.n	8003aa2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 80037b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x23a>
 80037c0:	e01a      	b.n	80037f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c2:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 80037c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c6:	4a08      	ldr	r2, [pc, #32]	; (80037e8 <HAL_RCC_OscConfig+0x280>)
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ce:	f7fe ff45 	bl	800265c <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d4:	e00a      	b.n	80037ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d6:	f7fe ff41 	bl	800265c <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d903      	bls.n	80037ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e15c      	b.n	8003aa2 <HAL_RCC_OscConfig+0x53a>
 80037e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ec:	4b91      	ldr	r3, [pc, #580]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 80037ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ee      	bne.n	80037d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80a4 	beq.w	800394e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003806:	4b8b      	ldr	r3, [pc, #556]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10d      	bne.n	800382e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003812:	4b88      	ldr	r3, [pc, #544]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	4a87      	ldr	r2, [pc, #540]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 8003818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381c:	6413      	str	r3, [r2, #64]	; 0x40
 800381e:	4b85      	ldr	r3, [pc, #532]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382a:	2301      	movs	r3, #1
 800382c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800382e:	4b82      	ldr	r3, [pc, #520]	; (8003a38 <HAL_RCC_OscConfig+0x4d0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003836:	2b00      	cmp	r3, #0
 8003838:	d118      	bne.n	800386c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800383a:	4b7f      	ldr	r3, [pc, #508]	; (8003a38 <HAL_RCC_OscConfig+0x4d0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a7e      	ldr	r2, [pc, #504]	; (8003a38 <HAL_RCC_OscConfig+0x4d0>)
 8003840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003846:	f7fe ff09 	bl	800265c <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384e:	f7fe ff05 	bl	800265c <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b64      	cmp	r3, #100	; 0x64
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e120      	b.n	8003aa2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003860:	4b75      	ldr	r3, [pc, #468]	; (8003a38 <HAL_RCC_OscConfig+0x4d0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d106      	bne.n	8003882 <HAL_RCC_OscConfig+0x31a>
 8003874:	4b6f      	ldr	r3, [pc, #444]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	4a6e      	ldr	r2, [pc, #440]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	6713      	str	r3, [r2, #112]	; 0x70
 8003880:	e02d      	b.n	80038de <HAL_RCC_OscConfig+0x376>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x33c>
 800388a:	4b6a      	ldr	r3, [pc, #424]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388e:	4a69      	ldr	r2, [pc, #420]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	6713      	str	r3, [r2, #112]	; 0x70
 8003896:	4b67      	ldr	r3, [pc, #412]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	4a66      	ldr	r2, [pc, #408]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 800389c:	f023 0304 	bic.w	r3, r3, #4
 80038a0:	6713      	str	r3, [r2, #112]	; 0x70
 80038a2:	e01c      	b.n	80038de <HAL_RCC_OscConfig+0x376>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b05      	cmp	r3, #5
 80038aa:	d10c      	bne.n	80038c6 <HAL_RCC_OscConfig+0x35e>
 80038ac:	4b61      	ldr	r3, [pc, #388]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	4a60      	ldr	r2, [pc, #384]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 80038b2:	f043 0304 	orr.w	r3, r3, #4
 80038b6:	6713      	str	r3, [r2, #112]	; 0x70
 80038b8:	4b5e      	ldr	r3, [pc, #376]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038bc:	4a5d      	ldr	r2, [pc, #372]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	6713      	str	r3, [r2, #112]	; 0x70
 80038c4:	e00b      	b.n	80038de <HAL_RCC_OscConfig+0x376>
 80038c6:	4b5b      	ldr	r3, [pc, #364]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	4a5a      	ldr	r2, [pc, #360]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	6713      	str	r3, [r2, #112]	; 0x70
 80038d2:	4b58      	ldr	r3, [pc, #352]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d6:	4a57      	ldr	r2, [pc, #348]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 80038d8:	f023 0304 	bic.w	r3, r3, #4
 80038dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d015      	beq.n	8003912 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e6:	f7fe feb9 	bl	800265c <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ec:	e00a      	b.n	8003904 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ee:	f7fe feb5 	bl	800265c <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e0ce      	b.n	8003aa2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003904:	4b4b      	ldr	r3, [pc, #300]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0ee      	beq.n	80038ee <HAL_RCC_OscConfig+0x386>
 8003910:	e014      	b.n	800393c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003912:	f7fe fea3 	bl	800265c <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003918:	e00a      	b.n	8003930 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800391a:	f7fe fe9f 	bl	800265c <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	f241 3288 	movw	r2, #5000	; 0x1388
 8003928:	4293      	cmp	r3, r2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e0b8      	b.n	8003aa2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003930:	4b40      	ldr	r3, [pc, #256]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1ee      	bne.n	800391a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800393c:	7dfb      	ldrb	r3, [r7, #23]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d105      	bne.n	800394e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003942:	4b3c      	ldr	r3, [pc, #240]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	4a3b      	ldr	r2, [pc, #236]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 8003948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800394c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 80a4 	beq.w	8003aa0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003958:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	2b08      	cmp	r3, #8
 8003962:	d06b      	beq.n	8003a3c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d149      	bne.n	8003a00 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396c:	4b31      	ldr	r3, [pc, #196]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a30      	ldr	r2, [pc, #192]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 8003972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fe fe70 	bl	800265c <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003980:	f7fe fe6c 	bl	800265c <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e087      	b.n	8003aa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003992:	4b28      	ldr	r3, [pc, #160]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69da      	ldr	r2, [r3, #28]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	019b      	lsls	r3, r3, #6
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	085b      	lsrs	r3, r3, #1
 80039b6:	3b01      	subs	r3, #1
 80039b8:	041b      	lsls	r3, r3, #16
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	061b      	lsls	r3, r3, #24
 80039c2:	4313      	orrs	r3, r2
 80039c4:	4a1b      	ldr	r2, [pc, #108]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 80039c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039ca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039cc:	4b19      	ldr	r3, [pc, #100]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a18      	ldr	r2, [pc, #96]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 80039d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fe fe40 	bl	800265c <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e0:	f7fe fe3c 	bl	800265c <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e057      	b.n	8003aa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f2:	4b10      	ldr	r3, [pc, #64]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x478>
 80039fe:	e04f      	b.n	8003aa0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a0b      	ldr	r2, [pc, #44]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 8003a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0c:	f7fe fe26 	bl	800265c <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a14:	f7fe fe22 	bl	800265c <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e03d      	b.n	8003aa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a26:	4b03      	ldr	r3, [pc, #12]	; (8003a34 <HAL_RCC_OscConfig+0x4cc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x4ac>
 8003a32:	e035      	b.n	8003aa0 <HAL_RCC_OscConfig+0x538>
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a3c:	4b1b      	ldr	r3, [pc, #108]	; (8003aac <HAL_RCC_OscConfig+0x544>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d028      	beq.n	8003a9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d121      	bne.n	8003a9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d11a      	bne.n	8003a9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d111      	bne.n	8003a9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	3b01      	subs	r3, #1
 8003a86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d107      	bne.n	8003a9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d001      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40023800 	.word	0x40023800

08003ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0d0      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b6a      	ldr	r3, [pc, #424]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d910      	bls.n	8003af8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b67      	ldr	r3, [pc, #412]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 020f 	bic.w	r2, r3, #15
 8003ade:	4965      	ldr	r1, [pc, #404]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b63      	ldr	r3, [pc, #396]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0b8      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d020      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b10:	4b59      	ldr	r3, [pc, #356]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	4a58      	ldr	r2, [pc, #352]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b28:	4b53      	ldr	r3, [pc, #332]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4a52      	ldr	r2, [pc, #328]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b34:	4b50      	ldr	r3, [pc, #320]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	494d      	ldr	r1, [pc, #308]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d040      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d107      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	4b47      	ldr	r3, [pc, #284]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d115      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e07f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d107      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b72:	4b41      	ldr	r3, [pc, #260]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e073      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b82:	4b3d      	ldr	r3, [pc, #244]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e06b      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b92:	4b39      	ldr	r3, [pc, #228]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f023 0203 	bic.w	r2, r3, #3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4936      	ldr	r1, [pc, #216]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba4:	f7fe fd5a 	bl	800265c <HAL_GetTick>
 8003ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bac:	f7fe fd56 	bl	800265c <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e053      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc2:	4b2d      	ldr	r3, [pc, #180]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 020c 	and.w	r2, r3, #12
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d1eb      	bne.n	8003bac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bd4:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d210      	bcs.n	8003c04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be2:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f023 020f 	bic.w	r2, r3, #15
 8003bea:	4922      	ldr	r1, [pc, #136]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf2:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e032      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c10:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4916      	ldr	r1, [pc, #88]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c2e:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	490e      	ldr	r1, [pc, #56]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c42:	f000 f821 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8003c46:	4602      	mov	r2, r0
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCC_ClockConfig+0x1c8>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	490a      	ldr	r1, [pc, #40]	; (8003c7c <HAL_RCC_ClockConfig+0x1cc>)
 8003c54:	5ccb      	ldrb	r3, [r1, r3]
 8003c56:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5a:	4a09      	ldr	r2, [pc, #36]	; (8003c80 <HAL_RCC_ClockConfig+0x1d0>)
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <HAL_RCC_ClockConfig+0x1d4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe fcb6 	bl	80025d4 <HAL_InitTick>

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40023c00 	.word	0x40023c00
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	08017378 	.word	0x08017378
 8003c80:	200005b8 	.word	0x200005b8
 8003c84:	200005bc 	.word	0x200005bc

08003c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c8c:	b094      	sub	sp, #80	; 0x50
 8003c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	647b      	str	r3, [r7, #68]	; 0x44
 8003c94:	2300      	movs	r3, #0
 8003c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c98:	2300      	movs	r3, #0
 8003c9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ca0:	4b79      	ldr	r3, [pc, #484]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 030c 	and.w	r3, r3, #12
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d00d      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	f200 80e1 	bhi.w	8003e74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_RCC_GetSysClockFreq+0x34>
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d003      	beq.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cba:	e0db      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cbc:	4b73      	ldr	r3, [pc, #460]	; (8003e8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003cbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cc0:	e0db      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cc2:	4b72      	ldr	r3, [pc, #456]	; (8003e8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003cc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cc6:	e0d8      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc8:	4b6f      	ldr	r3, [pc, #444]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cd0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003cd2:	4b6d      	ldr	r3, [pc, #436]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d063      	beq.n	8003da6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cde:	4b6a      	ldr	r3, [pc, #424]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	099b      	lsrs	r3, r3, #6
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ce8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cfa:	4622      	mov	r2, r4
 8003cfc:	462b      	mov	r3, r5
 8003cfe:	f04f 0000 	mov.w	r0, #0
 8003d02:	f04f 0100 	mov.w	r1, #0
 8003d06:	0159      	lsls	r1, r3, #5
 8003d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d0c:	0150      	lsls	r0, r2, #5
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4621      	mov	r1, r4
 8003d14:	1a51      	subs	r1, r2, r1
 8003d16:	6139      	str	r1, [r7, #16]
 8003d18:	4629      	mov	r1, r5
 8003d1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d2c:	4659      	mov	r1, fp
 8003d2e:	018b      	lsls	r3, r1, #6
 8003d30:	4651      	mov	r1, sl
 8003d32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d36:	4651      	mov	r1, sl
 8003d38:	018a      	lsls	r2, r1, #6
 8003d3a:	4651      	mov	r1, sl
 8003d3c:	ebb2 0801 	subs.w	r8, r2, r1
 8003d40:	4659      	mov	r1, fp
 8003d42:	eb63 0901 	sbc.w	r9, r3, r1
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d5a:	4690      	mov	r8, r2
 8003d5c:	4699      	mov	r9, r3
 8003d5e:	4623      	mov	r3, r4
 8003d60:	eb18 0303 	adds.w	r3, r8, r3
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	462b      	mov	r3, r5
 8003d68:	eb49 0303 	adc.w	r3, r9, r3
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	028b      	lsls	r3, r1, #10
 8003d7e:	4621      	mov	r1, r4
 8003d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d84:	4621      	mov	r1, r4
 8003d86:	028a      	lsls	r2, r1, #10
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d8e:	2200      	movs	r2, #0
 8003d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d98:	f7fc fe5a 	bl	8000a50 <__aeabi_uldivmod>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4613      	mov	r3, r2
 8003da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003da4:	e058      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da6:	4b38      	ldr	r3, [pc, #224]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	099b      	lsrs	r3, r3, #6
 8003dac:	2200      	movs	r2, #0
 8003dae:	4618      	mov	r0, r3
 8003db0:	4611      	mov	r1, r2
 8003db2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003db6:	623b      	str	r3, [r7, #32]
 8003db8:	2300      	movs	r3, #0
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
 8003dbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dc0:	4642      	mov	r2, r8
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	f04f 0000 	mov.w	r0, #0
 8003dc8:	f04f 0100 	mov.w	r1, #0
 8003dcc:	0159      	lsls	r1, r3, #5
 8003dce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dd2:	0150      	lsls	r0, r2, #5
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4641      	mov	r1, r8
 8003dda:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dde:	4649      	mov	r1, r9
 8003de0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003df0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003df4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003df8:	ebb2 040a 	subs.w	r4, r2, sl
 8003dfc:	eb63 050b 	sbc.w	r5, r3, fp
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	00eb      	lsls	r3, r5, #3
 8003e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e0e:	00e2      	lsls	r2, r4, #3
 8003e10:	4614      	mov	r4, r2
 8003e12:	461d      	mov	r5, r3
 8003e14:	4643      	mov	r3, r8
 8003e16:	18e3      	adds	r3, r4, r3
 8003e18:	603b      	str	r3, [r7, #0]
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	eb45 0303 	adc.w	r3, r5, r3
 8003e20:	607b      	str	r3, [r7, #4]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e2e:	4629      	mov	r1, r5
 8003e30:	028b      	lsls	r3, r1, #10
 8003e32:	4621      	mov	r1, r4
 8003e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e38:	4621      	mov	r1, r4
 8003e3a:	028a      	lsls	r2, r1, #10
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e42:	2200      	movs	r2, #0
 8003e44:	61bb      	str	r3, [r7, #24]
 8003e46:	61fa      	str	r2, [r7, #28]
 8003e48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e4c:	f7fc fe00 	bl	8000a50 <__aeabi_uldivmod>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4613      	mov	r3, r2
 8003e56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	0c1b      	lsrs	r3, r3, #16
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	3301      	adds	r3, #1
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003e68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e72:	e002      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3750      	adds	r7, #80	; 0x50
 8003e80:	46bd      	mov	sp, r7
 8003e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	00f42400 	.word	0x00f42400

08003e90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e94:	4b03      	ldr	r3, [pc, #12]	; (8003ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e96:	681b      	ldr	r3, [r3, #0]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	200005b8 	.word	0x200005b8

08003ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eac:	f7ff fff0 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	0a9b      	lsrs	r3, r3, #10
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	4903      	ldr	r1, [pc, #12]	; (8003ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ebe:	5ccb      	ldrb	r3, [r1, r3]
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	08017388 	.word	0x08017388

08003ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ed4:	f7ff ffdc 	bl	8003e90 <HAL_RCC_GetHCLKFreq>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	0b5b      	lsrs	r3, r3, #13
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	4903      	ldr	r1, [pc, #12]	; (8003ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ee6:	5ccb      	ldrb	r3, [r1, r3]
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	08017388 	.word	0x08017388

08003ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d012      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f20:	4b69      	ldr	r3, [pc, #420]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	4a68      	ldr	r2, [pc, #416]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f2a:	6093      	str	r3, [r2, #8]
 8003f2c:	4b66      	ldr	r3, [pc, #408]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f34:	4964      	ldr	r1, [pc, #400]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f42:	2301      	movs	r3, #1
 8003f44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d017      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f52:	4b5d      	ldr	r3, [pc, #372]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	4959      	ldr	r1, [pc, #356]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f70:	d101      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f72:	2301      	movs	r3, #1
 8003f74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d017      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f8e:	4b4e      	ldr	r3, [pc, #312]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	494a      	ldr	r1, [pc, #296]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 808b 	beq.w	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fdc:	4b3a      	ldr	r3, [pc, #232]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	4a39      	ldr	r2, [pc, #228]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fe8:	4b37      	ldr	r3, [pc, #220]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ff4:	4b35      	ldr	r3, [pc, #212]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a34      	ldr	r2, [pc, #208]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004000:	f7fe fb2c 	bl	800265c <HAL_GetTick>
 8004004:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004006:	e008      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004008:	f7fe fb28 	bl	800265c <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b64      	cmp	r3, #100	; 0x64
 8004014:	d901      	bls.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e357      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800401a:	4b2c      	ldr	r3, [pc, #176]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004026:	4b28      	ldr	r3, [pc, #160]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d035      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	429a      	cmp	r2, r3
 8004042:	d02e      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004044:	4b20      	ldr	r3, [pc, #128]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800404e:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004052:	4a1d      	ldr	r2, [pc, #116]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004058:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800405a:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405e:	4a1a      	ldr	r2, [pc, #104]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004064:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004066:	4a18      	ldr	r2, [pc, #96]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800406c:	4b16      	ldr	r3, [pc, #88]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b01      	cmp	r3, #1
 8004076:	d114      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fe faf0 	bl	800265c <HAL_GetTick>
 800407c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407e:	e00a      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004080:	f7fe faec 	bl	800265c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	; 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e319      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004096:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0ee      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ae:	d111      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040bc:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040be:	400b      	ands	r3, r1
 80040c0:	4901      	ldr	r1, [pc, #4]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	608b      	str	r3, [r1, #8]
 80040c6:	e00b      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80040c8:	40023800 	.word	0x40023800
 80040cc:	40007000 	.word	0x40007000
 80040d0:	0ffffcff 	.word	0x0ffffcff
 80040d4:	4baa      	ldr	r3, [pc, #680]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4aa9      	ldr	r2, [pc, #676]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040de:	6093      	str	r3, [r2, #8]
 80040e0:	4ba7      	ldr	r3, [pc, #668]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ec:	49a4      	ldr	r1, [pc, #656]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d010      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040fe:	4ba0      	ldr	r3, [pc, #640]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004104:	4a9e      	ldr	r2, [pc, #632]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800410a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800410e:	4b9c      	ldr	r3, [pc, #624]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004110:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	4999      	ldr	r1, [pc, #612]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800412c:	4b94      	ldr	r3, [pc, #592]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800413a:	4991      	ldr	r1, [pc, #580]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800414e:	4b8c      	ldr	r3, [pc, #560]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004154:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800415c:	4988      	ldr	r1, [pc, #544]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004170:	4b83      	ldr	r3, [pc, #524]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004176:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800417e:	4980      	ldr	r1, [pc, #512]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004192:	4b7b      	ldr	r3, [pc, #492]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004198:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a0:	4977      	ldr	r1, [pc, #476]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041b4:	4b72      	ldr	r3, [pc, #456]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ba:	f023 0203 	bic.w	r2, r3, #3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c2:	496f      	ldr	r1, [pc, #444]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041d6:	4b6a      	ldr	r3, [pc, #424]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041dc:	f023 020c 	bic.w	r2, r3, #12
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e4:	4966      	ldr	r1, [pc, #408]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041f8:	4b61      	ldr	r3, [pc, #388]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004206:	495e      	ldr	r1, [pc, #376]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800421a:	4b59      	ldr	r3, [pc, #356]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004220:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004228:	4955      	ldr	r1, [pc, #340]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800423c:	4b50      	ldr	r3, [pc, #320]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	494d      	ldr	r1, [pc, #308]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800425e:	4b48      	ldr	r3, [pc, #288]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004264:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426c:	4944      	ldr	r1, [pc, #272]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004280:	4b3f      	ldr	r3, [pc, #252]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428e:	493c      	ldr	r1, [pc, #240]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80042a2:	4b37      	ldr	r3, [pc, #220]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b0:	4933      	ldr	r1, [pc, #204]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042c4:	4b2e      	ldr	r3, [pc, #184]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042d2:	492b      	ldr	r1, [pc, #172]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d011      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042e6:	4b26      	ldr	r3, [pc, #152]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f4:	4922      	ldr	r1, [pc, #136]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004304:	d101      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004306:	2301      	movs	r3, #1
 8004308:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004316:	2301      	movs	r3, #1
 8004318:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004326:	4b16      	ldr	r3, [pc, #88]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004334:	4912      	ldr	r1, [pc, #72]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004348:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004358:	4909      	ldr	r1, [pc, #36]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d006      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 80d9 	beq.w	8004526 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004374:	4b02      	ldr	r3, [pc, #8]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a01      	ldr	r2, [pc, #4]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800437a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800437e:	e001      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004380:	40023800 	.word	0x40023800
 8004384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004386:	f7fe f969 	bl	800265c <HAL_GetTick>
 800438a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800438c:	e008      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800438e:	f7fe f965 	bl	800265c <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b64      	cmp	r3, #100	; 0x64
 800439a:	d901      	bls.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e194      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043a0:	4b6c      	ldr	r3, [pc, #432]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f0      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d021      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x504>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d11d      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043c0:	4b64      	ldr	r3, [pc, #400]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c6:	0c1b      	lsrs	r3, r3, #16
 80043c8:	f003 0303 	and.w	r3, r3, #3
 80043cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043ce:	4b61      	ldr	r3, [pc, #388]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d4:	0e1b      	lsrs	r3, r3, #24
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	019a      	lsls	r2, r3, #6
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	041b      	lsls	r3, r3, #16
 80043e6:	431a      	orrs	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	061b      	lsls	r3, r3, #24
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	071b      	lsls	r3, r3, #28
 80043f4:	4957      	ldr	r1, [pc, #348]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004410:	d00a      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800441a:	2b00      	cmp	r3, #0
 800441c:	d02e      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004426:	d129      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004428:	4b4a      	ldr	r3, [pc, #296]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800442a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442e:	0c1b      	lsrs	r3, r3, #16
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004436:	4b47      	ldr	r3, [pc, #284]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443c:	0f1b      	lsrs	r3, r3, #28
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	019a      	lsls	r2, r3, #6
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	041b      	lsls	r3, r3, #16
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	061b      	lsls	r3, r3, #24
 8004456:	431a      	orrs	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	071b      	lsls	r3, r3, #28
 800445c:	493d      	ldr	r1, [pc, #244]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004464:	4b3b      	ldr	r3, [pc, #236]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800446a:	f023 021f 	bic.w	r2, r3, #31
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	3b01      	subs	r3, #1
 8004474:	4937      	ldr	r1, [pc, #220]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01d      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004488:	4b32      	ldr	r3, [pc, #200]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800448a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448e:	0e1b      	lsrs	r3, r3, #24
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004496:	4b2f      	ldr	r3, [pc, #188]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800449c:	0f1b      	lsrs	r3, r3, #28
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	019a      	lsls	r2, r3, #6
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	041b      	lsls	r3, r3, #16
 80044b0:	431a      	orrs	r2, r3
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	061b      	lsls	r3, r3, #24
 80044b6:	431a      	orrs	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	071b      	lsls	r3, r3, #28
 80044bc:	4925      	ldr	r1, [pc, #148]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d011      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	019a      	lsls	r2, r3, #6
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	061b      	lsls	r3, r3, #24
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	071b      	lsls	r3, r3, #28
 80044ec:	4919      	ldr	r1, [pc, #100]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044f4:	4b17      	ldr	r3, [pc, #92]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a16      	ldr	r2, [pc, #88]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004500:	f7fe f8ac 	bl	800265c <HAL_GetTick>
 8004504:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004506:	e008      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004508:	f7fe f8a8 	bl	800265c <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b64      	cmp	r3, #100	; 0x64
 8004514:	d901      	bls.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e0d7      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800451a:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b01      	cmp	r3, #1
 800452a:	f040 80cd 	bne.w	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800452e:	4b09      	ldr	r3, [pc, #36]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a08      	ldr	r2, [pc, #32]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800453a:	f7fe f88f 	bl	800265c <HAL_GetTick>
 800453e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004540:	e00a      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004542:	f7fe f88b 	bl	800265c <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b64      	cmp	r3, #100	; 0x64
 800454e:	d903      	bls.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0ba      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004554:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004558:	4b5e      	ldr	r3, [pc, #376]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004564:	d0ed      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004576:	2b00      	cmp	r3, #0
 8004578:	d009      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004582:	2b00      	cmp	r3, #0
 8004584:	d02e      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d12a      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800458e:	4b51      	ldr	r3, [pc, #324]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004594:	0c1b      	lsrs	r3, r3, #16
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800459c:	4b4d      	ldr	r3, [pc, #308]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	0f1b      	lsrs	r3, r3, #28
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	019a      	lsls	r2, r3, #6
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	041b      	lsls	r3, r3, #16
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	061b      	lsls	r3, r3, #24
 80045bc:	431a      	orrs	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	071b      	lsls	r3, r3, #28
 80045c2:	4944      	ldr	r1, [pc, #272]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045ca:	4b42      	ldr	r3, [pc, #264]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	3b01      	subs	r3, #1
 80045da:	021b      	lsls	r3, r3, #8
 80045dc:	493d      	ldr	r1, [pc, #244]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d022      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045f8:	d11d      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045fa:	4b36      	ldr	r3, [pc, #216]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	0e1b      	lsrs	r3, r3, #24
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004608:	4b32      	ldr	r3, [pc, #200]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460e:	0f1b      	lsrs	r3, r3, #28
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	019a      	lsls	r2, r3, #6
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	041b      	lsls	r3, r3, #16
 8004622:	431a      	orrs	r2, r3
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	061b      	lsls	r3, r3, #24
 8004628:	431a      	orrs	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	071b      	lsls	r3, r3, #28
 800462e:	4929      	ldr	r1, [pc, #164]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d028      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004642:	4b24      	ldr	r3, [pc, #144]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004648:	0e1b      	lsrs	r3, r3, #24
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004650:	4b20      	ldr	r3, [pc, #128]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004656:	0c1b      	lsrs	r3, r3, #16
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	019a      	lsls	r2, r3, #6
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	041b      	lsls	r3, r3, #16
 8004668:	431a      	orrs	r2, r3
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	061b      	lsls	r3, r3, #24
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	071b      	lsls	r3, r3, #28
 8004676:	4917      	ldr	r1, [pc, #92]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800467e:	4b15      	ldr	r3, [pc, #84]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004684:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	4911      	ldr	r1, [pc, #68]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004694:	4b0f      	ldr	r3, [pc, #60]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a0e      	ldr	r2, [pc, #56]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800469a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800469e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a0:	f7fd ffdc 	bl	800265c <HAL_GetTick>
 80046a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046a8:	f7fd ffd8 	bl	800265c <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b64      	cmp	r3, #100	; 0x64
 80046b4:	d901      	bls.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e007      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046ba:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046c6:	d1ef      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40023800 	.word	0x40023800

080046d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046f6:	f040 808c 	bne.w	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 80046fa:	4b95      	ldr	r3, [pc, #596]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80046fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004700:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004708:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004710:	d07c      	beq.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004718:	d87d      	bhi.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d004      	beq.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004726:	d039      	beq.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004728:	e075      	b.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800472a:	4b89      	ldr	r3, [pc, #548]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d108      	bne.n	8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004736:	4b86      	ldr	r3, [pc, #536]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800473e:	4a85      	ldr	r2, [pc, #532]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004740:	fbb2 f3f3 	udiv	r3, r2, r3
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	e007      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004748:	4b81      	ldr	r3, [pc, #516]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004750:	4a80      	ldr	r2, [pc, #512]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004752:	fbb2 f3f3 	udiv	r3, r2, r3
 8004756:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004758:	4b7d      	ldr	r3, [pc, #500]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475e:	0e1b      	lsrs	r3, r3, #24
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004766:	4b7a      	ldr	r3, [pc, #488]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476c:	099b      	lsrs	r3, r3, #6
 800476e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	fb03 f202 	mul.w	r2, r3, r2
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	fbb2 f3f3 	udiv	r3, r2, r3
 800477e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004780:	4b73      	ldr	r3, [pc, #460]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004786:	0a1b      	lsrs	r3, r3, #8
 8004788:	f003 031f 	and.w	r3, r3, #31
 800478c:	3301      	adds	r3, #1
 800478e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	fbb2 f3f3 	udiv	r3, r2, r3
 8004798:	617b      	str	r3, [r7, #20]
        break;
 800479a:	e03d      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800479c:	4b6c      	ldr	r3, [pc, #432]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d108      	bne.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047a8:	4b69      	ldr	r3, [pc, #420]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b0:	4a68      	ldr	r2, [pc, #416]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	613b      	str	r3, [r7, #16]
 80047b8:	e007      	b.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80047ba:	4b65      	ldr	r3, [pc, #404]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c2:	4a64      	ldr	r2, [pc, #400]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80047ca:	4b61      	ldr	r3, [pc, #388]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80047cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d0:	0e1b      	lsrs	r3, r3, #24
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80047d8:	4b5d      	ldr	r3, [pc, #372]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80047da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047de:	099b      	lsrs	r3, r3, #6
 80047e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	fb03 f202 	mul.w	r2, r3, r2
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80047f2:	4b57      	ldr	r3, [pc, #348]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80047f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047f8:	f003 031f 	and.w	r3, r3, #31
 80047fc:	3301      	adds	r3, #1
 80047fe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	617b      	str	r3, [r7, #20]
        break;
 800480a:	e005      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800480c:	4b52      	ldr	r3, [pc, #328]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800480e:	617b      	str	r3, [r7, #20]
        break;
 8004810:	e002      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8004812:	bf00      	nop
 8004814:	e000      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8004816:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800481e:	f040 808c 	bne.w	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004822:	4b4b      	ldr	r3, [pc, #300]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004828:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004830:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004838:	d07c      	beq.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004840:	d87d      	bhi.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d004      	beq.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800484e:	d039      	beq.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004850:	e075      	b.n	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004852:	4b3f      	ldr	r3, [pc, #252]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d108      	bne.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800485e:	4b3c      	ldr	r3, [pc, #240]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004866:	4a3b      	ldr	r2, [pc, #236]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	e007      	b.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004870:	4b37      	ldr	r3, [pc, #220]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004878:	4a36      	ldr	r2, [pc, #216]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800487a:	fbb2 f3f3 	udiv	r3, r2, r3
 800487e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004880:	4b33      	ldr	r3, [pc, #204]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004886:	0e1b      	lsrs	r3, r3, #24
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800488e:	4b30      	ldr	r3, [pc, #192]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	099b      	lsrs	r3, r3, #6
 8004896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	fb03 f202 	mul.w	r2, r3, r2
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80048a8:	4b29      	ldr	r3, [pc, #164]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80048aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	3301      	adds	r3, #1
 80048b6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c0:	617b      	str	r3, [r7, #20]
        break;
 80048c2:	e03d      	b.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80048c4:	4b22      	ldr	r3, [pc, #136]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d108      	bne.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048d0:	4b1f      	ldr	r3, [pc, #124]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048d8:	4a1e      	ldr	r2, [pc, #120]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80048da:	fbb2 f3f3 	udiv	r3, r2, r3
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	e007      	b.n	80048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80048e2:	4b1b      	ldr	r3, [pc, #108]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048ea:	4a1a      	ldr	r2, [pc, #104]	; (8004954 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80048ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80048f2:	4b17      	ldr	r3, [pc, #92]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80048f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f8:	0e1b      	lsrs	r3, r3, #24
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004900:	4b13      	ldr	r3, [pc, #76]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004906:	099b      	lsrs	r3, r3, #6
 8004908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	fb03 f202 	mul.w	r2, r3, r2
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	fbb2 f3f3 	udiv	r3, r2, r3
 8004918:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800491a:	4b0d      	ldr	r3, [pc, #52]	; (8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800491c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	3301      	adds	r3, #1
 8004926:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004930:	617b      	str	r3, [r7, #20]
        break;
 8004932:	e005      	b.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004934:	4b08      	ldr	r3, [pc, #32]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004936:	617b      	str	r3, [r7, #20]
        break;
 8004938:	e002      	b.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800493a:	bf00      	nop
 800493c:	e000      	b.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800493e:	bf00      	nop

  return frequency;
 8004940:	697b      	ldr	r3, [r7, #20]
}
 8004942:	4618      	mov	r0, r3
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40023800 	.word	0x40023800
 8004954:	00f42400 	.word	0x00f42400
 8004958:	00bb8000 	.word	0x00bb8000

0800495c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e156      	b.n	8004c28 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fd fc76 	bl	8002280 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fc17 	bl	80051d0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d00c      	beq.n	80049c4 <HAL_SAI_Init+0x68>
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d80d      	bhi.n	80049ca <HAL_SAI_Init+0x6e>
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <HAL_SAI_Init+0x5c>
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d003      	beq.n	80049be <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80049b6:	e008      	b.n	80049ca <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61fb      	str	r3, [r7, #28]
      break;
 80049bc:	e006      	b.n	80049cc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80049be:	2310      	movs	r3, #16
 80049c0:	61fb      	str	r3, [r7, #28]
      break;
 80049c2:	e003      	b.n	80049cc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80049c4:	2320      	movs	r3, #32
 80049c6:	61fb      	str	r3, [r7, #28]
      break;
 80049c8:	e000      	b.n	80049cc <HAL_SAI_Init+0x70>
      break;
 80049ca:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d81e      	bhi.n	8004a12 <HAL_SAI_Init+0xb6>
 80049d4:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <HAL_SAI_Init+0x80>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	080049ed 	.word	0x080049ed
 80049e0:	080049f3 	.word	0x080049f3
 80049e4:	080049fb 	.word	0x080049fb
 80049e8:	08004a03 	.word	0x08004a03
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]
    }
    break;
 80049f0:	e010      	b.n	8004a14 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80049f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049f6:	617b      	str	r3, [r7, #20]
    }
    break;
 80049f8:	e00c      	b.n	8004a14 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80049fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049fe:	617b      	str	r3, [r7, #20]
    }
    break;
 8004a00:	e008      	b.n	8004a14 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004a02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a06:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8004a10:	e000      	b.n	8004a14 <HAL_SAI_Init+0xb8>
    default:
      break;
 8004a12:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a85      	ldr	r2, [pc, #532]	; (8004c30 <HAL_SAI_Init+0x2d4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d004      	beq.n	8004a28 <HAL_SAI_Init+0xcc>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a84      	ldr	r2, [pc, #528]	; (8004c34 <HAL_SAI_Init+0x2d8>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d103      	bne.n	8004a30 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004a28:	4a83      	ldr	r2, [pc, #524]	; (8004c38 <HAL_SAI_Init+0x2dc>)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	e002      	b.n	8004a36 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004a30:	4a82      	ldr	r2, [pc, #520]	; (8004c3c <HAL_SAI_Init+0x2e0>)
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d04c      	beq.n	8004ad8 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a7a      	ldr	r2, [pc, #488]	; (8004c30 <HAL_SAI_Init+0x2d4>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d004      	beq.n	8004a56 <HAL_SAI_Init+0xfa>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a78      	ldr	r2, [pc, #480]	; (8004c34 <HAL_SAI_Init+0x2d8>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d104      	bne.n	8004a60 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004a56:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004a5a:	f7ff fe3d 	bl	80046d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a5e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a76      	ldr	r2, [pc, #472]	; (8004c40 <HAL_SAI_Init+0x2e4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <HAL_SAI_Init+0x118>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a75      	ldr	r2, [pc, #468]	; (8004c44 <HAL_SAI_Init+0x2e8>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d104      	bne.n	8004a7e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004a74:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004a78:	f7ff fe2e 	bl	80046d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a7c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	461a      	mov	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	025b      	lsls	r3, r3, #9
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4a6b      	ldr	r2, [pc, #428]	; (8004c48 <HAL_SAI_Init+0x2ec>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	08da      	lsrs	r2, r3, #3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8004aa4:	68f9      	ldr	r1, [r7, #12]
 8004aa6:	4b68      	ldr	r3, [pc, #416]	; (8004c48 <HAL_SAI_Init+0x2ec>)
 8004aa8:	fba3 2301 	umull	r2, r3, r3, r1
 8004aac:	08da      	lsrs	r2, r3, #3
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	1aca      	subs	r2, r1, r3
 8004ab8:	2a08      	cmp	r2, #8
 8004aba:	d904      	bls.n	8004ac6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d104      	bne.n	8004ad8 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	085a      	lsrs	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_SAI_Init+0x18c>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d109      	bne.n	8004afc <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_SAI_Init+0x198>
 8004af0:	2300      	movs	r3, #0
 8004af2:	e001      	b.n	8004af8 <HAL_SAI_Init+0x19c>
 8004af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	e008      	b.n	8004b0e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d102      	bne.n	8004b0a <HAL_SAI_Init+0x1ae>
 8004b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b08:	e000      	b.n	8004b0c <HAL_SAI_Init+0x1b0>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6819      	ldr	r1, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	4b4c      	ldr	r3, [pc, #304]	; (8004c4c <HAL_SAI_Init+0x2f0>)
 8004b1a:	400b      	ands	r3, r1
 8004b1c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6819      	ldr	r1, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b32:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8004b46:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004b52:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	051b      	lsls	r3, r3, #20
 8004b5a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6859      	ldr	r1, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b38      	ldr	r3, [pc, #224]	; (8004c50 <HAL_SAI_Init+0x2f4>)
 8004b70:	400b      	ands	r3, r1
 8004b72:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6859      	ldr	r1, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6899      	ldr	r1, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	4b2d      	ldr	r3, [pc, #180]	; (8004c54 <HAL_SAI_Init+0x2f8>)
 8004b9e:	400b      	ands	r3, r1
 8004ba0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6899      	ldr	r1, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004bb2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8004bb8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8004bbe:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004bc8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68d9      	ldr	r1, [r3, #12]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	f24f 0320 	movw	r3, #61472	; 0xf020
 8004be0:	400b      	ands	r3, r1
 8004be2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68d9      	ldr	r1, [r3, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf8:	041b      	lsls	r3, r3, #16
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c00:	3b01      	subs	r3, #1
 8004c02:	021b      	lsls	r3, r3, #8
 8004c04:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3720      	adds	r7, #32
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40015804 	.word	0x40015804
 8004c34:	40015824 	.word	0x40015824
 8004c38:	40015800 	.word	0x40015800
 8004c3c:	40015c00 	.word	0x40015c00
 8004c40:	40015c04 	.word	0x40015c04
 8004c44:	40015c24 	.word	0x40015c24
 8004c48:	cccccccd 	.word	0xcccccccd
 8004c4c:	ff05c010 	.word	0xff05c010
 8004c50:	ffff1ff0 	.word	0xffff1ff0
 8004c54:	fff88000 	.word	0xfff88000

08004c58 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_SAI_Abort+0x1a>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e072      	b.n	8004d58 <HAL_SAI_Abort+0x100>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c88:	d149      	bne.n	8004d1e <HAL_SAI_Abort+0xc6>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004c98:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d01c      	beq.n	8004cdc <HAL_SAI_Abort+0x84>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b12      	cmp	r3, #18
 8004cac:	d116      	bne.n	8004cdc <HAL_SAI_Abort+0x84>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fd ff22 	bl	8002afc <HAL_DMA_Abort>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00e      	beq.n	8004cdc <HAL_SAI_Abort+0x84>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc4:	2b80      	cmp	r3, #128	; 0x80
 8004cc6:	d009      	beq.n	8004cdc <HAL_SAI_Abort+0x84>
        {
          status = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cd2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01c      	beq.n	8004d1e <HAL_SAI_Abort+0xc6>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b22      	cmp	r3, #34	; 0x22
 8004cee:	d116      	bne.n	8004d1e <HAL_SAI_Abort+0xc6>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7fd ff01 	bl	8002afc <HAL_DMA_Abort>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00e      	beq.n	8004d1e <HAL_SAI_Abort+0xc6>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d06:	2b80      	cmp	r3, #128	; 0x80
 8004d08:	d009      	beq.n	8004d1e <HAL_SAI_Abort+0xc6>
        {
          status = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
      }
    }
  }
  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2200      	movs	r2, #0
 8004d24:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2e:	619a      	str	r2, [r3, #24]

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 fa4d 	bl	80051d0 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0208 	orr.w	r2, r2, #8
 8004d44:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8004d6e:	f7fd fc75 	bl	800265c <HAL_GetTick>
 8004d72:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_SAI_Transmit_DMA+0x20>
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e093      	b.n	8004eac <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	f040 808c 	bne.w	8004eaa <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_SAI_Transmit_DMA+0x40>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e085      	b.n	8004eac <HAL_SAI_Transmit_DMA+0x14c>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	88fa      	ldrh	r2, [r7, #6]
 8004db2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	88fa      	ldrh	r2, [r7, #6]
 8004dba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2212      	movs	r2, #18
 8004dca:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd2:	4a38      	ldr	r2, [pc, #224]	; (8004eb4 <HAL_SAI_Transmit_DMA+0x154>)
 8004dd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dda:	4a37      	ldr	r2, [pc, #220]	; (8004eb8 <HAL_SAI_Transmit_DMA+0x158>)
 8004ddc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de2:	4a36      	ldr	r2, [pc, #216]	; (8004ebc <HAL_SAI_Transmit_DMA+0x15c>)
 8004de4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dea:	2200      	movs	r2, #0
 8004dec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004df6:	4619      	mov	r1, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	331c      	adds	r3, #28
 8004dfe:	461a      	mov	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004e06:	f7fd fe19 	bl	8002a3c <HAL_DMA_Start_IT>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e047      	b.n	8004eac <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f9a0 	bl	8005164 <SAI_InterruptFlag>
 8004e24:	4601      	mov	r1, r0
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004e42:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004e44:	e015      	b.n	8004e72 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8004e46:	f7fd fc09 	bl	800265c <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e54:	d90d      	bls.n	8004e72 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e01c      	b.n	8004eac <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0e2      	beq.n	8004e46 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d107      	bne.n	8004e9e <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e9c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e000      	b.n	8004eac <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8004eaa:	2302      	movs	r3, #2
  }
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	080052a1 	.word	0x080052a1
 8004eb8:	08005241 	.word	0x08005241
 8004ebc:	080052bd 	.word	0x080052bd

08004ec0 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8137 	beq.w	8005144 <HAL_SAI_IRQHandler+0x284>
  {
    uint32_t itflags = hsai->Instance->SR;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d009      	beq.n	8004f0c <HAL_SAI_IRQHandler+0x4c>
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d004      	beq.n	8004f0c <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	4798      	blx	r3
 8004f0a:	e11b      	b.n	8005144 <HAL_SAI_IRQHandler+0x284>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d01e      	beq.n	8004f54 <HAL_SAI_IRQHandler+0x94>
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d019      	beq.n	8004f54 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2201      	movs	r2, #1
 8004f26:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b22      	cmp	r3, #34	; 0x22
 8004f32:	d101      	bne.n	8004f38 <HAL_SAI_IRQHandler+0x78>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <HAL_SAI_IRQHandler+0x7a>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f8ff 	bl	8005150 <HAL_SAI_ErrorCallback>
 8004f52:	e0f7      	b.n	8005144 <HAL_SAI_IRQHandler+0x284>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d011      	beq.n	8004f82 <HAL_SAI_IRQHandler+0xc2>
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00c      	beq.n	8004f82 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != (SAIcallback)NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80e5 	beq.w	8005144 <HAL_SAI_IRQHandler+0x284>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f7e:	4798      	blx	r3
      if (hsai->mutecallback != (SAIcallback)NULL)
 8004f80:	e0e0      	b.n	8005144 <HAL_SAI_IRQHandler+0x284>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f003 0320 	and.w	r3, r3, #32
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d039      	beq.n	8005000 <HAL_SAI_IRQHandler+0x140>
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d034      	beq.n	8005000 <HAL_SAI_IRQHandler+0x140>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fa4:	f043 0204 	orr.w	r2, r3, #4
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01c      	beq.n	8004ff2 <HAL_SAI_IRQHandler+0x132>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d009      	beq.n	8004fd4 <HAL_SAI_IRQHandler+0x114>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc4:	4a61      	ldr	r2, [pc, #388]	; (800514c <HAL_SAI_IRQHandler+0x28c>)
 8004fc6:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fd fe05 	bl	8002bdc <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004fd2:	e0b4      	b.n	800513e <HAL_SAI_IRQHandler+0x27e>
        }
        else if (hsai->hdmarx != NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 80b0 	beq.w	800513e <HAL_SAI_IRQHandler+0x27e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe2:	4a5a      	ldr	r2, [pc, #360]	; (800514c <HAL_SAI_IRQHandler+0x28c>)
 8004fe4:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fd fdf6 	bl	8002bdc <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004ff0:	e0a5      	b.n	800513e <HAL_SAI_IRQHandler+0x27e>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff fe30 	bl	8004c58 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f8a9 	bl	8005150 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004ffe:	e09e      	b.n	800513e <HAL_SAI_IRQHandler+0x27e>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d038      	beq.n	800507c <HAL_SAI_IRQHandler+0x1bc>
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d033      	beq.n	800507c <HAL_SAI_IRQHandler+0x1bc>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2240      	movs	r2, #64	; 0x40
 800501a:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005022:	f043 0208 	orr.w	r2, r3, #8
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d01b      	beq.n	800506e <HAL_SAI_IRQHandler+0x1ae>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800503a:	2b00      	cmp	r3, #0
 800503c:	d009      	beq.n	8005052 <HAL_SAI_IRQHandler+0x192>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005042:	4a42      	ldr	r2, [pc, #264]	; (800514c <HAL_SAI_IRQHandler+0x28c>)
 8005044:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmatx);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800504a:	4618      	mov	r0, r3
 800504c:	f7fd fdc6 	bl	8002bdc <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005050:	e077      	b.n	8005142 <HAL_SAI_IRQHandler+0x282>
        }
        else if (hsai->hdmarx != NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005056:	2b00      	cmp	r3, #0
 8005058:	d073      	beq.n	8005142 <HAL_SAI_IRQHandler+0x282>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505e:	4a3b      	ldr	r2, [pc, #236]	; (800514c <HAL_SAI_IRQHandler+0x28c>)
 8005060:	651a      	str	r2, [r3, #80]	; 0x50
          /* Abort DMA in IT mode */
          HAL_DMA_Abort_IT(hsai->hdmarx);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005066:	4618      	mov	r0, r3
 8005068:	f7fd fdb8 	bl	8002bdc <HAL_DMA_Abort_IT>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800506c:	e069      	b.n	8005142 <HAL_SAI_IRQHandler+0x282>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7ff fdf2 	bl	8004c58 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f86b 	bl	8005150 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800507a:	e062      	b.n	8005142 <HAL_SAI_IRQHandler+0x282>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	d041      	beq.n	800510a <HAL_SAI_IRQHandler+0x24a>
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d03c      	beq.n	800510a <HAL_SAI_IRQHandler+0x24a>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2204      	movs	r2, #4
 8005096:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800509e:	f043 0220 	orr.w	r2, r3, #32
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Abort the SAI DMA Streams */
      if (hsai->hdmatx != NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d009      	beq.n	80050c4 <HAL_SAI_IRQHandler+0x204>
      {
        /* Set the DMA Tx abort callback */
        hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050b4:	4a25      	ldr	r2, [pc, #148]	; (800514c <HAL_SAI_IRQHandler+0x28c>)
 80050b6:	651a      	str	r2, [r3, #80]	; 0x50
        /* Abort DMA in IT mode */
        HAL_DMA_Abort_IT(hsai->hdmatx);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fd fd8d 	bl	8002bdc <HAL_DMA_Abort_IT>
      if (hsai->hdmatx != NULL)
 80050c2:	e03f      	b.n	8005144 <HAL_SAI_IRQHandler+0x284>
      }
      else if (hsai->hdmarx != NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d009      	beq.n	80050e0 <HAL_SAI_IRQHandler+0x220>
      {
        /* Set the DMA Rx abort callback */
        hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d0:	4a1e      	ldr	r2, [pc, #120]	; (800514c <HAL_SAI_IRQHandler+0x28c>)
 80050d2:	651a      	str	r2, [r3, #80]	; 0x50
        /* Abort DMA in IT mode */
        HAL_DMA_Abort_IT(hsai->hdmarx);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fd fd7f 	bl	8002bdc <HAL_DMA_Abort_IT>
      if (hsai->hdmatx != NULL)
 80050de:	e031      	b.n	8005144 <HAL_SAI_IRQHandler+0x284>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2200      	movs	r2, #0
 80050e6:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f04f 32ff 	mov.w	r2, #4294967295
 80050f0:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f824 	bl	8005150 <HAL_SAI_ErrorCallback>
      if (hsai->hdmatx != NULL)
 8005108:	e01c      	b.n	8005144 <HAL_SAI_IRQHandler+0x284>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f003 0310 	and.w	r3, r3, #16
 8005110:	2b00      	cmp	r3, #0
 8005112:	d017      	beq.n	8005144 <HAL_SAI_IRQHandler+0x284>
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b00      	cmp	r3, #0
 800511c:	d012      	beq.n	8005144 <HAL_SAI_IRQHandler+0x284>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2210      	movs	r2, #16
 8005124:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800512c:	f043 0210 	orr.w	r2, r3, #16
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f80a 	bl	8005150 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800513c:	e002      	b.n	8005144 <HAL_SAI_IRQHandler+0x284>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800513e:	bf00      	nop
 8005140:	e000      	b.n	8005144 <HAL_SAI_IRQHandler+0x284>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005142:	bf00      	nop
}
 8005144:	bf00      	nop
 8005146:	3718      	adds	r7, #24
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	08005323 	.word	0x08005323

08005150 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800516e:	2301      	movs	r3, #1
 8005170:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d103      	bne.n	8005180 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f043 0308 	orr.w	r3, r3, #8
 800517e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	2b08      	cmp	r3, #8
 8005186:	d10b      	bne.n	80051a0 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800518c:	2b03      	cmp	r3, #3
 800518e:	d003      	beq.n	8005198 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d103      	bne.n	80051a0 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f043 0310 	orr.w	r3, r3, #16
 800519e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d003      	beq.n	80051b0 <SAI_InterruptFlag+0x4c>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d104      	bne.n	80051ba <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	e003      	b.n	80051c2 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f043 0304 	orr.w	r3, r3, #4
 80051c0:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80051c2:	68fb      	ldr	r3, [r7, #12]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80051d8:	4b17      	ldr	r3, [pc, #92]	; (8005238 <SAI_Disable+0x68>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a17      	ldr	r2, [pc, #92]	; (800523c <SAI_Disable+0x6c>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	0b1b      	lsrs	r3, r3, #12
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051fa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	1e5a      	subs	r2, r3, #1
 8005200:	60fa      	str	r2, [r7, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10a      	bne.n	800521c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800520c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	72fb      	strb	r3, [r7, #11]
      break;
 800521a:	e006      	b.n	800522a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e8      	bne.n	80051fc <SAI_Disable+0x2c>

  return status;
 800522a:	7afb      	ldrb	r3, [r7, #11]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	200005b8 	.word	0x200005b8
 800523c:	95cbec1b 	.word	0x95cbec1b

08005240 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005256:	d01c      	beq.n	8005292 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800526e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005270:	2100      	movs	r1, #0
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7ff ff76 	bl	8005164 <SAI_InterruptFlag>
 8005278:	4603      	mov	r3, r0
 800527a:	43d9      	mvns	r1, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	400a      	ands	r2, r1
 8005288:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f7fb fec4 	bl	8001020 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005298:	bf00      	nop
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7fb fec6 	bl	8001040 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80052b4:	bf00      	nop
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d004      	beq.n	80052ee <SAI_DMAError+0x32>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d112      	bne.n	8005314 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80052fc:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f7ff ff66 	bl	80051d0 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f7ff ff1b 	bl	8005150 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800533e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2200      	movs	r2, #0
 8005346:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f04f 32ff 	mov.w	r2, #4294967295
 8005350:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005358:	2b20      	cmp	r3, #32
 800535a:	d00a      	beq.n	8005372 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f7ff ff37 	bl	80051d0 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0208 	orr.w	r2, r2, #8
 8005370:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f7ff fee4 	bl	8005150 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005388:	bf00      	nop
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e022      	b.n	80053e8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d105      	bne.n	80053ba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7fc fd6b 	bl	8001e90 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2203      	movs	r2, #3
 80053be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f814 	bl	80053f0 <HAL_SD_InitCard>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e00a      	b.n	80053e8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80053f0:	b5b0      	push	{r4, r5, r7, lr}
 80053f2:	b08e      	sub	sp, #56	; 0x38
 80053f4:	af04      	add	r7, sp, #16
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005400:	2300      	movs	r3, #0
 8005402:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005404:	2300      	movs	r3, #0
 8005406:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005408:	2300      	movs	r3, #0
 800540a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800540c:	2376      	movs	r3, #118	; 0x76
 800540e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681d      	ldr	r5, [r3, #0]
 8005414:	466c      	mov	r4, sp
 8005416:	f107 0314 	add.w	r3, r7, #20
 800541a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800541e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005422:	f107 0308 	add.w	r3, r7, #8
 8005426:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005428:	4628      	mov	r0, r5
 800542a:	f002 fd9d 	bl	8007f68 <SDMMC_Init>
 800542e:	4603      	mov	r3, r0
 8005430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e059      	b.n	80054f4 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800544e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f002 fdd1 	bl	8007ffc <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005468:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800546a:	2002      	movs	r0, #2
 800546c:	f7fd f902 	bl	8002674 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fff3 	bl	800645c <SD_PowerON>
 8005476:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00b      	beq.n	8005496 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e02e      	b.n	80054f4 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 ff12 	bl	80062c0 <SD_InitCard>
 800549c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00b      	beq.n	80054bc <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e01b      	b.n	80054f4 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054c4:	4618      	mov	r0, r3
 80054c6:	f002 fe2b 	bl	8008120 <SDMMC_CmdBlockLength>
 80054ca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00f      	beq.n	80054f2 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a09      	ldr	r2, [pc, #36]	; (80054fc <HAL_SD_InitCard+0x10c>)
 80054d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3728      	adds	r7, #40	; 0x28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bdb0      	pop	{r4, r5, r7, pc}
 80054fc:	004005ff 	.word	0x004005ff

08005500 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08c      	sub	sp, #48	; 0x30
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d107      	bne.n	8005528 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e0c3      	b.n	80056b0 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	f040 80bc 	bne.w	80056ae <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800553c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	441a      	add	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005546:	429a      	cmp	r2, r3
 8005548:	d907      	bls.n	800555a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e0aa      	b.n	80056b0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2203      	movs	r2, #3
 800555e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2200      	movs	r2, #0
 8005568:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005578:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	4a4e      	ldr	r2, [pc, #312]	; (80056b8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005580:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	4a4d      	ldr	r2, [pc, #308]	; (80056bc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005588:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	2200      	movs	r2, #0
 8005590:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	2200      	movs	r2, #0
 8005598:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3380      	adds	r3, #128	; 0x80
 80055c0:	4619      	mov	r1, r3
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	025b      	lsls	r3, r3, #9
 80055c8:	089b      	lsrs	r3, r3, #2
 80055ca:	f7fd fa37 	bl	8002a3c <HAL_DMA_Start_IT>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d017      	beq.n	8005604 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80055e2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a35      	ldr	r2, [pc, #212]	; (80056c0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e055      	b.n	80056b0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0208 	orr.w	r2, r2, #8
 8005612:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005618:	2b01      	cmp	r3, #1
 800561a:	d002      	beq.n	8005622 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	025b      	lsls	r3, r3, #9
 8005620:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005622:	f04f 33ff 	mov.w	r3, #4294967295
 8005626:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	025b      	lsls	r3, r3, #9
 800562c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800562e:	2390      	movs	r3, #144	; 0x90
 8005630:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005632:	2302      	movs	r3, #2
 8005634:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005636:	2300      	movs	r3, #0
 8005638:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800563a:	2301      	movs	r3, #1
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f107 0210 	add.w	r2, r7, #16
 8005646:	4611      	mov	r1, r2
 8005648:	4618      	mov	r0, r3
 800564a:	f002 fd3d 	bl	80080c8 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d90a      	bls.n	800566a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2282      	movs	r2, #130	; 0x82
 8005658:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005660:	4618      	mov	r0, r3
 8005662:	f002 fda1 	bl	80081a8 <SDMMC_CmdReadMultiBlock>
 8005666:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005668:	e009      	b.n	800567e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2281      	movs	r2, #129	; 0x81
 800566e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005676:	4618      	mov	r0, r3
 8005678:	f002 fd74 	bl	8008164 <SDMMC_CmdReadSingleBlock>
 800567c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800567e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d012      	beq.n	80056aa <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a0d      	ldr	r2, [pc, #52]	; (80056c0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800568a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005692:	431a      	orrs	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e002      	b.n	80056b0 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	e000      	b.n	80056b0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80056ae:	2302      	movs	r3, #2
  }
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3730      	adds	r7, #48	; 0x30
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	080060cf 	.word	0x080060cf
 80056bc:	08006141 	.word	0x08006141
 80056c0:	004005ff 	.word	0x004005ff

080056c4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b08c      	sub	sp, #48	; 0x30
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d107      	bne.n	80056ec <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e0c6      	b.n	800587a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	f040 80bf 	bne.w	8005878 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	441a      	add	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800570a:	429a      	cmp	r2, r3
 800570c:	d907      	bls.n	800571e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e0ad      	b.n	800587a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2203      	movs	r2, #3
 8005722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2200      	movs	r2, #0
 800572c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 021a 	orr.w	r2, r2, #26
 800573c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005742:	4a50      	ldr	r2, [pc, #320]	; (8005884 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8005744:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574a:	4a4f      	ldr	r2, [pc, #316]	; (8005888 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800574c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005752:	2200      	movs	r2, #0
 8005754:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575a:	2b01      	cmp	r3, #1
 800575c:	d002      	beq.n	8005764 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	025b      	lsls	r3, r3, #9
 8005762:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d90a      	bls.n	8005780 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	22a0      	movs	r2, #160	; 0xa0
 800576e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005776:	4618      	mov	r0, r3
 8005778:	f002 fd5a 	bl	8008230 <SDMMC_CmdWriteMultiBlock>
 800577c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800577e:	e009      	b.n	8005794 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2290      	movs	r2, #144	; 0x90
 8005784:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800578c:	4618      	mov	r0, r3
 800578e:	f002 fd2d 	bl	80081ec <SDMMC_CmdWriteSingleBlock>
 8005792:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d012      	beq.n	80057c0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a3b      	ldr	r2, [pc, #236]	; (800588c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80057a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a8:	431a      	orrs	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e05c      	b.n	800587a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0208 	orr.w	r2, r2, #8
 80057ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d4:	2240      	movs	r2, #64	; 0x40
 80057d6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80057f8:	68b9      	ldr	r1, [r7, #8]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3380      	adds	r3, #128	; 0x80
 8005800:	461a      	mov	r2, r3
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	025b      	lsls	r3, r3, #9
 8005806:	089b      	lsrs	r3, r3, #2
 8005808:	f7fd f918 	bl	8002a3c <HAL_DMA_Start_IT>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d01a      	beq.n	8005848 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 021a 	bic.w	r2, r2, #26
 8005820:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a19      	ldr	r2, [pc, #100]	; (800588c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005828:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e018      	b.n	800587a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005848:	f04f 33ff 	mov.w	r3, #4294967295
 800584c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	025b      	lsls	r3, r3, #9
 8005852:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005854:	2390      	movs	r3, #144	; 0x90
 8005856:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005858:	2300      	movs	r3, #0
 800585a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800585c:	2300      	movs	r3, #0
 800585e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005860:	2301      	movs	r3, #1
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f107 0210 	add.w	r2, r7, #16
 800586c:	4611      	mov	r1, r2
 800586e:	4618      	mov	r0, r3
 8005870:	f002 fc2a 	bl	80080c8 <SDMMC_ConfigData>

      return HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	e000      	b.n	800587a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8005878:	2302      	movs	r3, #2
  }
}
 800587a:	4618      	mov	r0, r3
 800587c:	3730      	adds	r7, #48	; 0x30
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	080060a5 	.word	0x080060a5
 8005888:	08006141 	.word	0x08006141
 800588c:	004005ff 	.word	0x004005ff

08005890 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <HAL_SD_IRQHandler+0x2e>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f003 0308 	and.w	r3, r3, #8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 ffef 	bl	800689a <SD_Read_IT>
 80058bc:	e15a      	b.n	8005b74 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 808d 	beq.w	80059e8 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	4b9a      	ldr	r3, [pc, #616]	; (8005b4c <HAL_SD_IRQHandler+0x2bc>)
 80058e4:	400b      	ands	r3, r1
 80058e6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0201 	bic.w	r2, r2, #1
 80058f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d039      	beq.n	8005976 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d104      	bne.n	8005916 <HAL_SD_IRQHandler+0x86>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	d011      	beq.n	800593a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f002 fcaa 	bl	8008274 <SDMMC_CmdStopTransfer>
 8005920:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f921 	bl	8005b7c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f240 523a 	movw	r2, #1338	; 0x53a
 8005942:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d104      	bne.n	8005966 <HAL_SD_IRQHandler+0xd6>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f003 f912 	bl	8008b90 <HAL_SD_RxCpltCallback>
 800596c:	e102      	b.n	8005b74 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f003 f904 	bl	8008b7c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005974:	e0fe      	b.n	8005b74 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80f9 	beq.w	8005b74 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f003 0320 	and.w	r3, r3, #32
 8005988:	2b00      	cmp	r3, #0
 800598a:	d011      	beq.n	80059b0 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f002 fc6f 	bl	8008274 <SDMMC_CmdStopTransfer>
 8005996:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d008      	beq.n	80059b0 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f8e6 	bl	8005b7c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f040 80dc 	bne.w	8005b74 <HAL_SD_IRQHandler+0x2e4>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f040 80d6 	bne.w	8005b74 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0208 	bic.w	r2, r2, #8
 80059d6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f003 f8cb 	bl	8008b7c <HAL_SD_TxCpltCallback>
}
 80059e6:	e0c5      	b.n	8005b74 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d008      	beq.n	8005a08 <HAL_SD_IRQHandler+0x178>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 ff9b 	bl	800693c <SD_Write_IT>
 8005a06:	e0b5      	b.n	8005b74 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 80ae 	beq.w	8005b74 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	f043 0202 	orr.w	r2, r3, #2
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a44:	f043 0208 	orr.w	r2, r3, #8
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	f043 0220 	orr.w	r2, r3, #32
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6c:	f003 0310 	and.w	r3, r3, #16
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	f043 0210 	orr.w	r2, r3, #16
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f240 523a 	movw	r2, #1338	; 0x53a
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005a98:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f002 fbe8 	bl	8008274 <SDMMC_CmdStopTransfer>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f857 	bl	8005b7c <HAL_SD_ErrorCallback>
}
 8005ace:	e051      	b.n	8005b74 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d04c      	beq.n	8005b74 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f003 0310 	and.w	r3, r3, #16
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d104      	bne.n	8005aee <HAL_SD_IRQHandler+0x25e>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d011      	beq.n	8005b12 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af2:	4a17      	ldr	r2, [pc, #92]	; (8005b50 <HAL_SD_IRQHandler+0x2c0>)
 8005af4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fd f86e 	bl	8002bdc <HAL_DMA_Abort_IT>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d036      	beq.n	8005b74 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fb6a 	bl	80061e4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005b10:	e030      	b.n	8005b74 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d104      	bne.n	8005b26 <HAL_SD_IRQHandler+0x296>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d018      	beq.n	8005b58 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	4a0a      	ldr	r2, [pc, #40]	; (8005b54 <HAL_SD_IRQHandler+0x2c4>)
 8005b2c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fd f852 	bl	8002bdc <HAL_DMA_Abort_IT>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d01a      	beq.n	8005b74 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fb85 	bl	8006252 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005b48:	e014      	b.n	8005b74 <HAL_SD_IRQHandler+0x2e4>
 8005b4a:	bf00      	nop
 8005b4c:	ffff3ec5 	.word	0xffff3ec5
 8005b50:	080061e5 	.word	0x080061e5
 8005b54:	08006253 	.word	0x08006253
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f002 fffb 	bl	8008b68 <HAL_SD_AbortCallback>
}
 8005b72:	e7ff      	b.n	8005b74 <HAL_SD_IRQHandler+0x2e4>
 8005b74:	bf00      	nop
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b9e:	0f9b      	lsrs	r3, r3, #30
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005baa:	0e9b      	lsrs	r3, r3, #26
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bbc:	0e1b      	lsrs	r3, r3, #24
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bce:	0c1b      	lsrs	r3, r3, #16
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bda:	0a1b      	lsrs	r3, r3, #8
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bf0:	0d1b      	lsrs	r3, r3, #20
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bfc:	0c1b      	lsrs	r3, r3, #16
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c0e:	0bdb      	lsrs	r3, r3, #15
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c20:	0b9b      	lsrs	r3, r3, #14
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c32:	0b5b      	lsrs	r3, r3, #13
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c44:	0b1b      	lsrs	r3, r3, #12
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2200      	movs	r2, #0
 8005c56:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d163      	bne.n	8005d28 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c64:	009a      	lsls	r2, r3, #2
 8005c66:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005c70:	0f92      	lsrs	r2, r2, #30
 8005c72:	431a      	orrs	r2, r3
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c7c:	0edb      	lsrs	r3, r3, #27
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c8e:	0e1b      	lsrs	r3, r3, #24
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ca0:	0d5b      	lsrs	r3, r3, #21
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb2:	0c9b      	lsrs	r3, r3, #18
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cc4:	0bdb      	lsrs	r3, r3, #15
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	7e1b      	ldrb	r3, [r3, #24]
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	3302      	adds	r3, #2
 8005ce8:	2201      	movs	r2, #1
 8005cea:	fa02 f303 	lsl.w	r3, r2, r3
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005cf2:	fb03 f202 	mul.w	r2, r3, r2
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	7a1b      	ldrb	r3, [r3, #8]
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	f003 030f 	and.w	r3, r3, #15
 8005d04:	2201      	movs	r2, #1
 8005d06:	409a      	lsls	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005d14:	0a52      	lsrs	r2, r2, #9
 8005d16:	fb03 f202 	mul.w	r2, r3, r2
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d24:	661a      	str	r2, [r3, #96]	; 0x60
 8005d26:	e031      	b.n	8005d8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d11d      	bne.n	8005d6c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d34:	041b      	lsls	r3, r3, #16
 8005d36:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d3e:	0c1b      	lsrs	r3, r3, #16
 8005d40:	431a      	orrs	r2, r3
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	029a      	lsls	r2, r3, #10
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d60:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	661a      	str	r2, [r3, #96]	; 0x60
 8005d6a:	e00f      	b.n	8005d8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a58      	ldr	r2, [pc, #352]	; (8005ed4 <HAL_SD_GetCardCSD+0x344>)
 8005d72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e09d      	b.n	8005ec8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d90:	0b9b      	lsrs	r3, r3, #14
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005da2:	09db      	lsrs	r3, r3, #7
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc4:	0fdb      	lsrs	r3, r3, #31
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd0:	0f5b      	lsrs	r3, r3, #29
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	f003 0303 	and.w	r3, r3, #3
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de2:	0e9b      	lsrs	r3, r3, #26
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df4:	0d9b      	lsrs	r3, r3, #22
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e06:	0d5b      	lsrs	r3, r3, #21
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	0c1b      	lsrs	r3, r3, #16
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e36:	0bdb      	lsrs	r3, r3, #15
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4a:	0b9b      	lsrs	r3, r3, #14
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5e:	0b5b      	lsrs	r3, r3, #13
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e72:	0b1b      	lsrs	r3, r3, #12
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	0a9b      	lsrs	r3, r3, #10
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	f003 0303 	and.w	r3, r3, #3
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9a:	0a1b      	lsrs	r3, r3, #8
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eae:	085b      	lsrs	r3, r3, #1
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	004005ff 	.word	0x004005ff

08005ed8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005f30:	b5b0      	push	{r4, r5, r7, lr}
 8005f32:	b08e      	sub	sp, #56	; 0x38
 8005f34:	af04      	add	r7, sp, #16
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2203      	movs	r2, #3
 8005f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d02e      	beq.n	8005fae <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f56:	d106      	bne.n	8005f66 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	639a      	str	r2, [r3, #56]	; 0x38
 8005f64:	e029      	b.n	8005fba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f6c:	d10a      	bne.n	8005f84 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fb2a 	bl	80065c8 <SD_WideBus_Enable>
 8005f74:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
 8005f82:	e01a      	b.n	8005fba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10a      	bne.n	8005fa0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fb67 	bl	800665e <SD_WideBus_Disable>
 8005f90:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	639a      	str	r2, [r3, #56]	; 0x38
 8005f9e:	e00c      	b.n	8005fba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	639a      	str	r2, [r3, #56]	; 0x38
 8005fac:	e005      	b.n	8005fba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00b      	beq.n	8005fda <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a26      	ldr	r2, [pc, #152]	; (8006060 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005fc8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005fd8:	e01f      	b.n	800601a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681d      	ldr	r5, [r3, #0]
 8006000:	466c      	mov	r4, sp
 8006002:	f107 0314 	add.w	r3, r7, #20
 8006006:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800600a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800600e:	f107 0308 	add.w	r3, r7, #8
 8006012:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006014:	4628      	mov	r0, r5
 8006016:	f001 ffa7 	bl	8007f68 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006022:	4618      	mov	r0, r3
 8006024:	f002 f87c 	bl	8008120 <SDMMC_CmdBlockLength>
 8006028:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00c      	beq.n	800604a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a0a      	ldr	r2, [pc, #40]	; (8006060 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006036:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006056:	4618      	mov	r0, r3
 8006058:	3728      	adds	r7, #40	; 0x28
 800605a:	46bd      	mov	sp, r7
 800605c:	bdb0      	pop	{r4, r5, r7, pc}
 800605e:	bf00      	nop
 8006060:	004005ff 	.word	0x004005ff

08006064 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800606c:	2300      	movs	r3, #0
 800606e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006070:	f107 030c 	add.w	r3, r7, #12
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fa7e 	bl	8006578 <SD_SendStatus>
 800607c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d005      	beq.n	8006090 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	431a      	orrs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	0a5b      	lsrs	r3, r3, #9
 8006094:	f003 030f 	and.w	r3, r3, #15
 8006098:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800609a:	693b      	ldr	r3, [r7, #16]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060c0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80060c2:	bf00      	nop
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060da:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e0:	2b82      	cmp	r3, #130	; 0x82
 80060e2:	d111      	bne.n	8006108 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f002 f8c3 	bl	8008274 <SDMMC_CmdStopTransfer>
 80060ee:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d008      	beq.n	8006108 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	431a      	orrs	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f7ff fd3a 	bl	8005b7c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0208 	bic.w	r2, r2, #8
 8006116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006120:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f002 fd2d 	bl	8008b90 <HAL_SD_RxCpltCallback>
#endif
}
 8006136:	bf00      	nop
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fc fef0 	bl	8002f34 <HAL_DMA_GetError>
 8006154:	4603      	mov	r3, r0
 8006156:	2b02      	cmp	r3, #2
 8006158:	d03e      	beq.n	80061d8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006160:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006168:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d002      	beq.n	8006176 <SD_DMAError+0x36>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d12d      	bne.n	80061d2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a19      	ldr	r2, [pc, #100]	; (80061e0 <SD_DMAError+0xa0>)
 800617c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800618c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006192:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800619a:	6978      	ldr	r0, [r7, #20]
 800619c:	f7ff ff62 	bl	8006064 <HAL_SD_GetCardState>
 80061a0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b06      	cmp	r3, #6
 80061a6:	d002      	beq.n	80061ae <SD_DMAError+0x6e>
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b05      	cmp	r3, #5
 80061ac:	d10a      	bne.n	80061c4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f002 f85e 	bl	8008274 <SDMMC_CmdStopTransfer>
 80061b8:	4602      	mov	r2, r0
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061be:	431a      	orrs	r2, r3
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2200      	movs	r2, #0
 80061d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80061d2:	6978      	ldr	r0, [r7, #20]
 80061d4:	f7ff fcd2 	bl	8005b7c <HAL_SD_ErrorCallback>
#endif
  }
}
 80061d8:	bf00      	nop
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	004005ff 	.word	0x004005ff

080061e4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f240 523a 	movw	r2, #1338	; 0x53a
 80061fa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f7ff ff31 	bl	8006064 <HAL_SD_GetCardState>
 8006202:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2b06      	cmp	r3, #6
 8006216:	d002      	beq.n	800621e <SD_DMATxAbort+0x3a>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b05      	cmp	r3, #5
 800621c:	d10a      	bne.n	8006234 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4618      	mov	r0, r3
 8006224:	f002 f826 	bl	8008274 <SDMMC_CmdStopTransfer>
 8006228:	4602      	mov	r2, r0
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622e:	431a      	orrs	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	2b00      	cmp	r3, #0
 800623a:	d103      	bne.n	8006244 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f002 fc93 	bl	8008b68 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006242:	e002      	b.n	800624a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f7ff fc99 	bl	8005b7c <HAL_SD_ErrorCallback>
}
 800624a:	bf00      	nop
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f240 523a 	movw	r2, #1338	; 0x53a
 8006268:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff fefa 	bl	8006064 <HAL_SD_GetCardState>
 8006270:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b06      	cmp	r3, #6
 8006284:	d002      	beq.n	800628c <SD_DMARxAbort+0x3a>
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b05      	cmp	r3, #5
 800628a:	d10a      	bne.n	80062a2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4618      	mov	r0, r3
 8006292:	f001 ffef 	bl	8008274 <SDMMC_CmdStopTransfer>
 8006296:	4602      	mov	r2, r0
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629c:	431a      	orrs	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d103      	bne.n	80062b2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f002 fc5c 	bl	8008b68 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80062b0:	e002      	b.n	80062b8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f7ff fc62 	bl	8005b7c <HAL_SD_ErrorCallback>
}
 80062b8:	bf00      	nop
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80062c0:	b5b0      	push	{r4, r5, r7, lr}
 80062c2:	b094      	sub	sp, #80	; 0x50
 80062c4:	af04      	add	r7, sp, #16
 80062c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80062c8:	2301      	movs	r3, #1
 80062ca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f001 fea1 	bl	8008018 <SDMMC_GetPowerState>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d102      	bne.n	80062e2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80062dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80062e0:	e0b8      	b.n	8006454 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d02f      	beq.n	800634a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f002 f8cb 	bl	800848a <SDMMC_CmdSendCID>
 80062f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80062f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <SD_InitCard+0x40>
    {
      return errorstate;
 80062fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062fe:	e0a9      	b.n	8006454 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2100      	movs	r1, #0
 8006306:	4618      	mov	r0, r3
 8006308:	f001 fecb 	bl	80080a2 <SDMMC_GetResponse>
 800630c:	4602      	mov	r2, r0
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2104      	movs	r1, #4
 8006318:	4618      	mov	r0, r3
 800631a:	f001 fec2 	bl	80080a2 <SDMMC_GetResponse>
 800631e:	4602      	mov	r2, r0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2108      	movs	r1, #8
 800632a:	4618      	mov	r0, r3
 800632c:	f001 feb9 	bl	80080a2 <SDMMC_GetResponse>
 8006330:	4602      	mov	r2, r0
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	210c      	movs	r1, #12
 800633c:	4618      	mov	r0, r3
 800633e:	f001 feb0 	bl	80080a2 <SDMMC_GetResponse>
 8006342:	4602      	mov	r2, r0
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634e:	2b03      	cmp	r3, #3
 8006350:	d00d      	beq.n	800636e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f107 020e 	add.w	r2, r7, #14
 800635a:	4611      	mov	r1, r2
 800635c:	4618      	mov	r0, r3
 800635e:	f002 f8d1 	bl	8008504 <SDMMC_CmdSetRelAdd>
 8006362:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <SD_InitCard+0xae>
    {
      return errorstate;
 800636a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800636c:	e072      	b.n	8006454 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006372:	2b03      	cmp	r3, #3
 8006374:	d036      	beq.n	80063e4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006376:	89fb      	ldrh	r3, [r7, #14]
 8006378:	461a      	mov	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006386:	041b      	lsls	r3, r3, #16
 8006388:	4619      	mov	r1, r3
 800638a:	4610      	mov	r0, r2
 800638c:	f002 f89b 	bl	80084c6 <SDMMC_CmdSendCSD>
 8006390:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800639a:	e05b      	b.n	8006454 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2100      	movs	r1, #0
 80063a2:	4618      	mov	r0, r3
 80063a4:	f001 fe7d 	bl	80080a2 <SDMMC_GetResponse>
 80063a8:	4602      	mov	r2, r0
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2104      	movs	r1, #4
 80063b4:	4618      	mov	r0, r3
 80063b6:	f001 fe74 	bl	80080a2 <SDMMC_GetResponse>
 80063ba:	4602      	mov	r2, r0
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2108      	movs	r1, #8
 80063c6:	4618      	mov	r0, r3
 80063c8:	f001 fe6b 	bl	80080a2 <SDMMC_GetResponse>
 80063cc:	4602      	mov	r2, r0
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	210c      	movs	r1, #12
 80063d8:	4618      	mov	r0, r3
 80063da:	f001 fe62 	bl	80080a2 <SDMMC_GetResponse>
 80063de:	4602      	mov	r2, r0
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2104      	movs	r1, #4
 80063ea:	4618      	mov	r0, r3
 80063ec:	f001 fe59 	bl	80080a2 <SDMMC_GetResponse>
 80063f0:	4603      	mov	r3, r0
 80063f2:	0d1a      	lsrs	r2, r3, #20
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80063f8:	f107 0310 	add.w	r3, r7, #16
 80063fc:	4619      	mov	r1, r3
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7ff fbc6 	bl	8005b90 <HAL_SD_GetCardCSD>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800640a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800640e:	e021      	b.n	8006454 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6819      	ldr	r1, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006418:	041b      	lsls	r3, r3, #16
 800641a:	2200      	movs	r2, #0
 800641c:	461c      	mov	r4, r3
 800641e:	4615      	mov	r5, r2
 8006420:	4622      	mov	r2, r4
 8006422:	462b      	mov	r3, r5
 8006424:	4608      	mov	r0, r1
 8006426:	f001 ff47 	bl	80082b8 <SDMMC_CmdSelDesel>
 800642a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800642c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <SD_InitCard+0x176>
  {
    return errorstate;
 8006432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006434:	e00e      	b.n	8006454 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681d      	ldr	r5, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	466c      	mov	r4, sp
 800643e:	f103 0210 	add.w	r2, r3, #16
 8006442:	ca07      	ldmia	r2, {r0, r1, r2}
 8006444:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006448:	3304      	adds	r3, #4
 800644a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800644c:	4628      	mov	r0, r5
 800644e:	f001 fd8b 	bl	8007f68 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3740      	adds	r7, #64	; 0x40
 8006458:	46bd      	mov	sp, r7
 800645a:	bdb0      	pop	{r4, r5, r7, pc}

0800645c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	2300      	movs	r3, #0
 800646e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4618      	mov	r0, r3
 8006476:	f001 ff42 	bl	80082fe <SDMMC_CmdGoIdleState>
 800647a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	e072      	b.n	800656c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	f001 ff55 	bl	800833a <SDMMC_CmdOperCond>
 8006490:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00d      	beq.n	80064b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f001 ff2b 	bl	80082fe <SDMMC_CmdGoIdleState>
 80064a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d004      	beq.n	80064ba <SD_PowerON+0x5e>
    {
      return errorstate;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	e05b      	b.n	800656c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d137      	bne.n	8006532 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2100      	movs	r1, #0
 80064c8:	4618      	mov	r0, r3
 80064ca:	f001 ff55 	bl	8008378 <SDMMC_CmdAppCommand>
 80064ce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d02d      	beq.n	8006532 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80064da:	e047      	b.n	800656c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2100      	movs	r1, #0
 80064e2:	4618      	mov	r0, r3
 80064e4:	f001 ff48 	bl	8008378 <SDMMC_CmdAppCommand>
 80064e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <SD_PowerON+0x98>
    {
      return errorstate;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	e03b      	b.n	800656c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	491e      	ldr	r1, [pc, #120]	; (8006574 <SD_PowerON+0x118>)
 80064fa:	4618      	mov	r0, r3
 80064fc:	f001 ff5e 	bl	80083bc <SDMMC_CmdAppOperCommand>
 8006500:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800650c:	e02e      	b.n	800656c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2100      	movs	r1, #0
 8006514:	4618      	mov	r0, r3
 8006516:	f001 fdc4 	bl	80080a2 <SDMMC_GetResponse>
 800651a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	0fdb      	lsrs	r3, r3, #31
 8006520:	2b01      	cmp	r3, #1
 8006522:	d101      	bne.n	8006528 <SD_PowerON+0xcc>
 8006524:	2301      	movs	r3, #1
 8006526:	e000      	b.n	800652a <SD_PowerON+0xce>
 8006528:	2300      	movs	r3, #0
 800652a:	613b      	str	r3, [r7, #16]

    count++;
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	3301      	adds	r3, #1
 8006530:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006538:	4293      	cmp	r3, r2
 800653a:	d802      	bhi.n	8006542 <SD_PowerON+0xe6>
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d0cc      	beq.n	80064dc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006548:	4293      	cmp	r3, r2
 800654a:	d902      	bls.n	8006552 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800654c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006550:	e00c      	b.n	800656c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	645a      	str	r2, [r3, #68]	; 0x44
 8006562:	e002      	b.n	800656a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	c1100000 	.word	0xc1100000

08006578 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006588:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800658c:	e018      	b.n	80065c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006596:	041b      	lsls	r3, r3, #16
 8006598:	4619      	mov	r1, r3
 800659a:	4610      	mov	r0, r2
 800659c:	f001 ffd3 	bl	8008546 <SDMMC_CmdSendStatus>
 80065a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <SD_SendStatus+0x34>
  {
    return errorstate;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	e009      	b.n	80065c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2100      	movs	r1, #0
 80065b2:	4618      	mov	r0, r3
 80065b4:	f001 fd75 	bl	80080a2 <SDMMC_GetResponse>
 80065b8:	4602      	mov	r2, r0
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	2300      	movs	r3, #0
 80065d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2100      	movs	r1, #0
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 fd5f 	bl	80080a2 <SDMMC_GetResponse>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065ee:	d102      	bne.n	80065f6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80065f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065f4:	e02f      	b.n	8006656 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80065f6:	f107 030c 	add.w	r3, r7, #12
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f879 	bl	80066f4 <SD_FindSCR>
 8006602:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	e023      	b.n	8006656 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d01c      	beq.n	8006652 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006620:	041b      	lsls	r3, r3, #16
 8006622:	4619      	mov	r1, r3
 8006624:	4610      	mov	r0, r2
 8006626:	f001 fea7 	bl	8008378 <SDMMC_CmdAppCommand>
 800662a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	e00f      	b.n	8006656 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2102      	movs	r1, #2
 800663c:	4618      	mov	r0, r3
 800663e:	f001 fee1 	bl	8008404 <SDMMC_CmdBusWidth>
 8006642:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	e003      	b.n	8006656 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800664e:	2300      	movs	r3, #0
 8006650:	e001      	b.n	8006656 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006652:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006656:	4618      	mov	r0, r3
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b086      	sub	sp, #24
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	2300      	movs	r3, #0
 800666c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2100      	movs	r1, #0
 8006674:	4618      	mov	r0, r3
 8006676:	f001 fd14 	bl	80080a2 <SDMMC_GetResponse>
 800667a:	4603      	mov	r3, r0
 800667c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006680:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006684:	d102      	bne.n	800668c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006686:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800668a:	e02f      	b.n	80066ec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800668c:	f107 030c 	add.w	r3, r7, #12
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f82e 	bl	80066f4 <SD_FindSCR>
 8006698:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	e023      	b.n	80066ec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d01c      	beq.n	80066e8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b6:	041b      	lsls	r3, r3, #16
 80066b8:	4619      	mov	r1, r3
 80066ba:	4610      	mov	r0, r2
 80066bc:	f001 fe5c 	bl	8008378 <SDMMC_CmdAppCommand>
 80066c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	e00f      	b.n	80066ec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2100      	movs	r1, #0
 80066d2:	4618      	mov	r0, r3
 80066d4:	f001 fe96 	bl	8008404 <SDMMC_CmdBusWidth>
 80066d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	e003      	b.n	80066ec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80066e4:	2300      	movs	r3, #0
 80066e6:	e001      	b.n	80066ec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80066e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80066f4:	b590      	push	{r4, r7, lr}
 80066f6:	b08f      	sub	sp, #60	; 0x3c
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80066fe:	f7fb ffad 	bl	800265c <HAL_GetTick>
 8006702:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006708:	2300      	movs	r3, #0
 800670a:	60bb      	str	r3, [r7, #8]
 800670c:	2300      	movs	r3, #0
 800670e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2108      	movs	r1, #8
 800671a:	4618      	mov	r0, r3
 800671c:	f001 fd00 	bl	8008120 <SDMMC_CmdBlockLength>
 8006720:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <SD_FindSCR+0x38>
  {
    return errorstate;
 8006728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672a:	e0b2      	b.n	8006892 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006734:	041b      	lsls	r3, r3, #16
 8006736:	4619      	mov	r1, r3
 8006738:	4610      	mov	r0, r2
 800673a:	f001 fe1d 	bl	8008378 <SDMMC_CmdAppCommand>
 800673e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <SD_FindSCR+0x56>
  {
    return errorstate;
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	e0a3      	b.n	8006892 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800674a:	f04f 33ff 	mov.w	r3, #4294967295
 800674e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006750:	2308      	movs	r3, #8
 8006752:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006754:	2330      	movs	r3, #48	; 0x30
 8006756:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006758:	2302      	movs	r3, #2
 800675a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800675c:	2300      	movs	r3, #0
 800675e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006760:	2301      	movs	r3, #1
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f107 0210 	add.w	r2, r7, #16
 800676c:	4611      	mov	r1, r2
 800676e:	4618      	mov	r0, r3
 8006770:	f001 fcaa 	bl	80080c8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4618      	mov	r0, r3
 800677a:	f001 fe65 	bl	8008448 <SDMMC_CmdSendSCR>
 800677e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	2b00      	cmp	r3, #0
 8006784:	d02a      	beq.n	80067dc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006788:	e083      	b.n	8006892 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00f      	beq.n	80067b8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6819      	ldr	r1, [r3, #0]
 800679c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	f107 0208 	add.w	r2, r7, #8
 80067a4:	18d4      	adds	r4, r2, r3
 80067a6:	4608      	mov	r0, r1
 80067a8:	f001 fc0a 	bl	8007fc0 <SDMMC_ReadFIFO>
 80067ac:	4603      	mov	r3, r0
 80067ae:	6023      	str	r3, [r4, #0]
      index++;
 80067b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b2:	3301      	adds	r3, #1
 80067b4:	637b      	str	r3, [r7, #52]	; 0x34
 80067b6:	e006      	b.n	80067c6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d012      	beq.n	80067ec <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80067c6:	f7fb ff49 	bl	800265c <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d4:	d102      	bne.n	80067dc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80067d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80067da:	e05a      	b.n	8006892 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0cf      	beq.n	800678a <SD_FindSCR+0x96>
 80067ea:	e000      	b.n	80067ee <SD_FindSCR+0xfa>
      break;
 80067ec:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f4:	f003 0308 	and.w	r3, r3, #8
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2208      	movs	r2, #8
 8006802:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006804:	2308      	movs	r3, #8
 8006806:	e044      	b.n	8006892 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d005      	beq.n	8006822 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2202      	movs	r2, #2
 800681c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800681e:	2302      	movs	r3, #2
 8006820:	e037      	b.n	8006892 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006828:	f003 0320 	and.w	r3, r3, #32
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2220      	movs	r2, #32
 8006836:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006838:	2320      	movs	r3, #32
 800683a:	e02a      	b.n	8006892 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f240 523a 	movw	r2, #1338	; 0x53a
 8006844:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	061a      	lsls	r2, r3, #24
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006852:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	0a1b      	lsrs	r3, r3, #8
 8006858:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800685c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	0e1b      	lsrs	r3, r3, #24
 8006862:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006866:	601a      	str	r2, [r3, #0]
    scr++;
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	3304      	adds	r3, #4
 800686c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	061a      	lsls	r2, r3, #24
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	021b      	lsls	r3, r3, #8
 8006876:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800687a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	0a1b      	lsrs	r3, r3, #8
 8006880:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006884:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	0e1b      	lsrs	r3, r3, #24
 800688a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	373c      	adds	r7, #60	; 0x3c
 8006896:	46bd      	mov	sp, r7
 8006898:	bd90      	pop	{r4, r7, pc}

0800689a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b086      	sub	sp, #24
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d03f      	beq.n	8006934 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80068b4:	2300      	movs	r3, #0
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	e033      	b.n	8006922 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	f001 fb7e 	bl	8007fc0 <SDMMC_ReadFIFO>
 80068c4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	3301      	adds	r3, #1
 80068d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	0a1b      	lsrs	r3, r3, #8
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3301      	adds	r3, #1
 80068e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	0c1b      	lsrs	r3, r3, #16
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	3301      	adds	r3, #1
 80068fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	3b01      	subs	r3, #1
 8006904:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	0e1b      	lsrs	r3, r3, #24
 800690a:	b2da      	uxtb	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3301      	adds	r3, #1
 8006914:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	3b01      	subs	r3, #1
 800691a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	3301      	adds	r3, #1
 8006920:	617b      	str	r3, [r7, #20]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2b07      	cmp	r3, #7
 8006926:	d9c8      	bls.n	80068ba <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006934:	bf00      	nop
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d043      	beq.n	80069de <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	e037      	b.n	80069cc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3301      	adds	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	3b01      	subs	r3, #1
 800696c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	021a      	lsls	r2, r3, #8
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4313      	orrs	r3, r2
 8006978:	60bb      	str	r3, [r7, #8]
      tmp++;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	3301      	adds	r3, #1
 800697e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	3b01      	subs	r3, #1
 8006984:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	041a      	lsls	r2, r3, #16
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4313      	orrs	r3, r2
 8006990:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3301      	adds	r3, #1
 8006996:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	3b01      	subs	r3, #1
 800699c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	061a      	lsls	r2, r3, #24
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	3301      	adds	r3, #1
 80069ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f107 0208 	add.w	r2, r7, #8
 80069be:	4611      	mov	r1, r2
 80069c0:	4618      	mov	r0, r3
 80069c2:	f001 fb0a 	bl	8007fda <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	3301      	adds	r3, #1
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	2b07      	cmp	r3, #7
 80069d0:	d9c4      	bls.n	800695c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80069de:	bf00      	nop
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e049      	b.n	8006a8c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d106      	bne.n	8006a12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7fb fb4b 	bl	80020a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2202      	movs	r2, #2
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3304      	adds	r3, #4
 8006a22:	4619      	mov	r1, r3
 8006a24:	4610      	mov	r0, r2
 8006a26:	f000 f8ff 	bl	8006c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_TIM_ConfigClockSource+0x1c>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e0b4      	b.n	8006c1a <HAL_TIM_ConfigClockSource+0x186>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	4b56      	ldr	r3, [pc, #344]	; (8006c24 <HAL_TIM_ConfigClockSource+0x190>)
 8006acc:	4013      	ands	r3, r2
 8006ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ad6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae8:	d03e      	beq.n	8006b68 <HAL_TIM_ConfigClockSource+0xd4>
 8006aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aee:	f200 8087 	bhi.w	8006c00 <HAL_TIM_ConfigClockSource+0x16c>
 8006af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af6:	f000 8086 	beq.w	8006c06 <HAL_TIM_ConfigClockSource+0x172>
 8006afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afe:	d87f      	bhi.n	8006c00 <HAL_TIM_ConfigClockSource+0x16c>
 8006b00:	2b70      	cmp	r3, #112	; 0x70
 8006b02:	d01a      	beq.n	8006b3a <HAL_TIM_ConfigClockSource+0xa6>
 8006b04:	2b70      	cmp	r3, #112	; 0x70
 8006b06:	d87b      	bhi.n	8006c00 <HAL_TIM_ConfigClockSource+0x16c>
 8006b08:	2b60      	cmp	r3, #96	; 0x60
 8006b0a:	d050      	beq.n	8006bae <HAL_TIM_ConfigClockSource+0x11a>
 8006b0c:	2b60      	cmp	r3, #96	; 0x60
 8006b0e:	d877      	bhi.n	8006c00 <HAL_TIM_ConfigClockSource+0x16c>
 8006b10:	2b50      	cmp	r3, #80	; 0x50
 8006b12:	d03c      	beq.n	8006b8e <HAL_TIM_ConfigClockSource+0xfa>
 8006b14:	2b50      	cmp	r3, #80	; 0x50
 8006b16:	d873      	bhi.n	8006c00 <HAL_TIM_ConfigClockSource+0x16c>
 8006b18:	2b40      	cmp	r3, #64	; 0x40
 8006b1a:	d058      	beq.n	8006bce <HAL_TIM_ConfigClockSource+0x13a>
 8006b1c:	2b40      	cmp	r3, #64	; 0x40
 8006b1e:	d86f      	bhi.n	8006c00 <HAL_TIM_ConfigClockSource+0x16c>
 8006b20:	2b30      	cmp	r3, #48	; 0x30
 8006b22:	d064      	beq.n	8006bee <HAL_TIM_ConfigClockSource+0x15a>
 8006b24:	2b30      	cmp	r3, #48	; 0x30
 8006b26:	d86b      	bhi.n	8006c00 <HAL_TIM_ConfigClockSource+0x16c>
 8006b28:	2b20      	cmp	r3, #32
 8006b2a:	d060      	beq.n	8006bee <HAL_TIM_ConfigClockSource+0x15a>
 8006b2c:	2b20      	cmp	r3, #32
 8006b2e:	d867      	bhi.n	8006c00 <HAL_TIM_ConfigClockSource+0x16c>
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d05c      	beq.n	8006bee <HAL_TIM_ConfigClockSource+0x15a>
 8006b34:	2b10      	cmp	r3, #16
 8006b36:	d05a      	beq.n	8006bee <HAL_TIM_ConfigClockSource+0x15a>
 8006b38:	e062      	b.n	8006c00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6818      	ldr	r0, [r3, #0]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	6899      	ldr	r1, [r3, #8]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f000 f987 	bl	8006e5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	609a      	str	r2, [r3, #8]
      break;
 8006b66:	e04f      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6818      	ldr	r0, [r3, #0]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	6899      	ldr	r1, [r3, #8]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f000 f970 	bl	8006e5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689a      	ldr	r2, [r3, #8]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b8a:	609a      	str	r2, [r3, #8]
      break;
 8006b8c:	e03c      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6818      	ldr	r0, [r3, #0]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	6859      	ldr	r1, [r3, #4]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f000 f8e4 	bl	8006d68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2150      	movs	r1, #80	; 0x50
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 f93d 	bl	8006e26 <TIM_ITRx_SetConfig>
      break;
 8006bac:	e02c      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6818      	ldr	r0, [r3, #0]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	6859      	ldr	r1, [r3, #4]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	f000 f903 	bl	8006dc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2160      	movs	r1, #96	; 0x60
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 f92d 	bl	8006e26 <TIM_ITRx_SetConfig>
      break;
 8006bcc:	e01c      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6818      	ldr	r0, [r3, #0]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	6859      	ldr	r1, [r3, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f000 f8c4 	bl	8006d68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2140      	movs	r1, #64	; 0x40
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 f91d 	bl	8006e26 <TIM_ITRx_SetConfig>
      break;
 8006bec:	e00c      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	f000 f914 	bl	8006e26 <TIM_ITRx_SetConfig>
      break;
 8006bfe:	e003      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	73fb      	strb	r3, [r7, #15]
      break;
 8006c04:	e000      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	fffeff88 	.word	0xfffeff88

08006c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a40      	ldr	r2, [pc, #256]	; (8006d3c <TIM_Base_SetConfig+0x114>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d013      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c46:	d00f      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a3d      	ldr	r2, [pc, #244]	; (8006d40 <TIM_Base_SetConfig+0x118>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d00b      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a3c      	ldr	r2, [pc, #240]	; (8006d44 <TIM_Base_SetConfig+0x11c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d007      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a3b      	ldr	r2, [pc, #236]	; (8006d48 <TIM_Base_SetConfig+0x120>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d003      	beq.n	8006c68 <TIM_Base_SetConfig+0x40>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a3a      	ldr	r2, [pc, #232]	; (8006d4c <TIM_Base_SetConfig+0x124>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d108      	bne.n	8006c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a2f      	ldr	r2, [pc, #188]	; (8006d3c <TIM_Base_SetConfig+0x114>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d02b      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c88:	d027      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a2c      	ldr	r2, [pc, #176]	; (8006d40 <TIM_Base_SetConfig+0x118>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d023      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a2b      	ldr	r2, [pc, #172]	; (8006d44 <TIM_Base_SetConfig+0x11c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d01f      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a2a      	ldr	r2, [pc, #168]	; (8006d48 <TIM_Base_SetConfig+0x120>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d01b      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a29      	ldr	r2, [pc, #164]	; (8006d4c <TIM_Base_SetConfig+0x124>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d017      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a28      	ldr	r2, [pc, #160]	; (8006d50 <TIM_Base_SetConfig+0x128>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d013      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a27      	ldr	r2, [pc, #156]	; (8006d54 <TIM_Base_SetConfig+0x12c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00f      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a26      	ldr	r2, [pc, #152]	; (8006d58 <TIM_Base_SetConfig+0x130>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00b      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a25      	ldr	r2, [pc, #148]	; (8006d5c <TIM_Base_SetConfig+0x134>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d007      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a24      	ldr	r2, [pc, #144]	; (8006d60 <TIM_Base_SetConfig+0x138>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d003      	beq.n	8006cda <TIM_Base_SetConfig+0xb2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a23      	ldr	r2, [pc, #140]	; (8006d64 <TIM_Base_SetConfig+0x13c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d108      	bne.n	8006cec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a0a      	ldr	r2, [pc, #40]	; (8006d3c <TIM_Base_SetConfig+0x114>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d003      	beq.n	8006d20 <TIM_Base_SetConfig+0xf8>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a0c      	ldr	r2, [pc, #48]	; (8006d4c <TIM_Base_SetConfig+0x124>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d103      	bne.n	8006d28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	615a      	str	r2, [r3, #20]
}
 8006d2e:	bf00      	nop
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	40010000 	.word	0x40010000
 8006d40:	40000400 	.word	0x40000400
 8006d44:	40000800 	.word	0x40000800
 8006d48:	40000c00 	.word	0x40000c00
 8006d4c:	40010400 	.word	0x40010400
 8006d50:	40014000 	.word	0x40014000
 8006d54:	40014400 	.word	0x40014400
 8006d58:	40014800 	.word	0x40014800
 8006d5c:	40001800 	.word	0x40001800
 8006d60:	40001c00 	.word	0x40001c00
 8006d64:	40002000 	.word	0x40002000

08006d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	f023 0201 	bic.w	r2, r3, #1
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	011b      	lsls	r3, r3, #4
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f023 030a 	bic.w	r3, r3, #10
 8006da4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	621a      	str	r2, [r3, #32]
}
 8006dba:	bf00      	nop
 8006dbc:	371c      	adds	r7, #28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b087      	sub	sp, #28
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	60f8      	str	r0, [r7, #12]
 8006dce:	60b9      	str	r1, [r7, #8]
 8006dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	f023 0210 	bic.w	r2, r3, #16
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006df0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	031b      	lsls	r3, r3, #12
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	621a      	str	r2, [r3, #32]
}
 8006e1a:	bf00      	nop
 8006e1c:	371c      	adds	r7, #28
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b085      	sub	sp, #20
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f043 0307 	orr.w	r3, r3, #7
 8006e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	609a      	str	r2, [r3, #8]
}
 8006e50:	bf00      	nop
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	021a      	lsls	r2, r3, #8
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	609a      	str	r2, [r3, #8]
}
 8006e90:	bf00      	nop
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d101      	bne.n	8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	e06d      	b.n	8006f90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a30      	ldr	r2, [pc, #192]	; (8006f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d004      	beq.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a2f      	ldr	r2, [pc, #188]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d108      	bne.n	8006efa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006eee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a20      	ldr	r2, [pc, #128]	; (8006f9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d022      	beq.n	8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f26:	d01d      	beq.n	8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a1d      	ldr	r2, [pc, #116]	; (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d018      	beq.n	8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a1c      	ldr	r2, [pc, #112]	; (8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d013      	beq.n	8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a1a      	ldr	r2, [pc, #104]	; (8006fac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d00e      	beq.n	8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a15      	ldr	r2, [pc, #84]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d009      	beq.n	8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a16      	ldr	r2, [pc, #88]	; (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d004      	beq.n	8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a15      	ldr	r2, [pc, #84]	; (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d10c      	bne.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	40010000 	.word	0x40010000
 8006fa0:	40010400 	.word	0x40010400
 8006fa4:	40000400 	.word	0x40000400
 8006fa8:	40000800 	.word	0x40000800
 8006fac:	40000c00 	.word	0x40000c00
 8006fb0:	40014000 	.word	0x40014000
 8006fb4:	40001800 	.word	0x40001800

08006fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e040      	b.n	800704c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d106      	bne.n	8006fe0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fb f884 	bl	80020e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2224      	movs	r2, #36	; 0x24
 8006fe4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0201 	bic.w	r2, r2, #1
 8006ff4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fb16 	bl	8007628 <UART_SetConfig>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d101      	bne.n	8007006 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e022      	b.n	800704c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fd6e 	bl	8007af0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007022:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689a      	ldr	r2, [r3, #8]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f042 0201 	orr.w	r2, r2, #1
 8007042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fdf5 	bl	8007c34 <UART_CheckIdleState>
 800704a:	4603      	mov	r3, r0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b0ba      	sub	sp, #232	; 0xe8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800707a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800707e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007082:	4013      	ands	r3, r2
 8007084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800708c:	2b00      	cmp	r3, #0
 800708e:	d115      	bne.n	80070bc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00f      	beq.n	80070bc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800709c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a0:	f003 0320 	and.w	r3, r3, #32
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d009      	beq.n	80070bc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 828f 	beq.w	80075d0 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	4798      	blx	r3
      }
      return;
 80070ba:	e289      	b.n	80075d0 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80070bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 8117 	beq.w	80072f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80070c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d106      	bne.n	80070e0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80070d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80070d6:	4b85      	ldr	r3, [pc, #532]	; (80072ec <HAL_UART_IRQHandler+0x298>)
 80070d8:	4013      	ands	r3, r2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 810a 	beq.w	80072f4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d011      	beq.n	8007110 <HAL_UART_IRQHandler+0xbc>
 80070ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00b      	beq.n	8007110 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2201      	movs	r2, #1
 80070fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007106:	f043 0201 	orr.w	r2, r3, #1
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d011      	beq.n	8007140 <HAL_UART_IRQHandler+0xec>
 800711c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00b      	beq.n	8007140 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2202      	movs	r2, #2
 800712e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007136:	f043 0204 	orr.w	r2, r3, #4
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007144:	f003 0304 	and.w	r3, r3, #4
 8007148:	2b00      	cmp	r3, #0
 800714a:	d011      	beq.n	8007170 <HAL_UART_IRQHandler+0x11c>
 800714c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00b      	beq.n	8007170 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2204      	movs	r2, #4
 800715e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007166:	f043 0202 	orr.w	r2, r3, #2
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007174:	f003 0308 	and.w	r3, r3, #8
 8007178:	2b00      	cmp	r3, #0
 800717a:	d017      	beq.n	80071ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800717c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007180:	f003 0320 	and.w	r3, r3, #32
 8007184:	2b00      	cmp	r3, #0
 8007186:	d105      	bne.n	8007194 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800718c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00b      	beq.n	80071ac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2208      	movs	r2, #8
 800719a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071a2:	f043 0208 	orr.w	r2, r3, #8
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d012      	beq.n	80071de <HAL_UART_IRQHandler+0x18a>
 80071b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00c      	beq.n	80071de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071d4:	f043 0220 	orr.w	r2, r3, #32
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 81f5 	beq.w	80075d4 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80071ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00d      	beq.n	8007212 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d007      	beq.n	8007212 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007218:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007226:	2b40      	cmp	r3, #64	; 0x40
 8007228:	d005      	beq.n	8007236 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800722a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800722e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007232:	2b00      	cmp	r3, #0
 8007234:	d04f      	beq.n	80072d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fdf3 	bl	8007e22 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007246:	2b40      	cmp	r3, #64	; 0x40
 8007248:	d141      	bne.n	80072ce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3308      	adds	r3, #8
 8007250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007254:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3308      	adds	r3, #8
 8007272:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007276:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800727a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007282:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007286:	e841 2300 	strex	r3, r2, [r1]
 800728a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800728e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1d9      	bne.n	800724a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729a:	2b00      	cmp	r3, #0
 800729c:	d013      	beq.n	80072c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a2:	4a13      	ldr	r2, [pc, #76]	; (80072f0 <HAL_UART_IRQHandler+0x29c>)
 80072a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fb fc96 	bl	8002bdc <HAL_DMA_Abort_IT>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d017      	beq.n	80072e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80072c0:	4610      	mov	r0, r2
 80072c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c4:	e00f      	b.n	80072e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f998 	bl	80075fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072cc:	e00b      	b.n	80072e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f994 	bl	80075fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d4:	e007      	b.n	80072e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f990 	bl	80075fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80072e4:	e176      	b.n	80075d4 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e6:	bf00      	nop
    return;
 80072e8:	e174      	b.n	80075d4 <HAL_UART_IRQHandler+0x580>
 80072ea:	bf00      	nop
 80072ec:	04000120 	.word	0x04000120
 80072f0:	08007ee9 	.word	0x08007ee9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	f040 8144 	bne.w	8007586 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80072fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007302:	f003 0310 	and.w	r3, r3, #16
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 813d 	beq.w	8007586 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800730c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007310:	f003 0310 	and.w	r3, r3, #16
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 8136 	beq.w	8007586 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2210      	movs	r2, #16
 8007320:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732c:	2b40      	cmp	r3, #64	; 0x40
 800732e:	f040 80b2 	bne.w	8007496 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800733e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 8148 	beq.w	80075d8 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800734e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007352:	429a      	cmp	r2, r3
 8007354:	f080 8140 	bcs.w	80075d8 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800735e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800736c:	f000 8085 	beq.w	800747a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007378:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800737c:	e853 3f00 	ldrex	r3, [r3]
 8007380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800738c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	461a      	mov	r2, r3
 8007396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800739a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800739e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1da      	bne.n	8007370 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3308      	adds	r3, #8
 80073c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073cc:	f023 0301 	bic.w	r3, r3, #1
 80073d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3308      	adds	r3, #8
 80073da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073ea:	e841 2300 	strex	r3, r2, [r1]
 80073ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1e1      	bne.n	80073ba <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3308      	adds	r3, #8
 80073fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800740c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3308      	adds	r3, #8
 8007416:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800741a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800741c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007420:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e3      	bne.n	80073f6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007442:	e853 3f00 	ldrex	r3, [r3]
 8007446:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800744a:	f023 0310 	bic.w	r3, r3, #16
 800744e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	461a      	mov	r2, r3
 8007458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800745c:	65bb      	str	r3, [r7, #88]	; 0x58
 800745e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007460:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007462:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007464:	e841 2300 	strex	r3, r2, [r1]
 8007468:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800746a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e4      	bne.n	800743a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007474:	4618      	mov	r0, r3
 8007476:	f7fb fb41 	bl	8002afc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007486:	b29b      	uxth	r3, r3
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	b29b      	uxth	r3, r3
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f8be 	bl	8007610 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007494:	e0a0      	b.n	80075d8 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 8092 	beq.w	80075dc <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80074b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 808d 	beq.w	80075dc <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ca:	e853 3f00 	ldrex	r3, [r3]
 80074ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074e4:	647b      	str	r3, [r7, #68]	; 0x44
 80074e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e4      	bne.n	80074c2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3308      	adds	r3, #8
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	623b      	str	r3, [r7, #32]
   return(result);
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	f023 0301 	bic.w	r3, r3, #1
 800750e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3308      	adds	r3, #8
 8007518:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800751c:	633a      	str	r2, [r7, #48]	; 0x30
 800751e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e3      	bne.n	80074f8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2220      	movs	r2, #32
 8007534:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	e853 3f00 	ldrex	r3, [r3]
 800754e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0310 	bic.w	r3, r3, #16
 8007556:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007564:	61fb      	str	r3, [r7, #28]
 8007566:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007568:	69b9      	ldr	r1, [r7, #24]
 800756a:	69fa      	ldr	r2, [r7, #28]
 800756c:	e841 2300 	strex	r3, r2, [r1]
 8007570:	617b      	str	r3, [r7, #20]
   return(result);
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1e4      	bne.n	8007542 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007578:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f846 	bl	8007610 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007584:	e02a      	b.n	80075dc <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00e      	beq.n	80075b0 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759a:	2b00      	cmp	r3, #0
 800759c:	d008      	beq.n	80075b0 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d01c      	beq.n	80075e0 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	4798      	blx	r3
    }
    return;
 80075ae:	e017      	b.n	80075e0 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d012      	beq.n	80075e2 <HAL_UART_IRQHandler+0x58e>
 80075bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00c      	beq.n	80075e2 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fca3 	bl	8007f14 <UART_EndTransmit_IT>
    return;
 80075ce:	e008      	b.n	80075e2 <HAL_UART_IRQHandler+0x58e>
      return;
 80075d0:	bf00      	nop
 80075d2:	e006      	b.n	80075e2 <HAL_UART_IRQHandler+0x58e>
    return;
 80075d4:	bf00      	nop
 80075d6:	e004      	b.n	80075e2 <HAL_UART_IRQHandler+0x58e>
      return;
 80075d8:	bf00      	nop
 80075da:	e002      	b.n	80075e2 <HAL_UART_IRQHandler+0x58e>
      return;
 80075dc:	bf00      	nop
 80075de:	e000      	b.n	80075e2 <HAL_UART_IRQHandler+0x58e>
    return;
 80075e0:	bf00      	nop
  }

}
 80075e2:	37e8      	adds	r7, #232	; 0xe8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	431a      	orrs	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	4313      	orrs	r3, r2
 800764a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	4ba6      	ldr	r3, [pc, #664]	; (80078ec <UART_SetConfig+0x2c4>)
 8007654:	4013      	ands	r3, r2
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	6812      	ldr	r2, [r2, #0]
 800765a:	6979      	ldr	r1, [r7, #20]
 800765c:	430b      	orrs	r3, r1
 800765e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	4313      	orrs	r3, r2
 8007684:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	430a      	orrs	r2, r1
 8007698:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a94      	ldr	r2, [pc, #592]	; (80078f0 <UART_SetConfig+0x2c8>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d120      	bne.n	80076e6 <UART_SetConfig+0xbe>
 80076a4:	4b93      	ldr	r3, [pc, #588]	; (80078f4 <UART_SetConfig+0x2cc>)
 80076a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076aa:	f003 0303 	and.w	r3, r3, #3
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d816      	bhi.n	80076e0 <UART_SetConfig+0xb8>
 80076b2:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <UART_SetConfig+0x90>)
 80076b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b8:	080076c9 	.word	0x080076c9
 80076bc:	080076d5 	.word	0x080076d5
 80076c0:	080076cf 	.word	0x080076cf
 80076c4:	080076db 	.word	0x080076db
 80076c8:	2301      	movs	r3, #1
 80076ca:	77fb      	strb	r3, [r7, #31]
 80076cc:	e150      	b.n	8007970 <UART_SetConfig+0x348>
 80076ce:	2302      	movs	r3, #2
 80076d0:	77fb      	strb	r3, [r7, #31]
 80076d2:	e14d      	b.n	8007970 <UART_SetConfig+0x348>
 80076d4:	2304      	movs	r3, #4
 80076d6:	77fb      	strb	r3, [r7, #31]
 80076d8:	e14a      	b.n	8007970 <UART_SetConfig+0x348>
 80076da:	2308      	movs	r3, #8
 80076dc:	77fb      	strb	r3, [r7, #31]
 80076de:	e147      	b.n	8007970 <UART_SetConfig+0x348>
 80076e0:	2310      	movs	r3, #16
 80076e2:	77fb      	strb	r3, [r7, #31]
 80076e4:	e144      	b.n	8007970 <UART_SetConfig+0x348>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a83      	ldr	r2, [pc, #524]	; (80078f8 <UART_SetConfig+0x2d0>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d132      	bne.n	8007756 <UART_SetConfig+0x12e>
 80076f0:	4b80      	ldr	r3, [pc, #512]	; (80078f4 <UART_SetConfig+0x2cc>)
 80076f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f6:	f003 030c 	and.w	r3, r3, #12
 80076fa:	2b0c      	cmp	r3, #12
 80076fc:	d828      	bhi.n	8007750 <UART_SetConfig+0x128>
 80076fe:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <UART_SetConfig+0xdc>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	08007739 	.word	0x08007739
 8007708:	08007751 	.word	0x08007751
 800770c:	08007751 	.word	0x08007751
 8007710:	08007751 	.word	0x08007751
 8007714:	08007745 	.word	0x08007745
 8007718:	08007751 	.word	0x08007751
 800771c:	08007751 	.word	0x08007751
 8007720:	08007751 	.word	0x08007751
 8007724:	0800773f 	.word	0x0800773f
 8007728:	08007751 	.word	0x08007751
 800772c:	08007751 	.word	0x08007751
 8007730:	08007751 	.word	0x08007751
 8007734:	0800774b 	.word	0x0800774b
 8007738:	2300      	movs	r3, #0
 800773a:	77fb      	strb	r3, [r7, #31]
 800773c:	e118      	b.n	8007970 <UART_SetConfig+0x348>
 800773e:	2302      	movs	r3, #2
 8007740:	77fb      	strb	r3, [r7, #31]
 8007742:	e115      	b.n	8007970 <UART_SetConfig+0x348>
 8007744:	2304      	movs	r3, #4
 8007746:	77fb      	strb	r3, [r7, #31]
 8007748:	e112      	b.n	8007970 <UART_SetConfig+0x348>
 800774a:	2308      	movs	r3, #8
 800774c:	77fb      	strb	r3, [r7, #31]
 800774e:	e10f      	b.n	8007970 <UART_SetConfig+0x348>
 8007750:	2310      	movs	r3, #16
 8007752:	77fb      	strb	r3, [r7, #31]
 8007754:	e10c      	b.n	8007970 <UART_SetConfig+0x348>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a68      	ldr	r2, [pc, #416]	; (80078fc <UART_SetConfig+0x2d4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d120      	bne.n	80077a2 <UART_SetConfig+0x17a>
 8007760:	4b64      	ldr	r3, [pc, #400]	; (80078f4 <UART_SetConfig+0x2cc>)
 8007762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007766:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800776a:	2b30      	cmp	r3, #48	; 0x30
 800776c:	d013      	beq.n	8007796 <UART_SetConfig+0x16e>
 800776e:	2b30      	cmp	r3, #48	; 0x30
 8007770:	d814      	bhi.n	800779c <UART_SetConfig+0x174>
 8007772:	2b20      	cmp	r3, #32
 8007774:	d009      	beq.n	800778a <UART_SetConfig+0x162>
 8007776:	2b20      	cmp	r3, #32
 8007778:	d810      	bhi.n	800779c <UART_SetConfig+0x174>
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <UART_SetConfig+0x15c>
 800777e:	2b10      	cmp	r3, #16
 8007780:	d006      	beq.n	8007790 <UART_SetConfig+0x168>
 8007782:	e00b      	b.n	800779c <UART_SetConfig+0x174>
 8007784:	2300      	movs	r3, #0
 8007786:	77fb      	strb	r3, [r7, #31]
 8007788:	e0f2      	b.n	8007970 <UART_SetConfig+0x348>
 800778a:	2302      	movs	r3, #2
 800778c:	77fb      	strb	r3, [r7, #31]
 800778e:	e0ef      	b.n	8007970 <UART_SetConfig+0x348>
 8007790:	2304      	movs	r3, #4
 8007792:	77fb      	strb	r3, [r7, #31]
 8007794:	e0ec      	b.n	8007970 <UART_SetConfig+0x348>
 8007796:	2308      	movs	r3, #8
 8007798:	77fb      	strb	r3, [r7, #31]
 800779a:	e0e9      	b.n	8007970 <UART_SetConfig+0x348>
 800779c:	2310      	movs	r3, #16
 800779e:	77fb      	strb	r3, [r7, #31]
 80077a0:	e0e6      	b.n	8007970 <UART_SetConfig+0x348>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a56      	ldr	r2, [pc, #344]	; (8007900 <UART_SetConfig+0x2d8>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d120      	bne.n	80077ee <UART_SetConfig+0x1c6>
 80077ac:	4b51      	ldr	r3, [pc, #324]	; (80078f4 <UART_SetConfig+0x2cc>)
 80077ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077b6:	2bc0      	cmp	r3, #192	; 0xc0
 80077b8:	d013      	beq.n	80077e2 <UART_SetConfig+0x1ba>
 80077ba:	2bc0      	cmp	r3, #192	; 0xc0
 80077bc:	d814      	bhi.n	80077e8 <UART_SetConfig+0x1c0>
 80077be:	2b80      	cmp	r3, #128	; 0x80
 80077c0:	d009      	beq.n	80077d6 <UART_SetConfig+0x1ae>
 80077c2:	2b80      	cmp	r3, #128	; 0x80
 80077c4:	d810      	bhi.n	80077e8 <UART_SetConfig+0x1c0>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d002      	beq.n	80077d0 <UART_SetConfig+0x1a8>
 80077ca:	2b40      	cmp	r3, #64	; 0x40
 80077cc:	d006      	beq.n	80077dc <UART_SetConfig+0x1b4>
 80077ce:	e00b      	b.n	80077e8 <UART_SetConfig+0x1c0>
 80077d0:	2300      	movs	r3, #0
 80077d2:	77fb      	strb	r3, [r7, #31]
 80077d4:	e0cc      	b.n	8007970 <UART_SetConfig+0x348>
 80077d6:	2302      	movs	r3, #2
 80077d8:	77fb      	strb	r3, [r7, #31]
 80077da:	e0c9      	b.n	8007970 <UART_SetConfig+0x348>
 80077dc:	2304      	movs	r3, #4
 80077de:	77fb      	strb	r3, [r7, #31]
 80077e0:	e0c6      	b.n	8007970 <UART_SetConfig+0x348>
 80077e2:	2308      	movs	r3, #8
 80077e4:	77fb      	strb	r3, [r7, #31]
 80077e6:	e0c3      	b.n	8007970 <UART_SetConfig+0x348>
 80077e8:	2310      	movs	r3, #16
 80077ea:	77fb      	strb	r3, [r7, #31]
 80077ec:	e0c0      	b.n	8007970 <UART_SetConfig+0x348>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a44      	ldr	r2, [pc, #272]	; (8007904 <UART_SetConfig+0x2dc>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d125      	bne.n	8007844 <UART_SetConfig+0x21c>
 80077f8:	4b3e      	ldr	r3, [pc, #248]	; (80078f4 <UART_SetConfig+0x2cc>)
 80077fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007806:	d017      	beq.n	8007838 <UART_SetConfig+0x210>
 8007808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800780c:	d817      	bhi.n	800783e <UART_SetConfig+0x216>
 800780e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007812:	d00b      	beq.n	800782c <UART_SetConfig+0x204>
 8007814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007818:	d811      	bhi.n	800783e <UART_SetConfig+0x216>
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <UART_SetConfig+0x1fe>
 800781e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007822:	d006      	beq.n	8007832 <UART_SetConfig+0x20a>
 8007824:	e00b      	b.n	800783e <UART_SetConfig+0x216>
 8007826:	2300      	movs	r3, #0
 8007828:	77fb      	strb	r3, [r7, #31]
 800782a:	e0a1      	b.n	8007970 <UART_SetConfig+0x348>
 800782c:	2302      	movs	r3, #2
 800782e:	77fb      	strb	r3, [r7, #31]
 8007830:	e09e      	b.n	8007970 <UART_SetConfig+0x348>
 8007832:	2304      	movs	r3, #4
 8007834:	77fb      	strb	r3, [r7, #31]
 8007836:	e09b      	b.n	8007970 <UART_SetConfig+0x348>
 8007838:	2308      	movs	r3, #8
 800783a:	77fb      	strb	r3, [r7, #31]
 800783c:	e098      	b.n	8007970 <UART_SetConfig+0x348>
 800783e:	2310      	movs	r3, #16
 8007840:	77fb      	strb	r3, [r7, #31]
 8007842:	e095      	b.n	8007970 <UART_SetConfig+0x348>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a2f      	ldr	r2, [pc, #188]	; (8007908 <UART_SetConfig+0x2e0>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d125      	bne.n	800789a <UART_SetConfig+0x272>
 800784e:	4b29      	ldr	r3, [pc, #164]	; (80078f4 <UART_SetConfig+0x2cc>)
 8007850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007854:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007858:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800785c:	d017      	beq.n	800788e <UART_SetConfig+0x266>
 800785e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007862:	d817      	bhi.n	8007894 <UART_SetConfig+0x26c>
 8007864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007868:	d00b      	beq.n	8007882 <UART_SetConfig+0x25a>
 800786a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800786e:	d811      	bhi.n	8007894 <UART_SetConfig+0x26c>
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <UART_SetConfig+0x254>
 8007874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007878:	d006      	beq.n	8007888 <UART_SetConfig+0x260>
 800787a:	e00b      	b.n	8007894 <UART_SetConfig+0x26c>
 800787c:	2301      	movs	r3, #1
 800787e:	77fb      	strb	r3, [r7, #31]
 8007880:	e076      	b.n	8007970 <UART_SetConfig+0x348>
 8007882:	2302      	movs	r3, #2
 8007884:	77fb      	strb	r3, [r7, #31]
 8007886:	e073      	b.n	8007970 <UART_SetConfig+0x348>
 8007888:	2304      	movs	r3, #4
 800788a:	77fb      	strb	r3, [r7, #31]
 800788c:	e070      	b.n	8007970 <UART_SetConfig+0x348>
 800788e:	2308      	movs	r3, #8
 8007890:	77fb      	strb	r3, [r7, #31]
 8007892:	e06d      	b.n	8007970 <UART_SetConfig+0x348>
 8007894:	2310      	movs	r3, #16
 8007896:	77fb      	strb	r3, [r7, #31]
 8007898:	e06a      	b.n	8007970 <UART_SetConfig+0x348>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a1b      	ldr	r2, [pc, #108]	; (800790c <UART_SetConfig+0x2e4>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d138      	bne.n	8007916 <UART_SetConfig+0x2ee>
 80078a4:	4b13      	ldr	r3, [pc, #76]	; (80078f4 <UART_SetConfig+0x2cc>)
 80078a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80078ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078b2:	d017      	beq.n	80078e4 <UART_SetConfig+0x2bc>
 80078b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078b8:	d82a      	bhi.n	8007910 <UART_SetConfig+0x2e8>
 80078ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078be:	d00b      	beq.n	80078d8 <UART_SetConfig+0x2b0>
 80078c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078c4:	d824      	bhi.n	8007910 <UART_SetConfig+0x2e8>
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <UART_SetConfig+0x2aa>
 80078ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ce:	d006      	beq.n	80078de <UART_SetConfig+0x2b6>
 80078d0:	e01e      	b.n	8007910 <UART_SetConfig+0x2e8>
 80078d2:	2300      	movs	r3, #0
 80078d4:	77fb      	strb	r3, [r7, #31]
 80078d6:	e04b      	b.n	8007970 <UART_SetConfig+0x348>
 80078d8:	2302      	movs	r3, #2
 80078da:	77fb      	strb	r3, [r7, #31]
 80078dc:	e048      	b.n	8007970 <UART_SetConfig+0x348>
 80078de:	2304      	movs	r3, #4
 80078e0:	77fb      	strb	r3, [r7, #31]
 80078e2:	e045      	b.n	8007970 <UART_SetConfig+0x348>
 80078e4:	2308      	movs	r3, #8
 80078e6:	77fb      	strb	r3, [r7, #31]
 80078e8:	e042      	b.n	8007970 <UART_SetConfig+0x348>
 80078ea:	bf00      	nop
 80078ec:	efff69f3 	.word	0xefff69f3
 80078f0:	40011000 	.word	0x40011000
 80078f4:	40023800 	.word	0x40023800
 80078f8:	40004400 	.word	0x40004400
 80078fc:	40004800 	.word	0x40004800
 8007900:	40004c00 	.word	0x40004c00
 8007904:	40005000 	.word	0x40005000
 8007908:	40011400 	.word	0x40011400
 800790c:	40007800 	.word	0x40007800
 8007910:	2310      	movs	r3, #16
 8007912:	77fb      	strb	r3, [r7, #31]
 8007914:	e02c      	b.n	8007970 <UART_SetConfig+0x348>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a72      	ldr	r2, [pc, #456]	; (8007ae4 <UART_SetConfig+0x4bc>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d125      	bne.n	800796c <UART_SetConfig+0x344>
 8007920:	4b71      	ldr	r3, [pc, #452]	; (8007ae8 <UART_SetConfig+0x4c0>)
 8007922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007926:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800792a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800792e:	d017      	beq.n	8007960 <UART_SetConfig+0x338>
 8007930:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007934:	d817      	bhi.n	8007966 <UART_SetConfig+0x33e>
 8007936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800793a:	d00b      	beq.n	8007954 <UART_SetConfig+0x32c>
 800793c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007940:	d811      	bhi.n	8007966 <UART_SetConfig+0x33e>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d003      	beq.n	800794e <UART_SetConfig+0x326>
 8007946:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800794a:	d006      	beq.n	800795a <UART_SetConfig+0x332>
 800794c:	e00b      	b.n	8007966 <UART_SetConfig+0x33e>
 800794e:	2300      	movs	r3, #0
 8007950:	77fb      	strb	r3, [r7, #31]
 8007952:	e00d      	b.n	8007970 <UART_SetConfig+0x348>
 8007954:	2302      	movs	r3, #2
 8007956:	77fb      	strb	r3, [r7, #31]
 8007958:	e00a      	b.n	8007970 <UART_SetConfig+0x348>
 800795a:	2304      	movs	r3, #4
 800795c:	77fb      	strb	r3, [r7, #31]
 800795e:	e007      	b.n	8007970 <UART_SetConfig+0x348>
 8007960:	2308      	movs	r3, #8
 8007962:	77fb      	strb	r3, [r7, #31]
 8007964:	e004      	b.n	8007970 <UART_SetConfig+0x348>
 8007966:	2310      	movs	r3, #16
 8007968:	77fb      	strb	r3, [r7, #31]
 800796a:	e001      	b.n	8007970 <UART_SetConfig+0x348>
 800796c:	2310      	movs	r3, #16
 800796e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007978:	d15b      	bne.n	8007a32 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800797a:	7ffb      	ldrb	r3, [r7, #31]
 800797c:	2b08      	cmp	r3, #8
 800797e:	d828      	bhi.n	80079d2 <UART_SetConfig+0x3aa>
 8007980:	a201      	add	r2, pc, #4	; (adr r2, 8007988 <UART_SetConfig+0x360>)
 8007982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007986:	bf00      	nop
 8007988:	080079ad 	.word	0x080079ad
 800798c:	080079b5 	.word	0x080079b5
 8007990:	080079bd 	.word	0x080079bd
 8007994:	080079d3 	.word	0x080079d3
 8007998:	080079c3 	.word	0x080079c3
 800799c:	080079d3 	.word	0x080079d3
 80079a0:	080079d3 	.word	0x080079d3
 80079a4:	080079d3 	.word	0x080079d3
 80079a8:	080079cb 	.word	0x080079cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079ac:	f7fc fa7c 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 80079b0:	61b8      	str	r0, [r7, #24]
        break;
 80079b2:	e013      	b.n	80079dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079b4:	f7fc fa8c 	bl	8003ed0 <HAL_RCC_GetPCLK2Freq>
 80079b8:	61b8      	str	r0, [r7, #24]
        break;
 80079ba:	e00f      	b.n	80079dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079bc:	4b4b      	ldr	r3, [pc, #300]	; (8007aec <UART_SetConfig+0x4c4>)
 80079be:	61bb      	str	r3, [r7, #24]
        break;
 80079c0:	e00c      	b.n	80079dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079c2:	f7fc f961 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 80079c6:	61b8      	str	r0, [r7, #24]
        break;
 80079c8:	e008      	b.n	80079dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ce:	61bb      	str	r3, [r7, #24]
        break;
 80079d0:	e004      	b.n	80079dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	77bb      	strb	r3, [r7, #30]
        break;
 80079da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d074      	beq.n	8007acc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	005a      	lsls	r2, r3, #1
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	085b      	lsrs	r3, r3, #1
 80079ec:	441a      	add	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80079f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	2b0f      	cmp	r3, #15
 80079fc:	d916      	bls.n	8007a2c <UART_SetConfig+0x404>
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a04:	d212      	bcs.n	8007a2c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	f023 030f 	bic.w	r3, r3, #15
 8007a0e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	085b      	lsrs	r3, r3, #1
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	f003 0307 	and.w	r3, r3, #7
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	89fb      	ldrh	r3, [r7, #14]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	89fa      	ldrh	r2, [r7, #14]
 8007a28:	60da      	str	r2, [r3, #12]
 8007a2a:	e04f      	b.n	8007acc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	77bb      	strb	r3, [r7, #30]
 8007a30:	e04c      	b.n	8007acc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a32:	7ffb      	ldrb	r3, [r7, #31]
 8007a34:	2b08      	cmp	r3, #8
 8007a36:	d828      	bhi.n	8007a8a <UART_SetConfig+0x462>
 8007a38:	a201      	add	r2, pc, #4	; (adr r2, 8007a40 <UART_SetConfig+0x418>)
 8007a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3e:	bf00      	nop
 8007a40:	08007a65 	.word	0x08007a65
 8007a44:	08007a6d 	.word	0x08007a6d
 8007a48:	08007a75 	.word	0x08007a75
 8007a4c:	08007a8b 	.word	0x08007a8b
 8007a50:	08007a7b 	.word	0x08007a7b
 8007a54:	08007a8b 	.word	0x08007a8b
 8007a58:	08007a8b 	.word	0x08007a8b
 8007a5c:	08007a8b 	.word	0x08007a8b
 8007a60:	08007a83 	.word	0x08007a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a64:	f7fc fa20 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 8007a68:	61b8      	str	r0, [r7, #24]
        break;
 8007a6a:	e013      	b.n	8007a94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a6c:	f7fc fa30 	bl	8003ed0 <HAL_RCC_GetPCLK2Freq>
 8007a70:	61b8      	str	r0, [r7, #24]
        break;
 8007a72:	e00f      	b.n	8007a94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a74:	4b1d      	ldr	r3, [pc, #116]	; (8007aec <UART_SetConfig+0x4c4>)
 8007a76:	61bb      	str	r3, [r7, #24]
        break;
 8007a78:	e00c      	b.n	8007a94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a7a:	f7fc f905 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8007a7e:	61b8      	str	r0, [r7, #24]
        break;
 8007a80:	e008      	b.n	8007a94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a86:	61bb      	str	r3, [r7, #24]
        break;
 8007a88:	e004      	b.n	8007a94 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	77bb      	strb	r3, [r7, #30]
        break;
 8007a92:	bf00      	nop
    }

    if (pclk != 0U)
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d018      	beq.n	8007acc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	085a      	lsrs	r2, r3, #1
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	441a      	add	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	2b0f      	cmp	r3, #15
 8007ab2:	d909      	bls.n	8007ac8 <UART_SetConfig+0x4a0>
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aba:	d205      	bcs.n	8007ac8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	60da      	str	r2, [r3, #12]
 8007ac6:	e001      	b.n	8007acc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007ad8:	7fbb      	ldrb	r3, [r7, #30]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3720      	adds	r7, #32
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	40007c00 	.word	0x40007c00
 8007ae8:	40023800 	.word	0x40023800
 8007aec:	00f42400 	.word	0x00f42400

08007af0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00a      	beq.n	8007b1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	f003 0304 	and.w	r3, r3, #4
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	f003 0308 	and.w	r3, r3, #8
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	f003 0310 	and.w	r3, r3, #16
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00a      	beq.n	8007ba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	f003 0320 	and.w	r3, r3, #32
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d01a      	beq.n	8007c06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bee:	d10a      	bne.n	8007c06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00a      	beq.n	8007c28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	605a      	str	r2, [r3, #4]
  }
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af02      	add	r7, sp, #8
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c44:	f7fa fd0a 	bl	800265c <HAL_GetTick>
 8007c48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0308 	and.w	r3, r3, #8
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	d10e      	bne.n	8007c76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f817 	bl	8007c9a <UART_WaitOnFlagUntilTimeout>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d001      	beq.n	8007c76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e00d      	b.n	8007c92 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2220      	movs	r2, #32
 8007c7a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b09c      	sub	sp, #112	; 0x70
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	60f8      	str	r0, [r7, #12]
 8007ca2:	60b9      	str	r1, [r7, #8]
 8007ca4:	603b      	str	r3, [r7, #0]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007caa:	e0a5      	b.n	8007df8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb2:	f000 80a1 	beq.w	8007df8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cb6:	f7fa fcd1 	bl	800265c <HAL_GetTick>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d302      	bcc.n	8007ccc <UART_WaitOnFlagUntilTimeout+0x32>
 8007cc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d13e      	bne.n	8007d4a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cdc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ce0:	667b      	str	r3, [r7, #100]	; 0x64
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cf2:	e841 2300 	strex	r3, r2, [r1]
 8007cf6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1e6      	bne.n	8007ccc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3308      	adds	r3, #8
 8007d04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d08:	e853 3f00 	ldrex	r3, [r3]
 8007d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d10:	f023 0301 	bic.w	r3, r3, #1
 8007d14:	663b      	str	r3, [r7, #96]	; 0x60
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d26:	e841 2300 	strex	r3, r2, [r1]
 8007d2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e5      	bne.n	8007cfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2220      	movs	r2, #32
 8007d36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e067      	b.n	8007e1a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d04f      	beq.n	8007df8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d66:	d147      	bne.n	8007df8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d90:	637b      	str	r3, [r7, #52]	; 0x34
 8007d92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e6      	bne.n	8007d72 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3308      	adds	r3, #8
 8007daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	613b      	str	r3, [r7, #16]
   return(result);
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f023 0301 	bic.w	r3, r3, #1
 8007dba:	66bb      	str	r3, [r7, #104]	; 0x68
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3308      	adds	r3, #8
 8007dc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007dc4:	623a      	str	r2, [r7, #32]
 8007dc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	69f9      	ldr	r1, [r7, #28]
 8007dca:	6a3a      	ldr	r2, [r7, #32]
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e5      	bne.n	8007da4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2220      	movs	r2, #32
 8007de2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2220      	movs	r2, #32
 8007de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e010      	b.n	8007e1a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	69da      	ldr	r2, [r3, #28]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	4013      	ands	r3, r2
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	bf0c      	ite	eq
 8007e08:	2301      	moveq	r3, #1
 8007e0a:	2300      	movne	r3, #0
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	461a      	mov	r2, r3
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	f43f af4a 	beq.w	8007cac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3770      	adds	r7, #112	; 0x70
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b095      	sub	sp, #84	; 0x54
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e32:	e853 3f00 	ldrex	r3, [r3]
 8007e36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	461a      	mov	r2, r3
 8007e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e48:	643b      	str	r3, [r7, #64]	; 0x40
 8007e4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e50:	e841 2300 	strex	r3, r2, [r1]
 8007e54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e6      	bne.n	8007e2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3308      	adds	r3, #8
 8007e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	e853 3f00 	ldrex	r3, [r3]
 8007e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	f023 0301 	bic.w	r3, r3, #1
 8007e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3308      	adds	r3, #8
 8007e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e84:	e841 2300 	strex	r3, r2, [r1]
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e5      	bne.n	8007e5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d118      	bne.n	8007eca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	e853 3f00 	ldrex	r3, [r3]
 8007ea4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f023 0310 	bic.w	r3, r3, #16
 8007eac:	647b      	str	r3, [r7, #68]	; 0x44
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eb6:	61bb      	str	r3, [r7, #24]
 8007eb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eba:	6979      	ldr	r1, [r7, #20]
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	e841 2300 	strex	r3, r2, [r1]
 8007ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1e6      	bne.n	8007e98 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007edc:	bf00      	nop
 8007ede:	3754      	adds	r7, #84	; 0x54
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f7ff fb78 	bl	80075fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f0c:	bf00      	nop
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	e853 3f00 	ldrex	r3, [r3]
 8007f28:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f30:	61fb      	str	r3, [r7, #28]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	61bb      	str	r3, [r7, #24]
 8007f3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3e:	6979      	ldr	r1, [r7, #20]
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	e841 2300 	strex	r3, r2, [r1]
 8007f46:	613b      	str	r3, [r7, #16]
   return(result);
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1e6      	bne.n	8007f1c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2220      	movs	r2, #32
 8007f52:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7ff fb44 	bl	80075e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f60:	bf00      	nop
 8007f62:	3720      	adds	r7, #32
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007f68:	b084      	sub	sp, #16
 8007f6a:	b480      	push	{r7}
 8007f6c:	b085      	sub	sp, #20
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	f107 001c 	add.w	r0, r7, #28
 8007f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007f7e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007f80:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007f82:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007f86:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007f8a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007f8e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007f92:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	4b07      	ldr	r3, [pc, #28]	; (8007fbc <SDMMC_Init+0x54>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	b004      	add	sp, #16
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	ffff8100 	.word	0xffff8100

08007fc0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8007fe2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2203      	movs	r2, #3
 8008008:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0303 	and.w	r3, r3, #3
}
 8008028:	4618      	mov	r0, r3
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800803e:	2300      	movs	r3, #0
 8008040:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008052:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008058:	431a      	orrs	r2, r3
                       Command->CPSM);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800805e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	4313      	orrs	r3, r2
 8008064:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	68da      	ldr	r2, [r3, #12]
 800806a:	4b06      	ldr	r3, [pc, #24]	; (8008084 <SDMMC_SendCommand+0x50>)
 800806c:	4013      	ands	r3, r2
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	431a      	orrs	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr
 8008084:	fffff000 	.word	0xfffff000

08008088 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	b2db      	uxtb	r3, r3
}
 8008096:	4618      	mov	r0, r3
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b085      	sub	sp, #20
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	3314      	adds	r3, #20
 80080b0:	461a      	mov	r2, r3
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	4413      	add	r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
}  
 80080bc:	4618      	mov	r0, r3
 80080be:	3714      	adds	r7, #20
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	685a      	ldr	r2, [r3, #4]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80080ee:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80080f4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80080fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008106:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	431a      	orrs	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008112:	2300      	movs	r3, #0

}
 8008114:	4618      	mov	r0, r3
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b088      	sub	sp, #32
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800812e:	2310      	movs	r3, #16
 8008130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008132:	2340      	movs	r3, #64	; 0x40
 8008134:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008136:	2300      	movs	r3, #0
 8008138:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800813a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800813e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008140:	f107 0308 	add.w	r3, r7, #8
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7ff ff74 	bl	8008034 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800814c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008150:	2110      	movs	r1, #16
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fa1a 	bl	800858c <SDMMC_GetCmdResp1>
 8008158:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800815a:	69fb      	ldr	r3, [r7, #28]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3720      	adds	r7, #32
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b088      	sub	sp, #32
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008172:	2311      	movs	r3, #17
 8008174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008176:	2340      	movs	r3, #64	; 0x40
 8008178:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800817a:	2300      	movs	r3, #0
 800817c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800817e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008182:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008184:	f107 0308 	add.w	r3, r7, #8
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff ff52 	bl	8008034 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008190:	f241 3288 	movw	r2, #5000	; 0x1388
 8008194:	2111      	movs	r1, #17
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f9f8 	bl	800858c <SDMMC_GetCmdResp1>
 800819c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800819e:	69fb      	ldr	r3, [r7, #28]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3720      	adds	r7, #32
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b088      	sub	sp, #32
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80081b6:	2312      	movs	r3, #18
 80081b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081ba:	2340      	movs	r3, #64	; 0x40
 80081bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081be:	2300      	movs	r3, #0
 80081c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081c8:	f107 0308 	add.w	r3, r7, #8
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7ff ff30 	bl	8008034 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80081d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081d8:	2112      	movs	r1, #18
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f9d6 	bl	800858c <SDMMC_GetCmdResp1>
 80081e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081e2:	69fb      	ldr	r3, [r7, #28]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3720      	adds	r7, #32
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b088      	sub	sp, #32
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80081fa:	2318      	movs	r3, #24
 80081fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081fe:	2340      	movs	r3, #64	; 0x40
 8008200:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008202:	2300      	movs	r3, #0
 8008204:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800820a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800820c:	f107 0308 	add.w	r3, r7, #8
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7ff ff0e 	bl	8008034 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008218:	f241 3288 	movw	r2, #5000	; 0x1388
 800821c:	2118      	movs	r1, #24
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f9b4 	bl	800858c <SDMMC_GetCmdResp1>
 8008224:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008226:	69fb      	ldr	r3, [r7, #28]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3720      	adds	r7, #32
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800823e:	2319      	movs	r3, #25
 8008240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008242:	2340      	movs	r3, #64	; 0x40
 8008244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008246:	2300      	movs	r3, #0
 8008248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800824a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800824e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008250:	f107 0308 	add.w	r3, r7, #8
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7ff feec 	bl	8008034 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800825c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008260:	2119      	movs	r1, #25
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f992 	bl	800858c <SDMMC_GetCmdResp1>
 8008268:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800826a:	69fb      	ldr	r3, [r7, #28]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3720      	adds	r7, #32
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b088      	sub	sp, #32
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008280:	230c      	movs	r3, #12
 8008282:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008284:	2340      	movs	r3, #64	; 0x40
 8008286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008288:	2300      	movs	r3, #0
 800828a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800828c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008290:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008292:	f107 0308 	add.w	r3, r7, #8
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f7ff fecb 	bl	8008034 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800829e:	4a05      	ldr	r2, [pc, #20]	; (80082b4 <SDMMC_CmdStopTransfer+0x40>)
 80082a0:	210c      	movs	r1, #12
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f972 	bl	800858c <SDMMC_GetCmdResp1>
 80082a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082aa:	69fb      	ldr	r3, [r7, #28]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3720      	adds	r7, #32
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	05f5e100 	.word	0x05f5e100

080082b8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b08a      	sub	sp, #40	; 0x28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80082c8:	2307      	movs	r3, #7
 80082ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082cc:	2340      	movs	r3, #64	; 0x40
 80082ce:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082d0:	2300      	movs	r3, #0
 80082d2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082d8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082da:	f107 0310 	add.w	r3, r7, #16
 80082de:	4619      	mov	r1, r3
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f7ff fea7 	bl	8008034 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80082e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ea:	2107      	movs	r1, #7
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 f94d 	bl	800858c <SDMMC_GetCmdResp1>
 80082f2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3728      	adds	r7, #40	; 0x28
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b088      	sub	sp, #32
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800830a:	2300      	movs	r3, #0
 800830c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800830e:	2300      	movs	r3, #0
 8008310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008312:	2300      	movs	r3, #0
 8008314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800831a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800831c:	f107 0308 	add.w	r3, r7, #8
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7ff fe86 	bl	8008034 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fb67 	bl	80089fc <SDMMC_GetCmdError>
 800832e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008330:	69fb      	ldr	r3, [r7, #28]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3720      	adds	r7, #32
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b088      	sub	sp, #32
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008342:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008346:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008348:	2308      	movs	r3, #8
 800834a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800834c:	2340      	movs	r3, #64	; 0x40
 800834e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008350:	2300      	movs	r3, #0
 8008352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008358:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800835a:	f107 0308 	add.w	r3, r7, #8
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff fe67 	bl	8008034 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fafa 	bl	8008960 <SDMMC_GetCmdResp7>
 800836c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800836e:	69fb      	ldr	r3, [r7, #28]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3720      	adds	r7, #32
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008386:	2337      	movs	r3, #55	; 0x37
 8008388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800838a:	2340      	movs	r3, #64	; 0x40
 800838c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800838e:	2300      	movs	r3, #0
 8008390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008396:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008398:	f107 0308 	add.w	r3, r7, #8
 800839c:	4619      	mov	r1, r3
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f7ff fe48 	bl	8008034 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80083a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80083a8:	2137      	movs	r1, #55	; 0x37
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f8ee 	bl	800858c <SDMMC_GetCmdResp1>
 80083b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083b2:	69fb      	ldr	r3, [r7, #28]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3720      	adds	r7, #32
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b088      	sub	sp, #32
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	4b0d      	ldr	r3, [pc, #52]	; (8008400 <SDMMC_CmdAppOperCommand+0x44>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80083ce:	2329      	movs	r3, #41	; 0x29
 80083d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083d2:	2340      	movs	r3, #64	; 0x40
 80083d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083d6:	2300      	movs	r3, #0
 80083d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083e0:	f107 0308 	add.w	r3, r7, #8
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7ff fe24 	bl	8008034 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fa03 	bl	80087f8 <SDMMC_GetCmdResp3>
 80083f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083f4:	69fb      	ldr	r3, [r7, #28]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3720      	adds	r7, #32
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	80100000 	.word	0x80100000

08008404 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b088      	sub	sp, #32
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008412:	2306      	movs	r3, #6
 8008414:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008416:	2340      	movs	r3, #64	; 0x40
 8008418:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800841a:	2300      	movs	r3, #0
 800841c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800841e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008422:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008424:	f107 0308 	add.w	r3, r7, #8
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7ff fe02 	bl	8008034 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008430:	f241 3288 	movw	r2, #5000	; 0x1388
 8008434:	2106      	movs	r1, #6
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f8a8 	bl	800858c <SDMMC_GetCmdResp1>
 800843c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800843e:	69fb      	ldr	r3, [r7, #28]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3720      	adds	r7, #32
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b088      	sub	sp, #32
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008450:	2300      	movs	r3, #0
 8008452:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008454:	2333      	movs	r3, #51	; 0x33
 8008456:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008458:	2340      	movs	r3, #64	; 0x40
 800845a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800845c:	2300      	movs	r3, #0
 800845e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008464:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008466:	f107 0308 	add.w	r3, r7, #8
 800846a:	4619      	mov	r1, r3
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff fde1 	bl	8008034 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008472:	f241 3288 	movw	r2, #5000	; 0x1388
 8008476:	2133      	movs	r1, #51	; 0x33
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f887 	bl	800858c <SDMMC_GetCmdResp1>
 800847e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008480:	69fb      	ldr	r3, [r7, #28]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3720      	adds	r7, #32
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b088      	sub	sp, #32
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008492:	2300      	movs	r3, #0
 8008494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008496:	2302      	movs	r3, #2
 8008498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800849a:	23c0      	movs	r3, #192	; 0xc0
 800849c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800849e:	2300      	movs	r3, #0
 80084a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084a8:	f107 0308 	add.w	r3, r7, #8
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7ff fdc0 	bl	8008034 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f957 	bl	8008768 <SDMMC_GetCmdResp2>
 80084ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084bc:	69fb      	ldr	r3, [r7, #28]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3720      	adds	r7, #32
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b088      	sub	sp, #32
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80084d4:	2309      	movs	r3, #9
 80084d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80084d8:	23c0      	movs	r3, #192	; 0xc0
 80084da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084dc:	2300      	movs	r3, #0
 80084de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084e6:	f107 0308 	add.w	r3, r7, #8
 80084ea:	4619      	mov	r1, r3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f7ff fda1 	bl	8008034 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f938 	bl	8008768 <SDMMC_GetCmdResp2>
 80084f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084fa:	69fb      	ldr	r3, [r7, #28]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3720      	adds	r7, #32
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b088      	sub	sp, #32
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008512:	2303      	movs	r3, #3
 8008514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008516:	2340      	movs	r3, #64	; 0x40
 8008518:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800851a:	2300      	movs	r3, #0
 800851c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800851e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008522:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008524:	f107 0308 	add.w	r3, r7, #8
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7ff fd82 	bl	8008034 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	2103      	movs	r1, #3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f99d 	bl	8008874 <SDMMC_GetCmdResp6>
 800853a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800853c:	69fb      	ldr	r3, [r7, #28]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3720      	adds	r7, #32
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b088      	sub	sp, #32
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008554:	230d      	movs	r3, #13
 8008556:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008558:	2340      	movs	r3, #64	; 0x40
 800855a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800855c:	2300      	movs	r3, #0
 800855e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008564:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008566:	f107 0308 	add.w	r3, r7, #8
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7ff fd61 	bl	8008034 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008572:	f241 3288 	movw	r2, #5000	; 0x1388
 8008576:	210d      	movs	r1, #13
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f807 	bl	800858c <SDMMC_GetCmdResp1>
 800857e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008580:	69fb      	ldr	r3, [r7, #28]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3720      	adds	r7, #32
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
	...

0800858c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b088      	sub	sp, #32
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	460b      	mov	r3, r1
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800859a:	4b70      	ldr	r3, [pc, #448]	; (800875c <SDMMC_GetCmdResp1+0x1d0>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a70      	ldr	r2, [pc, #448]	; (8008760 <SDMMC_GetCmdResp1+0x1d4>)
 80085a0:	fba2 2303 	umull	r2, r3, r2, r3
 80085a4:	0a5a      	lsrs	r2, r3, #9
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	fb02 f303 	mul.w	r3, r2, r3
 80085ac:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	1e5a      	subs	r2, r3, #1
 80085b2:	61fa      	str	r2, [r7, #28]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d102      	bne.n	80085be <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085bc:	e0c9      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d0ef      	beq.n	80085ae <SDMMC_GetCmdResp1+0x22>
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1ea      	bne.n	80085ae <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085dc:	f003 0304 	and.w	r3, r3, #4
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d004      	beq.n	80085ee <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2204      	movs	r2, #4
 80085e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80085ea:	2304      	movs	r3, #4
 80085ec:	e0b1      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d004      	beq.n	8008604 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2201      	movs	r2, #1
 80085fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008600:	2301      	movs	r3, #1
 8008602:	e0a6      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	22c5      	movs	r2, #197	; 0xc5
 8008608:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f7ff fd3c 	bl	8008088 <SDMMC_GetCommandResponse>
 8008610:	4603      	mov	r3, r0
 8008612:	461a      	mov	r2, r3
 8008614:	7afb      	ldrb	r3, [r7, #11]
 8008616:	4293      	cmp	r3, r2
 8008618:	d001      	beq.n	800861e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800861a:	2301      	movs	r3, #1
 800861c:	e099      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800861e:	2100      	movs	r1, #0
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f7ff fd3e 	bl	80080a2 <SDMMC_GetResponse>
 8008626:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	4b4e      	ldr	r3, [pc, #312]	; (8008764 <SDMMC_GetCmdResp1+0x1d8>)
 800862c:	4013      	ands	r3, r2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008632:	2300      	movs	r3, #0
 8008634:	e08d      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2b00      	cmp	r3, #0
 800863a:	da02      	bge.n	8008642 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800863c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008640:	e087      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800864c:	2340      	movs	r3, #64	; 0x40
 800864e:	e080      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800865a:	2380      	movs	r3, #128	; 0x80
 800865c:	e079      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800866c:	e071      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800867c:	e069      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d002      	beq.n	800868e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800868c:	e061      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800869c:	e059      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d002      	beq.n	80086ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80086a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086ac:	e051      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d002      	beq.n	80086be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80086b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086bc:	e049      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80086c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80086cc:	e041      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80086d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086dc:	e039      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80086e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80086ec:	e031      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d002      	beq.n	80086fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80086f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80086fc:	e029      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d002      	beq.n	800870e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008708:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800870c:	e021      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d002      	beq.n	800871e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008718:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800871c:	e019      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008728:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800872c:	e011      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d002      	beq.n	800873e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008738:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800873c:	e009      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f003 0308 	and.w	r3, r3, #8
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008748:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800874c:	e001      	b.n	8008752 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800874e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008752:	4618      	mov	r0, r3
 8008754:	3720      	adds	r7, #32
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	200005b8 	.word	0x200005b8
 8008760:	10624dd3 	.word	0x10624dd3
 8008764:	fdffe008 	.word	0xfdffe008

08008768 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008770:	4b1f      	ldr	r3, [pc, #124]	; (80087f0 <SDMMC_GetCmdResp2+0x88>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a1f      	ldr	r2, [pc, #124]	; (80087f4 <SDMMC_GetCmdResp2+0x8c>)
 8008776:	fba2 2303 	umull	r2, r3, r2, r3
 800877a:	0a5b      	lsrs	r3, r3, #9
 800877c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008780:	fb02 f303 	mul.w	r3, r2, r3
 8008784:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	1e5a      	subs	r2, r3, #1
 800878a:	60fa      	str	r2, [r7, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d102      	bne.n	8008796 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008790:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008794:	e026      	b.n	80087e4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800879a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0ef      	beq.n	8008786 <SDMMC_GetCmdResp2+0x1e>
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1ea      	bne.n	8008786 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b4:	f003 0304 	and.w	r3, r3, #4
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d004      	beq.n	80087c6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2204      	movs	r2, #4
 80087c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80087c2:	2304      	movs	r3, #4
 80087c4:	e00e      	b.n	80087e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d004      	beq.n	80087dc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2201      	movs	r2, #1
 80087d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80087d8:	2301      	movs	r3, #1
 80087da:	e003      	b.n	80087e4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	22c5      	movs	r2, #197	; 0xc5
 80087e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	200005b8 	.word	0x200005b8
 80087f4:	10624dd3 	.word	0x10624dd3

080087f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008800:	4b1a      	ldr	r3, [pc, #104]	; (800886c <SDMMC_GetCmdResp3+0x74>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a1a      	ldr	r2, [pc, #104]	; (8008870 <SDMMC_GetCmdResp3+0x78>)
 8008806:	fba2 2303 	umull	r2, r3, r2, r3
 800880a:	0a5b      	lsrs	r3, r3, #9
 800880c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008810:	fb02 f303 	mul.w	r3, r2, r3
 8008814:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	1e5a      	subs	r2, r3, #1
 800881a:	60fa      	str	r2, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d102      	bne.n	8008826 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008820:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008824:	e01b      	b.n	800885e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800882a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0ef      	beq.n	8008816 <SDMMC_GetCmdResp3+0x1e>
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1ea      	bne.n	8008816 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b00      	cmp	r3, #0
 800884a:	d004      	beq.n	8008856 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2204      	movs	r2, #4
 8008850:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008852:	2304      	movs	r3, #4
 8008854:	e003      	b.n	800885e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	22c5      	movs	r2, #197	; 0xc5
 800885a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	200005b8 	.word	0x200005b8
 8008870:	10624dd3 	.word	0x10624dd3

08008874 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b088      	sub	sp, #32
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	460b      	mov	r3, r1
 800887e:	607a      	str	r2, [r7, #4]
 8008880:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008882:	4b35      	ldr	r3, [pc, #212]	; (8008958 <SDMMC_GetCmdResp6+0xe4>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a35      	ldr	r2, [pc, #212]	; (800895c <SDMMC_GetCmdResp6+0xe8>)
 8008888:	fba2 2303 	umull	r2, r3, r2, r3
 800888c:	0a5b      	lsrs	r3, r3, #9
 800888e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008892:	fb02 f303 	mul.w	r3, r2, r3
 8008896:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	1e5a      	subs	r2, r3, #1
 800889c:	61fa      	str	r2, [r7, #28]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d102      	bne.n	80088a8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088a6:	e052      	b.n	800894e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ac:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d0ef      	beq.n	8008898 <SDMMC_GetCmdResp6+0x24>
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1ea      	bne.n	8008898 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c6:	f003 0304 	and.w	r3, r3, #4
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d004      	beq.n	80088d8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2204      	movs	r2, #4
 80088d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088d4:	2304      	movs	r3, #4
 80088d6:	e03a      	b.n	800894e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d004      	beq.n	80088ee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2201      	movs	r2, #1
 80088e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e02f      	b.n	800894e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f7ff fbca 	bl	8008088 <SDMMC_GetCommandResponse>
 80088f4:	4603      	mov	r3, r0
 80088f6:	461a      	mov	r2, r3
 80088f8:	7afb      	ldrb	r3, [r7, #11]
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d001      	beq.n	8008902 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80088fe:	2301      	movs	r3, #1
 8008900:	e025      	b.n	800894e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	22c5      	movs	r2, #197	; 0xc5
 8008906:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008908:	2100      	movs	r1, #0
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f7ff fbc9 	bl	80080a2 <SDMMC_GetResponse>
 8008910:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d106      	bne.n	800892a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	0c1b      	lsrs	r3, r3, #16
 8008920:	b29a      	uxth	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008926:	2300      	movs	r3, #0
 8008928:	e011      	b.n	800894e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008938:	e009      	b.n	800894e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008948:	e001      	b.n	800894e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800894a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800894e:	4618      	mov	r0, r3
 8008950:	3720      	adds	r7, #32
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	200005b8 	.word	0x200005b8
 800895c:	10624dd3 	.word	0x10624dd3

08008960 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008968:	4b22      	ldr	r3, [pc, #136]	; (80089f4 <SDMMC_GetCmdResp7+0x94>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a22      	ldr	r2, [pc, #136]	; (80089f8 <SDMMC_GetCmdResp7+0x98>)
 800896e:	fba2 2303 	umull	r2, r3, r2, r3
 8008972:	0a5b      	lsrs	r3, r3, #9
 8008974:	f241 3288 	movw	r2, #5000	; 0x1388
 8008978:	fb02 f303 	mul.w	r3, r2, r3
 800897c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	1e5a      	subs	r2, r3, #1
 8008982:	60fa      	str	r2, [r7, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d102      	bne.n	800898e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008988:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800898c:	e02c      	b.n	80089e8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008992:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800899a:	2b00      	cmp	r3, #0
 800899c:	d0ef      	beq.n	800897e <SDMMC_GetCmdResp7+0x1e>
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1ea      	bne.n	800897e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ac:	f003 0304 	and.w	r3, r3, #4
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d004      	beq.n	80089be <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2204      	movs	r2, #4
 80089b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80089ba:	2304      	movs	r3, #4
 80089bc:	e014      	b.n	80089e8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d004      	beq.n	80089d4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e009      	b.n	80089e8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2240      	movs	r2, #64	; 0x40
 80089e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80089e6:	2300      	movs	r3, #0
  
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	200005b8 	.word	0x200005b8
 80089f8:	10624dd3 	.word	0x10624dd3

080089fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008a04:	4b11      	ldr	r3, [pc, #68]	; (8008a4c <SDMMC_GetCmdError+0x50>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a11      	ldr	r2, [pc, #68]	; (8008a50 <SDMMC_GetCmdError+0x54>)
 8008a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a0e:	0a5b      	lsrs	r3, r3, #9
 8008a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a14:	fb02 f303 	mul.w	r3, r2, r3
 8008a18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	1e5a      	subs	r2, r3, #1
 8008a1e:	60fa      	str	r2, [r7, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d102      	bne.n	8008a2a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a28:	e009      	b.n	8008a3e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0f1      	beq.n	8008a1a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	22c5      	movs	r2, #197	; 0xc5
 8008a3a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	200005b8 	.word	0x200005b8
 8008a50:	10624dd3 	.word	0x10624dd3

08008a54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008a58:	4904      	ldr	r1, [pc, #16]	; (8008a6c <MX_FATFS_Init+0x18>)
 8008a5a:	4805      	ldr	r0, [pc, #20]	; (8008a70 <MX_FATFS_Init+0x1c>)
 8008a5c:	f003 fc3a 	bl	800c2d4 <FATFS_LinkDriver>
 8008a60:	4603      	mov	r3, r0
 8008a62:	461a      	mov	r2, r3
 8008a64:	4b03      	ldr	r3, [pc, #12]	; (8008a74 <MX_FATFS_Init+0x20>)
 8008a66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008a68:	bf00      	nop
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	20037090 	.word	0x20037090
 8008a70:	08017398 	.word	0x08017398
 8008a74:	2003708c 	.word	0x2003708c

08008a78 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008a82:	f000 f896 	bl	8008bb2 <BSP_SD_IsDetected>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d001      	beq.n	8008a90 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	e012      	b.n	8008ab6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8008a90:	480b      	ldr	r0, [pc, #44]	; (8008ac0 <BSP_SD_Init+0x48>)
 8008a92:	f7fc fc7d 	bl	8005390 <HAL_SD_Init>
 8008a96:	4603      	mov	r3, r0
 8008a98:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008a9a:	79fb      	ldrb	r3, [r7, #7]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d109      	bne.n	8008ab4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008aa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008aa4:	4806      	ldr	r0, [pc, #24]	; (8008ac0 <BSP_SD_Init+0x48>)
 8008aa6:	f7fd fa43 	bl	8005f30 <HAL_SD_ConfigWideBusOperation>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008ab4:	79fb      	ldrb	r3, [r7, #7]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000740 	.word	0x20000740

08008ac4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b086      	sub	sp, #24
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	68f9      	ldr	r1, [r7, #12]
 8008ada:	4806      	ldr	r0, [pc, #24]	; (8008af4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8008adc:	f7fc fd10 	bl	8005500 <HAL_SD_ReadBlocks_DMA>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d001      	beq.n	8008aea <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	20000740 	.word	0x20000740

08008af8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	68f9      	ldr	r1, [r7, #12]
 8008b0e:	4806      	ldr	r0, [pc, #24]	; (8008b28 <BSP_SD_WriteBlocks_DMA+0x30>)
 8008b10:	f7fc fdd8 	bl	80056c4 <HAL_SD_WriteBlocks_DMA>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d001      	beq.n	8008b1e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3718      	adds	r7, #24
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	20000740 	.word	0x20000740

08008b2c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008b30:	4805      	ldr	r0, [pc, #20]	; (8008b48 <BSP_SD_GetCardState+0x1c>)
 8008b32:	f7fd fa97 	bl	8006064 <HAL_SD_GetCardState>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b04      	cmp	r3, #4
 8008b3a:	bf14      	ite	ne
 8008b3c:	2301      	movne	r3, #1
 8008b3e:	2300      	moveq	r3, #0
 8008b40:	b2db      	uxtb	r3, r3
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20000740 	.word	0x20000740

08008b4c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008b54:	6879      	ldr	r1, [r7, #4]
 8008b56:	4803      	ldr	r0, [pc, #12]	; (8008b64 <BSP_SD_GetCardInfo+0x18>)
 8008b58:	f7fd f9be 	bl	8005ed8 <HAL_SD_GetCardInfo>
}
 8008b5c:	bf00      	nop
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	20000740 	.word	0x20000740

08008b68 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008b70:	f000 f818 	bl	8008ba4 <BSP_SD_AbortCallback>
}
 8008b74:	bf00      	nop
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008b84:	f000 fa32 	bl	8008fec <BSP_SD_WriteCpltCallback>
}
 8008b88:	bf00      	nop
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008b98:	f000 fa3a 	bl	8009010 <BSP_SD_ReadCpltCallback>
}
 8008b9c:	bf00      	nop
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	af00      	add	r7, sp, #0

}
 8008ba8:	bf00      	nop
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr

08008bb2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b082      	sub	sp, #8
 8008bb6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008bbc:	f000 f80c 	bl	8008bd8 <BSP_PlatformIsDetected>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d101      	bne.n	8008bca <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008bca:	79fb      	ldrb	r3, [r7, #7]
 8008bcc:	b2db      	uxtb	r3, r3
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3708      	adds	r7, #8
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
	...

08008bd8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008bde:	2301      	movs	r3, #1
 8008be0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008be2:	2104      	movs	r1, #4
 8008be4:	4806      	ldr	r0, [pc, #24]	; (8008c00 <BSP_PlatformIsDetected+0x28>)
 8008be6:	f7fa fc3d 	bl	8003464 <HAL_GPIO_ReadPin>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008bf4:	79fb      	ldrb	r3, [r7, #7]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	40020400 	.word	0x40020400

08008c04 <SCB_InvalidateDCache_by_Addr>:
{
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8008c16:	2320      	movs	r3, #32
 8008c18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008c1a:	f3bf 8f4f 	dsb	sy
}
 8008c1e:	bf00      	nop
    while (op_size > 0) {
 8008c20:	e00b      	b.n	8008c3a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8008c22:	4a0d      	ldr	r2, [pc, #52]	; (8008c58 <SCB_InvalidateDCache_by_Addr+0x54>)
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	4413      	add	r3, r2
 8008c30:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	dcf0      	bgt.n	8008c22 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8008c40:	f3bf 8f4f 	dsb	sy
}
 8008c44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008c46:	f3bf 8f6f 	isb	sy
}
 8008c4a:	bf00      	nop
}
 8008c4c:	bf00      	nop
 8008c4e:	371c      	adds	r7, #28
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	e000ed00 	.word	0xe000ed00

08008c5c <SCB_CleanDCache_by_Addr>:
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8008c6e:	2320      	movs	r3, #32
 8008c70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008c72:	f3bf 8f4f 	dsb	sy
}
 8008c76:	bf00      	nop
    while (op_size > 0) {
 8008c78:	e00b      	b.n	8008c92 <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 8008c7a:	4a0d      	ldr	r2, [pc, #52]	; (8008cb0 <SCB_CleanDCache_by_Addr+0x54>)
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	4413      	add	r3, r2
 8008c88:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	dcf0      	bgt.n	8008c7a <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8008c98:	f3bf 8f4f 	dsb	sy
}
 8008c9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008c9e:	f3bf 8f6f 	isb	sy
}
 8008ca2:	bf00      	nop
}
 8008ca4:	bf00      	nop
 8008ca6:	371c      	adds	r7, #28
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	e000ed00 	.word	0xe000ed00

08008cb4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8008cbc:	f003 fcba 	bl	800c634 <osKernelGetTickCount>
 8008cc0:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8008cc2:	e006      	b.n	8008cd2 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008cc4:	f7ff ff32 	bl	8008b2c <BSP_SD_GetCardState>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d101      	bne.n	8008cd2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	e009      	b.n	8008ce6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8008cd2:	f003 fcaf 	bl	800c634 <osKernelGetTickCount>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d8f0      	bhi.n	8008cc4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008ce2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
	...

08008cf0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008cfa:	4b0b      	ldr	r3, [pc, #44]	; (8008d28 <SD_CheckStatus+0x38>)
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008d00:	f7ff ff14 	bl	8008b2c <BSP_SD_GetCardState>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d107      	bne.n	8008d1a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008d0a:	4b07      	ldr	r3, [pc, #28]	; (8008d28 <SD_CheckStatus+0x38>)
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	f023 0301 	bic.w	r3, r3, #1
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	4b04      	ldr	r3, [pc, #16]	; (8008d28 <SD_CheckStatus+0x38>)
 8008d18:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008d1a:	4b03      	ldr	r3, [pc, #12]	; (8008d28 <SD_CheckStatus+0x38>)
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	b2db      	uxtb	r3, r3
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	200005c1 	.word	0x200005c1

08008d2c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008d36:	4b1c      	ldr	r3, [pc, #112]	; (8008da8 <SD_initialize+0x7c>)
 8008d38:	2201      	movs	r2, #1
 8008d3a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8008d3c:	f003 fc22 	bl	800c584 <osKernelGetState>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d129      	bne.n	8008d9a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8008d46:	f7ff fe97 	bl	8008a78 <BSP_SD_Init>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d107      	bne.n	8008d60 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8008d50:	79fb      	ldrb	r3, [r7, #7]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7ff ffcc 	bl	8008cf0 <SD_CheckStatus>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	4b12      	ldr	r3, [pc, #72]	; (8008da8 <SD_initialize+0x7c>)
 8008d5e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8008d60:	4b11      	ldr	r3, [pc, #68]	; (8008da8 <SD_initialize+0x7c>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d017      	beq.n	8008d9a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8008d6a:	4b10      	ldr	r3, [pc, #64]	; (8008dac <SD_initialize+0x80>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d107      	bne.n	8008d82 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8008d72:	2200      	movs	r2, #0
 8008d74:	2102      	movs	r1, #2
 8008d76:	200a      	movs	r0, #10
 8008d78:	f004 f830 	bl	800cddc <osMessageQueueNew>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	4a0b      	ldr	r2, [pc, #44]	; (8008dac <SD_initialize+0x80>)
 8008d80:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8008d82:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <SD_initialize+0x80>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d107      	bne.n	8008d9a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8008d8a:	4b07      	ldr	r3, [pc, #28]	; (8008da8 <SD_initialize+0x7c>)
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	f043 0301 	orr.w	r3, r3, #1
 8008d94:	b2da      	uxtb	r2, r3
 8008d96:	4b04      	ldr	r3, [pc, #16]	; (8008da8 <SD_initialize+0x7c>)
 8008d98:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8008d9a:	4b03      	ldr	r3, [pc, #12]	; (8008da8 <SD_initialize+0x7c>)
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	b2db      	uxtb	r3, r3
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	200005c1 	.word	0x200005c1
 8008dac:	20037094 	.word	0x20037094

08008db0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	4603      	mov	r3, r0
 8008db8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008dba:	79fb      	ldrb	r3, [r7, #7]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7ff ff97 	bl	8008cf0 <SD_CheckStatus>
 8008dc2:	4603      	mov	r3, r0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b08a      	sub	sp, #40	; 0x28
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60b9      	str	r1, [r7, #8]
 8008dd4:	607a      	str	r2, [r7, #4]
 8008dd6:	603b      	str	r3, [r7, #0]
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008de2:	f241 3088 	movw	r0, #5000	; 0x1388
 8008de6:	f7ff ff65 	bl	8008cb4 <SD_CheckStatusWithTimeout>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	da02      	bge.n	8008df6 <SD_read+0x2a>
  {
    return res;
 8008df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008df4:	e041      	b.n	8008e7a <SD_read+0xae>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8008df6:	683a      	ldr	r2, [r7, #0]
 8008df8:	6879      	ldr	r1, [r7, #4]
 8008dfa:	68b8      	ldr	r0, [r7, #8]
 8008dfc:	f7ff fe62 	bl	8008ac4 <BSP_SD_ReadBlocks_DMA>
 8008e00:	4603      	mov	r3, r0
 8008e02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8008e06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d133      	bne.n	8008e76 <SD_read+0xaa>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8008e0e:	4b1d      	ldr	r3, [pc, #116]	; (8008e84 <SD_read+0xb8>)
 8008e10:	6818      	ldr	r0, [r3, #0]
 8008e12:	f107 0116 	add.w	r1, r7, #22
 8008e16:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f004 f8d8 	bl	800cfd0 <osMessageQueueGet>
 8008e20:	6238      	str	r0, [r7, #32]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d126      	bne.n	8008e76 <SD_read+0xaa>
 8008e28:	8afb      	ldrh	r3, [r7, #22]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d123      	bne.n	8008e76 <SD_read+0xaa>
          {
            timer = osKernelGetTickCount();
 8008e2e:	f003 fc01 	bl	800c634 <osKernelGetTickCount>
 8008e32:	61f8      	str	r0, [r7, #28]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8008e34:	e016      	b.n	8008e64 <SD_read+0x98>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008e36:	f7ff fe79 	bl	8008b2c <BSP_SD_GetCardState>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d111      	bne.n	8008e64 <SD_read+0x98>
              {
                res = RES_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
                /*
                the SCB_InvalidateDCache_by_Addr() requires a 32-Byte aligned address,
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	f023 031f 	bic.w	r3, r3, #31
 8008e4c:	61bb      	str	r3, [r7, #24]
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 8008e4e:	69b8      	ldr	r0, [r7, #24]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	025a      	lsls	r2, r3, #9
 8008e54:	68b9      	ldr	r1, [r7, #8]
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	1acb      	subs	r3, r1, r3
 8008e5a:	4413      	add	r3, r2
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	f7ff fed1 	bl	8008c04 <SCB_InvalidateDCache_by_Addr>
#endif
                break;
 8008e62:	e008      	b.n	8008e76 <SD_read+0xaa>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8008e64:	f003 fbe6 	bl	800c634 <osKernelGetTickCount>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	f241 3287 	movw	r2, #4999	; 0x1387
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d9df      	bls.n	8008e36 <SD_read+0x6a>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8008e76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3728      	adds	r7, #40	; 0x28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	20037094 	.word	0x20037094

08008e88 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b08a      	sub	sp, #40	; 0x28
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60b9      	str	r1, [r7, #8]
 8008e90:	607a      	str	r2, [r7, #4]
 8008e92:	603b      	str	r3, [r7, #0]
 8008e94:	4603      	mov	r3, r0
 8008e96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008e9e:	f241 3088 	movw	r0, #5000	; 0x1388
 8008ea2:	f7ff ff07 	bl	8008cb4 <SD_CheckStatusWithTimeout>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	da02      	bge.n	8008eb2 <SD_write+0x2a>
  {
    return res;
 8008eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008eb0:	e03d      	b.n	8008f2e <SD_write+0xa6>
  uint32_t alignedAddr;
  /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	f023 031f 	bic.w	r3, r3, #31
 8008eb8:	623b      	str	r3, [r7, #32]
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 8008eba:	6a38      	ldr	r0, [r7, #32]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	025a      	lsls	r2, r3, #9
 8008ec0:	68b9      	ldr	r1, [r7, #8]
 8008ec2:	6a3b      	ldr	r3, [r7, #32]
 8008ec4:	1acb      	subs	r3, r1, r3
 8008ec6:	4413      	add	r3, r2
 8008ec8:	4619      	mov	r1, r3
 8008eca:	f7ff fec7 	bl	8008c5c <SCB_CleanDCache_by_Addr>
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008ece:	683a      	ldr	r2, [r7, #0]
 8008ed0:	6879      	ldr	r1, [r7, #4]
 8008ed2:	68b8      	ldr	r0, [r7, #8]
 8008ed4:	f7ff fe10 	bl	8008af8 <BSP_SD_WriteBlocks_DMA>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d125      	bne.n	8008f2a <SD_write+0xa2>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8008ede:	4b16      	ldr	r3, [pc, #88]	; (8008f38 <SD_write+0xb0>)
 8008ee0:	6818      	ldr	r0, [r3, #0]
 8008ee2:	f107 0116 	add.w	r1, r7, #22
 8008ee6:	f241 3388 	movw	r3, #5000	; 0x1388
 8008eea:	2200      	movs	r2, #0
 8008eec:	f004 f870 	bl	800cfd0 <osMessageQueueGet>
 8008ef0:	61f8      	str	r0, [r7, #28]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d118      	bne.n	8008f2a <SD_write+0xa2>
 8008ef8:	8afb      	ldrh	r3, [r7, #22]
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d115      	bne.n	8008f2a <SD_write+0xa2>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8008efe:	f003 fb99 	bl	800c634 <osKernelGetTickCount>
 8008f02:	61b8      	str	r0, [r7, #24]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8008f04:	e008      	b.n	8008f18 <SD_write+0x90>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008f06:	f7ff fe11 	bl	8008b2c <BSP_SD_GetCardState>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d103      	bne.n	8008f18 <SD_write+0x90>
          {
            res = RES_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8008f16:	e008      	b.n	8008f2a <SD_write+0xa2>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8008f18:	f003 fb8c 	bl	800c634 <osKernelGetTickCount>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	f241 3287 	movw	r2, #4999	; 0x1387
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d9ed      	bls.n	8008f06 <SD_write+0x7e>
    }

  }
#endif

  return res;
 8008f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3728      	adds	r7, #40	; 0x28
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	20037094 	.word	0x20037094

08008f3c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b08c      	sub	sp, #48	; 0x30
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	4603      	mov	r3, r0
 8008f44:	603a      	str	r2, [r7, #0]
 8008f46:	71fb      	strb	r3, [r7, #7]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008f52:	4b25      	ldr	r3, [pc, #148]	; (8008fe8 <SD_ioctl+0xac>)
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	f003 0301 	and.w	r3, r3, #1
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <SD_ioctl+0x28>
 8008f60:	2303      	movs	r3, #3
 8008f62:	e03c      	b.n	8008fde <SD_ioctl+0xa2>

  switch (cmd)
 8008f64:	79bb      	ldrb	r3, [r7, #6]
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	d834      	bhi.n	8008fd4 <SD_ioctl+0x98>
 8008f6a:	a201      	add	r2, pc, #4	; (adr r2, 8008f70 <SD_ioctl+0x34>)
 8008f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f70:	08008f81 	.word	0x08008f81
 8008f74:	08008f89 	.word	0x08008f89
 8008f78:	08008fa1 	.word	0x08008fa1
 8008f7c:	08008fbb 	.word	0x08008fbb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008f86:	e028      	b.n	8008fda <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008f88:	f107 030c 	add.w	r3, r7, #12
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7ff fddd 	bl	8008b4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008f9e:	e01c      	b.n	8008fda <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008fa0:	f107 030c 	add.w	r3, r7, #12
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7ff fdd1 	bl	8008b4c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008fb8:	e00f      	b.n	8008fda <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008fba:	f107 030c 	add.w	r3, r7, #12
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7ff fdc4 	bl	8008b4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	0a5a      	lsrs	r2, r3, #9
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008fd2:	e002      	b.n	8008fda <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008fd4:	2304      	movs	r3, #4
 8008fd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008fda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3730      	adds	r7, #48	; 0x30
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	200005c1 	.word	0x200005c1

08008fec <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8008ff2:	2302      	movs	r3, #2
 8008ff4:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8008ff6:	4b05      	ldr	r3, [pc, #20]	; (800900c <BSP_SD_WriteCpltCallback+0x20>)
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	1db9      	adds	r1, r7, #6
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	2200      	movs	r2, #0
 8009000:	f003 ff72 	bl	800cee8 <osMessageQueuePut>
#endif
}
 8009004:	bf00      	nop
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	20037094 	.word	0x20037094

08009010 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8009016:	2301      	movs	r3, #1
 8009018:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800901a:	4b05      	ldr	r3, [pc, #20]	; (8009030 <BSP_SD_ReadCpltCallback+0x20>)
 800901c:	6818      	ldr	r0, [r3, #0]
 800901e:	1db9      	adds	r1, r7, #6
 8009020:	2300      	movs	r3, #0
 8009022:	2200      	movs	r2, #0
 8009024:	f003 ff60 	bl	800cee8 <osMessageQueuePut>
#endif
}
 8009028:	bf00      	nop
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	20037094 	.word	0x20037094

08009034 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	4603      	mov	r3, r0
 800903c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800903e:	79fb      	ldrb	r3, [r7, #7]
 8009040:	4a08      	ldr	r2, [pc, #32]	; (8009064 <disk_status+0x30>)
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4413      	add	r3, r2
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	79fa      	ldrb	r2, [r7, #7]
 800904c:	4905      	ldr	r1, [pc, #20]	; (8009064 <disk_status+0x30>)
 800904e:	440a      	add	r2, r1
 8009050:	7a12      	ldrb	r2, [r2, #8]
 8009052:	4610      	mov	r0, r2
 8009054:	4798      	blx	r3
 8009056:	4603      	mov	r3, r0
 8009058:	73fb      	strb	r3, [r7, #15]
  return stat;
 800905a:	7bfb      	ldrb	r3, [r7, #15]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	200372a0 	.word	0x200372a0

08009068 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009076:	79fb      	ldrb	r3, [r7, #7]
 8009078:	4a0d      	ldr	r2, [pc, #52]	; (80090b0 <disk_initialize+0x48>)
 800907a:	5cd3      	ldrb	r3, [r2, r3]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d111      	bne.n	80090a4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009080:	79fb      	ldrb	r3, [r7, #7]
 8009082:	4a0b      	ldr	r2, [pc, #44]	; (80090b0 <disk_initialize+0x48>)
 8009084:	2101      	movs	r1, #1
 8009086:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	4a09      	ldr	r2, [pc, #36]	; (80090b0 <disk_initialize+0x48>)
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	4413      	add	r3, r2
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	79fa      	ldrb	r2, [r7, #7]
 8009096:	4906      	ldr	r1, [pc, #24]	; (80090b0 <disk_initialize+0x48>)
 8009098:	440a      	add	r2, r1
 800909a:	7a12      	ldrb	r2, [r2, #8]
 800909c:	4610      	mov	r0, r2
 800909e:	4798      	blx	r3
 80090a0:	4603      	mov	r3, r0
 80090a2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	200372a0 	.word	0x200372a0

080090b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80090b4:	b590      	push	{r4, r7, lr}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60b9      	str	r1, [r7, #8]
 80090bc:	607a      	str	r2, [r7, #4]
 80090be:	603b      	str	r3, [r7, #0]
 80090c0:	4603      	mov	r3, r0
 80090c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80090c4:	7bfb      	ldrb	r3, [r7, #15]
 80090c6:	4a0a      	ldr	r2, [pc, #40]	; (80090f0 <disk_read+0x3c>)
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	689c      	ldr	r4, [r3, #8]
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	4a07      	ldr	r2, [pc, #28]	; (80090f0 <disk_read+0x3c>)
 80090d4:	4413      	add	r3, r2
 80090d6:	7a18      	ldrb	r0, [r3, #8]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	68b9      	ldr	r1, [r7, #8]
 80090de:	47a0      	blx	r4
 80090e0:	4603      	mov	r3, r0
 80090e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80090e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	371c      	adds	r7, #28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd90      	pop	{r4, r7, pc}
 80090ee:	bf00      	nop
 80090f0:	200372a0 	.word	0x200372a0

080090f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80090f4:	b590      	push	{r4, r7, lr}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60b9      	str	r1, [r7, #8]
 80090fc:	607a      	str	r2, [r7, #4]
 80090fe:	603b      	str	r3, [r7, #0]
 8009100:	4603      	mov	r3, r0
 8009102:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009104:	7bfb      	ldrb	r3, [r7, #15]
 8009106:	4a0a      	ldr	r2, [pc, #40]	; (8009130 <disk_write+0x3c>)
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4413      	add	r3, r2
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	68dc      	ldr	r4, [r3, #12]
 8009110:	7bfb      	ldrb	r3, [r7, #15]
 8009112:	4a07      	ldr	r2, [pc, #28]	; (8009130 <disk_write+0x3c>)
 8009114:	4413      	add	r3, r2
 8009116:	7a18      	ldrb	r0, [r3, #8]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	68b9      	ldr	r1, [r7, #8]
 800911e:	47a0      	blx	r4
 8009120:	4603      	mov	r3, r0
 8009122:	75fb      	strb	r3, [r7, #23]
  return res;
 8009124:	7dfb      	ldrb	r3, [r7, #23]
}
 8009126:	4618      	mov	r0, r3
 8009128:	371c      	adds	r7, #28
 800912a:	46bd      	mov	sp, r7
 800912c:	bd90      	pop	{r4, r7, pc}
 800912e:	bf00      	nop
 8009130:	200372a0 	.word	0x200372a0

08009134 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	4603      	mov	r3, r0
 800913c:	603a      	str	r2, [r7, #0]
 800913e:	71fb      	strb	r3, [r7, #7]
 8009140:	460b      	mov	r3, r1
 8009142:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009144:	79fb      	ldrb	r3, [r7, #7]
 8009146:	4a09      	ldr	r2, [pc, #36]	; (800916c <disk_ioctl+0x38>)
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	4413      	add	r3, r2
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	79fa      	ldrb	r2, [r7, #7]
 8009152:	4906      	ldr	r1, [pc, #24]	; (800916c <disk_ioctl+0x38>)
 8009154:	440a      	add	r2, r1
 8009156:	7a10      	ldrb	r0, [r2, #8]
 8009158:	79b9      	ldrb	r1, [r7, #6]
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	4798      	blx	r3
 800915e:	4603      	mov	r3, r0
 8009160:	73fb      	strb	r3, [r7, #15]
  return res;
 8009162:	7bfb      	ldrb	r3, [r7, #15]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	200372a0 	.word	0x200372a0

08009170 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3301      	adds	r3, #1
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009180:	89fb      	ldrh	r3, [r7, #14]
 8009182:	021b      	lsls	r3, r3, #8
 8009184:	b21a      	sxth	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	b21b      	sxth	r3, r3
 800918c:	4313      	orrs	r3, r2
 800918e:	b21b      	sxth	r3, r3
 8009190:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009192:	89fb      	ldrh	r3, [r7, #14]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3714      	adds	r7, #20
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	3303      	adds	r3, #3
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	021b      	lsls	r3, r3, #8
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	3202      	adds	r2, #2
 80091b8:	7812      	ldrb	r2, [r2, #0]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	021b      	lsls	r3, r3, #8
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	3201      	adds	r2, #1
 80091c6:	7812      	ldrb	r2, [r2, #0]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	021b      	lsls	r3, r3, #8
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	7812      	ldrb	r2, [r2, #0]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	60fb      	str	r3, [r7, #12]
	return rv;
 80091d8:	68fb      	ldr	r3, [r7, #12]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80091e6:	b480      	push	{r7}
 80091e8:	b083      	sub	sp, #12
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	460b      	mov	r3, r1
 80091f0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	1c5a      	adds	r2, r3, #1
 80091f6:	607a      	str	r2, [r7, #4]
 80091f8:	887a      	ldrh	r2, [r7, #2]
 80091fa:	b2d2      	uxtb	r2, r2
 80091fc:	701a      	strb	r2, [r3, #0]
 80091fe:	887b      	ldrh	r3, [r7, #2]
 8009200:	0a1b      	lsrs	r3, r3, #8
 8009202:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	1c5a      	adds	r2, r3, #1
 8009208:	607a      	str	r2, [r7, #4]
 800920a:	887a      	ldrh	r2, [r7, #2]
 800920c:	b2d2      	uxtb	r2, r2
 800920e:	701a      	strb	r2, [r3, #0]
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	1c5a      	adds	r2, r3, #1
 800922a:	607a      	str	r2, [r7, #4]
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	b2d2      	uxtb	r2, r2
 8009230:	701a      	strb	r2, [r3, #0]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	0a1b      	lsrs	r3, r3, #8
 8009236:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	607a      	str	r2, [r7, #4]
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	b2d2      	uxtb	r2, r2
 8009242:	701a      	strb	r2, [r3, #0]
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	0a1b      	lsrs	r3, r3, #8
 8009248:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	1c5a      	adds	r2, r3, #1
 800924e:	607a      	str	r2, [r7, #4]
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	b2d2      	uxtb	r2, r2
 8009254:	701a      	strb	r2, [r3, #0]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	0a1b      	lsrs	r3, r3, #8
 800925a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	607a      	str	r2, [r7, #4]
 8009262:	683a      	ldr	r2, [r7, #0]
 8009264:	b2d2      	uxtb	r2, r2
 8009266:	701a      	strb	r2, [r3, #0]
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009274:	b480      	push	{r7}
 8009276:	b087      	sub	sp, #28
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00d      	beq.n	80092aa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800928e:	693a      	ldr	r2, [r7, #16]
 8009290:	1c53      	adds	r3, r2, #1
 8009292:	613b      	str	r3, [r7, #16]
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	1c59      	adds	r1, r3, #1
 8009298:	6179      	str	r1, [r7, #20]
 800929a:	7812      	ldrb	r2, [r2, #0]
 800929c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	3b01      	subs	r3, #1
 80092a2:	607b      	str	r3, [r7, #4]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1f1      	bne.n	800928e <mem_cpy+0x1a>
	}
}
 80092aa:	bf00      	nop
 80092ac:	371c      	adds	r7, #28
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80092b6:	b480      	push	{r7}
 80092b8:	b087      	sub	sp, #28
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	60f8      	str	r0, [r7, #12]
 80092be:	60b9      	str	r1, [r7, #8]
 80092c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	1c5a      	adds	r2, r3, #1
 80092ca:	617a      	str	r2, [r7, #20]
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	b2d2      	uxtb	r2, r2
 80092d0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	3b01      	subs	r3, #1
 80092d6:	607b      	str	r3, [r7, #4]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1f3      	bne.n	80092c6 <mem_set+0x10>
}
 80092de:	bf00      	nop
 80092e0:	bf00      	nop
 80092e2:	371c      	adds	r7, #28
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80092ec:	b480      	push	{r7}
 80092ee:	b089      	sub	sp, #36	; 0x24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	61fb      	str	r3, [r7, #28]
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	1c5a      	adds	r2, r3, #1
 8009308:	61fa      	str	r2, [r7, #28]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	4619      	mov	r1, r3
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	61ba      	str	r2, [r7, #24]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	1acb      	subs	r3, r1, r3
 8009318:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	3b01      	subs	r3, #1
 800931e:	607b      	str	r3, [r7, #4]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d002      	beq.n	800932c <mem_cmp+0x40>
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d0eb      	beq.n	8009304 <mem_cmp+0x18>

	return r;
 800932c:	697b      	ldr	r3, [r7, #20]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3724      	adds	r7, #36	; 0x24
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800933a:	b480      	push	{r7}
 800933c:	b083      	sub	sp, #12
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009344:	e002      	b.n	800934c <chk_chr+0x12>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	3301      	adds	r3, #1
 800934a:	607b      	str	r3, [r7, #4]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d005      	beq.n	8009360 <chk_chr+0x26>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	461a      	mov	r2, r3
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	4293      	cmp	r3, r2
 800935e:	d1f2      	bne.n	8009346 <chk_chr+0xc>
	return *str;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	781b      	ldrb	r3, [r3, #0]
}
 8009364:	4618      	mov	r0, r3
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d009      	beq.n	8009392 <lock_fs+0x22>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	4618      	mov	r0, r3
 8009384:	f003 f8a3 	bl	800c4ce <ff_req_grant>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d001      	beq.n	8009392 <lock_fs+0x22>
 800938e:	2301      	movs	r3, #1
 8009390:	e000      	b.n	8009394 <lock_fs+0x24>
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00d      	beq.n	80093ca <unlock_fs+0x2e>
 80093ae:	78fb      	ldrb	r3, [r7, #3]
 80093b0:	2b0c      	cmp	r3, #12
 80093b2:	d00a      	beq.n	80093ca <unlock_fs+0x2e>
 80093b4:	78fb      	ldrb	r3, [r7, #3]
 80093b6:	2b0b      	cmp	r3, #11
 80093b8:	d007      	beq.n	80093ca <unlock_fs+0x2e>
 80093ba:	78fb      	ldrb	r3, [r7, #3]
 80093bc:	2b0f      	cmp	r3, #15
 80093be:	d004      	beq.n	80093ca <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	4618      	mov	r0, r3
 80093c6:	f003 f897 	bl	800c4f8 <ff_rel_grant>
	}
}
 80093ca:	bf00      	nop
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
	...

080093d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80093de:	2300      	movs	r3, #0
 80093e0:	60bb      	str	r3, [r7, #8]
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	60fb      	str	r3, [r7, #12]
 80093e6:	e029      	b.n	800943c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80093e8:	4a27      	ldr	r2, [pc, #156]	; (8009488 <chk_lock+0xb4>)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	011b      	lsls	r3, r3, #4
 80093ee:	4413      	add	r3, r2
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d01d      	beq.n	8009432 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80093f6:	4a24      	ldr	r2, [pc, #144]	; (8009488 <chk_lock+0xb4>)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	011b      	lsls	r3, r3, #4
 80093fc:	4413      	add	r3, r2
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	429a      	cmp	r2, r3
 8009406:	d116      	bne.n	8009436 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009408:	4a1f      	ldr	r2, [pc, #124]	; (8009488 <chk_lock+0xb4>)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	011b      	lsls	r3, r3, #4
 800940e:	4413      	add	r3, r2
 8009410:	3304      	adds	r3, #4
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009418:	429a      	cmp	r2, r3
 800941a:	d10c      	bne.n	8009436 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800941c:	4a1a      	ldr	r2, [pc, #104]	; (8009488 <chk_lock+0xb4>)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	011b      	lsls	r3, r3, #4
 8009422:	4413      	add	r3, r2
 8009424:	3308      	adds	r3, #8
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800942c:	429a      	cmp	r2, r3
 800942e:	d102      	bne.n	8009436 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009430:	e007      	b.n	8009442 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009432:	2301      	movs	r3, #1
 8009434:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	3301      	adds	r3, #1
 800943a:	60fb      	str	r3, [r7, #12]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2b1f      	cmp	r3, #31
 8009440:	d9d2      	bls.n	80093e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2b20      	cmp	r3, #32
 8009446:	d109      	bne.n	800945c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d102      	bne.n	8009454 <chk_lock+0x80>
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	2b02      	cmp	r3, #2
 8009452:	d101      	bne.n	8009458 <chk_lock+0x84>
 8009454:	2300      	movs	r3, #0
 8009456:	e010      	b.n	800947a <chk_lock+0xa6>
 8009458:	2312      	movs	r3, #18
 800945a:	e00e      	b.n	800947a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d108      	bne.n	8009474 <chk_lock+0xa0>
 8009462:	4a09      	ldr	r2, [pc, #36]	; (8009488 <chk_lock+0xb4>)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	011b      	lsls	r3, r3, #4
 8009468:	4413      	add	r3, r2
 800946a:	330c      	adds	r3, #12
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009472:	d101      	bne.n	8009478 <chk_lock+0xa4>
 8009474:	2310      	movs	r3, #16
 8009476:	e000      	b.n	800947a <chk_lock+0xa6>
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3714      	adds	r7, #20
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	200370a0 	.word	0x200370a0

0800948c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009492:	2300      	movs	r3, #0
 8009494:	607b      	str	r3, [r7, #4]
 8009496:	e002      	b.n	800949e <enq_lock+0x12>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3301      	adds	r3, #1
 800949c:	607b      	str	r3, [r7, #4]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2b1f      	cmp	r3, #31
 80094a2:	d806      	bhi.n	80094b2 <enq_lock+0x26>
 80094a4:	4a09      	ldr	r2, [pc, #36]	; (80094cc <enq_lock+0x40>)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	011b      	lsls	r3, r3, #4
 80094aa:	4413      	add	r3, r2
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1f2      	bne.n	8009498 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b20      	cmp	r3, #32
 80094b6:	bf14      	ite	ne
 80094b8:	2301      	movne	r3, #1
 80094ba:	2300      	moveq	r3, #0
 80094bc:	b2db      	uxtb	r3, r3
}
 80094be:	4618      	mov	r0, r3
 80094c0:	370c      	adds	r7, #12
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	200370a0 	.word	0x200370a0

080094d0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80094da:	2300      	movs	r3, #0
 80094dc:	60fb      	str	r3, [r7, #12]
 80094de:	e01f      	b.n	8009520 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80094e0:	4a41      	ldr	r2, [pc, #260]	; (80095e8 <inc_lock+0x118>)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	011b      	lsls	r3, r3, #4
 80094e6:	4413      	add	r3, r2
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d113      	bne.n	800951a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80094f2:	4a3d      	ldr	r2, [pc, #244]	; (80095e8 <inc_lock+0x118>)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	011b      	lsls	r3, r3, #4
 80094f8:	4413      	add	r3, r2
 80094fa:	3304      	adds	r3, #4
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009502:	429a      	cmp	r2, r3
 8009504:	d109      	bne.n	800951a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009506:	4a38      	ldr	r2, [pc, #224]	; (80095e8 <inc_lock+0x118>)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	011b      	lsls	r3, r3, #4
 800950c:	4413      	add	r3, r2
 800950e:	3308      	adds	r3, #8
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009516:	429a      	cmp	r2, r3
 8009518:	d006      	beq.n	8009528 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3301      	adds	r3, #1
 800951e:	60fb      	str	r3, [r7, #12]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2b1f      	cmp	r3, #31
 8009524:	d9dc      	bls.n	80094e0 <inc_lock+0x10>
 8009526:	e000      	b.n	800952a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009528:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2b20      	cmp	r3, #32
 800952e:	d132      	bne.n	8009596 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009530:	2300      	movs	r3, #0
 8009532:	60fb      	str	r3, [r7, #12]
 8009534:	e002      	b.n	800953c <inc_lock+0x6c>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	3301      	adds	r3, #1
 800953a:	60fb      	str	r3, [r7, #12]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2b1f      	cmp	r3, #31
 8009540:	d806      	bhi.n	8009550 <inc_lock+0x80>
 8009542:	4a29      	ldr	r2, [pc, #164]	; (80095e8 <inc_lock+0x118>)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	011b      	lsls	r3, r3, #4
 8009548:	4413      	add	r3, r2
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d1f2      	bne.n	8009536 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2b20      	cmp	r3, #32
 8009554:	d101      	bne.n	800955a <inc_lock+0x8a>
 8009556:	2300      	movs	r3, #0
 8009558:	e040      	b.n	80095dc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	4922      	ldr	r1, [pc, #136]	; (80095e8 <inc_lock+0x118>)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	011b      	lsls	r3, r3, #4
 8009564:	440b      	add	r3, r1
 8009566:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	689a      	ldr	r2, [r3, #8]
 800956c:	491e      	ldr	r1, [pc, #120]	; (80095e8 <inc_lock+0x118>)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	011b      	lsls	r3, r3, #4
 8009572:	440b      	add	r3, r1
 8009574:	3304      	adds	r3, #4
 8009576:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	695a      	ldr	r2, [r3, #20]
 800957c:	491a      	ldr	r1, [pc, #104]	; (80095e8 <inc_lock+0x118>)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	011b      	lsls	r3, r3, #4
 8009582:	440b      	add	r3, r1
 8009584:	3308      	adds	r3, #8
 8009586:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009588:	4a17      	ldr	r2, [pc, #92]	; (80095e8 <inc_lock+0x118>)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	011b      	lsls	r3, r3, #4
 800958e:	4413      	add	r3, r2
 8009590:	330c      	adds	r3, #12
 8009592:	2200      	movs	r2, #0
 8009594:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d009      	beq.n	80095b0 <inc_lock+0xe0>
 800959c:	4a12      	ldr	r2, [pc, #72]	; (80095e8 <inc_lock+0x118>)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	011b      	lsls	r3, r3, #4
 80095a2:	4413      	add	r3, r2
 80095a4:	330c      	adds	r3, #12
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d001      	beq.n	80095b0 <inc_lock+0xe0>
 80095ac:	2300      	movs	r3, #0
 80095ae:	e015      	b.n	80095dc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d108      	bne.n	80095c8 <inc_lock+0xf8>
 80095b6:	4a0c      	ldr	r2, [pc, #48]	; (80095e8 <inc_lock+0x118>)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	011b      	lsls	r3, r3, #4
 80095bc:	4413      	add	r3, r2
 80095be:	330c      	adds	r3, #12
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	3301      	adds	r3, #1
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	e001      	b.n	80095cc <inc_lock+0xfc>
 80095c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095cc:	4906      	ldr	r1, [pc, #24]	; (80095e8 <inc_lock+0x118>)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	011b      	lsls	r3, r3, #4
 80095d2:	440b      	add	r3, r1
 80095d4:	330c      	adds	r3, #12
 80095d6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	3301      	adds	r3, #1
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3714      	adds	r7, #20
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr
 80095e8:	200370a0 	.word	0x200370a0

080095ec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3b01      	subs	r3, #1
 80095f8:	607b      	str	r3, [r7, #4]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b1f      	cmp	r3, #31
 80095fe:	d825      	bhi.n	800964c <dec_lock+0x60>
		n = Files[i].ctr;
 8009600:	4a17      	ldr	r2, [pc, #92]	; (8009660 <dec_lock+0x74>)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	011b      	lsls	r3, r3, #4
 8009606:	4413      	add	r3, r2
 8009608:	330c      	adds	r3, #12
 800960a:	881b      	ldrh	r3, [r3, #0]
 800960c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800960e:	89fb      	ldrh	r3, [r7, #14]
 8009610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009614:	d101      	bne.n	800961a <dec_lock+0x2e>
 8009616:	2300      	movs	r3, #0
 8009618:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800961a:	89fb      	ldrh	r3, [r7, #14]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <dec_lock+0x3a>
 8009620:	89fb      	ldrh	r3, [r7, #14]
 8009622:	3b01      	subs	r3, #1
 8009624:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009626:	4a0e      	ldr	r2, [pc, #56]	; (8009660 <dec_lock+0x74>)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	011b      	lsls	r3, r3, #4
 800962c:	4413      	add	r3, r2
 800962e:	330c      	adds	r3, #12
 8009630:	89fa      	ldrh	r2, [r7, #14]
 8009632:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009634:	89fb      	ldrh	r3, [r7, #14]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d105      	bne.n	8009646 <dec_lock+0x5a>
 800963a:	4a09      	ldr	r2, [pc, #36]	; (8009660 <dec_lock+0x74>)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	011b      	lsls	r3, r3, #4
 8009640:	4413      	add	r3, r2
 8009642:	2200      	movs	r2, #0
 8009644:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	737b      	strb	r3, [r7, #13]
 800964a:	e001      	b.n	8009650 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800964c:	2302      	movs	r3, #2
 800964e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009650:	7b7b      	ldrb	r3, [r7, #13]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3714      	adds	r7, #20
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr
 800965e:	bf00      	nop
 8009660:	200370a0 	.word	0x200370a0

08009664 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800966c:	2300      	movs	r3, #0
 800966e:	60fb      	str	r3, [r7, #12]
 8009670:	e010      	b.n	8009694 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009672:	4a0d      	ldr	r2, [pc, #52]	; (80096a8 <clear_lock+0x44>)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	011b      	lsls	r3, r3, #4
 8009678:	4413      	add	r3, r2
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	429a      	cmp	r2, r3
 8009680:	d105      	bne.n	800968e <clear_lock+0x2a>
 8009682:	4a09      	ldr	r2, [pc, #36]	; (80096a8 <clear_lock+0x44>)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	011b      	lsls	r3, r3, #4
 8009688:	4413      	add	r3, r2
 800968a:	2200      	movs	r2, #0
 800968c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3301      	adds	r3, #1
 8009692:	60fb      	str	r3, [r7, #12]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b1f      	cmp	r3, #31
 8009698:	d9eb      	bls.n	8009672 <clear_lock+0xe>
	}
}
 800969a:	bf00      	nop
 800969c:	bf00      	nop
 800969e:	3714      	adds	r7, #20
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr
 80096a8:	200370a0 	.word	0x200370a0

080096ac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	78db      	ldrb	r3, [r3, #3]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d034      	beq.n	800972a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	7858      	ldrb	r0, [r3, #1]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80096d0:	2301      	movs	r3, #1
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	f7ff fd0e 	bl	80090f4 <disk_write>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80096de:	2301      	movs	r3, #1
 80096e0:	73fb      	strb	r3, [r7, #15]
 80096e2:	e022      	b.n	800972a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	1ad2      	subs	r2, r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d217      	bcs.n	800972a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	789b      	ldrb	r3, [r3, #2]
 80096fe:	613b      	str	r3, [r7, #16]
 8009700:	e010      	b.n	8009724 <sync_window+0x78>
					wsect += fs->fsize;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	697a      	ldr	r2, [r7, #20]
 8009708:	4413      	add	r3, r2
 800970a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	7858      	ldrb	r0, [r3, #1]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009716:	2301      	movs	r3, #1
 8009718:	697a      	ldr	r2, [r7, #20]
 800971a:	f7ff fceb 	bl	80090f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	3b01      	subs	r3, #1
 8009722:	613b      	str	r3, [r7, #16]
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d8eb      	bhi.n	8009702 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3718      	adds	r7, #24
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	429a      	cmp	r2, r3
 800974a:	d01b      	beq.n	8009784 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f7ff ffad 	bl	80096ac <sync_window>
 8009752:	4603      	mov	r3, r0
 8009754:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009756:	7bfb      	ldrb	r3, [r7, #15]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d113      	bne.n	8009784 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	7858      	ldrb	r0, [r3, #1]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009766:	2301      	movs	r3, #1
 8009768:	683a      	ldr	r2, [r7, #0]
 800976a:	f7ff fca3 	bl	80090b4 <disk_read>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d004      	beq.n	800977e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009774:	f04f 33ff 	mov.w	r3, #4294967295
 8009778:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800977a:	2301      	movs	r3, #1
 800977c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	683a      	ldr	r2, [r7, #0]
 8009782:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8009784:	7bfb      	ldrb	r3, [r7, #15]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
	...

08009790 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f7ff ff87 	bl	80096ac <sync_window>
 800979e:	4603      	mov	r3, r0
 80097a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d158      	bne.n	800985a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	2b03      	cmp	r3, #3
 80097ae:	d148      	bne.n	8009842 <sync_fs+0xb2>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	791b      	ldrb	r3, [r3, #4]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d144      	bne.n	8009842 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	3338      	adds	r3, #56	; 0x38
 80097bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097c0:	2100      	movs	r1, #0
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7ff fd77 	bl	80092b6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3338      	adds	r3, #56	; 0x38
 80097cc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80097d0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7ff fd06 	bl	80091e6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	3338      	adds	r3, #56	; 0x38
 80097de:	4921      	ldr	r1, [pc, #132]	; (8009864 <sync_fs+0xd4>)
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7ff fd1b 	bl	800921c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	3338      	adds	r3, #56	; 0x38
 80097ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80097ee:	491e      	ldr	r1, [pc, #120]	; (8009868 <sync_fs+0xd8>)
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7ff fd13 	bl	800921c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	3338      	adds	r3, #56	; 0x38
 80097fa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	4619      	mov	r1, r3
 8009804:	4610      	mov	r0, r2
 8009806:	f7ff fd09 	bl	800921c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	3338      	adds	r3, #56	; 0x38
 800980e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	695b      	ldr	r3, [r3, #20]
 8009816:	4619      	mov	r1, r3
 8009818:	4610      	mov	r0, r2
 800981a:	f7ff fcff 	bl	800921c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009822:	1c5a      	adds	r2, r3, #1
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	7858      	ldrb	r0, [r3, #1]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009836:	2301      	movs	r3, #1
 8009838:	f7ff fc5c 	bl	80090f4 <disk_write>
			fs->fsi_flag = 0;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	785b      	ldrb	r3, [r3, #1]
 8009846:	2200      	movs	r2, #0
 8009848:	2100      	movs	r1, #0
 800984a:	4618      	mov	r0, r3
 800984c:	f7ff fc72 	bl	8009134 <disk_ioctl>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <sync_fs+0xca>
 8009856:	2301      	movs	r3, #1
 8009858:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800985a:	7bfb      	ldrb	r3, [r7, #15]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	41615252 	.word	0x41615252
 8009868:	61417272 	.word	0x61417272

0800986c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	3b02      	subs	r3, #2
 800987a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	69db      	ldr	r3, [r3, #28]
 8009880:	3b02      	subs	r3, #2
 8009882:	683a      	ldr	r2, [r7, #0]
 8009884:	429a      	cmp	r2, r3
 8009886:	d301      	bcc.n	800988c <clust2sect+0x20>
 8009888:	2300      	movs	r3, #0
 800988a:	e008      	b.n	800989e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	895b      	ldrh	r3, [r3, #10]
 8009890:	461a      	mov	r2, r3
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	fb03 f202 	mul.w	r2, r3, r2
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989c:	4413      	add	r3, r2
}
 800989e:	4618      	mov	r0, r3
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b086      	sub	sp, #24
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d904      	bls.n	80098ca <get_fat+0x20>
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	69db      	ldr	r3, [r3, #28]
 80098c4:	683a      	ldr	r2, [r7, #0]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d302      	bcc.n	80098d0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80098ca:	2301      	movs	r3, #1
 80098cc:	617b      	str	r3, [r7, #20]
 80098ce:	e08f      	b.n	80099f0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80098d0:	f04f 33ff 	mov.w	r3, #4294967295
 80098d4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	2b03      	cmp	r3, #3
 80098dc:	d062      	beq.n	80099a4 <get_fat+0xfa>
 80098de:	2b03      	cmp	r3, #3
 80098e0:	dc7c      	bgt.n	80099dc <get_fat+0x132>
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d002      	beq.n	80098ec <get_fat+0x42>
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d042      	beq.n	8009970 <get_fat+0xc6>
 80098ea:	e077      	b.n	80099dc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	085b      	lsrs	r3, r3, #1
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	4413      	add	r3, r2
 80098f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	0a5b      	lsrs	r3, r3, #9
 8009902:	4413      	add	r3, r2
 8009904:	4619      	mov	r1, r3
 8009906:	6938      	ldr	r0, [r7, #16]
 8009908:	f7ff ff14 	bl	8009734 <move_window>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d167      	bne.n	80099e2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	1c5a      	adds	r2, r3, #1
 8009916:	60fa      	str	r2, [r7, #12]
 8009918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800991c:	693a      	ldr	r2, [r7, #16]
 800991e:	4413      	add	r3, r2
 8009920:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009924:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	0a5b      	lsrs	r3, r3, #9
 800992e:	4413      	add	r3, r2
 8009930:	4619      	mov	r1, r3
 8009932:	6938      	ldr	r0, [r7, #16]
 8009934:	f7ff fefe 	bl	8009734 <move_window>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d153      	bne.n	80099e6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	4413      	add	r3, r2
 8009948:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800994c:	021b      	lsls	r3, r3, #8
 800994e:	461a      	mov	r2, r3
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	4313      	orrs	r3, r2
 8009954:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	f003 0301 	and.w	r3, r3, #1
 800995c:	2b00      	cmp	r3, #0
 800995e:	d002      	beq.n	8009966 <get_fat+0xbc>
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	091b      	lsrs	r3, r3, #4
 8009964:	e002      	b.n	800996c <get_fat+0xc2>
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800996c:	617b      	str	r3, [r7, #20]
			break;
 800996e:	e03f      	b.n	80099f0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	0a1b      	lsrs	r3, r3, #8
 8009978:	4413      	add	r3, r2
 800997a:	4619      	mov	r1, r3
 800997c:	6938      	ldr	r0, [r7, #16]
 800997e:	f7ff fed9 	bl	8009734 <move_window>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d130      	bne.n	80099ea <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	005b      	lsls	r3, r3, #1
 8009992:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009996:	4413      	add	r3, r2
 8009998:	4618      	mov	r0, r3
 800999a:	f7ff fbe9 	bl	8009170 <ld_word>
 800999e:	4603      	mov	r3, r0
 80099a0:	617b      	str	r3, [r7, #20]
			break;
 80099a2:	e025      	b.n	80099f0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	09db      	lsrs	r3, r3, #7
 80099ac:	4413      	add	r3, r2
 80099ae:	4619      	mov	r1, r3
 80099b0:	6938      	ldr	r0, [r7, #16]
 80099b2:	f7ff febf 	bl	8009734 <move_window>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d118      	bne.n	80099ee <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80099ca:	4413      	add	r3, r2
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff fbe7 	bl	80091a0 <ld_dword>
 80099d2:	4603      	mov	r3, r0
 80099d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80099d8:	617b      	str	r3, [r7, #20]
			break;
 80099da:	e009      	b.n	80099f0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80099dc:	2301      	movs	r3, #1
 80099de:	617b      	str	r3, [r7, #20]
 80099e0:	e006      	b.n	80099f0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80099e2:	bf00      	nop
 80099e4:	e004      	b.n	80099f0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80099e6:	bf00      	nop
 80099e8:	e002      	b.n	80099f0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80099ea:	bf00      	nop
 80099ec:	e000      	b.n	80099f0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80099ee:	bf00      	nop
		}
	}

	return val;
 80099f0:	697b      	ldr	r3, [r7, #20]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3718      	adds	r7, #24
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80099fa:	b590      	push	{r4, r7, lr}
 80099fc:	b089      	sub	sp, #36	; 0x24
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	60f8      	str	r0, [r7, #12]
 8009a02:	60b9      	str	r1, [r7, #8]
 8009a04:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009a06:	2302      	movs	r3, #2
 8009a08:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	f240 80d2 	bls.w	8009bb6 <put_fat+0x1bc>
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	69db      	ldr	r3, [r3, #28]
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	f080 80cc 	bcs.w	8009bb6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	2b03      	cmp	r3, #3
 8009a24:	f000 8096 	beq.w	8009b54 <put_fat+0x15a>
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	f300 80cd 	bgt.w	8009bc8 <put_fat+0x1ce>
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d002      	beq.n	8009a38 <put_fat+0x3e>
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d06e      	beq.n	8009b14 <put_fat+0x11a>
 8009a36:	e0c7      	b.n	8009bc8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	61bb      	str	r3, [r7, #24]
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	085b      	lsrs	r3, r3, #1
 8009a40:	69ba      	ldr	r2, [r7, #24]
 8009a42:	4413      	add	r3, r2
 8009a44:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	0a5b      	lsrs	r3, r3, #9
 8009a4e:	4413      	add	r3, r2
 8009a50:	4619      	mov	r1, r3
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f7ff fe6e 	bl	8009734 <move_window>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a5c:	7ffb      	ldrb	r3, [r7, #31]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f040 80ab 	bne.w	8009bba <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	1c59      	adds	r1, r3, #1
 8009a6e:	61b9      	str	r1, [r7, #24]
 8009a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a74:	4413      	add	r3, r2
 8009a76:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	f003 0301 	and.w	r3, r3, #1
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00d      	beq.n	8009a9e <put_fat+0xa4>
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	b25b      	sxtb	r3, r3
 8009a88:	f003 030f 	and.w	r3, r3, #15
 8009a8c:	b25a      	sxtb	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	011b      	lsls	r3, r3, #4
 8009a94:	b25b      	sxtb	r3, r3
 8009a96:	4313      	orrs	r3, r2
 8009a98:	b25b      	sxtb	r3, r3
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	e001      	b.n	8009aa2 <put_fat+0xa8>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	0a5b      	lsrs	r3, r3, #9
 8009ab4:	4413      	add	r3, r2
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f7ff fe3b 	bl	8009734 <move_window>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ac2:	7ffb      	ldrb	r3, [r7, #31]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d17a      	bne.n	8009bbe <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ad4:	4413      	add	r3, r2
 8009ad6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d003      	beq.n	8009aea <put_fat+0xf0>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	091b      	lsrs	r3, r3, #4
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	e00e      	b.n	8009b08 <put_fat+0x10e>
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	b25b      	sxtb	r3, r3
 8009af0:	f023 030f 	bic.w	r3, r3, #15
 8009af4:	b25a      	sxtb	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	0a1b      	lsrs	r3, r3, #8
 8009afa:	b25b      	sxtb	r3, r3
 8009afc:	f003 030f 	and.w	r3, r3, #15
 8009b00:	b25b      	sxtb	r3, r3
 8009b02:	4313      	orrs	r3, r2
 8009b04:	b25b      	sxtb	r3, r3
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	697a      	ldr	r2, [r7, #20]
 8009b0a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	70da      	strb	r2, [r3, #3]
			break;
 8009b12:	e059      	b.n	8009bc8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	0a1b      	lsrs	r3, r3, #8
 8009b1c:	4413      	add	r3, r2
 8009b1e:	4619      	mov	r1, r3
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f7ff fe07 	bl	8009734 <move_window>
 8009b26:	4603      	mov	r3, r0
 8009b28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b2a:	7ffb      	ldrb	r3, [r7, #31]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d148      	bne.n	8009bc2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	005b      	lsls	r3, r3, #1
 8009b3a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009b3e:	4413      	add	r3, r2
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	b292      	uxth	r2, r2
 8009b44:	4611      	mov	r1, r2
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7ff fb4d 	bl	80091e6 <st_word>
			fs->wflag = 1;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	70da      	strb	r2, [r3, #3]
			break;
 8009b52:	e039      	b.n	8009bc8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	09db      	lsrs	r3, r3, #7
 8009b5c:	4413      	add	r3, r2
 8009b5e:	4619      	mov	r1, r3
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f7ff fde7 	bl	8009734 <move_window>
 8009b66:	4603      	mov	r3, r0
 8009b68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b6a:	7ffb      	ldrb	r3, [r7, #31]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d12a      	bne.n	8009bc6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009b84:	4413      	add	r3, r2
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff fb0a 	bl	80091a0 <ld_dword>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009b92:	4323      	orrs	r3, r4
 8009b94:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009ba4:	4413      	add	r3, r2
 8009ba6:	6879      	ldr	r1, [r7, #4]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7ff fb37 	bl	800921c <st_dword>
			fs->wflag = 1;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	70da      	strb	r2, [r3, #3]
			break;
 8009bb4:	e008      	b.n	8009bc8 <put_fat+0x1ce>
		}
	}
 8009bb6:	bf00      	nop
 8009bb8:	e006      	b.n	8009bc8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009bba:	bf00      	nop
 8009bbc:	e004      	b.n	8009bc8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009bbe:	bf00      	nop
 8009bc0:	e002      	b.n	8009bc8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009bc2:	bf00      	nop
 8009bc4:	e000      	b.n	8009bc8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009bc6:	bf00      	nop
	return res;
 8009bc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3724      	adds	r7, #36	; 0x24
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd90      	pop	{r4, r7, pc}

08009bd2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b088      	sub	sp, #32
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	60f8      	str	r0, [r7, #12]
 8009bda:	60b9      	str	r1, [r7, #8]
 8009bdc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d904      	bls.n	8009bf8 <remove_chain+0x26>
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	68ba      	ldr	r2, [r7, #8]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d301      	bcc.n	8009bfc <remove_chain+0x2a>
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	e04b      	b.n	8009c94 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00c      	beq.n	8009c1c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009c02:	f04f 32ff 	mov.w	r2, #4294967295
 8009c06:	6879      	ldr	r1, [r7, #4]
 8009c08:	69b8      	ldr	r0, [r7, #24]
 8009c0a:	f7ff fef6 	bl	80099fa <put_fat>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009c12:	7ffb      	ldrb	r3, [r7, #31]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d001      	beq.n	8009c1c <remove_chain+0x4a>
 8009c18:	7ffb      	ldrb	r3, [r7, #31]
 8009c1a:	e03b      	b.n	8009c94 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009c1c:	68b9      	ldr	r1, [r7, #8]
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f7ff fe43 	bl	80098aa <get_fat>
 8009c24:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d031      	beq.n	8009c90 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d101      	bne.n	8009c36 <remove_chain+0x64>
 8009c32:	2302      	movs	r3, #2
 8009c34:	e02e      	b.n	8009c94 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c3c:	d101      	bne.n	8009c42 <remove_chain+0x70>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e028      	b.n	8009c94 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009c42:	2200      	movs	r2, #0
 8009c44:	68b9      	ldr	r1, [r7, #8]
 8009c46:	69b8      	ldr	r0, [r7, #24]
 8009c48:	f7ff fed7 	bl	80099fa <put_fat>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009c50:	7ffb      	ldrb	r3, [r7, #31]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d001      	beq.n	8009c5a <remove_chain+0x88>
 8009c56:	7ffb      	ldrb	r3, [r7, #31]
 8009c58:	e01c      	b.n	8009c94 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	699a      	ldr	r2, [r3, #24]
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	69db      	ldr	r3, [r3, #28]
 8009c62:	3b02      	subs	r3, #2
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d20b      	bcs.n	8009c80 <remove_chain+0xae>
			fs->free_clst++;
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	1c5a      	adds	r2, r3, #1
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	791b      	ldrb	r3, [r3, #4]
 8009c76:	f043 0301 	orr.w	r3, r3, #1
 8009c7a:	b2da      	uxtb	r2, r3
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	69db      	ldr	r3, [r3, #28]
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d3c6      	bcc.n	8009c1c <remove_chain+0x4a>
 8009c8e:	e000      	b.n	8009c92 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009c90:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3720      	adds	r7, #32
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b088      	sub	sp, #32
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10d      	bne.n	8009cce <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	695b      	ldr	r3, [r3, #20]
 8009cb6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d004      	beq.n	8009cc8 <create_chain+0x2c>
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	69db      	ldr	r3, [r3, #28]
 8009cc2:	69ba      	ldr	r2, [r7, #24]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d31b      	bcc.n	8009d00 <create_chain+0x64>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	61bb      	str	r3, [r7, #24]
 8009ccc:	e018      	b.n	8009d00 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009cce:	6839      	ldr	r1, [r7, #0]
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f7ff fdea 	bl	80098aa <get_fat>
 8009cd6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d801      	bhi.n	8009ce2 <create_chain+0x46>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e070      	b.n	8009dc4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce8:	d101      	bne.n	8009cee <create_chain+0x52>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	e06a      	b.n	8009dc4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	69db      	ldr	r3, [r3, #28]
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d201      	bcs.n	8009cfc <create_chain+0x60>
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	e063      	b.n	8009dc4 <create_chain+0x128>
		scl = clst;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	3301      	adds	r3, #1
 8009d08:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	69db      	ldr	r3, [r3, #28]
 8009d0e:	69fa      	ldr	r2, [r7, #28]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d307      	bcc.n	8009d24 <create_chain+0x88>
				ncl = 2;
 8009d14:	2302      	movs	r3, #2
 8009d16:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009d18:	69fa      	ldr	r2, [r7, #28]
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d901      	bls.n	8009d24 <create_chain+0x88>
 8009d20:	2300      	movs	r3, #0
 8009d22:	e04f      	b.n	8009dc4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009d24:	69f9      	ldr	r1, [r7, #28]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7ff fdbf 	bl	80098aa <get_fat>
 8009d2c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00e      	beq.n	8009d52 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d003      	beq.n	8009d42 <create_chain+0xa6>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d40:	d101      	bne.n	8009d46 <create_chain+0xaa>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	e03e      	b.n	8009dc4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009d46:	69fa      	ldr	r2, [r7, #28]
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d1da      	bne.n	8009d04 <create_chain+0x68>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	e038      	b.n	8009dc4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009d52:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009d54:	f04f 32ff 	mov.w	r2, #4294967295
 8009d58:	69f9      	ldr	r1, [r7, #28]
 8009d5a:	6938      	ldr	r0, [r7, #16]
 8009d5c:	f7ff fe4d 	bl	80099fa <put_fat>
 8009d60:	4603      	mov	r3, r0
 8009d62:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009d64:	7dfb      	ldrb	r3, [r7, #23]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d109      	bne.n	8009d7e <create_chain+0xe2>
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d006      	beq.n	8009d7e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009d70:	69fa      	ldr	r2, [r7, #28]
 8009d72:	6839      	ldr	r1, [r7, #0]
 8009d74:	6938      	ldr	r0, [r7, #16]
 8009d76:	f7ff fe40 	bl	80099fa <put_fat>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009d7e:	7dfb      	ldrb	r3, [r7, #23]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d116      	bne.n	8009db2 <create_chain+0x116>
		fs->last_clst = ncl;
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	69fa      	ldr	r2, [r7, #28]
 8009d88:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	699a      	ldr	r2, [r3, #24]
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	3b02      	subs	r3, #2
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d804      	bhi.n	8009da2 <create_chain+0x106>
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	699b      	ldr	r3, [r3, #24]
 8009d9c:	1e5a      	subs	r2, r3, #1
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	791b      	ldrb	r3, [r3, #4]
 8009da6:	f043 0301 	orr.w	r3, r3, #1
 8009daa:	b2da      	uxtb	r2, r3
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	711a      	strb	r2, [r3, #4]
 8009db0:	e007      	b.n	8009dc2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009db2:	7dfb      	ldrb	r3, [r7, #23]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d102      	bne.n	8009dbe <create_chain+0x122>
 8009db8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dbc:	e000      	b.n	8009dc0 <create_chain+0x124>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009dc2:	69fb      	ldr	r3, [r7, #28]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3720      	adds	r7, #32
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b087      	sub	sp, #28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de0:	3304      	adds	r3, #4
 8009de2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	0a5b      	lsrs	r3, r3, #9
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	8952      	ldrh	r2, [r2, #10]
 8009dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8009df0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	1d1a      	adds	r2, r3, #4
 8009df6:	613a      	str	r2, [r7, #16]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <clmt_clust+0x3a>
 8009e02:	2300      	movs	r3, #0
 8009e04:	e010      	b.n	8009e28 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d307      	bcc.n	8009e1e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	1ad3      	subs	r3, r2, r3
 8009e14:	617b      	str	r3, [r7, #20]
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	3304      	adds	r3, #4
 8009e1a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009e1c:	e7e9      	b.n	8009df2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009e1e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	4413      	add	r3, r2
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	371c      	adds	r7, #28
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e4a:	d204      	bcs.n	8009e56 <dir_sdi+0x22>
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	f003 031f 	and.w	r3, r3, #31
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <dir_sdi+0x26>
		return FR_INT_ERR;
 8009e56:	2302      	movs	r3, #2
 8009e58:	e063      	b.n	8009f22 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d106      	bne.n	8009e7a <dir_sdi+0x46>
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	d902      	bls.n	8009e7a <dir_sdi+0x46>
		clst = fs->dirbase;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e78:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10c      	bne.n	8009e9a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	095b      	lsrs	r3, r3, #5
 8009e84:	693a      	ldr	r2, [r7, #16]
 8009e86:	8912      	ldrh	r2, [r2, #8]
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d301      	bcc.n	8009e90 <dir_sdi+0x5c>
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	e048      	b.n	8009f22 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	61da      	str	r2, [r3, #28]
 8009e98:	e029      	b.n	8009eee <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	895b      	ldrh	r3, [r3, #10]
 8009e9e:	025b      	lsls	r3, r3, #9
 8009ea0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009ea2:	e019      	b.n	8009ed8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6979      	ldr	r1, [r7, #20]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7ff fcfe 	bl	80098aa <get_fat>
 8009eae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb6:	d101      	bne.n	8009ebc <dir_sdi+0x88>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e032      	b.n	8009f22 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d904      	bls.n	8009ecc <dir_sdi+0x98>
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	69db      	ldr	r3, [r3, #28]
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d301      	bcc.n	8009ed0 <dir_sdi+0x9c>
 8009ecc:	2302      	movs	r3, #2
 8009ece:	e028      	b.n	8009f22 <dir_sdi+0xee>
			ofs -= csz;
 8009ed0:	683a      	ldr	r2, [r7, #0]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d2e1      	bcs.n	8009ea4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009ee0:	6979      	ldr	r1, [r7, #20]
 8009ee2:	6938      	ldr	r0, [r7, #16]
 8009ee4:	f7ff fcc2 	bl	800986c <clust2sect>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	697a      	ldr	r2, [r7, #20]
 8009ef2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	69db      	ldr	r3, [r3, #28]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d101      	bne.n	8009f00 <dir_sdi+0xcc>
 8009efc:	2302      	movs	r3, #2
 8009efe:	e010      	b.n	8009f22 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	69da      	ldr	r2, [r3, #28]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	0a5b      	lsrs	r3, r3, #9
 8009f08:	441a      	add	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f1a:	441a      	add	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3718      	adds	r7, #24
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b086      	sub	sp, #24
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	3320      	adds	r3, #32
 8009f40:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	69db      	ldr	r3, [r3, #28]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d003      	beq.n	8009f52 <dir_next+0x28>
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f50:	d301      	bcc.n	8009f56 <dir_next+0x2c>
 8009f52:	2304      	movs	r3, #4
 8009f54:	e0aa      	b.n	800a0ac <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f040 8098 	bne.w	800a092 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	69db      	ldr	r3, [r3, #28]
 8009f66:	1c5a      	adds	r2, r3, #1
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10b      	bne.n	8009f8c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	095b      	lsrs	r3, r3, #5
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	8912      	ldrh	r2, [r2, #8]
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	f0c0 8088 	bcc.w	800a092 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	61da      	str	r2, [r3, #28]
 8009f88:	2304      	movs	r3, #4
 8009f8a:	e08f      	b.n	800a0ac <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	0a5b      	lsrs	r3, r3, #9
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	8952      	ldrh	r2, [r2, #10]
 8009f94:	3a01      	subs	r2, #1
 8009f96:	4013      	ands	r3, r2
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d17a      	bne.n	800a092 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	f7ff fc80 	bl	80098aa <get_fat>
 8009faa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d801      	bhi.n	8009fb6 <dir_next+0x8c>
 8009fb2:	2302      	movs	r3, #2
 8009fb4:	e07a      	b.n	800a0ac <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fbc:	d101      	bne.n	8009fc2 <dir_next+0x98>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e074      	b.n	800a0ac <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	69db      	ldr	r3, [r3, #28]
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d358      	bcc.n	800a07e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d104      	bne.n	8009fdc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	61da      	str	r2, [r3, #28]
 8009fd8:	2304      	movs	r3, #4
 8009fda:	e067      	b.n	800a0ac <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	699b      	ldr	r3, [r3, #24]
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	f7ff fe59 	bl	8009c9c <create_chain>
 8009fea:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d101      	bne.n	8009ff6 <dir_next+0xcc>
 8009ff2:	2307      	movs	r3, #7
 8009ff4:	e05a      	b.n	800a0ac <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d101      	bne.n	800a000 <dir_next+0xd6>
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	e055      	b.n	800a0ac <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a006:	d101      	bne.n	800a00c <dir_next+0xe2>
 800a008:	2301      	movs	r3, #1
 800a00a:	e04f      	b.n	800a0ac <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f7ff fb4d 	bl	80096ac <sync_window>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d001      	beq.n	800a01c <dir_next+0xf2>
 800a018:	2301      	movs	r3, #1
 800a01a:	e047      	b.n	800a0ac <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3338      	adds	r3, #56	; 0x38
 800a020:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a024:	2100      	movs	r1, #0
 800a026:	4618      	mov	r0, r3
 800a028:	f7ff f945 	bl	80092b6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a02c:	2300      	movs	r3, #0
 800a02e:	613b      	str	r3, [r7, #16]
 800a030:	6979      	ldr	r1, [r7, #20]
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f7ff fc1a 	bl	800986c <clust2sect>
 800a038:	4602      	mov	r2, r0
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	635a      	str	r2, [r3, #52]	; 0x34
 800a03e:	e012      	b.n	800a066 <dir_next+0x13c>
						fs->wflag = 1;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2201      	movs	r2, #1
 800a044:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f7ff fb30 	bl	80096ac <sync_window>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <dir_next+0x12c>
 800a052:	2301      	movs	r3, #1
 800a054:	e02a      	b.n	800a0ac <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	3301      	adds	r3, #1
 800a05a:	613b      	str	r3, [r7, #16]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a060:	1c5a      	adds	r2, r3, #1
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	635a      	str	r2, [r3, #52]	; 0x34
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	895b      	ldrh	r3, [r3, #10]
 800a06a:	461a      	mov	r2, r3
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	4293      	cmp	r3, r2
 800a070:	d3e6      	bcc.n	800a040 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	1ad2      	subs	r2, r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	697a      	ldr	r2, [r7, #20]
 800a082:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a084:	6979      	ldr	r1, [r7, #20]
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f7ff fbf0 	bl	800986c <clust2sect>
 800a08c:	4602      	mov	r2, r0
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0a4:	441a      	add	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a0aa:	2300      	movs	r3, #0
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3718      	adds	r7, #24
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b086      	sub	sp, #24
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7ff feb4 	bl	8009e34 <dir_sdi>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a0d0:	7dfb      	ldrb	r3, [r7, #23]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d12b      	bne.n	800a12e <dir_alloc+0x7a>
		n = 0;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	69db      	ldr	r3, [r3, #28]
 800a0de:	4619      	mov	r1, r3
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f7ff fb27 	bl	8009734 <move_window>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a0ea:	7dfb      	ldrb	r3, [r7, #23]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d11d      	bne.n	800a12c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a1b      	ldr	r3, [r3, #32]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	2be5      	cmp	r3, #229	; 0xe5
 800a0f8:	d004      	beq.n	800a104 <dir_alloc+0x50>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a1b      	ldr	r3, [r3, #32]
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d107      	bne.n	800a114 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	3301      	adds	r3, #1
 800a108:	613b      	str	r3, [r7, #16]
 800a10a:	693a      	ldr	r2, [r7, #16]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d102      	bne.n	800a118 <dir_alloc+0x64>
 800a112:	e00c      	b.n	800a12e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a114:	2300      	movs	r3, #0
 800a116:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a118:	2101      	movs	r1, #1
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7ff ff05 	bl	8009f2a <dir_next>
 800a120:	4603      	mov	r3, r0
 800a122:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a124:	7dfb      	ldrb	r3, [r7, #23]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d0d7      	beq.n	800a0da <dir_alloc+0x26>
 800a12a:	e000      	b.n	800a12e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a12c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a12e:	7dfb      	ldrb	r3, [r7, #23]
 800a130:	2b04      	cmp	r3, #4
 800a132:	d101      	bne.n	800a138 <dir_alloc+0x84>
 800a134:	2307      	movs	r3, #7
 800a136:	75fb      	strb	r3, [r7, #23]
	return res;
 800a138:	7dfb      	ldrb	r3, [r7, #23]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b084      	sub	sp, #16
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
 800a14a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	331a      	adds	r3, #26
 800a150:	4618      	mov	r0, r3
 800a152:	f7ff f80d 	bl	8009170 <ld_word>
 800a156:	4603      	mov	r3, r0
 800a158:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d109      	bne.n	800a176 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	3314      	adds	r3, #20
 800a166:	4618      	mov	r0, r3
 800a168:	f7ff f802 	bl	8009170 <ld_word>
 800a16c:	4603      	mov	r3, r0
 800a16e:	041b      	lsls	r3, r3, #16
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	4313      	orrs	r3, r2
 800a174:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a176:	68fb      	ldr	r3, [r7, #12]
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	331a      	adds	r3, #26
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	b292      	uxth	r2, r2
 800a194:	4611      	mov	r1, r2
 800a196:	4618      	mov	r0, r3
 800a198:	f7ff f825 	bl	80091e6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	2b03      	cmp	r3, #3
 800a1a2:	d109      	bne.n	800a1b8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	f103 0214 	add.w	r2, r3, #20
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	0c1b      	lsrs	r3, r3, #16
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	4610      	mov	r0, r2
 800a1b4:	f7ff f817 	bl	80091e6 <st_word>
	}
}
 800a1b8:	bf00      	nop
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a1c0:	b590      	push	{r4, r7, lr}
 800a1c2:	b087      	sub	sp, #28
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	331a      	adds	r3, #26
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7fe ffce 	bl	8009170 <ld_word>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <cmp_lfn+0x1e>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	e059      	b.n	800a292 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1e6:	1e5a      	subs	r2, r3, #1
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	005b      	lsls	r3, r3, #1
 800a1ec:	4413      	add	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4413      	add	r3, r2
 800a1f2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	81fb      	strh	r3, [r7, #14]
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	613b      	str	r3, [r7, #16]
 800a1fc:	e033      	b.n	800a266 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a1fe:	4a27      	ldr	r2, [pc, #156]	; (800a29c <cmp_lfn+0xdc>)
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	4413      	add	r3, r2
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	461a      	mov	r2, r3
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	4413      	add	r3, r2
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7fe ffaf 	bl	8009170 <ld_word>
 800a212:	4603      	mov	r3, r0
 800a214:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a216:	89fb      	ldrh	r3, [r7, #14]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d01a      	beq.n	800a252 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	2bfe      	cmp	r3, #254	; 0xfe
 800a220:	d812      	bhi.n	800a248 <cmp_lfn+0x88>
 800a222:	89bb      	ldrh	r3, [r7, #12]
 800a224:	4618      	mov	r0, r3
 800a226:	f002 f8a1 	bl	800c36c <ff_wtoupper>
 800a22a:	4603      	mov	r3, r0
 800a22c:	461c      	mov	r4, r3
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	1c5a      	adds	r2, r3, #1
 800a232:	617a      	str	r2, [r7, #20]
 800a234:	005b      	lsls	r3, r3, #1
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	4413      	add	r3, r2
 800a23a:	881b      	ldrh	r3, [r3, #0]
 800a23c:	4618      	mov	r0, r3
 800a23e:	f002 f895 	bl	800c36c <ff_wtoupper>
 800a242:	4603      	mov	r3, r0
 800a244:	429c      	cmp	r4, r3
 800a246:	d001      	beq.n	800a24c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a248:	2300      	movs	r3, #0
 800a24a:	e022      	b.n	800a292 <cmp_lfn+0xd2>
			}
			wc = uc;
 800a24c:	89bb      	ldrh	r3, [r7, #12]
 800a24e:	81fb      	strh	r3, [r7, #14]
 800a250:	e006      	b.n	800a260 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a252:	89bb      	ldrh	r3, [r7, #12]
 800a254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a258:	4293      	cmp	r3, r2
 800a25a:	d001      	beq.n	800a260 <cmp_lfn+0xa0>
 800a25c:	2300      	movs	r3, #0
 800a25e:	e018      	b.n	800a292 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	3301      	adds	r3, #1
 800a264:	613b      	str	r3, [r7, #16]
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	2b0c      	cmp	r3, #12
 800a26a:	d9c8      	bls.n	800a1fe <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a274:	2b00      	cmp	r3, #0
 800a276:	d00b      	beq.n	800a290 <cmp_lfn+0xd0>
 800a278:	89fb      	ldrh	r3, [r7, #14]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d008      	beq.n	800a290 <cmp_lfn+0xd0>
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	005b      	lsls	r3, r3, #1
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	4413      	add	r3, r2
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d001      	beq.n	800a290 <cmp_lfn+0xd0>
 800a28c:	2300      	movs	r3, #0
 800a28e:	e000      	b.n	800a292 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a290:	2301      	movs	r3, #1
}
 800a292:	4618      	mov	r0, r3
 800a294:	371c      	adds	r7, #28
 800a296:	46bd      	mov	sp, r7
 800a298:	bd90      	pop	{r4, r7, pc}
 800a29a:	bf00      	nop
 800a29c:	0801742c 	.word	0x0801742c

0800a2a0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b088      	sub	sp, #32
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	71fb      	strb	r3, [r7, #7]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	330d      	adds	r3, #13
 800a2ba:	79ba      	ldrb	r2, [r7, #6]
 800a2bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	330b      	adds	r3, #11
 800a2c2:	220f      	movs	r2, #15
 800a2c4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	330c      	adds	r3, #12
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	331a      	adds	r3, #26
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7fe ff86 	bl	80091e6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a2da:	79fb      	ldrb	r3, [r7, #7]
 800a2dc:	1e5a      	subs	r2, r3, #1
 800a2de:	4613      	mov	r3, r2
 800a2e0:	005b      	lsls	r3, r3, #1
 800a2e2:	4413      	add	r3, r2
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	4413      	add	r3, r2
 800a2e8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	82fb      	strh	r3, [r7, #22]
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a2f2:	8afb      	ldrh	r3, [r7, #22]
 800a2f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d007      	beq.n	800a30c <put_lfn+0x6c>
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	1c5a      	adds	r2, r3, #1
 800a300:	61fa      	str	r2, [r7, #28]
 800a302:	005b      	lsls	r3, r3, #1
 800a304:	68fa      	ldr	r2, [r7, #12]
 800a306:	4413      	add	r3, r2
 800a308:	881b      	ldrh	r3, [r3, #0]
 800a30a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a30c:	4a17      	ldr	r2, [pc, #92]	; (800a36c <put_lfn+0xcc>)
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	4413      	add	r3, r2
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	461a      	mov	r2, r3
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	4413      	add	r3, r2
 800a31a:	8afa      	ldrh	r2, [r7, #22]
 800a31c:	4611      	mov	r1, r2
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fe ff61 	bl	80091e6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a324:	8afb      	ldrh	r3, [r7, #22]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d102      	bne.n	800a330 <put_lfn+0x90>
 800a32a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a32e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	3301      	adds	r3, #1
 800a334:	61bb      	str	r3, [r7, #24]
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	2b0c      	cmp	r3, #12
 800a33a:	d9da      	bls.n	800a2f2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a33c:	8afb      	ldrh	r3, [r7, #22]
 800a33e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a342:	4293      	cmp	r3, r2
 800a344:	d006      	beq.n	800a354 <put_lfn+0xb4>
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	005b      	lsls	r3, r3, #1
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	4413      	add	r3, r2
 800a34e:	881b      	ldrh	r3, [r3, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d103      	bne.n	800a35c <put_lfn+0xbc>
 800a354:	79fb      	ldrb	r3, [r7, #7]
 800a356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a35a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	79fa      	ldrb	r2, [r7, #7]
 800a360:	701a      	strb	r2, [r3, #0]
}
 800a362:	bf00      	nop
 800a364:	3720      	adds	r7, #32
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	0801742c 	.word	0x0801742c

0800a370 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b08c      	sub	sp, #48	; 0x30
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
 800a37c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a37e:	220b      	movs	r2, #11
 800a380:	68b9      	ldr	r1, [r7, #8]
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f7fe ff76 	bl	8009274 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	2b05      	cmp	r3, #5
 800a38c:	d929      	bls.n	800a3e2 <gen_numname+0x72>
		sr = seq;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a392:	e020      	b.n	800a3d6 <gen_numname+0x66>
			wc = *lfn++;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	1c9a      	adds	r2, r3, #2
 800a398:	607a      	str	r2, [r7, #4]
 800a39a:	881b      	ldrh	r3, [r3, #0]
 800a39c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a39e:	2300      	movs	r3, #0
 800a3a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3a2:	e015      	b.n	800a3d0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	005a      	lsls	r2, r3, #1
 800a3a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a3aa:	f003 0301 	and.w	r3, r3, #1
 800a3ae:	4413      	add	r3, r2
 800a3b0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a3b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a3b4:	085b      	lsrs	r3, r3, #1
 800a3b6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d003      	beq.n	800a3ca <gen_numname+0x5a>
 800a3c2:	69fa      	ldr	r2, [r7, #28]
 800a3c4:	4b30      	ldr	r3, [pc, #192]	; (800a488 <gen_numname+0x118>)
 800a3c6:	4053      	eors	r3, r2
 800a3c8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d2:	2b0f      	cmp	r3, #15
 800a3d4:	d9e6      	bls.n	800a3a4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	881b      	ldrh	r3, [r3, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1da      	bne.n	800a394 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a3e2:	2307      	movs	r3, #7
 800a3e4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	f003 030f 	and.w	r3, r3, #15
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	3330      	adds	r3, #48	; 0x30
 800a3f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a3f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a3fa:	2b39      	cmp	r3, #57	; 0x39
 800a3fc:	d904      	bls.n	800a408 <gen_numname+0x98>
 800a3fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a402:	3307      	adds	r3, #7
 800a404:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40a:	1e5a      	subs	r2, r3, #1
 800a40c:	62ba      	str	r2, [r7, #40]	; 0x28
 800a40e:	3330      	adds	r3, #48	; 0x30
 800a410:	443b      	add	r3, r7
 800a412:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a416:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	091b      	lsrs	r3, r3, #4
 800a41e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1df      	bne.n	800a3e6 <gen_numname+0x76>
	ns[i] = '~';
 800a426:	f107 0214 	add.w	r2, r7, #20
 800a42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42c:	4413      	add	r3, r2
 800a42e:	227e      	movs	r2, #126	; 0x7e
 800a430:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a432:	2300      	movs	r3, #0
 800a434:	627b      	str	r3, [r7, #36]	; 0x24
 800a436:	e002      	b.n	800a43e <gen_numname+0xce>
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	3301      	adds	r3, #1
 800a43c:	627b      	str	r3, [r7, #36]	; 0x24
 800a43e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	429a      	cmp	r2, r3
 800a444:	d205      	bcs.n	800a452 <gen_numname+0xe2>
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	4413      	add	r3, r2
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	2b20      	cmp	r3, #32
 800a450:	d1f2      	bne.n	800a438 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a454:	2b07      	cmp	r3, #7
 800a456:	d807      	bhi.n	800a468 <gen_numname+0xf8>
 800a458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45a:	1c5a      	adds	r2, r3, #1
 800a45c:	62ba      	str	r2, [r7, #40]	; 0x28
 800a45e:	3330      	adds	r3, #48	; 0x30
 800a460:	443b      	add	r3, r7
 800a462:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a466:	e000      	b.n	800a46a <gen_numname+0xfa>
 800a468:	2120      	movs	r1, #32
 800a46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46c:	1c5a      	adds	r2, r3, #1
 800a46e:	627a      	str	r2, [r7, #36]	; 0x24
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	4413      	add	r3, r2
 800a474:	460a      	mov	r2, r1
 800a476:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	2b07      	cmp	r3, #7
 800a47c:	d9e9      	bls.n	800a452 <gen_numname+0xe2>
}
 800a47e:	bf00      	nop
 800a480:	bf00      	nop
 800a482:	3730      	adds	r7, #48	; 0x30
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	00011021 	.word	0x00011021

0800a48c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a494:	2300      	movs	r3, #0
 800a496:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a498:	230b      	movs	r3, #11
 800a49a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
 800a49e:	b2da      	uxtb	r2, r3
 800a4a0:	0852      	lsrs	r2, r2, #1
 800a4a2:	01db      	lsls	r3, r3, #7
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	1c59      	adds	r1, r3, #1
 800a4ac:	6079      	str	r1, [r7, #4]
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	60bb      	str	r3, [r7, #8]
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1ed      	bne.n	800a49c <sum_sfn+0x10>
	return sum;
 800a4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b086      	sub	sp, #24
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a4dc:	2100      	movs	r1, #0
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7ff fca8 	bl	8009e34 <dir_sdi>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a4e8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <dir_find+0x24>
 800a4ee:	7dfb      	ldrb	r3, [r7, #23]
 800a4f0:	e0a9      	b.n	800a646 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a4f2:	23ff      	movs	r3, #255	; 0xff
 800a4f4:	753b      	strb	r3, [r7, #20]
 800a4f6:	7d3b      	ldrb	r3, [r7, #20]
 800a4f8:	757b      	strb	r3, [r7, #21]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a500:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	69db      	ldr	r3, [r3, #28]
 800a506:	4619      	mov	r1, r3
 800a508:	6938      	ldr	r0, [r7, #16]
 800a50a:	f7ff f913 	bl	8009734 <move_window>
 800a50e:	4603      	mov	r3, r0
 800a510:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a512:	7dfb      	ldrb	r3, [r7, #23]
 800a514:	2b00      	cmp	r3, #0
 800a516:	f040 8090 	bne.w	800a63a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a1b      	ldr	r3, [r3, #32]
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a522:	7dbb      	ldrb	r3, [r7, #22]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d102      	bne.n	800a52e <dir_find+0x60>
 800a528:	2304      	movs	r3, #4
 800a52a:	75fb      	strb	r3, [r7, #23]
 800a52c:	e08a      	b.n	800a644 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	330b      	adds	r3, #11
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a53a:	73fb      	strb	r3, [r7, #15]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	7bfa      	ldrb	r2, [r7, #15]
 800a540:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a542:	7dbb      	ldrb	r3, [r7, #22]
 800a544:	2be5      	cmp	r3, #229	; 0xe5
 800a546:	d007      	beq.n	800a558 <dir_find+0x8a>
 800a548:	7bfb      	ldrb	r3, [r7, #15]
 800a54a:	f003 0308 	and.w	r3, r3, #8
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d009      	beq.n	800a566 <dir_find+0x98>
 800a552:	7bfb      	ldrb	r3, [r7, #15]
 800a554:	2b0f      	cmp	r3, #15
 800a556:	d006      	beq.n	800a566 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a558:	23ff      	movs	r3, #255	; 0xff
 800a55a:	757b      	strb	r3, [r7, #21]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f04f 32ff 	mov.w	r2, #4294967295
 800a562:	631a      	str	r2, [r3, #48]	; 0x30
 800a564:	e05e      	b.n	800a624 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a566:	7bfb      	ldrb	r3, [r7, #15]
 800a568:	2b0f      	cmp	r3, #15
 800a56a:	d136      	bne.n	800a5da <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a576:	2b00      	cmp	r3, #0
 800a578:	d154      	bne.n	800a624 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a57a:	7dbb      	ldrb	r3, [r7, #22]
 800a57c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00d      	beq.n	800a5a0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a1b      	ldr	r3, [r3, #32]
 800a588:	7b5b      	ldrb	r3, [r3, #13]
 800a58a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a58c:	7dbb      	ldrb	r3, [r7, #22]
 800a58e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a592:	75bb      	strb	r3, [r7, #22]
 800a594:	7dbb      	ldrb	r3, [r7, #22]
 800a596:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	695a      	ldr	r2, [r3, #20]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a5a0:	7dba      	ldrb	r2, [r7, #22]
 800a5a2:	7d7b      	ldrb	r3, [r7, #21]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d115      	bne.n	800a5d4 <dir_find+0x106>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a1b      	ldr	r3, [r3, #32]
 800a5ac:	330d      	adds	r3, #13
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	7d3a      	ldrb	r2, [r7, #20]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d10e      	bne.n	800a5d4 <dir_find+0x106>
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	68da      	ldr	r2, [r3, #12]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a1b      	ldr	r3, [r3, #32]
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	f7ff fdfd 	bl	800a1c0 <cmp_lfn>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d003      	beq.n	800a5d4 <dir_find+0x106>
 800a5cc:	7d7b      	ldrb	r3, [r7, #21]
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	e000      	b.n	800a5d6 <dir_find+0x108>
 800a5d4:	23ff      	movs	r3, #255	; 0xff
 800a5d6:	757b      	strb	r3, [r7, #21]
 800a5d8:	e024      	b.n	800a624 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a5da:	7d7b      	ldrb	r3, [r7, #21]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d109      	bne.n	800a5f4 <dir_find+0x126>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a1b      	ldr	r3, [r3, #32]
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7ff ff51 	bl	800a48c <sum_sfn>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	7d3b      	ldrb	r3, [r7, #20]
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d024      	beq.n	800a63e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a5fa:	f003 0301 	and.w	r3, r3, #1
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10a      	bne.n	800a618 <dir_find+0x14a>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a18      	ldr	r0, [r3, #32]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	3324      	adds	r3, #36	; 0x24
 800a60a:	220b      	movs	r2, #11
 800a60c:	4619      	mov	r1, r3
 800a60e:	f7fe fe6d 	bl	80092ec <mem_cmp>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d014      	beq.n	800a642 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a618:	23ff      	movs	r3, #255	; 0xff
 800a61a:	757b      	strb	r3, [r7, #21]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f04f 32ff 	mov.w	r2, #4294967295
 800a622:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a624:	2100      	movs	r1, #0
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7ff fc7f 	bl	8009f2a <dir_next>
 800a62c:	4603      	mov	r3, r0
 800a62e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a630:	7dfb      	ldrb	r3, [r7, #23]
 800a632:	2b00      	cmp	r3, #0
 800a634:	f43f af65 	beq.w	800a502 <dir_find+0x34>
 800a638:	e004      	b.n	800a644 <dir_find+0x176>
		if (res != FR_OK) break;
 800a63a:	bf00      	nop
 800a63c:	e002      	b.n	800a644 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a63e:	bf00      	nop
 800a640:	e000      	b.n	800a644 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a642:	bf00      	nop

	return res;
 800a644:	7dfb      	ldrb	r3, [r7, #23]
}
 800a646:	4618      	mov	r0, r3
 800a648:	3718      	adds	r7, #24
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
	...

0800a650 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b08c      	sub	sp, #48	; 0x30
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a664:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d001      	beq.n	800a670 <dir_register+0x20>
 800a66c:	2306      	movs	r3, #6
 800a66e:	e0e0      	b.n	800a832 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a670:	2300      	movs	r3, #0
 800a672:	627b      	str	r3, [r7, #36]	; 0x24
 800a674:	e002      	b.n	800a67c <dir_register+0x2c>
 800a676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a678:	3301      	adds	r3, #1
 800a67a:	627b      	str	r3, [r7, #36]	; 0x24
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	68da      	ldr	r2, [r3, #12]
 800a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a682:	005b      	lsls	r3, r3, #1
 800a684:	4413      	add	r3, r2
 800a686:	881b      	ldrh	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1f4      	bne.n	800a676 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800a692:	f107 030c 	add.w	r3, r7, #12
 800a696:	220c      	movs	r2, #12
 800a698:	4618      	mov	r0, r3
 800a69a:	f7fe fdeb 	bl	8009274 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a69e:	7dfb      	ldrb	r3, [r7, #23]
 800a6a0:	f003 0301 	and.w	r3, r3, #1
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d032      	beq.n	800a70e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2240      	movs	r2, #64	; 0x40
 800a6ac:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6b4:	e016      	b.n	800a6e4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	68da      	ldr	r2, [r3, #12]
 800a6c0:	f107 010c 	add.w	r1, r7, #12
 800a6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c6:	f7ff fe53 	bl	800a370 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f7ff feff 	bl	800a4ce <dir_find>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a6d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d106      	bne.n	800a6ec <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e6:	2b63      	cmp	r3, #99	; 0x63
 800a6e8:	d9e5      	bls.n	800a6b6 <dir_register+0x66>
 800a6ea:	e000      	b.n	800a6ee <dir_register+0x9e>
			if (res != FR_OK) break;
 800a6ec:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f0:	2b64      	cmp	r3, #100	; 0x64
 800a6f2:	d101      	bne.n	800a6f8 <dir_register+0xa8>
 800a6f4:	2307      	movs	r3, #7
 800a6f6:	e09c      	b.n	800a832 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a6f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6fc:	2b04      	cmp	r3, #4
 800a6fe:	d002      	beq.n	800a706 <dir_register+0xb6>
 800a700:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a704:	e095      	b.n	800a832 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a706:	7dfa      	ldrb	r2, [r7, #23]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a70e:	7dfb      	ldrb	r3, [r7, #23]
 800a710:	f003 0302 	and.w	r3, r3, #2
 800a714:	2b00      	cmp	r3, #0
 800a716:	d007      	beq.n	800a728 <dir_register+0xd8>
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	330c      	adds	r3, #12
 800a71c:	4a47      	ldr	r2, [pc, #284]	; (800a83c <dir_register+0x1ec>)
 800a71e:	fba2 2303 	umull	r2, r3, r2, r3
 800a722:	089b      	lsrs	r3, r3, #2
 800a724:	3301      	adds	r3, #1
 800a726:	e000      	b.n	800a72a <dir_register+0xda>
 800a728:	2301      	movs	r3, #1
 800a72a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a72c:	6a39      	ldr	r1, [r7, #32]
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7ff fcc0 	bl	800a0b4 <dir_alloc>
 800a734:	4603      	mov	r3, r0
 800a736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a73a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d148      	bne.n	800a7d4 <dir_register+0x184>
 800a742:	6a3b      	ldr	r3, [r7, #32]
 800a744:	3b01      	subs	r3, #1
 800a746:	623b      	str	r3, [r7, #32]
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d042      	beq.n	800a7d4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	695a      	ldr	r2, [r3, #20]
 800a752:	6a3b      	ldr	r3, [r7, #32]
 800a754:	015b      	lsls	r3, r3, #5
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7ff fb6a 	bl	8009e34 <dir_sdi>
 800a760:	4603      	mov	r3, r0
 800a762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a766:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d132      	bne.n	800a7d4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	3324      	adds	r3, #36	; 0x24
 800a772:	4618      	mov	r0, r3
 800a774:	f7ff fe8a 	bl	800a48c <sum_sfn>
 800a778:	4603      	mov	r3, r0
 800a77a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	69db      	ldr	r3, [r3, #28]
 800a780:	4619      	mov	r1, r3
 800a782:	69f8      	ldr	r0, [r7, #28]
 800a784:	f7fe ffd6 	bl	8009734 <move_window>
 800a788:	4603      	mov	r3, r0
 800a78a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a78e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a792:	2b00      	cmp	r3, #0
 800a794:	d11d      	bne.n	800a7d2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a796:	69fb      	ldr	r3, [r7, #28]
 800a798:	68d8      	ldr	r0, [r3, #12]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a19      	ldr	r1, [r3, #32]
 800a79e:	6a3b      	ldr	r3, [r7, #32]
 800a7a0:	b2da      	uxtb	r2, r3
 800a7a2:	7efb      	ldrb	r3, [r7, #27]
 800a7a4:	f7ff fd7c 	bl	800a2a0 <put_lfn>
				fs->wflag = 1;
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7ff fbba 	bl	8009f2a <dir_next>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a7bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d107      	bne.n	800a7d4 <dir_register+0x184>
 800a7c4:	6a3b      	ldr	r3, [r7, #32]
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	623b      	str	r3, [r7, #32]
 800a7ca:	6a3b      	ldr	r3, [r7, #32]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1d5      	bne.n	800a77c <dir_register+0x12c>
 800a7d0:	e000      	b.n	800a7d4 <dir_register+0x184>
				if (res != FR_OK) break;
 800a7d2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a7d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d128      	bne.n	800a82e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	69db      	ldr	r3, [r3, #28]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	69f8      	ldr	r0, [r7, #28]
 800a7e4:	f7fe ffa6 	bl	8009734 <move_window>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a7ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d11b      	bne.n	800a82e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a1b      	ldr	r3, [r3, #32]
 800a7fa:	2220      	movs	r2, #32
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fe fd59 	bl	80092b6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a18      	ldr	r0, [r3, #32]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	3324      	adds	r3, #36	; 0x24
 800a80c:	220b      	movs	r2, #11
 800a80e:	4619      	mov	r1, r3
 800a810:	f7fe fd30 	bl	8009274 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a1b      	ldr	r3, [r3, #32]
 800a81e:	330c      	adds	r3, #12
 800a820:	f002 0218 	and.w	r2, r2, #24
 800a824:	b2d2      	uxtb	r2, r2
 800a826:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	2201      	movs	r2, #1
 800a82c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a82e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a832:	4618      	mov	r0, r3
 800a834:	3730      	adds	r7, #48	; 0x30
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	4ec4ec4f 	.word	0x4ec4ec4f

0800a840 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b08a      	sub	sp, #40	; 0x28
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	613b      	str	r3, [r7, #16]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	60fb      	str	r3, [r7, #12]
 800a858:	2300      	movs	r3, #0
 800a85a:	617b      	str	r3, [r7, #20]
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	1c5a      	adds	r2, r3, #1
 800a864:	61ba      	str	r2, [r7, #24]
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	4413      	add	r3, r2
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a86e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a870:	2b1f      	cmp	r3, #31
 800a872:	d940      	bls.n	800a8f6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a874:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a876:	2b2f      	cmp	r3, #47	; 0x2f
 800a878:	d006      	beq.n	800a888 <create_name+0x48>
 800a87a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a87c:	2b5c      	cmp	r3, #92	; 0x5c
 800a87e:	d110      	bne.n	800a8a2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a880:	e002      	b.n	800a888 <create_name+0x48>
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	3301      	adds	r3, #1
 800a886:	61bb      	str	r3, [r7, #24]
 800a888:	693a      	ldr	r2, [r7, #16]
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	4413      	add	r3, r2
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	2b2f      	cmp	r3, #47	; 0x2f
 800a892:	d0f6      	beq.n	800a882 <create_name+0x42>
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	4413      	add	r3, r2
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	2b5c      	cmp	r3, #92	; 0x5c
 800a89e:	d0f0      	beq.n	800a882 <create_name+0x42>
			break;
 800a8a0:	e02a      	b.n	800a8f8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2bfe      	cmp	r3, #254	; 0xfe
 800a8a6:	d901      	bls.n	800a8ac <create_name+0x6c>
 800a8a8:	2306      	movs	r3, #6
 800a8aa:	e17d      	b.n	800aba8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a8ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a8b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8b4:	2101      	movs	r1, #1
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f001 fd1c 	bl	800c2f4 <ff_convert>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a8c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <create_name+0x8a>
 800a8c6:	2306      	movs	r3, #6
 800a8c8:	e16e      	b.n	800aba8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a8ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8cc:	2b7f      	cmp	r3, #127	; 0x7f
 800a8ce:	d809      	bhi.n	800a8e4 <create_name+0xa4>
 800a8d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	488d      	ldr	r0, [pc, #564]	; (800ab0c <create_name+0x2cc>)
 800a8d6:	f7fe fd30 	bl	800933a <chk_chr>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d001      	beq.n	800a8e4 <create_name+0xa4>
 800a8e0:	2306      	movs	r3, #6
 800a8e2:	e161      	b.n	800aba8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	1c5a      	adds	r2, r3, #1
 800a8e8:	617a      	str	r2, [r7, #20]
 800a8ea:	005b      	lsls	r3, r3, #1
 800a8ec:	68fa      	ldr	r2, [r7, #12]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a8f2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a8f4:	e7b4      	b.n	800a860 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a8f6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a8f8:	693a      	ldr	r2, [r7, #16]
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	441a      	add	r2, r3
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a902:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a904:	2b1f      	cmp	r3, #31
 800a906:	d801      	bhi.n	800a90c <create_name+0xcc>
 800a908:	2304      	movs	r3, #4
 800a90a:	e000      	b.n	800a90e <create_name+0xce>
 800a90c:	2300      	movs	r3, #0
 800a90e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a912:	e011      	b.n	800a938 <create_name+0xf8>
		w = lfn[di - 1];
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a91a:	4413      	add	r3, r2
 800a91c:	005b      	lsls	r3, r3, #1
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	4413      	add	r3, r2
 800a922:	881b      	ldrh	r3, [r3, #0]
 800a924:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a928:	2b20      	cmp	r3, #32
 800a92a:	d002      	beq.n	800a932 <create_name+0xf2>
 800a92c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a92e:	2b2e      	cmp	r3, #46	; 0x2e
 800a930:	d106      	bne.n	800a940 <create_name+0x100>
		di--;
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	3b01      	subs	r3, #1
 800a936:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1ea      	bne.n	800a914 <create_name+0xd4>
 800a93e:	e000      	b.n	800a942 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a940:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	005b      	lsls	r3, r3, #1
 800a946:	68fa      	ldr	r2, [r7, #12]
 800a948:	4413      	add	r3, r2
 800a94a:	2200      	movs	r2, #0
 800a94c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d101      	bne.n	800a958 <create_name+0x118>
 800a954:	2306      	movs	r3, #6
 800a956:	e127      	b.n	800aba8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	3324      	adds	r3, #36	; 0x24
 800a95c:	220b      	movs	r2, #11
 800a95e:	2120      	movs	r1, #32
 800a960:	4618      	mov	r0, r3
 800a962:	f7fe fca8 	bl	80092b6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a966:	2300      	movs	r3, #0
 800a968:	61bb      	str	r3, [r7, #24]
 800a96a:	e002      	b.n	800a972 <create_name+0x132>
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	3301      	adds	r3, #1
 800a970:	61bb      	str	r3, [r7, #24]
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	005b      	lsls	r3, r3, #1
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	4413      	add	r3, r2
 800a97a:	881b      	ldrh	r3, [r3, #0]
 800a97c:	2b20      	cmp	r3, #32
 800a97e:	d0f5      	beq.n	800a96c <create_name+0x12c>
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	005b      	lsls	r3, r3, #1
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	4413      	add	r3, r2
 800a988:	881b      	ldrh	r3, [r3, #0]
 800a98a:	2b2e      	cmp	r3, #46	; 0x2e
 800a98c:	d0ee      	beq.n	800a96c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d009      	beq.n	800a9a8 <create_name+0x168>
 800a994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a998:	f043 0303 	orr.w	r3, r3, #3
 800a99c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a9a0:	e002      	b.n	800a9a8 <create_name+0x168>
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	617b      	str	r3, [r7, #20]
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d009      	beq.n	800a9c2 <create_name+0x182>
 800a9ae:	697a      	ldr	r2, [r7, #20]
 800a9b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a9b4:	4413      	add	r3, r2
 800a9b6:	005b      	lsls	r3, r3, #1
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	881b      	ldrh	r3, [r3, #0]
 800a9be:	2b2e      	cmp	r3, #46	; 0x2e
 800a9c0:	d1ef      	bne.n	800a9a2 <create_name+0x162>

	i = b = 0; ni = 8;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	623b      	str	r3, [r7, #32]
 800a9cc:	2308      	movs	r3, #8
 800a9ce:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	1c5a      	adds	r2, r3, #1
 800a9d4:	61ba      	str	r2, [r7, #24]
 800a9d6:	005b      	lsls	r3, r3, #1
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	4413      	add	r3, r2
 800a9dc:	881b      	ldrh	r3, [r3, #0]
 800a9de:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a9e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f000 8090 	beq.w	800ab08 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a9e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9ea:	2b20      	cmp	r3, #32
 800a9ec:	d006      	beq.n	800a9fc <create_name+0x1bc>
 800a9ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a9f2:	d10a      	bne.n	800aa0a <create_name+0x1ca>
 800a9f4:	69ba      	ldr	r2, [r7, #24]
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d006      	beq.n	800aa0a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa00:	f043 0303 	orr.w	r3, r3, #3
 800aa04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa08:	e07d      	b.n	800ab06 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800aa0a:	6a3a      	ldr	r2, [r7, #32]
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d203      	bcs.n	800aa1a <create_name+0x1da>
 800aa12:	69ba      	ldr	r2, [r7, #24]
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d123      	bne.n	800aa62 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	2b0b      	cmp	r3, #11
 800aa1e:	d106      	bne.n	800aa2e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800aa20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa24:	f043 0303 	orr.w	r3, r3, #3
 800aa28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa2c:	e075      	b.n	800ab1a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800aa2e:	69ba      	ldr	r2, [r7, #24]
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d005      	beq.n	800aa42 <create_name+0x202>
 800aa36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa3a:	f043 0303 	orr.w	r3, r3, #3
 800aa3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800aa42:	69ba      	ldr	r2, [r7, #24]
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d866      	bhi.n	800ab18 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	61bb      	str	r3, [r7, #24]
 800aa4e:	2308      	movs	r3, #8
 800aa50:	623b      	str	r3, [r7, #32]
 800aa52:	230b      	movs	r3, #11
 800aa54:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800aa56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800aa60:	e051      	b.n	800ab06 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800aa62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa64:	2b7f      	cmp	r3, #127	; 0x7f
 800aa66:	d914      	bls.n	800aa92 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800aa68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f001 fc41 	bl	800c2f4 <ff_convert>
 800aa72:	4603      	mov	r3, r0
 800aa74:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800aa76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d004      	beq.n	800aa86 <create_name+0x246>
 800aa7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa7e:	3b80      	subs	r3, #128	; 0x80
 800aa80:	4a23      	ldr	r2, [pc, #140]	; (800ab10 <create_name+0x2d0>)
 800aa82:	5cd3      	ldrb	r3, [r2, r3]
 800aa84:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800aa86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa8a:	f043 0302 	orr.w	r3, r3, #2
 800aa8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800aa92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d007      	beq.n	800aaa8 <create_name+0x268>
 800aa98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	481d      	ldr	r0, [pc, #116]	; (800ab14 <create_name+0x2d4>)
 800aa9e:	f7fe fc4c 	bl	800933a <chk_chr>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d008      	beq.n	800aaba <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800aaa8:	235f      	movs	r3, #95	; 0x5f
 800aaaa:	84bb      	strh	r3, [r7, #36]	; 0x24
 800aaac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aab0:	f043 0303 	orr.w	r3, r3, #3
 800aab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aab8:	e01b      	b.n	800aaf2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800aaba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aabc:	2b40      	cmp	r3, #64	; 0x40
 800aabe:	d909      	bls.n	800aad4 <create_name+0x294>
 800aac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aac2:	2b5a      	cmp	r3, #90	; 0x5a
 800aac4:	d806      	bhi.n	800aad4 <create_name+0x294>
					b |= 2;
 800aac6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aaca:	f043 0302 	orr.w	r3, r3, #2
 800aace:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800aad2:	e00e      	b.n	800aaf2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800aad4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aad6:	2b60      	cmp	r3, #96	; 0x60
 800aad8:	d90b      	bls.n	800aaf2 <create_name+0x2b2>
 800aada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aadc:	2b7a      	cmp	r3, #122	; 0x7a
 800aade:	d808      	bhi.n	800aaf2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800aae0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aae4:	f043 0301 	orr.w	r3, r3, #1
 800aae8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800aaec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aaee:	3b20      	subs	r3, #32
 800aaf0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800aaf2:	6a3b      	ldr	r3, [r7, #32]
 800aaf4:	1c5a      	adds	r2, r3, #1
 800aaf6:	623a      	str	r2, [r7, #32]
 800aaf8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aafa:	b2d1      	uxtb	r1, r2
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	4413      	add	r3, r2
 800ab00:	460a      	mov	r2, r1
 800ab02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ab06:	e763      	b.n	800a9d0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ab08:	bf00      	nop
 800ab0a:	e006      	b.n	800ab1a <create_name+0x2da>
 800ab0c:	080172f4 	.word	0x080172f4
 800ab10:	080173ac 	.word	0x080173ac
 800ab14:	08017300 	.word	0x08017300
			if (si > di) break;			/* No extension */
 800ab18:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ab20:	2be5      	cmp	r3, #229	; 0xe5
 800ab22:	d103      	bne.n	800ab2c <create_name+0x2ec>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2205      	movs	r2, #5
 800ab28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	2b08      	cmp	r3, #8
 800ab30:	d104      	bne.n	800ab3c <create_name+0x2fc>
 800ab32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ab3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ab40:	f003 030c 	and.w	r3, r3, #12
 800ab44:	2b0c      	cmp	r3, #12
 800ab46:	d005      	beq.n	800ab54 <create_name+0x314>
 800ab48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ab4c:	f003 0303 	and.w	r3, r3, #3
 800ab50:	2b03      	cmp	r3, #3
 800ab52:	d105      	bne.n	800ab60 <create_name+0x320>
 800ab54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab58:	f043 0302 	orr.w	r3, r3, #2
 800ab5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ab60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab64:	f003 0302 	and.w	r3, r3, #2
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d117      	bne.n	800ab9c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ab6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ab70:	f003 0303 	and.w	r3, r3, #3
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d105      	bne.n	800ab84 <create_name+0x344>
 800ab78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab7c:	f043 0310 	orr.w	r3, r3, #16
 800ab80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ab84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ab88:	f003 030c 	and.w	r3, r3, #12
 800ab8c:	2b04      	cmp	r3, #4
 800ab8e:	d105      	bne.n	800ab9c <create_name+0x35c>
 800ab90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab94:	f043 0308 	orr.w	r3, r3, #8
 800ab98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aba2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800aba6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3728      	adds	r7, #40	; 0x28
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800abc4:	e002      	b.n	800abcc <follow_path+0x1c>
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	3301      	adds	r3, #1
 800abca:	603b      	str	r3, [r7, #0]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	2b2f      	cmp	r3, #47	; 0x2f
 800abd2:	d0f8      	beq.n	800abc6 <follow_path+0x16>
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	2b5c      	cmp	r3, #92	; 0x5c
 800abda:	d0f4      	beq.n	800abc6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	2200      	movs	r2, #0
 800abe0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	2b1f      	cmp	r3, #31
 800abe8:	d80a      	bhi.n	800ac00 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2280      	movs	r2, #128	; 0x80
 800abee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800abf2:	2100      	movs	r1, #0
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f7ff f91d 	bl	8009e34 <dir_sdi>
 800abfa:	4603      	mov	r3, r0
 800abfc:	75fb      	strb	r3, [r7, #23]
 800abfe:	e043      	b.n	800ac88 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ac00:	463b      	mov	r3, r7
 800ac02:	4619      	mov	r1, r3
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7ff fe1b 	bl	800a840 <create_name>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ac0e:	7dfb      	ldrb	r3, [r7, #23]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d134      	bne.n	800ac7e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f7ff fc5a 	bl	800a4ce <dir_find>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ac24:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ac26:	7dfb      	ldrb	r3, [r7, #23]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00a      	beq.n	800ac42 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ac2c:	7dfb      	ldrb	r3, [r7, #23]
 800ac2e:	2b04      	cmp	r3, #4
 800ac30:	d127      	bne.n	800ac82 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ac32:	7afb      	ldrb	r3, [r7, #11]
 800ac34:	f003 0304 	and.w	r3, r3, #4
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d122      	bne.n	800ac82 <follow_path+0xd2>
 800ac3c:	2305      	movs	r3, #5
 800ac3e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ac40:	e01f      	b.n	800ac82 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ac42:	7afb      	ldrb	r3, [r7, #11]
 800ac44:	f003 0304 	and.w	r3, r3, #4
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d11c      	bne.n	800ac86 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	799b      	ldrb	r3, [r3, #6]
 800ac50:	f003 0310 	and.w	r3, r3, #16
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d102      	bne.n	800ac5e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ac58:	2305      	movs	r3, #5
 800ac5a:	75fb      	strb	r3, [r7, #23]
 800ac5c:	e014      	b.n	800ac88 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	695b      	ldr	r3, [r3, #20]
 800ac68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac6c:	4413      	add	r3, r2
 800ac6e:	4619      	mov	r1, r3
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f7ff fa66 	bl	800a142 <ld_clust>
 800ac76:	4602      	mov	r2, r0
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ac7c:	e7c0      	b.n	800ac00 <follow_path+0x50>
			if (res != FR_OK) break;
 800ac7e:	bf00      	nop
 800ac80:	e002      	b.n	800ac88 <follow_path+0xd8>
				break;
 800ac82:	bf00      	nop
 800ac84:	e000      	b.n	800ac88 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ac86:	bf00      	nop
			}
		}
	}

	return res;
 800ac88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3718      	adds	r7, #24
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b087      	sub	sp, #28
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ac9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac9e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d031      	beq.n	800ad0c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	617b      	str	r3, [r7, #20]
 800acae:	e002      	b.n	800acb6 <get_ldnumber+0x24>
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	3301      	adds	r3, #1
 800acb4:	617b      	str	r3, [r7, #20]
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	2b1f      	cmp	r3, #31
 800acbc:	d903      	bls.n	800acc6 <get_ldnumber+0x34>
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	2b3a      	cmp	r3, #58	; 0x3a
 800acc4:	d1f4      	bne.n	800acb0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	2b3a      	cmp	r3, #58	; 0x3a
 800accc:	d11c      	bne.n	800ad08 <get_ldnumber+0x76>
			tp = *path;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	1c5a      	adds	r2, r3, #1
 800acd8:	60fa      	str	r2, [r7, #12]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	3b30      	subs	r3, #48	; 0x30
 800acde:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2b09      	cmp	r3, #9
 800ace4:	d80e      	bhi.n	800ad04 <get_ldnumber+0x72>
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	429a      	cmp	r2, r3
 800acec:	d10a      	bne.n	800ad04 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d107      	bne.n	800ad04 <get_ldnumber+0x72>
					vol = (int)i;
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	3301      	adds	r3, #1
 800acfc:	617b      	str	r3, [r7, #20]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	697a      	ldr	r2, [r7, #20]
 800ad02:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	e002      	b.n	800ad0e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ad08:	2300      	movs	r3, #0
 800ad0a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ad0c:	693b      	ldr	r3, [r7, #16]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	371c      	adds	r7, #28
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
	...

0800ad1c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	70da      	strb	r2, [r3, #3]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad32:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7fe fcfc 	bl	8009734 <move_window>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <check_fs+0x2a>
 800ad42:	2304      	movs	r3, #4
 800ad44:	e038      	b.n	800adb8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	3338      	adds	r3, #56	; 0x38
 800ad4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fe fa0e 	bl	8009170 <ld_word>
 800ad54:	4603      	mov	r3, r0
 800ad56:	461a      	mov	r2, r3
 800ad58:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d001      	beq.n	800ad64 <check_fs+0x48>
 800ad60:	2303      	movs	r3, #3
 800ad62:	e029      	b.n	800adb8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ad6a:	2be9      	cmp	r3, #233	; 0xe9
 800ad6c:	d009      	beq.n	800ad82 <check_fs+0x66>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ad74:	2beb      	cmp	r3, #235	; 0xeb
 800ad76:	d11e      	bne.n	800adb6 <check_fs+0x9a>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ad7e:	2b90      	cmp	r3, #144	; 0x90
 800ad80:	d119      	bne.n	800adb6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	3338      	adds	r3, #56	; 0x38
 800ad86:	3336      	adds	r3, #54	; 0x36
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7fe fa09 	bl	80091a0 <ld_dword>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ad94:	4a0a      	ldr	r2, [pc, #40]	; (800adc0 <check_fs+0xa4>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d101      	bne.n	800ad9e <check_fs+0x82>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e00c      	b.n	800adb8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	3338      	adds	r3, #56	; 0x38
 800ada2:	3352      	adds	r3, #82	; 0x52
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7fe f9fb 	bl	80091a0 <ld_dword>
 800adaa:	4603      	mov	r3, r0
 800adac:	4a05      	ldr	r2, [pc, #20]	; (800adc4 <check_fs+0xa8>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d101      	bne.n	800adb6 <check_fs+0x9a>
 800adb2:	2300      	movs	r3, #0
 800adb4:	e000      	b.n	800adb8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800adb6:	2302      	movs	r3, #2
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	00544146 	.word	0x00544146
 800adc4:	33544146 	.word	0x33544146

0800adc8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b096      	sub	sp, #88	; 0x58
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	4613      	mov	r3, r2
 800add4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2200      	movs	r2, #0
 800adda:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f7ff ff58 	bl	800ac92 <get_ldnumber>
 800ade2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ade4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	da01      	bge.n	800adee <find_volume+0x26>
 800adea:	230b      	movs	r3, #11
 800adec:	e235      	b.n	800b25a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800adee:	4aa5      	ldr	r2, [pc, #660]	; (800b084 <find_volume+0x2bc>)
 800adf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adf6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800adf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d101      	bne.n	800ae02 <find_volume+0x3a>
 800adfe:	230c      	movs	r3, #12
 800ae00:	e22b      	b.n	800b25a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800ae02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae04:	f7fe fab4 	bl	8009370 <lock_fs>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d101      	bne.n	800ae12 <find_volume+0x4a>
 800ae0e:	230f      	movs	r3, #15
 800ae10:	e223      	b.n	800b25a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae16:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ae18:	79fb      	ldrb	r3, [r7, #7]
 800ae1a:	f023 0301 	bic.w	r3, r3, #1
 800ae1e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ae20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d01a      	beq.n	800ae5e <find_volume+0x96>
		stat = disk_status(fs->drv);
 800ae28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2a:	785b      	ldrb	r3, [r3, #1]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7fe f901 	bl	8009034 <disk_status>
 800ae32:	4603      	mov	r3, r0
 800ae34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ae38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae3c:	f003 0301 	and.w	r3, r3, #1
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10c      	bne.n	800ae5e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ae44:	79fb      	ldrb	r3, [r7, #7]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d007      	beq.n	800ae5a <find_volume+0x92>
 800ae4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae4e:	f003 0304 	and.w	r3, r3, #4
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d001      	beq.n	800ae5a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800ae56:	230a      	movs	r3, #10
 800ae58:	e1ff      	b.n	800b25a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	e1fd      	b.n	800b25a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae60:	2200      	movs	r2, #0
 800ae62:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ae64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae66:	b2da      	uxtb	r2, r3
 800ae68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ae6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6e:	785b      	ldrb	r3, [r3, #1]
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7fe f8f9 	bl	8009068 <disk_initialize>
 800ae76:	4603      	mov	r3, r0
 800ae78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ae7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d001      	beq.n	800ae8c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ae88:	2303      	movs	r3, #3
 800ae8a:	e1e6      	b.n	800b25a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ae8c:	79fb      	ldrb	r3, [r7, #7]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d007      	beq.n	800aea2 <find_volume+0xda>
 800ae92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae96:	f003 0304 	and.w	r3, r3, #4
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d001      	beq.n	800aea2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800ae9e:	230a      	movs	r3, #10
 800aea0:	e1db      	b.n	800b25a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800aea6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aea8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aeaa:	f7ff ff37 	bl	800ad1c <check_fs>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800aeb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	d149      	bne.n	800af50 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aebc:	2300      	movs	r3, #0
 800aebe:	643b      	str	r3, [r7, #64]	; 0x40
 800aec0:	e01e      	b.n	800af00 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800aec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800aec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeca:	011b      	lsls	r3, r3, #4
 800aecc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800aed0:	4413      	add	r3, r2
 800aed2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	3304      	adds	r3, #4
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d006      	beq.n	800aeec <find_volume+0x124>
 800aede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee0:	3308      	adds	r3, #8
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fe f95c 	bl	80091a0 <ld_dword>
 800aee8:	4602      	mov	r2, r0
 800aeea:	e000      	b.n	800aeee <find_volume+0x126>
 800aeec:	2200      	movs	r2, #0
 800aeee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	3358      	adds	r3, #88	; 0x58
 800aef4:	443b      	add	r3, r7
 800aef6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aefa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aefc:	3301      	adds	r3, #1
 800aefe:	643b      	str	r3, [r7, #64]	; 0x40
 800af00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af02:	2b03      	cmp	r3, #3
 800af04:	d9dd      	bls.n	800aec2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800af06:	2300      	movs	r3, #0
 800af08:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800af0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d002      	beq.n	800af16 <find_volume+0x14e>
 800af10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af12:	3b01      	subs	r3, #1
 800af14:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800af16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	3358      	adds	r3, #88	; 0x58
 800af1c:	443b      	add	r3, r7
 800af1e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800af22:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800af24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af26:	2b00      	cmp	r3, #0
 800af28:	d005      	beq.n	800af36 <find_volume+0x16e>
 800af2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af2e:	f7ff fef5 	bl	800ad1c <check_fs>
 800af32:	4603      	mov	r3, r0
 800af34:	e000      	b.n	800af38 <find_volume+0x170>
 800af36:	2303      	movs	r3, #3
 800af38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800af3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af40:	2b01      	cmp	r3, #1
 800af42:	d905      	bls.n	800af50 <find_volume+0x188>
 800af44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af46:	3301      	adds	r3, #1
 800af48:	643b      	str	r3, [r7, #64]	; 0x40
 800af4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af4c:	2b03      	cmp	r3, #3
 800af4e:	d9e2      	bls.n	800af16 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800af50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af54:	2b04      	cmp	r3, #4
 800af56:	d101      	bne.n	800af5c <find_volume+0x194>
 800af58:	2301      	movs	r3, #1
 800af5a:	e17e      	b.n	800b25a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800af5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af60:	2b01      	cmp	r3, #1
 800af62:	d901      	bls.n	800af68 <find_volume+0x1a0>
 800af64:	230d      	movs	r3, #13
 800af66:	e178      	b.n	800b25a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800af68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6a:	3338      	adds	r3, #56	; 0x38
 800af6c:	330b      	adds	r3, #11
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fe f8fe 	bl	8009170 <ld_word>
 800af74:	4603      	mov	r3, r0
 800af76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af7a:	d001      	beq.n	800af80 <find_volume+0x1b8>
 800af7c:	230d      	movs	r3, #13
 800af7e:	e16c      	b.n	800b25a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800af80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af82:	3338      	adds	r3, #56	; 0x38
 800af84:	3316      	adds	r3, #22
 800af86:	4618      	mov	r0, r3
 800af88:	f7fe f8f2 	bl	8009170 <ld_word>
 800af8c:	4603      	mov	r3, r0
 800af8e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800af90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af92:	2b00      	cmp	r3, #0
 800af94:	d106      	bne.n	800afa4 <find_volume+0x1dc>
 800af96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af98:	3338      	adds	r3, #56	; 0x38
 800af9a:	3324      	adds	r3, #36	; 0x24
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7fe f8ff 	bl	80091a0 <ld_dword>
 800afa2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800afa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800afa8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800afaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afac:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800afb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800afb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb6:	789b      	ldrb	r3, [r3, #2]
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d005      	beq.n	800afc8 <find_volume+0x200>
 800afbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbe:	789b      	ldrb	r3, [r3, #2]
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	d001      	beq.n	800afc8 <find_volume+0x200>
 800afc4:	230d      	movs	r3, #13
 800afc6:	e148      	b.n	800b25a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800afc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afca:	789b      	ldrb	r3, [r3, #2]
 800afcc:	461a      	mov	r2, r3
 800afce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afd0:	fb02 f303 	mul.w	r3, r2, r3
 800afd4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800afd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afdc:	b29a      	uxth	r2, r3
 800afde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800afe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe4:	895b      	ldrh	r3, [r3, #10]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d008      	beq.n	800affc <find_volume+0x234>
 800afea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afec:	895b      	ldrh	r3, [r3, #10]
 800afee:	461a      	mov	r2, r3
 800aff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff2:	895b      	ldrh	r3, [r3, #10]
 800aff4:	3b01      	subs	r3, #1
 800aff6:	4013      	ands	r3, r2
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d001      	beq.n	800b000 <find_volume+0x238>
 800affc:	230d      	movs	r3, #13
 800affe:	e12c      	b.n	800b25a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b002:	3338      	adds	r3, #56	; 0x38
 800b004:	3311      	adds	r3, #17
 800b006:	4618      	mov	r0, r3
 800b008:	f7fe f8b2 	bl	8009170 <ld_word>
 800b00c:	4603      	mov	r3, r0
 800b00e:	461a      	mov	r2, r3
 800b010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b012:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b016:	891b      	ldrh	r3, [r3, #8]
 800b018:	f003 030f 	and.w	r3, r3, #15
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <find_volume+0x25e>
 800b022:	230d      	movs	r3, #13
 800b024:	e119      	b.n	800b25a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b028:	3338      	adds	r3, #56	; 0x38
 800b02a:	3313      	adds	r3, #19
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7fe f89f 	bl	8009170 <ld_word>
 800b032:	4603      	mov	r3, r0
 800b034:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d106      	bne.n	800b04a <find_volume+0x282>
 800b03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03e:	3338      	adds	r3, #56	; 0x38
 800b040:	3320      	adds	r3, #32
 800b042:	4618      	mov	r0, r3
 800b044:	f7fe f8ac 	bl	80091a0 <ld_dword>
 800b048:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04c:	3338      	adds	r3, #56	; 0x38
 800b04e:	330e      	adds	r3, #14
 800b050:	4618      	mov	r0, r3
 800b052:	f7fe f88d 	bl	8009170 <ld_word>
 800b056:	4603      	mov	r3, r0
 800b058:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b05a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <find_volume+0x29c>
 800b060:	230d      	movs	r3, #13
 800b062:	e0fa      	b.n	800b25a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b064:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b068:	4413      	add	r3, r2
 800b06a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b06c:	8912      	ldrh	r2, [r2, #8]
 800b06e:	0912      	lsrs	r2, r2, #4
 800b070:	b292      	uxth	r2, r2
 800b072:	4413      	add	r3, r2
 800b074:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d204      	bcs.n	800b088 <find_volume+0x2c0>
 800b07e:	230d      	movs	r3, #13
 800b080:	e0eb      	b.n	800b25a <find_volume+0x492>
 800b082:	bf00      	nop
 800b084:	20037098 	.word	0x20037098
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08c:	1ad3      	subs	r3, r2, r3
 800b08e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b090:	8952      	ldrh	r2, [r2, #10]
 800b092:	fbb3 f3f2 	udiv	r3, r3, r2
 800b096:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d101      	bne.n	800b0a2 <find_volume+0x2da>
 800b09e:	230d      	movs	r3, #13
 800b0a0:	e0db      	b.n	800b25a <find_volume+0x492>
		fmt = FS_FAT32;
 800b0a2:	2303      	movs	r3, #3
 800b0a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0aa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d802      	bhi.n	800b0b8 <find_volume+0x2f0>
 800b0b2:	2302      	movs	r3, #2
 800b0b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ba:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d802      	bhi.n	800b0c8 <find_volume+0x300>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ca:	1c9a      	adds	r2, r3, #2
 800b0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ce:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b0d4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b0d6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b0d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0da:	441a      	add	r2, r3
 800b0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0de:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b0e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e4:	441a      	add	r2, r3
 800b0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800b0ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0ee:	2b03      	cmp	r3, #3
 800b0f0:	d11e      	bne.n	800b130 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f4:	3338      	adds	r3, #56	; 0x38
 800b0f6:	332a      	adds	r3, #42	; 0x2a
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7fe f839 	bl	8009170 <ld_word>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d001      	beq.n	800b108 <find_volume+0x340>
 800b104:	230d      	movs	r3, #13
 800b106:	e0a8      	b.n	800b25a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10a:	891b      	ldrh	r3, [r3, #8]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <find_volume+0x34c>
 800b110:	230d      	movs	r3, #13
 800b112:	e0a2      	b.n	800b25a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b116:	3338      	adds	r3, #56	; 0x38
 800b118:	332c      	adds	r3, #44	; 0x2c
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fe f840 	bl	80091a0 <ld_dword>
 800b120:	4602      	mov	r2, r0
 800b122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b124:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b128:	69db      	ldr	r3, [r3, #28]
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	647b      	str	r3, [r7, #68]	; 0x44
 800b12e:	e01f      	b.n	800b170 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b132:	891b      	ldrh	r3, [r3, #8]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d101      	bne.n	800b13c <find_volume+0x374>
 800b138:	230d      	movs	r3, #13
 800b13a:	e08e      	b.n	800b25a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b142:	441a      	add	r2, r3
 800b144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b146:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b148:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	d103      	bne.n	800b158 <find_volume+0x390>
 800b150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b152:	69db      	ldr	r3, [r3, #28]
 800b154:	005b      	lsls	r3, r3, #1
 800b156:	e00a      	b.n	800b16e <find_volume+0x3a6>
 800b158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15a:	69da      	ldr	r2, [r3, #28]
 800b15c:	4613      	mov	r3, r2
 800b15e:	005b      	lsls	r3, r3, #1
 800b160:	4413      	add	r3, r2
 800b162:	085a      	lsrs	r2, r3, #1
 800b164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b166:	69db      	ldr	r3, [r3, #28]
 800b168:	f003 0301 	and.w	r3, r3, #1
 800b16c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b16e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b172:	6a1a      	ldr	r2, [r3, #32]
 800b174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b176:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b17a:	0a5b      	lsrs	r3, r3, #9
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d201      	bcs.n	800b184 <find_volume+0x3bc>
 800b180:	230d      	movs	r3, #13
 800b182:	e06a      	b.n	800b25a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b186:	f04f 32ff 	mov.w	r2, #4294967295
 800b18a:	619a      	str	r2, [r3, #24]
 800b18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18e:	699a      	ldr	r2, [r3, #24]
 800b190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b192:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	2280      	movs	r2, #128	; 0x80
 800b198:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b19a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b19e:	2b03      	cmp	r3, #3
 800b1a0:	d149      	bne.n	800b236 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	3338      	adds	r3, #56	; 0x38
 800b1a6:	3330      	adds	r3, #48	; 0x30
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7fd ffe1 	bl	8009170 <ld_word>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d140      	bne.n	800b236 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b1b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b1bc:	f7fe faba 	bl	8009734 <move_window>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d137      	bne.n	800b236 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800b1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ce:	3338      	adds	r3, #56	; 0x38
 800b1d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7fd ffcb 	bl	8009170 <ld_word>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	461a      	mov	r2, r3
 800b1de:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d127      	bne.n	800b236 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e8:	3338      	adds	r3, #56	; 0x38
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fd ffd8 	bl	80091a0 <ld_dword>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	4a1c      	ldr	r2, [pc, #112]	; (800b264 <find_volume+0x49c>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d11e      	bne.n	800b236 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fa:	3338      	adds	r3, #56	; 0x38
 800b1fc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b200:	4618      	mov	r0, r3
 800b202:	f7fd ffcd 	bl	80091a0 <ld_dword>
 800b206:	4603      	mov	r3, r0
 800b208:	4a17      	ldr	r2, [pc, #92]	; (800b268 <find_volume+0x4a0>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d113      	bne.n	800b236 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b210:	3338      	adds	r3, #56	; 0x38
 800b212:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b216:	4618      	mov	r0, r3
 800b218:	f7fd ffc2 	bl	80091a0 <ld_dword>
 800b21c:	4602      	mov	r2, r0
 800b21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b220:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b224:	3338      	adds	r3, #56	; 0x38
 800b226:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fd ffb8 	bl	80091a0 <ld_dword>
 800b230:	4602      	mov	r2, r0
 800b232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b234:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b238:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b23c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b23e:	4b0b      	ldr	r3, [pc, #44]	; (800b26c <find_volume+0x4a4>)
 800b240:	881b      	ldrh	r3, [r3, #0]
 800b242:	3301      	adds	r3, #1
 800b244:	b29a      	uxth	r2, r3
 800b246:	4b09      	ldr	r3, [pc, #36]	; (800b26c <find_volume+0x4a4>)
 800b248:	801a      	strh	r2, [r3, #0]
 800b24a:	4b08      	ldr	r3, [pc, #32]	; (800b26c <find_volume+0x4a4>)
 800b24c:	881a      	ldrh	r2, [r3, #0]
 800b24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b250:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b252:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b254:	f7fe fa06 	bl	8009664 <clear_lock>
#endif
	return FR_OK;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3758      	adds	r7, #88	; 0x58
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	41615252 	.word	0x41615252
 800b268:	61417272 	.word	0x61417272
 800b26c:	2003709c 	.word	0x2003709c

0800b270 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b27a:	2309      	movs	r3, #9
 800b27c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d02e      	beq.n	800b2e2 <validate+0x72>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d02a      	beq.n	800b2e2 <validate+0x72>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d025      	beq.n	800b2e2 <validate+0x72>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	889a      	ldrh	r2, [r3, #4]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	88db      	ldrh	r3, [r3, #6]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d11e      	bne.n	800b2e2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7fe f861 	bl	8009370 <lock_fs>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d014      	beq.n	800b2de <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	785b      	ldrb	r3, [r3, #1]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fd feba 	bl	8009034 <disk_status>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	f003 0301 	and.w	r3, r3, #1
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d102      	bne.n	800b2d0 <validate+0x60>
				res = FR_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	73fb      	strb	r3, [r7, #15]
 800b2ce:	e008      	b.n	800b2e2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2100      	movs	r1, #0
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fe f860 	bl	800939c <unlock_fs>
 800b2dc:	e001      	b.n	800b2e2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800b2de:	230f      	movs	r3, #15
 800b2e0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b2e2:	7bfb      	ldrb	r3, [r7, #15]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d102      	bne.n	800b2ee <validate+0x7e>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	e000      	b.n	800b2f0 <validate+0x80>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	683a      	ldr	r2, [r7, #0]
 800b2f2:	6013      	str	r3, [r2, #0]
	return res;
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
	...

0800b300 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b088      	sub	sp, #32
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	4613      	mov	r3, r2
 800b30c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b312:	f107 0310 	add.w	r3, r7, #16
 800b316:	4618      	mov	r0, r3
 800b318:	f7ff fcbb 	bl	800ac92 <get_ldnumber>
 800b31c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	2b00      	cmp	r3, #0
 800b322:	da01      	bge.n	800b328 <f_mount+0x28>
 800b324:	230b      	movs	r3, #11
 800b326:	e048      	b.n	800b3ba <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b328:	4a26      	ldr	r2, [pc, #152]	; (800b3c4 <f_mount+0xc4>)
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b330:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d00f      	beq.n	800b358 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b338:	69b8      	ldr	r0, [r7, #24]
 800b33a:	f7fe f993 	bl	8009664 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	4618      	mov	r0, r3
 800b344:	f001 f8b7 	bl	800c4b6 <ff_del_syncobj>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d101      	bne.n	800b352 <f_mount+0x52>
 800b34e:	2302      	movs	r3, #2
 800b350:	e033      	b.n	800b3ba <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	2200      	movs	r2, #0
 800b356:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00f      	beq.n	800b37e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2200      	movs	r2, #0
 800b362:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	b2da      	uxtb	r2, r3
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	3310      	adds	r3, #16
 800b36c:	4619      	mov	r1, r3
 800b36e:	4610      	mov	r0, r2
 800b370:	f001 f886 	bl	800c480 <ff_cre_syncobj>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d101      	bne.n	800b37e <f_mount+0x7e>
 800b37a:	2302      	movs	r3, #2
 800b37c:	e01d      	b.n	800b3ba <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	4910      	ldr	r1, [pc, #64]	; (800b3c4 <f_mount+0xc4>)
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d002      	beq.n	800b394 <f_mount+0x94>
 800b38e:	79fb      	ldrb	r3, [r7, #7]
 800b390:	2b01      	cmp	r3, #1
 800b392:	d001      	beq.n	800b398 <f_mount+0x98>
 800b394:	2300      	movs	r3, #0
 800b396:	e010      	b.n	800b3ba <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b398:	f107 010c 	add.w	r1, r7, #12
 800b39c:	f107 0308 	add.w	r3, r7, #8
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7ff fd10 	bl	800adc8 <find_volume>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	7dfa      	ldrb	r2, [r7, #23]
 800b3b0:	4611      	mov	r1, r2
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7fd fff2 	bl	800939c <unlock_fs>
 800b3b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3720      	adds	r7, #32
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	20037098 	.word	0x20037098

0800b3c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b3d4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b3d8:	6018      	str	r0, [r3, #0]
 800b3da:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b3de:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800b3e2:	6019      	str	r1, [r3, #0]
 800b3e4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b3e8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b3ec:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b3ee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b3f2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d101      	bne.n	800b400 <f_open+0x38>
 800b3fc:	2309      	movs	r3, #9
 800b3fe:	e29e      	b.n	800b93e <f_open+0x576>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b400:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b404:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b408:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800b40c:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800b410:	7812      	ldrb	r2, [r2, #0]
 800b412:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800b416:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800b418:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b41c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b420:	781a      	ldrb	r2, [r3, #0]
 800b422:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800b426:	f107 0308 	add.w	r3, r7, #8
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7ff fccc 	bl	800adc8 <find_volume>
 800b430:	4603      	mov	r3, r0
 800b432:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800b436:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f040 826a 	bne.w	800b914 <f_open+0x54c>
		dj.obj.fs = fs;
 800b440:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b444:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		INIT_NAMBUF(fs);
 800b448:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b44c:	f107 0210 	add.w	r2, r7, #16
 800b450:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800b452:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b456:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800b460:	4611      	mov	r1, r2
 800b462:	4618      	mov	r0, r3
 800b464:	f7ff fba4 	bl	800abb0 <follow_path>
 800b468:	4603      	mov	r3, r0
 800b46a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b46e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b472:	2b00      	cmp	r3, #0
 800b474:	d11e      	bne.n	800b4b4 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b476:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 800b47a:	b25b      	sxtb	r3, r3
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	da03      	bge.n	800b488 <f_open+0xc0>
				res = FR_INVALID_NAME;
 800b480:	2306      	movs	r3, #6
 800b482:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800b486:	e015      	b.n	800b4b4 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b488:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b48c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	f023 0301 	bic.w	r3, r3, #1
 800b496:	2b00      	cmp	r3, #0
 800b498:	bf14      	ite	ne
 800b49a:	2301      	movne	r3, #1
 800b49c:	2300      	moveq	r3, #0
 800b49e:	b2db      	uxtb	r3, r3
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800b4a6:	4611      	mov	r1, r2
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7fd ff93 	bl	80093d4 <chk_lock>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b4b4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b4b8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	f003 031c 	and.w	r3, r3, #28
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	f000 80a6 	beq.w	800b614 <f_open+0x24c>
			if (res != FR_OK) {					/* No file, create new */
 800b4c8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d01f      	beq.n	800b510 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b4d0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b4d4:	2b04      	cmp	r3, #4
 800b4d6:	d10e      	bne.n	800b4f6 <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b4d8:	f7fd ffd8 	bl	800948c <enq_lock>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d006      	beq.n	800b4f0 <f_open+0x128>
 800b4e2:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7ff f8b2 	bl	800a650 <dir_register>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	e000      	b.n	800b4f2 <f_open+0x12a>
 800b4f0:	2312      	movs	r3, #18
 800b4f2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b4f6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b4fa:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b4fe:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800b502:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800b506:	7812      	ldrb	r2, [r2, #0]
 800b508:	f042 0208 	orr.w	r2, r2, #8
 800b50c:	701a      	strb	r2, [r3, #0]
 800b50e:	e015      	b.n	800b53c <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b510:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 800b514:	f003 0311 	and.w	r3, r3, #17
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d003      	beq.n	800b524 <f_open+0x15c>
					res = FR_DENIED;
 800b51c:	2307      	movs	r3, #7
 800b51e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800b522:	e00b      	b.n	800b53c <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b524:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b528:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	f003 0304 	and.w	r3, r3, #4
 800b532:	2b00      	cmp	r3, #0
 800b534:	d002      	beq.n	800b53c <f_open+0x174>
 800b536:	2308      	movs	r3, #8
 800b538:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b53c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b540:	2b00      	cmp	r3, #0
 800b542:	f040 8087 	bne.w	800b654 <f_open+0x28c>
 800b546:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b54a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	f003 0308 	and.w	r3, r3, #8
 800b554:	2b00      	cmp	r3, #0
 800b556:	d07d      	beq.n	800b654 <f_open+0x28c>
				dw = GET_FATTIME();
 800b558:	4bb3      	ldr	r3, [pc, #716]	; (800b828 <f_open+0x460>)
 800b55a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b55e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800b562:	330e      	adds	r3, #14
 800b564:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fd fe57 	bl	800921c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b56e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800b572:	3316      	adds	r3, #22
 800b574:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800b578:	4618      	mov	r0, r3
 800b57a:	f7fd fe4f 	bl	800921c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b57e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800b582:	330b      	adds	r3, #11
 800b584:	2220      	movs	r2, #32
 800b586:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b588:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b58c:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800b590:	4611      	mov	r1, r2
 800b592:	4618      	mov	r0, r3
 800b594:	f7fe fdd5 	bl	800a142 <ld_clust>
 800b598:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b59c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b5a0:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7fe fdea 	bl	800a180 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b5ac:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800b5b0:	331c      	adds	r3, #28
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7fd fe31 	bl	800921c <st_dword>
					fs->wflag = 1;
 800b5ba:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b5be:	2201      	movs	r2, #1
 800b5c0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b5c2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d044      	beq.n	800b654 <f_open+0x28c>
						dw = fs->winsect;
 800b5ca:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b5ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5d0:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800b5d4:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7fe faf7 	bl	8009bd2 <remove_chain>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800b5ea:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d130      	bne.n	800b654 <f_open+0x28c>
							res = move_window(fs, dw);
 800b5f2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b5f6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fe f89a 	bl	8009734 <move_window>
 800b600:	4603      	mov	r3, r0
 800b602:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b606:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b60a:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800b60e:	3a01      	subs	r2, #1
 800b610:	615a      	str	r2, [r3, #20]
 800b612:	e01f      	b.n	800b654 <f_open+0x28c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b614:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d11b      	bne.n	800b654 <f_open+0x28c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b61c:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 800b620:	f003 0310 	and.w	r3, r3, #16
 800b624:	2b00      	cmp	r3, #0
 800b626:	d003      	beq.n	800b630 <f_open+0x268>
					res = FR_NO_FILE;
 800b628:	2304      	movs	r3, #4
 800b62a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800b62e:	e011      	b.n	800b654 <f_open+0x28c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b630:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b634:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	f003 0302 	and.w	r3, r3, #2
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d008      	beq.n	800b654 <f_open+0x28c>
 800b642:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 800b646:	f003 0301 	and.w	r3, r3, #1
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d002      	beq.n	800b654 <f_open+0x28c>
						res = FR_DENIED;
 800b64e:	2307      	movs	r3, #7
 800b650:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800b654:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d14a      	bne.n	800b6f2 <f_open+0x32a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b65c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b660:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	f003 0308 	and.w	r3, r3, #8
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00b      	beq.n	800b686 <f_open+0x2be>
				mode |= FA_MODIFIED;
 800b66e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b672:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b676:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800b67a:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800b67e:	7812      	ldrb	r2, [r2, #0]
 800b680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b684:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b686:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b68a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b68c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b690:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b698:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800b69c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b6a0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b6a8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b6ac:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	f023 0301 	bic.w	r3, r3, #1
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	bf14      	ite	ne
 800b6ba:	2301      	movne	r3, #1
 800b6bc:	2300      	moveq	r3, #0
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7fd ff01 	bl	80094d0 <inc_lock>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b6d4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b6dc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b6e0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d102      	bne.n	800b6f2 <f_open+0x32a>
 800b6ec:	2302      	movs	r3, #2
 800b6ee:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b6f2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f040 810c 	bne.w	800b914 <f_open+0x54c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b6fc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b700:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800b704:	4611      	mov	r1, r2
 800b706:	4618      	mov	r0, r3
 800b708:	f7fe fd1b 	bl	800a142 <ld_clust>
 800b70c:	4602      	mov	r2, r0
 800b70e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b712:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b71a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800b71e:	331c      	adds	r3, #28
 800b720:	4618      	mov	r0, r3
 800b722:	f7fd fd3d 	bl	80091a0 <ld_dword>
 800b726:	4602      	mov	r2, r0
 800b728:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b72c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b734:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b738:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2200      	movs	r2, #0
 800b740:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b742:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800b746:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b74a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b752:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b756:	88da      	ldrh	r2, [r3, #6]
 800b758:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b75c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b764:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b768:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800b772:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 800b776:	7812      	ldrb	r2, [r2, #0]
 800b778:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b77a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b77e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2200      	movs	r2, #0
 800b786:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b788:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b78c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2200      	movs	r2, #0
 800b794:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b796:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b79a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b7a4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b7a8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	3330      	adds	r3, #48	; 0x30
 800b7b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7fd fd7d 	bl	80092b6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b7bc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b7c0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	f003 0320 	and.w	r3, r3, #32
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f000 80a2 	beq.w	800b914 <f_open+0x54c>
 800b7d0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b7d4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f000 8099 	beq.w	800b914 <f_open+0x54c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b7e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b7e6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	68da      	ldr	r2, [r3, #12]
 800b7ee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b7f2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b7fa:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b7fe:	895b      	ldrh	r3, [r3, #10]
 800b800:	025b      	lsls	r3, r3, #9
 800b802:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b806:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b80a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b816:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b81a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800b826:	e023      	b.n	800b870 <f_open+0x4a8>
 800b828:	46c40000 	.word	0x46c40000
					clst = get_fat(&fp->obj, clst);
 800b82c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b830:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fe f835 	bl	80098aa <get_fat>
 800b840:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800b844:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d802      	bhi.n	800b852 <f_open+0x48a>
 800b84c:	2302      	movs	r3, #2
 800b84e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b852:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800b856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b85a:	d102      	bne.n	800b862 <f_open+0x49a>
 800b85c:	2301      	movs	r3, #1
 800b85e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b862:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800b866:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800b86a:	1ad3      	subs	r3, r2, r3
 800b86c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800b870:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b874:	2b00      	cmp	r3, #0
 800b876:	d105      	bne.n	800b884 <f_open+0x4bc>
 800b878:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800b87c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800b880:	429a      	cmp	r2, r3
 800b882:	d8d3      	bhi.n	800b82c <f_open+0x464>
				}
				fp->clust = clst;
 800b884:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b888:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800b892:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b894:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d13b      	bne.n	800b914 <f_open+0x54c>
 800b89c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800b8a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d035      	beq.n	800b914 <f_open+0x54c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b8a8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b8ac:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7fd ffdb 	bl	800986c <clust2sect>
 800b8b6:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800b8ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d103      	bne.n	800b8ca <f_open+0x502>
						res = FR_INT_ERR;
 800b8c2:	2302      	movs	r3, #2
 800b8c4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800b8c8:	e024      	b.n	800b914 <f_open+0x54c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b8ca:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800b8ce:	0a5a      	lsrs	r2, r3, #9
 800b8d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800b8d4:	441a      	add	r2, r3
 800b8d6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b8da:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b8e2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b8e6:	7858      	ldrb	r0, [r3, #1]
 800b8e8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b8ec:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8f6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b8fa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	6a1a      	ldr	r2, [r3, #32]
 800b902:	2301      	movs	r3, #1
 800b904:	f7fd fbd6 	bl	80090b4 <disk_read>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d002      	beq.n	800b914 <f_open+0x54c>
 800b90e:	2301      	movs	r3, #1
 800b910:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b914:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d006      	beq.n	800b92a <f_open+0x562>
 800b91c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800b920:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2200      	movs	r2, #0
 800b928:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b92a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800b92e:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 800b932:	4611      	mov	r1, r2
 800b934:	4618      	mov	r0, r3
 800b936:	f7fd fd31 	bl	800939c <unlock_fs>
 800b93a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800b93e:	4618      	mov	r0, r3
 800b940:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b08e      	sub	sp, #56	; 0x38
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	60b9      	str	r1, [r7, #8]
 800b952:	607a      	str	r2, [r7, #4]
 800b954:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	2200      	movs	r2, #0
 800b95e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f107 0214 	add.w	r2, r7, #20
 800b966:	4611      	mov	r1, r2
 800b968:	4618      	mov	r0, r3
 800b96a:	f7ff fc81 	bl	800b270 <validate>
 800b96e:	4603      	mov	r3, r0
 800b970:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b974:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d107      	bne.n	800b98c <f_read+0x44>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	7d5b      	ldrb	r3, [r3, #21]
 800b980:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b984:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d009      	beq.n	800b9a0 <f_read+0x58>
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b992:	4611      	mov	r1, r2
 800b994:	4618      	mov	r0, r3
 800b996:	f7fd fd01 	bl	800939c <unlock_fs>
 800b99a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b99e:	e13d      	b.n	800bc1c <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	7d1b      	ldrb	r3, [r3, #20]
 800b9a4:	f003 0301 	and.w	r3, r3, #1
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d106      	bne.n	800b9ba <f_read+0x72>
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	2107      	movs	r1, #7
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7fd fcf3 	bl	800939c <unlock_fs>
 800b9b6:	2307      	movs	r3, #7
 800b9b8:	e130      	b.n	800bc1c <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	68da      	ldr	r2, [r3, #12]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	699b      	ldr	r3, [r3, #24]
 800b9c2:	1ad3      	subs	r3, r2, r3
 800b9c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	6a3b      	ldr	r3, [r7, #32]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	f240 811c 	bls.w	800bc08 <f_read+0x2c0>
 800b9d0:	6a3b      	ldr	r3, [r7, #32]
 800b9d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b9d4:	e118      	b.n	800bc08 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	699b      	ldr	r3, [r3, #24]
 800b9da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	f040 80e4 	bne.w	800bbac <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	699b      	ldr	r3, [r3, #24]
 800b9e8:	0a5b      	lsrs	r3, r3, #9
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	8952      	ldrh	r2, [r2, #10]
 800b9ee:	3a01      	subs	r2, #1
 800b9f0:	4013      	ands	r3, r2
 800b9f2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d139      	bne.n	800ba6e <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	699b      	ldr	r3, [r3, #24]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d103      	bne.n	800ba0a <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	633b      	str	r3, [r7, #48]	; 0x30
 800ba08:	e013      	b.n	800ba32 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d007      	beq.n	800ba22 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	699b      	ldr	r3, [r3, #24]
 800ba16:	4619      	mov	r1, r3
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	f7fe f9d7 	bl	8009dcc <clmt_clust>
 800ba1e:	6338      	str	r0, [r7, #48]	; 0x30
 800ba20:	e007      	b.n	800ba32 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	69db      	ldr	r3, [r3, #28]
 800ba28:	4619      	mov	r1, r3
 800ba2a:	4610      	mov	r0, r2
 800ba2c:	f7fd ff3d 	bl	80098aa <get_fat>
 800ba30:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ba32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d809      	bhi.n	800ba4c <f_read+0x104>
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2202      	movs	r2, #2
 800ba3c:	755a      	strb	r2, [r3, #21]
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	2102      	movs	r1, #2
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7fd fcaa 	bl	800939c <unlock_fs>
 800ba48:	2302      	movs	r3, #2
 800ba4a:	e0e7      	b.n	800bc1c <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ba4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba52:	d109      	bne.n	800ba68 <f_read+0x120>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2201      	movs	r2, #1
 800ba58:	755a      	strb	r2, [r3, #21]
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	2101      	movs	r1, #1
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7fd fc9c 	bl	800939c <unlock_fs>
 800ba64:	2301      	movs	r3, #1
 800ba66:	e0d9      	b.n	800bc1c <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba6c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	69db      	ldr	r3, [r3, #28]
 800ba74:	4619      	mov	r1, r3
 800ba76:	4610      	mov	r0, r2
 800ba78:	f7fd fef8 	bl	800986c <clust2sect>
 800ba7c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d109      	bne.n	800ba98 <f_read+0x150>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2202      	movs	r2, #2
 800ba88:	755a      	strb	r2, [r3, #21]
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	2102      	movs	r1, #2
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7fd fc84 	bl	800939c <unlock_fs>
 800ba94:	2302      	movs	r3, #2
 800ba96:	e0c1      	b.n	800bc1c <f_read+0x2d4>
			sect += csect;
 800ba98:	69ba      	ldr	r2, [r7, #24]
 800ba9a:	69fb      	ldr	r3, [r7, #28]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	0a5b      	lsrs	r3, r3, #9
 800baa4:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800baa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d03e      	beq.n	800bb2a <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800baac:	69fa      	ldr	r2, [r7, #28]
 800baae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab0:	4413      	add	r3, r2
 800bab2:	697a      	ldr	r2, [r7, #20]
 800bab4:	8952      	ldrh	r2, [r2, #10]
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d905      	bls.n	800bac6 <f_read+0x17e>
					cc = fs->csize - csect;
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	895b      	ldrh	r3, [r3, #10]
 800babe:	461a      	mov	r2, r3
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	7858      	ldrb	r0, [r3, #1]
 800baca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bacc:	69ba      	ldr	r2, [r7, #24]
 800bace:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bad0:	f7fd faf0 	bl	80090b4 <disk_read>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d009      	beq.n	800baee <f_read+0x1a6>
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2201      	movs	r2, #1
 800bade:	755a      	strb	r2, [r3, #21]
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	2101      	movs	r1, #1
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7fd fc59 	bl	800939c <unlock_fs>
 800baea:	2301      	movs	r3, #1
 800baec:	e096      	b.n	800bc1c <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	7d1b      	ldrb	r3, [r3, #20]
 800baf2:	b25b      	sxtb	r3, r3
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	da14      	bge.n	800bb22 <f_read+0x1da>
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6a1a      	ldr	r2, [r3, #32]
 800bafc:	69bb      	ldr	r3, [r7, #24]
 800bafe:	1ad3      	subs	r3, r2, r3
 800bb00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d90d      	bls.n	800bb22 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6a1a      	ldr	r2, [r3, #32]
 800bb0a:	69bb      	ldr	r3, [r7, #24]
 800bb0c:	1ad3      	subs	r3, r2, r3
 800bb0e:	025b      	lsls	r3, r3, #9
 800bb10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb12:	18d0      	adds	r0, r2, r3
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	3330      	adds	r3, #48	; 0x30
 800bb18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	f7fd fba9 	bl	8009274 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb24:	025b      	lsls	r3, r3, #9
 800bb26:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800bb28:	e05a      	b.n	800bbe0 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6a1b      	ldr	r3, [r3, #32]
 800bb2e:	69ba      	ldr	r2, [r7, #24]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d038      	beq.n	800bba6 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	7d1b      	ldrb	r3, [r3, #20]
 800bb38:	b25b      	sxtb	r3, r3
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	da1d      	bge.n	800bb7a <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	7858      	ldrb	r0, [r3, #1]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6a1a      	ldr	r2, [r3, #32]
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	f7fd fad1 	bl	80090f4 <disk_write>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d009      	beq.n	800bb6c <f_read+0x224>
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	755a      	strb	r2, [r3, #21]
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	2101      	movs	r1, #1
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fd fc1a 	bl	800939c <unlock_fs>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e057      	b.n	800bc1c <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	7d1b      	ldrb	r3, [r3, #20]
 800bb70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb74:	b2da      	uxtb	r2, r3
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	7858      	ldrb	r0, [r3, #1]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb84:	2301      	movs	r3, #1
 800bb86:	69ba      	ldr	r2, [r7, #24]
 800bb88:	f7fd fa94 	bl	80090b4 <disk_read>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d009      	beq.n	800bba6 <f_read+0x25e>
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2201      	movs	r2, #1
 800bb96:	755a      	strb	r2, [r3, #21]
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	2101      	movs	r1, #1
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7fd fbfd 	bl	800939c <unlock_fs>
 800bba2:	2301      	movs	r3, #1
 800bba4:	e03a      	b.n	800bc1c <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	69ba      	ldr	r2, [r7, #24]
 800bbaa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	699b      	ldr	r3, [r3, #24]
 800bbb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbb4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bbb8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bbba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d901      	bls.n	800bbc6 <f_read+0x27e>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	699b      	ldr	r3, [r3, #24]
 800bbd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbd4:	4413      	add	r3, r2
 800bbd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbd8:	4619      	mov	r1, r3
 800bbda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbdc:	f7fd fb4a 	bl	8009274 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bbe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe4:	4413      	add	r3, r2
 800bbe6:	627b      	str	r3, [r7, #36]	; 0x24
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	699a      	ldr	r2, [r3, #24]
 800bbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbee:	441a      	add	r2, r3
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	619a      	str	r2, [r3, #24]
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfa:	441a      	add	r2, r3
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	601a      	str	r2, [r3, #0]
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f47f aee3 	bne.w	800b9d6 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	2100      	movs	r1, #0
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fd fbc1 	bl	800939c <unlock_fs>
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3738      	adds	r7, #56	; 0x38
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b086      	sub	sp, #24
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f107 0208 	add.w	r2, r7, #8
 800bc32:	4611      	mov	r1, r2
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7ff fb1b 	bl	800b270 <validate>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bc3e:	7dfb      	ldrb	r3, [r7, #23]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d16c      	bne.n	800bd1e <f_sync+0xfa>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	7d1b      	ldrb	r3, [r3, #20]
 800bc48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d066      	beq.n	800bd1e <f_sync+0xfa>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	7d1b      	ldrb	r3, [r3, #20]
 800bc54:	b25b      	sxtb	r3, r3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	da1a      	bge.n	800bc90 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	7858      	ldrb	r0, [r3, #1]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6a1a      	ldr	r2, [r3, #32]
 800bc68:	2301      	movs	r3, #1
 800bc6a:	f7fd fa43 	bl	80090f4 <disk_write>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d006      	beq.n	800bc82 <f_sync+0x5e>
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	2101      	movs	r1, #1
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f7fd fb8f 	bl	800939c <unlock_fs>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e054      	b.n	800bd2c <f_sync+0x108>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	7d1b      	ldrb	r3, [r3, #20]
 800bc86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc8a:	b2da      	uxtb	r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bc90:	4b28      	ldr	r3, [pc, #160]	; (800bd34 <f_sync+0x110>)
 800bc92:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bc94:	68ba      	ldr	r2, [r7, #8]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	4610      	mov	r0, r2
 800bc9e:	f7fd fd49 	bl	8009734 <move_window>
 800bca2:	4603      	mov	r3, r0
 800bca4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bca6:	7dfb      	ldrb	r3, [r7, #23]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d138      	bne.n	800bd1e <f_sync+0xfa>
					dir = fp->dir_ptr;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	330b      	adds	r3, #11
 800bcb6:	781a      	ldrb	r2, [r3, #0]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	330b      	adds	r3, #11
 800bcbc:	f042 0220 	orr.w	r2, r2, #32
 800bcc0:	b2d2      	uxtb	r2, r2
 800bcc2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6818      	ldr	r0, [r3, #0]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	461a      	mov	r2, r3
 800bcce:	68f9      	ldr	r1, [r7, #12]
 800bcd0:	f7fe fa56 	bl	800a180 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f103 021c 	add.w	r2, r3, #28
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	4619      	mov	r1, r3
 800bce0:	4610      	mov	r0, r2
 800bce2:	f7fd fa9b 	bl	800921c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	3316      	adds	r3, #22
 800bcea:	6939      	ldr	r1, [r7, #16]
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7fd fa95 	bl	800921c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	3312      	adds	r3, #18
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7fd fa74 	bl	80091e6 <st_word>
					fs->wflag = 1;
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	2201      	movs	r2, #1
 800bd02:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fd fd42 	bl	8009790 <sync_fs>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	7d1b      	ldrb	r3, [r3, #20]
 800bd14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd18:	b2da      	uxtb	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	7dfa      	ldrb	r2, [r7, #23]
 800bd22:	4611      	mov	r1, r2
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7fd fb39 	bl	800939c <unlock_fs>
 800bd2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3718      	adds	r7, #24
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	46c40000 	.word	0x46c40000

0800bd38 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f7ff ff6f 	bl	800bc24 <f_sync>
 800bd46:	4603      	mov	r3, r0
 800bd48:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bd4a:	7bfb      	ldrb	r3, [r7, #15]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d11d      	bne.n	800bd8c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f107 0208 	add.w	r2, r7, #8
 800bd56:	4611      	mov	r1, r2
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7ff fa89 	bl	800b270 <validate>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bd62:	7bfb      	ldrb	r3, [r7, #15]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d111      	bne.n	800bd8c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	691b      	ldr	r3, [r3, #16]
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7fd fc3d 	bl	80095ec <dec_lock>
 800bd72:	4603      	mov	r3, r0
 800bd74:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bd76:	7bfb      	ldrb	r3, [r7, #15]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d102      	bne.n	800bd82 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	2100      	movs	r1, #0
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fd fb08 	bl	800939c <unlock_fs>
#endif
		}
	}
	return res;
 800bd8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3710      	adds	r7, #16
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b090      	sub	sp, #64	; 0x40
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
 800bd9e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f107 0208 	add.w	r2, r7, #8
 800bda6:	4611      	mov	r1, r2
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7ff fa61 	bl	800b270 <validate>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800bdb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d103      	bne.n	800bdc4 <f_lseek+0x2e>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	7d5b      	ldrb	r3, [r3, #21]
 800bdc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800bdc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d009      	beq.n	800bde0 <f_lseek+0x4a>
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800bdd2:	4611      	mov	r1, r2
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fd fae1 	bl	800939c <unlock_fs>
 800bdda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bdde:	e229      	b.n	800c234 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f000 80ea 	beq.w	800bfbe <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf0:	d164      	bne.n	800bebc <f_lseek+0x126>
			tbl = fp->cltbl;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfa:	1d1a      	adds	r2, r3, #4
 800bdfc:	627a      	str	r2, [r7, #36]	; 0x24
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	617b      	str	r3, [r7, #20]
 800be02:	2302      	movs	r3, #2
 800be04:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800be0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d044      	beq.n	800be9c <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800be12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be14:	613b      	str	r3, [r7, #16]
 800be16:	2300      	movs	r3, #0
 800be18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1c:	3302      	adds	r3, #2
 800be1e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800be20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be22:	60fb      	str	r3, [r7, #12]
 800be24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be26:	3301      	adds	r3, #1
 800be28:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fd fd3b 	bl	80098aa <get_fat>
 800be34:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800be36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d809      	bhi.n	800be50 <f_lseek+0xba>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2202      	movs	r2, #2
 800be40:	755a      	strb	r2, [r3, #21]
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	2102      	movs	r1, #2
 800be46:	4618      	mov	r0, r3
 800be48:	f7fd faa8 	bl	800939c <unlock_fs>
 800be4c:	2302      	movs	r3, #2
 800be4e:	e1f1      	b.n	800c234 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800be50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be56:	d109      	bne.n	800be6c <f_lseek+0xd6>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2201      	movs	r2, #1
 800be5c:	755a      	strb	r2, [r3, #21]
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	2101      	movs	r1, #1
 800be62:	4618      	mov	r0, r3
 800be64:	f7fd fa9a 	bl	800939c <unlock_fs>
 800be68:	2301      	movs	r3, #1
 800be6a:	e1e3      	b.n	800c234 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	3301      	adds	r3, #1
 800be70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be72:	429a      	cmp	r2, r3
 800be74:	d0d4      	beq.n	800be20 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800be76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d809      	bhi.n	800be92 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800be7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be80:	1d1a      	adds	r2, r3, #4
 800be82:	627a      	str	r2, [r7, #36]	; 0x24
 800be84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be86:	601a      	str	r2, [r3, #0]
 800be88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8a:	1d1a      	adds	r2, r3, #4
 800be8c:	627a      	str	r2, [r7, #36]	; 0x24
 800be8e:	693a      	ldr	r2, [r7, #16]
 800be90:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	69db      	ldr	r3, [r3, #28]
 800be96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be98:	429a      	cmp	r2, r3
 800be9a:	d3ba      	bcc.n	800be12 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bea2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800bea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d803      	bhi.n	800beb4 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800beac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beae:	2200      	movs	r2, #0
 800beb0:	601a      	str	r2, [r3, #0]
 800beb2:	e1b6      	b.n	800c222 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800beb4:	2311      	movs	r3, #17
 800beb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800beba:	e1b2      	b.n	800c222 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d902      	bls.n	800becc <f_lseek+0x136>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	683a      	ldr	r2, [r7, #0]
 800bed0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f000 81a4 	beq.w	800c222 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	3b01      	subs	r3, #1
 800bede:	4619      	mov	r1, r3
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f7fd ff73 	bl	8009dcc <clmt_clust>
 800bee6:	4602      	mov	r2, r0
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800beec:	68ba      	ldr	r2, [r7, #8]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	69db      	ldr	r3, [r3, #28]
 800bef2:	4619      	mov	r1, r3
 800bef4:	4610      	mov	r0, r2
 800bef6:	f7fd fcb9 	bl	800986c <clust2sect>
 800befa:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800befc:	69bb      	ldr	r3, [r7, #24]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d109      	bne.n	800bf16 <f_lseek+0x180>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2202      	movs	r2, #2
 800bf06:	755a      	strb	r2, [r3, #21]
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	2102      	movs	r1, #2
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7fd fa45 	bl	800939c <unlock_fs>
 800bf12:	2302      	movs	r3, #2
 800bf14:	e18e      	b.n	800c234 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	3b01      	subs	r3, #1
 800bf1a:	0a5b      	lsrs	r3, r3, #9
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	8952      	ldrh	r2, [r2, #10]
 800bf20:	3a01      	subs	r2, #1
 800bf22:	4013      	ands	r3, r2
 800bf24:	69ba      	ldr	r2, [r7, #24]
 800bf26:	4413      	add	r3, r2
 800bf28:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	699b      	ldr	r3, [r3, #24]
 800bf2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	f000 8175 	beq.w	800c222 <f_lseek+0x48c>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6a1b      	ldr	r3, [r3, #32]
 800bf3c:	69ba      	ldr	r2, [r7, #24]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	f000 816f 	beq.w	800c222 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	7d1b      	ldrb	r3, [r3, #20]
 800bf48:	b25b      	sxtb	r3, r3
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	da1d      	bge.n	800bf8a <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	7858      	ldrb	r0, [r3, #1]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6a1a      	ldr	r2, [r3, #32]
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	f7fd f8c9 	bl	80090f4 <disk_write>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d009      	beq.n	800bf7c <f_lseek+0x1e6>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	755a      	strb	r2, [r3, #21]
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	2101      	movs	r1, #1
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7fd fa12 	bl	800939c <unlock_fs>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e15b      	b.n	800c234 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	7d1b      	ldrb	r3, [r3, #20]
 800bf80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf84:	b2da      	uxtb	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	7858      	ldrb	r0, [r3, #1]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf94:	2301      	movs	r3, #1
 800bf96:	69ba      	ldr	r2, [r7, #24]
 800bf98:	f7fd f88c 	bl	80090b4 <disk_read>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d009      	beq.n	800bfb6 <f_lseek+0x220>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	755a      	strb	r2, [r3, #21]
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	2101      	movs	r1, #1
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7fd f9f5 	bl	800939c <unlock_fs>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e13e      	b.n	800c234 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	69ba      	ldr	r2, [r7, #24]
 800bfba:	621a      	str	r2, [r3, #32]
 800bfbc:	e131      	b.n	800c222 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	683a      	ldr	r2, [r7, #0]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d908      	bls.n	800bfda <f_lseek+0x244>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	7d1b      	ldrb	r3, [r3, #20]
 800bfcc:	f003 0302 	and.w	r3, r3, #2
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d102      	bne.n	800bfda <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	699b      	ldr	r3, [r3, #24]
 800bfde:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	637b      	str	r3, [r7, #52]	; 0x34
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfe8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f000 80c0 	beq.w	800c172 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	895b      	ldrh	r3, [r3, #10]
 800bff6:	025b      	lsls	r3, r3, #9
 800bff8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800bffa:	6a3b      	ldr	r3, [r7, #32]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d01b      	beq.n	800c038 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	1e5a      	subs	r2, r3, #1
 800c004:	69fb      	ldr	r3, [r7, #28]
 800c006:	fbb2 f2f3 	udiv	r2, r2, r3
 800c00a:	6a3b      	ldr	r3, [r7, #32]
 800c00c:	1e59      	subs	r1, r3, #1
 800c00e:	69fb      	ldr	r3, [r7, #28]
 800c010:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c014:	429a      	cmp	r2, r3
 800c016:	d30f      	bcc.n	800c038 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c018:	6a3b      	ldr	r3, [r7, #32]
 800c01a:	1e5a      	subs	r2, r3, #1
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	425b      	negs	r3, r3
 800c020:	401a      	ands	r2, r3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	699b      	ldr	r3, [r3, #24]
 800c02a:	683a      	ldr	r2, [r7, #0]
 800c02c:	1ad3      	subs	r3, r2, r3
 800c02e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	69db      	ldr	r3, [r3, #28]
 800c034:	63bb      	str	r3, [r7, #56]	; 0x38
 800c036:	e02c      	b.n	800c092 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c040:	2b00      	cmp	r3, #0
 800c042:	d123      	bne.n	800c08c <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2100      	movs	r1, #0
 800c048:	4618      	mov	r0, r3
 800c04a:	f7fd fe27 	bl	8009c9c <create_chain>
 800c04e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c052:	2b01      	cmp	r3, #1
 800c054:	d109      	bne.n	800c06a <f_lseek+0x2d4>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2202      	movs	r2, #2
 800c05a:	755a      	strb	r2, [r3, #21]
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	2102      	movs	r1, #2
 800c060:	4618      	mov	r0, r3
 800c062:	f7fd f99b 	bl	800939c <unlock_fs>
 800c066:	2302      	movs	r3, #2
 800c068:	e0e4      	b.n	800c234 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c070:	d109      	bne.n	800c086 <f_lseek+0x2f0>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2201      	movs	r2, #1
 800c076:	755a      	strb	r2, [r3, #21]
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	2101      	movs	r1, #1
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7fd f98d 	bl	800939c <unlock_fs>
 800c082:	2301      	movs	r3, #1
 800c084:	e0d6      	b.n	800c234 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c08a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c090:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c094:	2b00      	cmp	r3, #0
 800c096:	d06c      	beq.n	800c172 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800c098:	e044      	b.n	800c124 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800c09a:	683a      	ldr	r2, [r7, #0]
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	1ad3      	subs	r3, r2, r3
 800c0a0:	603b      	str	r3, [r7, #0]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	699a      	ldr	r2, [r3, #24]
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	441a      	add	r2, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	7d1b      	ldrb	r3, [r3, #20]
 800c0b2:	f003 0302 	and.w	r3, r3, #2
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00b      	beq.n	800c0d2 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fd fdec 	bl	8009c9c <create_chain>
 800c0c4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d108      	bne.n	800c0de <f_lseek+0x348>
							ofs = 0; break;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	603b      	str	r3, [r7, #0]
 800c0d0:	e02c      	b.n	800c12c <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fd fbe7 	bl	80098aa <get_fat>
 800c0dc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e4:	d109      	bne.n	800c0fa <f_lseek+0x364>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	755a      	strb	r2, [r3, #21]
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	2101      	movs	r1, #1
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fd f953 	bl	800939c <unlock_fs>
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e09c      	b.n	800c234 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d904      	bls.n	800c10a <f_lseek+0x374>
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	69db      	ldr	r3, [r3, #28]
 800c104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c106:	429a      	cmp	r2, r3
 800c108:	d309      	bcc.n	800c11e <f_lseek+0x388>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2202      	movs	r2, #2
 800c10e:	755a      	strb	r2, [r3, #21]
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	2102      	movs	r1, #2
 800c114:	4618      	mov	r0, r3
 800c116:	f7fd f941 	bl	800939c <unlock_fs>
 800c11a:	2302      	movs	r3, #2
 800c11c:	e08a      	b.n	800c234 <f_lseek+0x49e>
					fp->clust = clst;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c122:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c124:	683a      	ldr	r2, [r7, #0]
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d8b6      	bhi.n	800c09a <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	699a      	ldr	r2, [r3, #24]
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	441a      	add	r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d017      	beq.n	800c172 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c146:	4618      	mov	r0, r3
 800c148:	f7fd fb90 	bl	800986c <clust2sect>
 800c14c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c150:	2b00      	cmp	r3, #0
 800c152:	d109      	bne.n	800c168 <f_lseek+0x3d2>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2202      	movs	r2, #2
 800c158:	755a      	strb	r2, [r3, #21]
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	2102      	movs	r1, #2
 800c15e:	4618      	mov	r0, r3
 800c160:	f7fd f91c 	bl	800939c <unlock_fs>
 800c164:	2302      	movs	r3, #2
 800c166:	e065      	b.n	800c234 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	0a5b      	lsrs	r3, r3, #9
 800c16c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c16e:	4413      	add	r3, r2
 800c170:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	699a      	ldr	r2, [r3, #24]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d90a      	bls.n	800c194 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	699a      	ldr	r2, [r3, #24]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	7d1b      	ldrb	r3, [r3, #20]
 800c18a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c18e:	b2da      	uxtb	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	699b      	ldr	r3, [r3, #24]
 800c198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d040      	beq.n	800c222 <f_lseek+0x48c>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6a1b      	ldr	r3, [r3, #32]
 800c1a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d03b      	beq.n	800c222 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	7d1b      	ldrb	r3, [r3, #20]
 800c1ae:	b25b      	sxtb	r3, r3
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	da1d      	bge.n	800c1f0 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	7858      	ldrb	r0, [r3, #1]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6a1a      	ldr	r2, [r3, #32]
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	f7fc ff96 	bl	80090f4 <disk_write>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d009      	beq.n	800c1e2 <f_lseek+0x44c>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	755a      	strb	r2, [r3, #21]
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	2101      	movs	r1, #1
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7fd f8df 	bl	800939c <unlock_fs>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e028      	b.n	800c234 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	7d1b      	ldrb	r3, [r3, #20]
 800c1e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1ea:	b2da      	uxtb	r2, r3
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	7858      	ldrb	r0, [r3, #1]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1fe:	f7fc ff59 	bl	80090b4 <disk_read>
 800c202:	4603      	mov	r3, r0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d009      	beq.n	800c21c <f_lseek+0x486>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2201      	movs	r2, #1
 800c20c:	755a      	strb	r2, [r3, #21]
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	2101      	movs	r1, #1
 800c212:	4618      	mov	r0, r3
 800c214:	f7fd f8c2 	bl	800939c <unlock_fs>
 800c218:	2301      	movs	r3, #1
 800c21a:	e00b      	b.n	800c234 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c220:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c228:	4611      	mov	r1, r2
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fd f8b6 	bl	800939c <unlock_fs>
 800c230:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c234:	4618      	mov	r0, r3
 800c236:	3740      	adds	r7, #64	; 0x40
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b087      	sub	sp, #28
 800c240:	af00      	add	r7, sp, #0
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	60b9      	str	r1, [r7, #8]
 800c246:	4613      	mov	r3, r2
 800c248:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c24a:	2301      	movs	r3, #1
 800c24c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c24e:	2300      	movs	r3, #0
 800c250:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c252:	4b1f      	ldr	r3, [pc, #124]	; (800c2d0 <FATFS_LinkDriverEx+0x94>)
 800c254:	7a5b      	ldrb	r3, [r3, #9]
 800c256:	b2db      	uxtb	r3, r3
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d131      	bne.n	800c2c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c25c:	4b1c      	ldr	r3, [pc, #112]	; (800c2d0 <FATFS_LinkDriverEx+0x94>)
 800c25e:	7a5b      	ldrb	r3, [r3, #9]
 800c260:	b2db      	uxtb	r3, r3
 800c262:	461a      	mov	r2, r3
 800c264:	4b1a      	ldr	r3, [pc, #104]	; (800c2d0 <FATFS_LinkDriverEx+0x94>)
 800c266:	2100      	movs	r1, #0
 800c268:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c26a:	4b19      	ldr	r3, [pc, #100]	; (800c2d0 <FATFS_LinkDriverEx+0x94>)
 800c26c:	7a5b      	ldrb	r3, [r3, #9]
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	4a17      	ldr	r2, [pc, #92]	; (800c2d0 <FATFS_LinkDriverEx+0x94>)
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4413      	add	r3, r2
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c27a:	4b15      	ldr	r3, [pc, #84]	; (800c2d0 <FATFS_LinkDriverEx+0x94>)
 800c27c:	7a5b      	ldrb	r3, [r3, #9]
 800c27e:	b2db      	uxtb	r3, r3
 800c280:	461a      	mov	r2, r3
 800c282:	4b13      	ldr	r3, [pc, #76]	; (800c2d0 <FATFS_LinkDriverEx+0x94>)
 800c284:	4413      	add	r3, r2
 800c286:	79fa      	ldrb	r2, [r7, #7]
 800c288:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c28a:	4b11      	ldr	r3, [pc, #68]	; (800c2d0 <FATFS_LinkDriverEx+0x94>)
 800c28c:	7a5b      	ldrb	r3, [r3, #9]
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	1c5a      	adds	r2, r3, #1
 800c292:	b2d1      	uxtb	r1, r2
 800c294:	4a0e      	ldr	r2, [pc, #56]	; (800c2d0 <FATFS_LinkDriverEx+0x94>)
 800c296:	7251      	strb	r1, [r2, #9]
 800c298:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c29a:	7dbb      	ldrb	r3, [r7, #22]
 800c29c:	3330      	adds	r3, #48	; 0x30
 800c29e:	b2da      	uxtb	r2, r3
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	223a      	movs	r2, #58	; 0x3a
 800c2aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	3302      	adds	r3, #2
 800c2b0:	222f      	movs	r2, #47	; 0x2f
 800c2b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	3303      	adds	r3, #3
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	371c      	adds	r7, #28
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	200372a0 	.word	0x200372a0

0800c2d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c2de:	2200      	movs	r2, #0
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f7ff ffaa 	bl	800c23c <FATFS_LinkDriverEx>
 800c2e8:	4603      	mov	r3, r0
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
	...

0800c2f4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	6039      	str	r1, [r7, #0]
 800c2fe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c300:	88fb      	ldrh	r3, [r7, #6]
 800c302:	2b7f      	cmp	r3, #127	; 0x7f
 800c304:	d802      	bhi.n	800c30c <ff_convert+0x18>
		c = chr;
 800c306:	88fb      	ldrh	r3, [r7, #6]
 800c308:	81fb      	strh	r3, [r7, #14]
 800c30a:	e025      	b.n	800c358 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00b      	beq.n	800c32a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c312:	88fb      	ldrh	r3, [r7, #6]
 800c314:	2bff      	cmp	r3, #255	; 0xff
 800c316:	d805      	bhi.n	800c324 <ff_convert+0x30>
 800c318:	88fb      	ldrh	r3, [r7, #6]
 800c31a:	3b80      	subs	r3, #128	; 0x80
 800c31c:	4a12      	ldr	r2, [pc, #72]	; (800c368 <ff_convert+0x74>)
 800c31e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c322:	e000      	b.n	800c326 <ff_convert+0x32>
 800c324:	2300      	movs	r3, #0
 800c326:	81fb      	strh	r3, [r7, #14]
 800c328:	e016      	b.n	800c358 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c32a:	2300      	movs	r3, #0
 800c32c:	81fb      	strh	r3, [r7, #14]
 800c32e:	e009      	b.n	800c344 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c330:	89fb      	ldrh	r3, [r7, #14]
 800c332:	4a0d      	ldr	r2, [pc, #52]	; (800c368 <ff_convert+0x74>)
 800c334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c338:	88fa      	ldrh	r2, [r7, #6]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d006      	beq.n	800c34c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c33e:	89fb      	ldrh	r3, [r7, #14]
 800c340:	3301      	adds	r3, #1
 800c342:	81fb      	strh	r3, [r7, #14]
 800c344:	89fb      	ldrh	r3, [r7, #14]
 800c346:	2b7f      	cmp	r3, #127	; 0x7f
 800c348:	d9f2      	bls.n	800c330 <ff_convert+0x3c>
 800c34a:	e000      	b.n	800c34e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c34c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c34e:	89fb      	ldrh	r3, [r7, #14]
 800c350:	3380      	adds	r3, #128	; 0x80
 800c352:	b29b      	uxth	r3, r3
 800c354:	b2db      	uxtb	r3, r3
 800c356:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c358:	89fb      	ldrh	r3, [r7, #14]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3714      	adds	r7, #20
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop
 800c368:	0801743c 	.word	0x0801743c

0800c36c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b087      	sub	sp, #28
 800c370:	af00      	add	r7, sp, #0
 800c372:	4603      	mov	r3, r0
 800c374:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c376:	88fb      	ldrh	r3, [r7, #6]
 800c378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c37c:	d201      	bcs.n	800c382 <ff_wtoupper+0x16>
 800c37e:	4b3e      	ldr	r3, [pc, #248]	; (800c478 <ff_wtoupper+0x10c>)
 800c380:	e000      	b.n	800c384 <ff_wtoupper+0x18>
 800c382:	4b3e      	ldr	r3, [pc, #248]	; (800c47c <ff_wtoupper+0x110>)
 800c384:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	1c9a      	adds	r2, r3, #2
 800c38a:	617a      	str	r2, [r7, #20]
 800c38c:	881b      	ldrh	r3, [r3, #0]
 800c38e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c390:	8a7b      	ldrh	r3, [r7, #18]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d068      	beq.n	800c468 <ff_wtoupper+0xfc>
 800c396:	88fa      	ldrh	r2, [r7, #6]
 800c398:	8a7b      	ldrh	r3, [r7, #18]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d364      	bcc.n	800c468 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	1c9a      	adds	r2, r3, #2
 800c3a2:	617a      	str	r2, [r7, #20]
 800c3a4:	881b      	ldrh	r3, [r3, #0]
 800c3a6:	823b      	strh	r3, [r7, #16]
 800c3a8:	8a3b      	ldrh	r3, [r7, #16]
 800c3aa:	0a1b      	lsrs	r3, r3, #8
 800c3ac:	81fb      	strh	r3, [r7, #14]
 800c3ae:	8a3b      	ldrh	r3, [r7, #16]
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c3b4:	88fa      	ldrh	r2, [r7, #6]
 800c3b6:	8a79      	ldrh	r1, [r7, #18]
 800c3b8:	8a3b      	ldrh	r3, [r7, #16]
 800c3ba:	440b      	add	r3, r1
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	da49      	bge.n	800c454 <ff_wtoupper+0xe8>
			switch (cmd) {
 800c3c0:	89fb      	ldrh	r3, [r7, #14]
 800c3c2:	2b08      	cmp	r3, #8
 800c3c4:	d84f      	bhi.n	800c466 <ff_wtoupper+0xfa>
 800c3c6:	a201      	add	r2, pc, #4	; (adr r2, 800c3cc <ff_wtoupper+0x60>)
 800c3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3cc:	0800c3f1 	.word	0x0800c3f1
 800c3d0:	0800c403 	.word	0x0800c403
 800c3d4:	0800c419 	.word	0x0800c419
 800c3d8:	0800c421 	.word	0x0800c421
 800c3dc:	0800c429 	.word	0x0800c429
 800c3e0:	0800c431 	.word	0x0800c431
 800c3e4:	0800c439 	.word	0x0800c439
 800c3e8:	0800c441 	.word	0x0800c441
 800c3ec:	0800c449 	.word	0x0800c449
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c3f0:	88fa      	ldrh	r2, [r7, #6]
 800c3f2:	8a7b      	ldrh	r3, [r7, #18]
 800c3f4:	1ad3      	subs	r3, r2, r3
 800c3f6:	005b      	lsls	r3, r3, #1
 800c3f8:	697a      	ldr	r2, [r7, #20]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	881b      	ldrh	r3, [r3, #0]
 800c3fe:	80fb      	strh	r3, [r7, #6]
 800c400:	e027      	b.n	800c452 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c402:	88fa      	ldrh	r2, [r7, #6]
 800c404:	8a7b      	ldrh	r3, [r7, #18]
 800c406:	1ad3      	subs	r3, r2, r3
 800c408:	b29b      	uxth	r3, r3
 800c40a:	f003 0301 	and.w	r3, r3, #1
 800c40e:	b29b      	uxth	r3, r3
 800c410:	88fa      	ldrh	r2, [r7, #6]
 800c412:	1ad3      	subs	r3, r2, r3
 800c414:	80fb      	strh	r3, [r7, #6]
 800c416:	e01c      	b.n	800c452 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c418:	88fb      	ldrh	r3, [r7, #6]
 800c41a:	3b10      	subs	r3, #16
 800c41c:	80fb      	strh	r3, [r7, #6]
 800c41e:	e018      	b.n	800c452 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c420:	88fb      	ldrh	r3, [r7, #6]
 800c422:	3b20      	subs	r3, #32
 800c424:	80fb      	strh	r3, [r7, #6]
 800c426:	e014      	b.n	800c452 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c428:	88fb      	ldrh	r3, [r7, #6]
 800c42a:	3b30      	subs	r3, #48	; 0x30
 800c42c:	80fb      	strh	r3, [r7, #6]
 800c42e:	e010      	b.n	800c452 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c430:	88fb      	ldrh	r3, [r7, #6]
 800c432:	3b1a      	subs	r3, #26
 800c434:	80fb      	strh	r3, [r7, #6]
 800c436:	e00c      	b.n	800c452 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c438:	88fb      	ldrh	r3, [r7, #6]
 800c43a:	3308      	adds	r3, #8
 800c43c:	80fb      	strh	r3, [r7, #6]
 800c43e:	e008      	b.n	800c452 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c440:	88fb      	ldrh	r3, [r7, #6]
 800c442:	3b50      	subs	r3, #80	; 0x50
 800c444:	80fb      	strh	r3, [r7, #6]
 800c446:	e004      	b.n	800c452 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c448:	88fb      	ldrh	r3, [r7, #6]
 800c44a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c44e:	80fb      	strh	r3, [r7, #6]
 800c450:	bf00      	nop
			}
			break;
 800c452:	e008      	b.n	800c466 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c454:	89fb      	ldrh	r3, [r7, #14]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d195      	bne.n	800c386 <ff_wtoupper+0x1a>
 800c45a:	8a3b      	ldrh	r3, [r7, #16]
 800c45c:	005b      	lsls	r3, r3, #1
 800c45e:	697a      	ldr	r2, [r7, #20]
 800c460:	4413      	add	r3, r2
 800c462:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c464:	e78f      	b.n	800c386 <ff_wtoupper+0x1a>
			break;
 800c466:	bf00      	nop
	}

	return chr;
 800c468:	88fb      	ldrh	r3, [r7, #6]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	371c      	adds	r7, #28
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr
 800c476:	bf00      	nop
 800c478:	0801753c 	.word	0x0801753c
 800c47c:	08017730 	.word	0x08017730

0800c480 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	4603      	mov	r3, r0
 800c488:	6039      	str	r1, [r7, #0]
 800c48a:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800c48c:	2200      	movs	r2, #0
 800c48e:	2101      	movs	r1, #1
 800c490:	2001      	movs	r0, #1
 800c492:	f000 fb13 	bl	800cabc <osSemaphoreNew>
 800c496:	4602      	mov	r2, r0
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	bf14      	ite	ne
 800c4a4:	2301      	movne	r3, #1
 800c4a6:	2300      	moveq	r3, #0
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	60fb      	str	r3, [r7, #12]

    return ret;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b082      	sub	sp, #8
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 fc56 	bl	800cd70 <osSemaphoreDelete>
#endif
    return 1;
 800c4c4:	2301      	movs	r3, #1
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b084      	sub	sp, #16
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800c4da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 fb88 	bl	800cbf4 <osSemaphoreAcquire>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d101      	bne.n	800c4ee <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3710      	adds	r7, #16
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 fbdd 	bl	800ccc0 <osSemaphoreRelease>
#endif
}
 800c506:	bf00      	nop
 800c508:	3708      	adds	r7, #8
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c50e:	b480      	push	{r7}
 800c510:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800c512:	bf00      	nop
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c51c:	b480      	push	{r7}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c522:	f3ef 8305 	mrs	r3, IPSR
 800c526:	60bb      	str	r3, [r7, #8]
  return(result);
 800c528:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d10f      	bne.n	800c54e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c52e:	f3ef 8310 	mrs	r3, PRIMASK
 800c532:	607b      	str	r3, [r7, #4]
  return(result);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d105      	bne.n	800c546 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c53a:	f3ef 8311 	mrs	r3, BASEPRI
 800c53e:	603b      	str	r3, [r7, #0]
  return(result);
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d007      	beq.n	800c556 <osKernelInitialize+0x3a>
 800c546:	4b0e      	ldr	r3, [pc, #56]	; (800c580 <osKernelInitialize+0x64>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2b02      	cmp	r3, #2
 800c54c:	d103      	bne.n	800c556 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800c54e:	f06f 0305 	mvn.w	r3, #5
 800c552:	60fb      	str	r3, [r7, #12]
 800c554:	e00c      	b.n	800c570 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c556:	4b0a      	ldr	r3, [pc, #40]	; (800c580 <osKernelInitialize+0x64>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d105      	bne.n	800c56a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c55e:	4b08      	ldr	r3, [pc, #32]	; (800c580 <osKernelInitialize+0x64>)
 800c560:	2201      	movs	r2, #1
 800c562:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c564:	2300      	movs	r3, #0
 800c566:	60fb      	str	r3, [r7, #12]
 800c568:	e002      	b.n	800c570 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800c56a:	f04f 33ff 	mov.w	r3, #4294967295
 800c56e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c570:	68fb      	ldr	r3, [r7, #12]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3714      	adds	r7, #20
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	200372ac 	.word	0x200372ac

0800c584 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800c58a:	f002 fe01 	bl	800f190 <xTaskGetSchedulerState>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d004      	beq.n	800c59e <osKernelGetState+0x1a>
 800c594:	2b02      	cmp	r3, #2
 800c596:	d105      	bne.n	800c5a4 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800c598:	2302      	movs	r3, #2
 800c59a:	607b      	str	r3, [r7, #4]
      break;
 800c59c:	e00c      	b.n	800c5b8 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800c59e:	2303      	movs	r3, #3
 800c5a0:	607b      	str	r3, [r7, #4]
      break;
 800c5a2:	e009      	b.n	800c5b8 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800c5a4:	4b07      	ldr	r3, [pc, #28]	; (800c5c4 <osKernelGetState+0x40>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d102      	bne.n	800c5b2 <osKernelGetState+0x2e>
        state = osKernelReady;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800c5b0:	e001      	b.n	800c5b6 <osKernelGetState+0x32>
        state = osKernelInactive;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	607b      	str	r3, [r7, #4]
      break;
 800c5b6:	bf00      	nop
  }

  return (state);
 800c5b8:	687b      	ldr	r3, [r7, #4]
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	200372ac 	.word	0x200372ac

0800c5c8 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5ce:	f3ef 8305 	mrs	r3, IPSR
 800c5d2:	60bb      	str	r3, [r7, #8]
  return(result);
 800c5d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d10f      	bne.n	800c5fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5da:	f3ef 8310 	mrs	r3, PRIMASK
 800c5de:	607b      	str	r3, [r7, #4]
  return(result);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d105      	bne.n	800c5f2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c5e6:	f3ef 8311 	mrs	r3, BASEPRI
 800c5ea:	603b      	str	r3, [r7, #0]
  return(result);
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d007      	beq.n	800c602 <osKernelStart+0x3a>
 800c5f2:	4b0f      	ldr	r3, [pc, #60]	; (800c630 <osKernelStart+0x68>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2b02      	cmp	r3, #2
 800c5f8:	d103      	bne.n	800c602 <osKernelStart+0x3a>
    stat = osErrorISR;
 800c5fa:	f06f 0305 	mvn.w	r3, #5
 800c5fe:	60fb      	str	r3, [r7, #12]
 800c600:	e010      	b.n	800c624 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c602:	4b0b      	ldr	r3, [pc, #44]	; (800c630 <osKernelStart+0x68>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2b01      	cmp	r3, #1
 800c608:	d109      	bne.n	800c61e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c60a:	f7ff ff80 	bl	800c50e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c60e:	4b08      	ldr	r3, [pc, #32]	; (800c630 <osKernelStart+0x68>)
 800c610:	2202      	movs	r2, #2
 800c612:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c614:	f002 f92c 	bl	800e870 <vTaskStartScheduler>
      stat = osOK;
 800c618:	2300      	movs	r3, #0
 800c61a:	60fb      	str	r3, [r7, #12]
 800c61c:	e002      	b.n	800c624 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800c61e:	f04f 33ff 	mov.w	r3, #4294967295
 800c622:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c624:	68fb      	ldr	r3, [r7, #12]
}
 800c626:	4618      	mov	r0, r3
 800c628:	3710      	adds	r7, #16
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	200372ac 	.word	0x200372ac

0800c634 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c63a:	f3ef 8305 	mrs	r3, IPSR
 800c63e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c640:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c642:	2b00      	cmp	r3, #0
 800c644:	d10f      	bne.n	800c666 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c646:	f3ef 8310 	mrs	r3, PRIMASK
 800c64a:	607b      	str	r3, [r7, #4]
  return(result);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d105      	bne.n	800c65e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c652:	f3ef 8311 	mrs	r3, BASEPRI
 800c656:	603b      	str	r3, [r7, #0]
  return(result);
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d007      	beq.n	800c66e <osKernelGetTickCount+0x3a>
 800c65e:	4b08      	ldr	r3, [pc, #32]	; (800c680 <osKernelGetTickCount+0x4c>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2b02      	cmp	r3, #2
 800c664:	d103      	bne.n	800c66e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800c666:	f002 fa2b 	bl	800eac0 <xTaskGetTickCountFromISR>
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	e002      	b.n	800c674 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800c66e:	f002 fa17 	bl	800eaa0 <xTaskGetTickCount>
 800c672:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800c674:	68fb      	ldr	r3, [r7, #12]
}
 800c676:	4618      	mov	r0, r3
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	200372ac 	.word	0x200372ac

0800c684 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c684:	b580      	push	{r7, lr}
 800c686:	b090      	sub	sp, #64	; 0x40
 800c688:	af04      	add	r7, sp, #16
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c690:	2300      	movs	r3, #0
 800c692:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c694:	f3ef 8305 	mrs	r3, IPSR
 800c698:	61fb      	str	r3, [r7, #28]
  return(result);
 800c69a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	f040 8090 	bne.w	800c7c2 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6a2:	f3ef 8310 	mrs	r3, PRIMASK
 800c6a6:	61bb      	str	r3, [r7, #24]
  return(result);
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d105      	bne.n	800c6ba <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c6ae:	f3ef 8311 	mrs	r3, BASEPRI
 800c6b2:	617b      	str	r3, [r7, #20]
  return(result);
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d003      	beq.n	800c6c2 <osThreadNew+0x3e>
 800c6ba:	4b44      	ldr	r3, [pc, #272]	; (800c7cc <osThreadNew+0x148>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	d07f      	beq.n	800c7c2 <osThreadNew+0x13e>
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d07c      	beq.n	800c7c2 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800c6c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6cc:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800c6ce:	2318      	movs	r3, #24
 800c6d0:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800c6d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6da:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d045      	beq.n	800c76e <osThreadNew+0xea>
      if (attr->name != NULL) {
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d002      	beq.n	800c6f0 <osThreadNew+0x6c>
        name = attr->name;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	699b      	ldr	r3, [r3, #24]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d002      	beq.n	800c6fe <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	699b      	ldr	r3, [r3, #24]
 800c6fc:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c700:	2b00      	cmp	r3, #0
 800c702:	d008      	beq.n	800c716 <osThreadNew+0x92>
 800c704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c706:	2b38      	cmp	r3, #56	; 0x38
 800c708:	d805      	bhi.n	800c716 <osThreadNew+0x92>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	f003 0301 	and.w	r3, r3, #1
 800c712:	2b00      	cmp	r3, #0
 800c714:	d001      	beq.n	800c71a <osThreadNew+0x96>
        return (NULL);
 800c716:	2300      	movs	r3, #0
 800c718:	e054      	b.n	800c7c4 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	695b      	ldr	r3, [r3, #20]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d003      	beq.n	800c72a <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	695b      	ldr	r3, [r3, #20]
 800c726:	089b      	lsrs	r3, r3, #2
 800c728:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d00e      	beq.n	800c750 <osThreadNew+0xcc>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	2b5f      	cmp	r3, #95	; 0x5f
 800c738:	d90a      	bls.n	800c750 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d006      	beq.n	800c750 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	695b      	ldr	r3, [r3, #20]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d002      	beq.n	800c750 <osThreadNew+0xcc>
        mem = 1;
 800c74a:	2301      	movs	r3, #1
 800c74c:	623b      	str	r3, [r7, #32]
 800c74e:	e010      	b.n	800c772 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d10c      	bne.n	800c772 <osThreadNew+0xee>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d108      	bne.n	800c772 <osThreadNew+0xee>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d104      	bne.n	800c772 <osThreadNew+0xee>
          mem = 0;
 800c768:	2300      	movs	r3, #0
 800c76a:	623b      	str	r3, [r7, #32]
 800c76c:	e001      	b.n	800c772 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800c76e:	2300      	movs	r3, #0
 800c770:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800c772:	6a3b      	ldr	r3, [r7, #32]
 800c774:	2b01      	cmp	r3, #1
 800c776:	d110      	bne.n	800c79a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c780:	9202      	str	r2, [sp, #8]
 800c782:	9301      	str	r3, [sp, #4]
 800c784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c786:	9300      	str	r3, [sp, #0]
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c78c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c78e:	68f8      	ldr	r0, [r7, #12]
 800c790:	f001 fe88 	bl	800e4a4 <xTaskCreateStatic>
 800c794:	4603      	mov	r3, r0
 800c796:	613b      	str	r3, [r7, #16]
 800c798:	e013      	b.n	800c7c2 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800c79a:	6a3b      	ldr	r3, [r7, #32]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d110      	bne.n	800c7c2 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a2:	b29a      	uxth	r2, r3
 800c7a4:	f107 0310 	add.w	r3, r7, #16
 800c7a8:	9301      	str	r3, [sp, #4]
 800c7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7b2:	68f8      	ldr	r0, [r7, #12]
 800c7b4:	f001 fed9 	bl	800e56a <xTaskCreate>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d001      	beq.n	800c7c2 <osThreadNew+0x13e>
          hTask = NULL;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c7c2:	693b      	ldr	r3, [r7, #16]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3730      	adds	r7, #48	; 0x30
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	200372ac 	.word	0x200372ac

0800c7d0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b086      	sub	sp, #24
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7d8:	f3ef 8305 	mrs	r3, IPSR
 800c7dc:	613b      	str	r3, [r7, #16]
  return(result);
 800c7de:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d10f      	bne.n	800c804 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7e4:	f3ef 8310 	mrs	r3, PRIMASK
 800c7e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d105      	bne.n	800c7fc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c7f0:	f3ef 8311 	mrs	r3, BASEPRI
 800c7f4:	60bb      	str	r3, [r7, #8]
  return(result);
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d007      	beq.n	800c80c <osDelay+0x3c>
 800c7fc:	4b0a      	ldr	r3, [pc, #40]	; (800c828 <osDelay+0x58>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2b02      	cmp	r3, #2
 800c802:	d103      	bne.n	800c80c <osDelay+0x3c>
    stat = osErrorISR;
 800c804:	f06f 0305 	mvn.w	r3, #5
 800c808:	617b      	str	r3, [r7, #20]
 800c80a:	e007      	b.n	800c81c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800c80c:	2300      	movs	r3, #0
 800c80e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d002      	beq.n	800c81c <osDelay+0x4c>
      vTaskDelay(ticks);
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f001 fff4 	bl	800e804 <vTaskDelay>
    }
  }

  return (stat);
 800c81c:	697b      	ldr	r3, [r7, #20]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3718      	adds	r7, #24
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	200372ac 	.word	0x200372ac

0800c82c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b08a      	sub	sp, #40	; 0x28
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c834:	2300      	movs	r3, #0
 800c836:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c838:	f3ef 8305 	mrs	r3, IPSR
 800c83c:	613b      	str	r3, [r7, #16]
  return(result);
 800c83e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800c840:	2b00      	cmp	r3, #0
 800c842:	f040 8085 	bne.w	800c950 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c846:	f3ef 8310 	mrs	r3, PRIMASK
 800c84a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d105      	bne.n	800c85e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c852:	f3ef 8311 	mrs	r3, BASEPRI
 800c856:	60bb      	str	r3, [r7, #8]
  return(result);
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d003      	beq.n	800c866 <osMutexNew+0x3a>
 800c85e:	4b3f      	ldr	r3, [pc, #252]	; (800c95c <osMutexNew+0x130>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b02      	cmp	r3, #2
 800c864:	d074      	beq.n	800c950 <osMutexNew+0x124>
    if (attr != NULL) {
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d003      	beq.n	800c874 <osMutexNew+0x48>
      type = attr->attr_bits;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	623b      	str	r3, [r7, #32]
 800c872:	e001      	b.n	800c878 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800c874:	2300      	movs	r3, #0
 800c876:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c878:	6a3b      	ldr	r3, [r7, #32]
 800c87a:	f003 0301 	and.w	r3, r3, #1
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d002      	beq.n	800c888 <osMutexNew+0x5c>
      rmtx = 1U;
 800c882:	2301      	movs	r3, #1
 800c884:	61fb      	str	r3, [r7, #28]
 800c886:	e001      	b.n	800c88c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800c888:	2300      	movs	r3, #0
 800c88a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c88c:	6a3b      	ldr	r3, [r7, #32]
 800c88e:	f003 0308 	and.w	r3, r3, #8
 800c892:	2b00      	cmp	r3, #0
 800c894:	d15c      	bne.n	800c950 <osMutexNew+0x124>
      mem = -1;
 800c896:	f04f 33ff 	mov.w	r3, #4294967295
 800c89a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d015      	beq.n	800c8ce <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d006      	beq.n	800c8b8 <osMutexNew+0x8c>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	2b4f      	cmp	r3, #79	; 0x4f
 800c8b0:	d902      	bls.n	800c8b8 <osMutexNew+0x8c>
          mem = 1;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	61bb      	str	r3, [r7, #24]
 800c8b6:	e00c      	b.n	800c8d2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d108      	bne.n	800c8d2 <osMutexNew+0xa6>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d104      	bne.n	800c8d2 <osMutexNew+0xa6>
            mem = 0;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	61bb      	str	r3, [r7, #24]
 800c8cc:	e001      	b.n	800c8d2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800c8d2:	69bb      	ldr	r3, [r7, #24]
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d112      	bne.n	800c8fe <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d007      	beq.n	800c8ee <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	2004      	movs	r0, #4
 800c8e6:	f000 fe50 	bl	800d58a <xQueueCreateMutexStatic>
 800c8ea:	6278      	str	r0, [r7, #36]	; 0x24
 800c8ec:	e016      	b.n	800c91c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	2001      	movs	r0, #1
 800c8f6:	f000 fe48 	bl	800d58a <xQueueCreateMutexStatic>
 800c8fa:	6278      	str	r0, [r7, #36]	; 0x24
 800c8fc:	e00e      	b.n	800c91c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d10b      	bne.n	800c91c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d004      	beq.n	800c914 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800c90a:	2004      	movs	r0, #4
 800c90c:	f000 fe25 	bl	800d55a <xQueueCreateMutex>
 800c910:	6278      	str	r0, [r7, #36]	; 0x24
 800c912:	e003      	b.n	800c91c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800c914:	2001      	movs	r0, #1
 800c916:	f000 fe20 	bl	800d55a <xQueueCreateMutex>
 800c91a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d00c      	beq.n	800c93c <osMutexNew+0x110>
        if (attr != NULL) {
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d003      	beq.n	800c930 <osMutexNew+0x104>
          name = attr->name;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	617b      	str	r3, [r7, #20]
 800c92e:	e001      	b.n	800c934 <osMutexNew+0x108>
        } else {
          name = NULL;
 800c930:	2300      	movs	r3, #0
 800c932:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800c934:	6979      	ldr	r1, [r7, #20]
 800c936:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c938:	f001 fd2c 	bl	800e394 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d006      	beq.n	800c950 <osMutexNew+0x124>
 800c942:	69fb      	ldr	r3, [r7, #28]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d003      	beq.n	800c950 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94a:	f043 0301 	orr.w	r3, r3, #1
 800c94e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c952:	4618      	mov	r0, r3
 800c954:	3728      	adds	r7, #40	; 0x28
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	200372ac 	.word	0x200372ac

0800c960 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c960:	b580      	push	{r7, lr}
 800c962:	b088      	sub	sp, #32
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f023 0301 	bic.w	r3, r3, #1
 800c970:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f003 0301 	and.w	r3, r3, #1
 800c978:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800c97a:	2300      	movs	r3, #0
 800c97c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c97e:	f3ef 8305 	mrs	r3, IPSR
 800c982:	613b      	str	r3, [r7, #16]
  return(result);
 800c984:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800c986:	2b00      	cmp	r3, #0
 800c988:	d10f      	bne.n	800c9aa <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c98a:	f3ef 8310 	mrs	r3, PRIMASK
 800c98e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d105      	bne.n	800c9a2 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c996:	f3ef 8311 	mrs	r3, BASEPRI
 800c99a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d007      	beq.n	800c9b2 <osMutexAcquire+0x52>
 800c9a2:	4b1d      	ldr	r3, [pc, #116]	; (800ca18 <osMutexAcquire+0xb8>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	2b02      	cmp	r3, #2
 800c9a8:	d103      	bne.n	800c9b2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800c9aa:	f06f 0305 	mvn.w	r3, #5
 800c9ae:	61fb      	str	r3, [r7, #28]
 800c9b0:	e02c      	b.n	800ca0c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800c9b2:	69bb      	ldr	r3, [r7, #24]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d103      	bne.n	800c9c0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800c9b8:	f06f 0303 	mvn.w	r3, #3
 800c9bc:	61fb      	str	r3, [r7, #28]
 800c9be:	e025      	b.n	800ca0c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d011      	beq.n	800c9ea <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c9c6:	6839      	ldr	r1, [r7, #0]
 800c9c8:	69b8      	ldr	r0, [r7, #24]
 800c9ca:	f000 fe2f 	bl	800d62c <xQueueTakeMutexRecursive>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d01b      	beq.n	800ca0c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d003      	beq.n	800c9e2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800c9da:	f06f 0301 	mvn.w	r3, #1
 800c9de:	61fb      	str	r3, [r7, #28]
 800c9e0:	e014      	b.n	800ca0c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800c9e2:	f06f 0302 	mvn.w	r3, #2
 800c9e6:	61fb      	str	r3, [r7, #28]
 800c9e8:	e010      	b.n	800ca0c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c9ea:	6839      	ldr	r1, [r7, #0]
 800c9ec:	69b8      	ldr	r0, [r7, #24]
 800c9ee:	f001 f9e9 	bl	800ddc4 <xQueueSemaphoreTake>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d009      	beq.n	800ca0c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d003      	beq.n	800ca06 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800c9fe:	f06f 0301 	mvn.w	r3, #1
 800ca02:	61fb      	str	r3, [r7, #28]
 800ca04:	e002      	b.n	800ca0c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ca06:	f06f 0302 	mvn.w	r3, #2
 800ca0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ca0c:	69fb      	ldr	r3, [r7, #28]
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3720      	adds	r7, #32
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	200372ac 	.word	0x200372ac

0800ca1c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b088      	sub	sp, #32
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f023 0301 	bic.w	r3, r3, #1
 800ca2a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f003 0301 	and.w	r3, r3, #1
 800ca32:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ca34:	2300      	movs	r3, #0
 800ca36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca38:	f3ef 8305 	mrs	r3, IPSR
 800ca3c:	613b      	str	r3, [r7, #16]
  return(result);
 800ca3e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d10f      	bne.n	800ca64 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca44:	f3ef 8310 	mrs	r3, PRIMASK
 800ca48:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d105      	bne.n	800ca5c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ca50:	f3ef 8311 	mrs	r3, BASEPRI
 800ca54:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d007      	beq.n	800ca6c <osMutexRelease+0x50>
 800ca5c:	4b16      	ldr	r3, [pc, #88]	; (800cab8 <osMutexRelease+0x9c>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2b02      	cmp	r3, #2
 800ca62:	d103      	bne.n	800ca6c <osMutexRelease+0x50>
    stat = osErrorISR;
 800ca64:	f06f 0305 	mvn.w	r3, #5
 800ca68:	61fb      	str	r3, [r7, #28]
 800ca6a:	e01f      	b.n	800caac <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d103      	bne.n	800ca7a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800ca72:	f06f 0303 	mvn.w	r3, #3
 800ca76:	61fb      	str	r3, [r7, #28]
 800ca78:	e018      	b.n	800caac <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d009      	beq.n	800ca94 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ca80:	69b8      	ldr	r0, [r7, #24]
 800ca82:	f000 fd9d 	bl	800d5c0 <xQueueGiveMutexRecursive>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d00f      	beq.n	800caac <osMutexRelease+0x90>
        stat = osErrorResource;
 800ca8c:	f06f 0302 	mvn.w	r3, #2
 800ca90:	61fb      	str	r3, [r7, #28]
 800ca92:	e00b      	b.n	800caac <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ca94:	2300      	movs	r3, #0
 800ca96:	2200      	movs	r2, #0
 800ca98:	2100      	movs	r1, #0
 800ca9a:	69b8      	ldr	r0, [r7, #24]
 800ca9c:	f000 fe70 	bl	800d780 <xQueueGenericSend>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d002      	beq.n	800caac <osMutexRelease+0x90>
        stat = osErrorResource;
 800caa6:	f06f 0302 	mvn.w	r3, #2
 800caaa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800caac:	69fb      	ldr	r3, [r7, #28]
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3720      	adds	r7, #32
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	200372ac 	.word	0x200372ac

0800cabc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b08c      	sub	sp, #48	; 0x30
 800cac0:	af02      	add	r7, sp, #8
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800cac8:	2300      	movs	r3, #0
 800caca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cacc:	f3ef 8305 	mrs	r3, IPSR
 800cad0:	61bb      	str	r3, [r7, #24]
  return(result);
 800cad2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f040 8086 	bne.w	800cbe6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cada:	f3ef 8310 	mrs	r3, PRIMASK
 800cade:	617b      	str	r3, [r7, #20]
  return(result);
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d105      	bne.n	800caf2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cae6:	f3ef 8311 	mrs	r3, BASEPRI
 800caea:	613b      	str	r3, [r7, #16]
  return(result);
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d003      	beq.n	800cafa <osSemaphoreNew+0x3e>
 800caf2:	4b3f      	ldr	r3, [pc, #252]	; (800cbf0 <osSemaphoreNew+0x134>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	d075      	beq.n	800cbe6 <osSemaphoreNew+0x12a>
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d072      	beq.n	800cbe6 <osSemaphoreNew+0x12a>
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d86e      	bhi.n	800cbe6 <osSemaphoreNew+0x12a>
    mem = -1;
 800cb08:	f04f 33ff 	mov.w	r3, #4294967295
 800cb0c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d015      	beq.n	800cb40 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d006      	beq.n	800cb2a <osSemaphoreNew+0x6e>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	2b4f      	cmp	r3, #79	; 0x4f
 800cb22:	d902      	bls.n	800cb2a <osSemaphoreNew+0x6e>
        mem = 1;
 800cb24:	2301      	movs	r3, #1
 800cb26:	623b      	str	r3, [r7, #32]
 800cb28:	e00c      	b.n	800cb44 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d108      	bne.n	800cb44 <osSemaphoreNew+0x88>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	68db      	ldr	r3, [r3, #12]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d104      	bne.n	800cb44 <osSemaphoreNew+0x88>
          mem = 0;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	623b      	str	r3, [r7, #32]
 800cb3e:	e001      	b.n	800cb44 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800cb40:	2300      	movs	r3, #0
 800cb42:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800cb44:	6a3b      	ldr	r3, [r7, #32]
 800cb46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb4a:	d04c      	beq.n	800cbe6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	d128      	bne.n	800cba4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800cb52:	6a3b      	ldr	r3, [r7, #32]
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d10a      	bne.n	800cb6e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	2203      	movs	r2, #3
 800cb5e:	9200      	str	r2, [sp, #0]
 800cb60:	2200      	movs	r2, #0
 800cb62:	2100      	movs	r1, #0
 800cb64:	2001      	movs	r0, #1
 800cb66:	f000 fbf7 	bl	800d358 <xQueueGenericCreateStatic>
 800cb6a:	6278      	str	r0, [r7, #36]	; 0x24
 800cb6c:	e005      	b.n	800cb7a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800cb6e:	2203      	movs	r2, #3
 800cb70:	2100      	movs	r1, #0
 800cb72:	2001      	movs	r0, #1
 800cb74:	f000 fc72 	bl	800d45c <xQueueGenericCreate>
 800cb78:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d022      	beq.n	800cbc6 <osSemaphoreNew+0x10a>
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d01f      	beq.n	800cbc6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cb86:	2300      	movs	r3, #0
 800cb88:	2200      	movs	r2, #0
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb8e:	f000 fdf7 	bl	800d780 <xQueueGenericSend>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d016      	beq.n	800cbc6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800cb98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb9a:	f001 faad 	bl	800e0f8 <vQueueDelete>
            hSemaphore = NULL;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	627b      	str	r3, [r7, #36]	; 0x24
 800cba2:	e010      	b.n	800cbc6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800cba4:	6a3b      	ldr	r3, [r7, #32]
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d108      	bne.n	800cbbc <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	68b9      	ldr	r1, [r7, #8]
 800cbb2:	68f8      	ldr	r0, [r7, #12]
 800cbb4:	f000 fd72 	bl	800d69c <xQueueCreateCountingSemaphoreStatic>
 800cbb8:	6278      	str	r0, [r7, #36]	; 0x24
 800cbba:	e004      	b.n	800cbc6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cbbc:	68b9      	ldr	r1, [r7, #8]
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	f000 fda7 	bl	800d712 <xQueueCreateCountingSemaphore>
 800cbc4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800cbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d00c      	beq.n	800cbe6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d003      	beq.n	800cbda <osSemaphoreNew+0x11e>
          name = attr->name;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	61fb      	str	r3, [r7, #28]
 800cbd8:	e001      	b.n	800cbde <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800cbde:	69f9      	ldr	r1, [r7, #28]
 800cbe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbe2:	f001 fbd7 	bl	800e394 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3728      	adds	r7, #40	; 0x28
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	200372ac 	.word	0x200372ac

0800cbf4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b088      	sub	sp, #32
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cc02:	2300      	movs	r3, #0
 800cc04:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d103      	bne.n	800cc14 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800cc0c:	f06f 0303 	mvn.w	r3, #3
 800cc10:	61fb      	str	r3, [r7, #28]
 800cc12:	e04b      	b.n	800ccac <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc14:	f3ef 8305 	mrs	r3, IPSR
 800cc18:	617b      	str	r3, [r7, #20]
  return(result);
 800cc1a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d10f      	bne.n	800cc40 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc20:	f3ef 8310 	mrs	r3, PRIMASK
 800cc24:	613b      	str	r3, [r7, #16]
  return(result);
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d105      	bne.n	800cc38 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc2c:	f3ef 8311 	mrs	r3, BASEPRI
 800cc30:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d026      	beq.n	800cc86 <osSemaphoreAcquire+0x92>
 800cc38:	4b1f      	ldr	r3, [pc, #124]	; (800ccb8 <osSemaphoreAcquire+0xc4>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b02      	cmp	r3, #2
 800cc3e:	d122      	bne.n	800cc86 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d003      	beq.n	800cc4e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800cc46:	f06f 0303 	mvn.w	r3, #3
 800cc4a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800cc4c:	e02d      	b.n	800ccaa <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800cc52:	f107 0308 	add.w	r3, r7, #8
 800cc56:	461a      	mov	r2, r3
 800cc58:	2100      	movs	r1, #0
 800cc5a:	69b8      	ldr	r0, [r7, #24]
 800cc5c:	f001 f9c6 	bl	800dfec <xQueueReceiveFromISR>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d003      	beq.n	800cc6e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800cc66:	f06f 0302 	mvn.w	r3, #2
 800cc6a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800cc6c:	e01d      	b.n	800ccaa <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d01a      	beq.n	800ccaa <osSemaphoreAcquire+0xb6>
 800cc74:	4b11      	ldr	r3, [pc, #68]	; (800ccbc <osSemaphoreAcquire+0xc8>)
 800cc76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc7a:	601a      	str	r2, [r3, #0]
 800cc7c:	f3bf 8f4f 	dsb	sy
 800cc80:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800cc84:	e011      	b.n	800ccaa <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800cc86:	6839      	ldr	r1, [r7, #0]
 800cc88:	69b8      	ldr	r0, [r7, #24]
 800cc8a:	f001 f89b 	bl	800ddc4 <xQueueSemaphoreTake>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d00b      	beq.n	800ccac <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d003      	beq.n	800cca2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800cc9a:	f06f 0301 	mvn.w	r3, #1
 800cc9e:	61fb      	str	r3, [r7, #28]
 800cca0:	e004      	b.n	800ccac <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800cca2:	f06f 0302 	mvn.w	r3, #2
 800cca6:	61fb      	str	r3, [r7, #28]
 800cca8:	e000      	b.n	800ccac <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800ccaa:	bf00      	nop
      }
    }
  }

  return (stat);
 800ccac:	69fb      	ldr	r3, [r7, #28]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3720      	adds	r7, #32
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	200372ac 	.word	0x200372ac
 800ccbc:	e000ed04 	.word	0xe000ed04

0800ccc0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b088      	sub	sp, #32
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cccc:	2300      	movs	r3, #0
 800ccce:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ccd0:	69bb      	ldr	r3, [r7, #24]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d103      	bne.n	800ccde <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ccd6:	f06f 0303 	mvn.w	r3, #3
 800ccda:	61fb      	str	r3, [r7, #28]
 800ccdc:	e03e      	b.n	800cd5c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccde:	f3ef 8305 	mrs	r3, IPSR
 800cce2:	617b      	str	r3, [r7, #20]
  return(result);
 800cce4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d10f      	bne.n	800cd0a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccea:	f3ef 8310 	mrs	r3, PRIMASK
 800ccee:	613b      	str	r3, [r7, #16]
  return(result);
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d105      	bne.n	800cd02 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ccf6:	f3ef 8311 	mrs	r3, BASEPRI
 800ccfa:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d01e      	beq.n	800cd40 <osSemaphoreRelease+0x80>
 800cd02:	4b19      	ldr	r3, [pc, #100]	; (800cd68 <osSemaphoreRelease+0xa8>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	d11a      	bne.n	800cd40 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cd0e:	f107 0308 	add.w	r3, r7, #8
 800cd12:	4619      	mov	r1, r3
 800cd14:	69b8      	ldr	r0, [r7, #24]
 800cd16:	f000 fed9 	bl	800dacc <xQueueGiveFromISR>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	d003      	beq.n	800cd28 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800cd20:	f06f 0302 	mvn.w	r3, #2
 800cd24:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cd26:	e018      	b.n	800cd5a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d015      	beq.n	800cd5a <osSemaphoreRelease+0x9a>
 800cd2e:	4b0f      	ldr	r3, [pc, #60]	; (800cd6c <osSemaphoreRelease+0xac>)
 800cd30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd34:	601a      	str	r2, [r3, #0]
 800cd36:	f3bf 8f4f 	dsb	sy
 800cd3a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cd3e:	e00c      	b.n	800cd5a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cd40:	2300      	movs	r3, #0
 800cd42:	2200      	movs	r2, #0
 800cd44:	2100      	movs	r1, #0
 800cd46:	69b8      	ldr	r0, [r7, #24]
 800cd48:	f000 fd1a 	bl	800d780 <xQueueGenericSend>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d004      	beq.n	800cd5c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800cd52:	f06f 0302 	mvn.w	r3, #2
 800cd56:	61fb      	str	r3, [r7, #28]
 800cd58:	e000      	b.n	800cd5c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cd5a:	bf00      	nop
    }
  }

  return (stat);
 800cd5c:	69fb      	ldr	r3, [r7, #28]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3720      	adds	r7, #32
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
 800cd66:	bf00      	nop
 800cd68:	200372ac 	.word	0x200372ac
 800cd6c:	e000ed04 	.word	0xe000ed04

0800cd70 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b088      	sub	sp, #32
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd7c:	f3ef 8305 	mrs	r3, IPSR
 800cd80:	617b      	str	r3, [r7, #20]
  return(result);
 800cd82:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10f      	bne.n	800cda8 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd88:	f3ef 8310 	mrs	r3, PRIMASK
 800cd8c:	613b      	str	r3, [r7, #16]
  return(result);
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d105      	bne.n	800cda0 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd94:	f3ef 8311 	mrs	r3, BASEPRI
 800cd98:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d007      	beq.n	800cdb0 <osSemaphoreDelete+0x40>
 800cda0:	4b0d      	ldr	r3, [pc, #52]	; (800cdd8 <osSemaphoreDelete+0x68>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	2b02      	cmp	r3, #2
 800cda6:	d103      	bne.n	800cdb0 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800cda8:	f06f 0305 	mvn.w	r3, #5
 800cdac:	61fb      	str	r3, [r7, #28]
 800cdae:	e00e      	b.n	800cdce <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d103      	bne.n	800cdbe <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800cdb6:	f06f 0303 	mvn.w	r3, #3
 800cdba:	61fb      	str	r3, [r7, #28]
 800cdbc:	e007      	b.n	800cdce <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800cdbe:	69b8      	ldr	r0, [r7, #24]
 800cdc0:	f001 fb12 	bl	800e3e8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800cdc8:	69b8      	ldr	r0, [r7, #24]
 800cdca:	f001 f995 	bl	800e0f8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800cdce:	69fb      	ldr	r3, [r7, #28]
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3720      	adds	r7, #32
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}
 800cdd8:	200372ac 	.word	0x200372ac

0800cddc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b08c      	sub	sp, #48	; 0x30
 800cde0:	af02      	add	r7, sp, #8
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cde8:	2300      	movs	r3, #0
 800cdea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdec:	f3ef 8305 	mrs	r3, IPSR
 800cdf0:	61bb      	str	r3, [r7, #24]
  return(result);
 800cdf2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d16f      	bne.n	800ced8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdf8:	f3ef 8310 	mrs	r3, PRIMASK
 800cdfc:	617b      	str	r3, [r7, #20]
  return(result);
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d105      	bne.n	800ce10 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce04:	f3ef 8311 	mrs	r3, BASEPRI
 800ce08:	613b      	str	r3, [r7, #16]
  return(result);
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d003      	beq.n	800ce18 <osMessageQueueNew+0x3c>
 800ce10:	4b34      	ldr	r3, [pc, #208]	; (800cee4 <osMessageQueueNew+0x108>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d05f      	beq.n	800ced8 <osMessageQueueNew+0xfc>
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d05c      	beq.n	800ced8 <osMessageQueueNew+0xfc>
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d059      	beq.n	800ced8 <osMessageQueueNew+0xfc>
    mem = -1;
 800ce24:	f04f 33ff 	mov.w	r3, #4294967295
 800ce28:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d029      	beq.n	800ce84 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d012      	beq.n	800ce5e <osMessageQueueNew+0x82>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	2b4f      	cmp	r3, #79	; 0x4f
 800ce3e:	d90e      	bls.n	800ce5e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00a      	beq.n	800ce5e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	695a      	ldr	r2, [r3, #20]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	68b9      	ldr	r1, [r7, #8]
 800ce50:	fb01 f303 	mul.w	r3, r1, r3
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d302      	bcc.n	800ce5e <osMessageQueueNew+0x82>
        mem = 1;
 800ce58:	2301      	movs	r3, #1
 800ce5a:	623b      	str	r3, [r7, #32]
 800ce5c:	e014      	b.n	800ce88 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d110      	bne.n	800ce88 <osMessageQueueNew+0xac>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	68db      	ldr	r3, [r3, #12]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d10c      	bne.n	800ce88 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d108      	bne.n	800ce88 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	695b      	ldr	r3, [r3, #20]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d104      	bne.n	800ce88 <osMessageQueueNew+0xac>
          mem = 0;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	623b      	str	r3, [r7, #32]
 800ce82:	e001      	b.n	800ce88 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800ce84:	2300      	movs	r3, #0
 800ce86:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ce88:	6a3b      	ldr	r3, [r7, #32]
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d10b      	bne.n	800cea6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	691a      	ldr	r2, [r3, #16]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	689b      	ldr	r3, [r3, #8]
 800ce96:	2100      	movs	r1, #0
 800ce98:	9100      	str	r1, [sp, #0]
 800ce9a:	68b9      	ldr	r1, [r7, #8]
 800ce9c:	68f8      	ldr	r0, [r7, #12]
 800ce9e:	f000 fa5b 	bl	800d358 <xQueueGenericCreateStatic>
 800cea2:	6278      	str	r0, [r7, #36]	; 0x24
 800cea4:	e008      	b.n	800ceb8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800cea6:	6a3b      	ldr	r3, [r7, #32]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d105      	bne.n	800ceb8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ceac:	2200      	movs	r2, #0
 800ceae:	68b9      	ldr	r1, [r7, #8]
 800ceb0:	68f8      	ldr	r0, [r7, #12]
 800ceb2:	f000 fad3 	bl	800d45c <xQueueGenericCreate>
 800ceb6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ceb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00c      	beq.n	800ced8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d003      	beq.n	800cecc <osMessageQueueNew+0xf0>
        name = attr->name;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	61fb      	str	r3, [r7, #28]
 800ceca:	e001      	b.n	800ced0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800cecc:	2300      	movs	r3, #0
 800cece:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800ced0:	69f9      	ldr	r1, [r7, #28]
 800ced2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ced4:	f001 fa5e 	bl	800e394 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ced8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3728      	adds	r7, #40	; 0x28
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	bf00      	nop
 800cee4:	200372ac 	.word	0x200372ac

0800cee8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b08a      	sub	sp, #40	; 0x28
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	603b      	str	r3, [r7, #0]
 800cef4:	4613      	mov	r3, r2
 800cef6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cefc:	2300      	movs	r3, #0
 800cefe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf00:	f3ef 8305 	mrs	r3, IPSR
 800cf04:	61fb      	str	r3, [r7, #28]
  return(result);
 800cf06:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d10f      	bne.n	800cf2c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf0c:	f3ef 8310 	mrs	r3, PRIMASK
 800cf10:	61bb      	str	r3, [r7, #24]
  return(result);
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d105      	bne.n	800cf24 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf18:	f3ef 8311 	mrs	r3, BASEPRI
 800cf1c:	617b      	str	r3, [r7, #20]
  return(result);
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d02c      	beq.n	800cf7e <osMessageQueuePut+0x96>
 800cf24:	4b28      	ldr	r3, [pc, #160]	; (800cfc8 <osMessageQueuePut+0xe0>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2b02      	cmp	r3, #2
 800cf2a:	d128      	bne.n	800cf7e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cf2c:	6a3b      	ldr	r3, [r7, #32]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d005      	beq.n	800cf3e <osMessageQueuePut+0x56>
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d002      	beq.n	800cf3e <osMessageQueuePut+0x56>
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d003      	beq.n	800cf46 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800cf3e:	f06f 0303 	mvn.w	r3, #3
 800cf42:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cf44:	e039      	b.n	800cfba <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800cf46:	2300      	movs	r3, #0
 800cf48:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cf4a:	f107 0210 	add.w	r2, r7, #16
 800cf4e:	2300      	movs	r3, #0
 800cf50:	68b9      	ldr	r1, [r7, #8]
 800cf52:	6a38      	ldr	r0, [r7, #32]
 800cf54:	f000 fd1a 	bl	800d98c <xQueueGenericSendFromISR>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d003      	beq.n	800cf66 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800cf5e:	f06f 0302 	mvn.w	r3, #2
 800cf62:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cf64:	e029      	b.n	800cfba <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d026      	beq.n	800cfba <osMessageQueuePut+0xd2>
 800cf6c:	4b17      	ldr	r3, [pc, #92]	; (800cfcc <osMessageQueuePut+0xe4>)
 800cf6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf72:	601a      	str	r2, [r3, #0]
 800cf74:	f3bf 8f4f 	dsb	sy
 800cf78:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cf7c:	e01d      	b.n	800cfba <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cf7e:	6a3b      	ldr	r3, [r7, #32]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d002      	beq.n	800cf8a <osMessageQueuePut+0xa2>
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d103      	bne.n	800cf92 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800cf8a:	f06f 0303 	mvn.w	r3, #3
 800cf8e:	627b      	str	r3, [r7, #36]	; 0x24
 800cf90:	e014      	b.n	800cfbc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cf92:	2300      	movs	r3, #0
 800cf94:	683a      	ldr	r2, [r7, #0]
 800cf96:	68b9      	ldr	r1, [r7, #8]
 800cf98:	6a38      	ldr	r0, [r7, #32]
 800cf9a:	f000 fbf1 	bl	800d780 <xQueueGenericSend>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d00b      	beq.n	800cfbc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d003      	beq.n	800cfb2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800cfaa:	f06f 0301 	mvn.w	r3, #1
 800cfae:	627b      	str	r3, [r7, #36]	; 0x24
 800cfb0:	e004      	b.n	800cfbc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800cfb2:	f06f 0302 	mvn.w	r3, #2
 800cfb6:	627b      	str	r3, [r7, #36]	; 0x24
 800cfb8:	e000      	b.n	800cfbc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cfba:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800cfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3728      	adds	r7, #40	; 0x28
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	200372ac 	.word	0x200372ac
 800cfcc:	e000ed04 	.word	0xe000ed04

0800cfd0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b08a      	sub	sp, #40	; 0x28
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	607a      	str	r2, [r7, #4]
 800cfdc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfe6:	f3ef 8305 	mrs	r3, IPSR
 800cfea:	61fb      	str	r3, [r7, #28]
  return(result);
 800cfec:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d10f      	bne.n	800d012 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cff2:	f3ef 8310 	mrs	r3, PRIMASK
 800cff6:	61bb      	str	r3, [r7, #24]
  return(result);
 800cff8:	69bb      	ldr	r3, [r7, #24]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d105      	bne.n	800d00a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cffe:	f3ef 8311 	mrs	r3, BASEPRI
 800d002:	617b      	str	r3, [r7, #20]
  return(result);
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d02c      	beq.n	800d064 <osMessageQueueGet+0x94>
 800d00a:	4b28      	ldr	r3, [pc, #160]	; (800d0ac <osMessageQueueGet+0xdc>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b02      	cmp	r3, #2
 800d010:	d128      	bne.n	800d064 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d012:	6a3b      	ldr	r3, [r7, #32]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d005      	beq.n	800d024 <osMessageQueueGet+0x54>
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d002      	beq.n	800d024 <osMessageQueueGet+0x54>
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d003      	beq.n	800d02c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d024:	f06f 0303 	mvn.w	r3, #3
 800d028:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d02a:	e038      	b.n	800d09e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d02c:	2300      	movs	r3, #0
 800d02e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d030:	f107 0310 	add.w	r3, r7, #16
 800d034:	461a      	mov	r2, r3
 800d036:	68b9      	ldr	r1, [r7, #8]
 800d038:	6a38      	ldr	r0, [r7, #32]
 800d03a:	f000 ffd7 	bl	800dfec <xQueueReceiveFromISR>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b01      	cmp	r3, #1
 800d042:	d003      	beq.n	800d04c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d044:	f06f 0302 	mvn.w	r3, #2
 800d048:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d04a:	e028      	b.n	800d09e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d025      	beq.n	800d09e <osMessageQueueGet+0xce>
 800d052:	4b17      	ldr	r3, [pc, #92]	; (800d0b0 <osMessageQueueGet+0xe0>)
 800d054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d058:	601a      	str	r2, [r3, #0]
 800d05a:	f3bf 8f4f 	dsb	sy
 800d05e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d062:	e01c      	b.n	800d09e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d064:	6a3b      	ldr	r3, [r7, #32]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d002      	beq.n	800d070 <osMessageQueueGet+0xa0>
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d103      	bne.n	800d078 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d070:	f06f 0303 	mvn.w	r3, #3
 800d074:	627b      	str	r3, [r7, #36]	; 0x24
 800d076:	e013      	b.n	800d0a0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d078:	683a      	ldr	r2, [r7, #0]
 800d07a:	68b9      	ldr	r1, [r7, #8]
 800d07c:	6a38      	ldr	r0, [r7, #32]
 800d07e:	f000 fdbb 	bl	800dbf8 <xQueueReceive>
 800d082:	4603      	mov	r3, r0
 800d084:	2b01      	cmp	r3, #1
 800d086:	d00b      	beq.n	800d0a0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d003      	beq.n	800d096 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d08e:	f06f 0301 	mvn.w	r3, #1
 800d092:	627b      	str	r3, [r7, #36]	; 0x24
 800d094:	e004      	b.n	800d0a0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d096:	f06f 0302 	mvn.w	r3, #2
 800d09a:	627b      	str	r3, [r7, #36]	; 0x24
 800d09c:	e000      	b.n	800d0a0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d09e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3728      	adds	r7, #40	; 0x28
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	200372ac 	.word	0x200372ac
 800d0b0:	e000ed04 	.word	0xe000ed04

0800d0b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d0b4:	b480      	push	{r7}
 800d0b6:	b085      	sub	sp, #20
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	60f8      	str	r0, [r7, #12]
 800d0bc:	60b9      	str	r1, [r7, #8]
 800d0be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	4a07      	ldr	r2, [pc, #28]	; (800d0e0 <vApplicationGetIdleTaskMemory+0x2c>)
 800d0c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	4a06      	ldr	r2, [pc, #24]	; (800d0e4 <vApplicationGetIdleTaskMemory+0x30>)
 800d0ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0d2:	601a      	str	r2, [r3, #0]
}
 800d0d4:	bf00      	nop
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	200372b0 	.word	0x200372b0
 800d0e4:	20037310 	.word	0x20037310

0800d0e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d0e8:	b480      	push	{r7}
 800d0ea:	b085      	sub	sp, #20
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	4a07      	ldr	r2, [pc, #28]	; (800d114 <vApplicationGetTimerTaskMemory+0x2c>)
 800d0f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	4a06      	ldr	r2, [pc, #24]	; (800d118 <vApplicationGetTimerTaskMemory+0x30>)
 800d0fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d106:	601a      	str	r2, [r3, #0]
}
 800d108:	bf00      	nop
 800d10a:	3714      	adds	r7, #20
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr
 800d114:	20037710 	.word	0x20037710
 800d118:	20037770 	.word	0x20037770

0800d11c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f103 0208 	add.w	r2, r3, #8
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f04f 32ff 	mov.w	r2, #4294967295
 800d134:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f103 0208 	add.w	r2, r3, #8
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f103 0208 	add.w	r2, r3, #8
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2200      	movs	r2, #0
 800d14e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d150:	bf00      	nop
 800d152:	370c      	adds	r7, #12
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d15c:	b480      	push	{r7}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2200      	movs	r2, #0
 800d168:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d16a:	bf00      	nop
 800d16c:	370c      	adds	r7, #12
 800d16e:	46bd      	mov	sp, r7
 800d170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d174:	4770      	bx	lr

0800d176 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d176:	b480      	push	{r7}
 800d178:	b085      	sub	sp, #20
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
 800d17e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	68fa      	ldr	r2, [r7, #12]
 800d18a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	689a      	ldr	r2, [r3, #8]
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	689b      	ldr	r3, [r3, #8]
 800d198:	683a      	ldr	r2, [r7, #0]
 800d19a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	683a      	ldr	r2, [r7, #0]
 800d1a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	1c5a      	adds	r2, r3, #1
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	601a      	str	r2, [r3, #0]
}
 800d1b2:	bf00      	nop
 800d1b4:	3714      	adds	r7, #20
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr

0800d1be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d1be:	b480      	push	{r7}
 800d1c0:	b085      	sub	sp, #20
 800d1c2:	af00      	add	r7, sp, #0
 800d1c4:	6078      	str	r0, [r7, #4]
 800d1c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1d4:	d103      	bne.n	800d1de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	691b      	ldr	r3, [r3, #16]
 800d1da:	60fb      	str	r3, [r7, #12]
 800d1dc:	e00c      	b.n	800d1f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	3308      	adds	r3, #8
 800d1e2:	60fb      	str	r3, [r7, #12]
 800d1e4:	e002      	b.n	800d1ec <vListInsert+0x2e>
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	60fb      	str	r3, [r7, #12]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	68ba      	ldr	r2, [r7, #8]
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d2f6      	bcs.n	800d1e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	685a      	ldr	r2, [r3, #4]
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	683a      	ldr	r2, [r7, #0]
 800d206:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	68fa      	ldr	r2, [r7, #12]
 800d20c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	683a      	ldr	r2, [r7, #0]
 800d212:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	1c5a      	adds	r2, r3, #1
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	601a      	str	r2, [r3, #0]
}
 800d224:	bf00      	nop
 800d226:	3714      	adds	r7, #20
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d230:	b480      	push	{r7}
 800d232:	b085      	sub	sp, #20
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	691b      	ldr	r3, [r3, #16]
 800d23c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	6892      	ldr	r2, [r2, #8]
 800d246:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	689b      	ldr	r3, [r3, #8]
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	6852      	ldr	r2, [r2, #4]
 800d250:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	687a      	ldr	r2, [r7, #4]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d103      	bne.n	800d264 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	689a      	ldr	r2, [r3, #8]
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2200      	movs	r2, #0
 800d268:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	1e5a      	subs	r2, r3, #1
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3714      	adds	r7, #20
 800d27c:	46bd      	mov	sp, r7
 800d27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d282:	4770      	bx	lr

0800d284 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d10c      	bne.n	800d2b2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d29c:	b672      	cpsid	i
 800d29e:	f383 8811 	msr	BASEPRI, r3
 800d2a2:	f3bf 8f6f 	isb	sy
 800d2a6:	f3bf 8f4f 	dsb	sy
 800d2aa:	b662      	cpsie	i
 800d2ac:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d2ae:	bf00      	nop
 800d2b0:	e7fe      	b.n	800d2b0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800d2b2:	f002 fdc3 	bl	800fe3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2be:	68f9      	ldr	r1, [r7, #12]
 800d2c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d2c2:	fb01 f303 	mul.w	r3, r1, r3
 800d2c6:	441a      	add	r2, r3
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2e2:	3b01      	subs	r3, #1
 800d2e4:	68f9      	ldr	r1, [r7, #12]
 800d2e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d2e8:	fb01 f303 	mul.w	r3, r1, r3
 800d2ec:	441a      	add	r2, r3
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	22ff      	movs	r2, #255	; 0xff
 800d2f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	22ff      	movs	r2, #255	; 0xff
 800d2fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d114      	bne.n	800d332 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	691b      	ldr	r3, [r3, #16]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d01a      	beq.n	800d346 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	3310      	adds	r3, #16
 800d314:	4618      	mov	r0, r3
 800d316:	f001 fd55 	bl	800edc4 <xTaskRemoveFromEventList>
 800d31a:	4603      	mov	r3, r0
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d012      	beq.n	800d346 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d320:	4b0c      	ldr	r3, [pc, #48]	; (800d354 <xQueueGenericReset+0xd0>)
 800d322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d326:	601a      	str	r2, [r3, #0]
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	f3bf 8f6f 	isb	sy
 800d330:	e009      	b.n	800d346 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	3310      	adds	r3, #16
 800d336:	4618      	mov	r0, r3
 800d338:	f7ff fef0 	bl	800d11c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	3324      	adds	r3, #36	; 0x24
 800d340:	4618      	mov	r0, r3
 800d342:	f7ff feeb 	bl	800d11c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d346:	f002 fdad 	bl	800fea4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d34a:	2301      	movs	r3, #1
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3710      	adds	r7, #16
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	e000ed04 	.word	0xe000ed04

0800d358 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b08e      	sub	sp, #56	; 0x38
 800d35c:	af02      	add	r7, sp, #8
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
 800d364:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d10c      	bne.n	800d386 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800d36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d370:	b672      	cpsid	i
 800d372:	f383 8811 	msr	BASEPRI, r3
 800d376:	f3bf 8f6f 	isb	sy
 800d37a:	f3bf 8f4f 	dsb	sy
 800d37e:	b662      	cpsie	i
 800d380:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d382:	bf00      	nop
 800d384:	e7fe      	b.n	800d384 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d10c      	bne.n	800d3a6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800d38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d390:	b672      	cpsid	i
 800d392:	f383 8811 	msr	BASEPRI, r3
 800d396:	f3bf 8f6f 	isb	sy
 800d39a:	f3bf 8f4f 	dsb	sy
 800d39e:	b662      	cpsie	i
 800d3a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d3a2:	bf00      	nop
 800d3a4:	e7fe      	b.n	800d3a4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d002      	beq.n	800d3b2 <xQueueGenericCreateStatic+0x5a>
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d001      	beq.n	800d3b6 <xQueueGenericCreateStatic+0x5e>
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	e000      	b.n	800d3b8 <xQueueGenericCreateStatic+0x60>
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d10c      	bne.n	800d3d6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800d3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c0:	b672      	cpsid	i
 800d3c2:	f383 8811 	msr	BASEPRI, r3
 800d3c6:	f3bf 8f6f 	isb	sy
 800d3ca:	f3bf 8f4f 	dsb	sy
 800d3ce:	b662      	cpsie	i
 800d3d0:	623b      	str	r3, [r7, #32]
}
 800d3d2:	bf00      	nop
 800d3d4:	e7fe      	b.n	800d3d4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d102      	bne.n	800d3e2 <xQueueGenericCreateStatic+0x8a>
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d101      	bne.n	800d3e6 <xQueueGenericCreateStatic+0x8e>
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	e000      	b.n	800d3e8 <xQueueGenericCreateStatic+0x90>
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d10c      	bne.n	800d406 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800d3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f0:	b672      	cpsid	i
 800d3f2:	f383 8811 	msr	BASEPRI, r3
 800d3f6:	f3bf 8f6f 	isb	sy
 800d3fa:	f3bf 8f4f 	dsb	sy
 800d3fe:	b662      	cpsie	i
 800d400:	61fb      	str	r3, [r7, #28]
}
 800d402:	bf00      	nop
 800d404:	e7fe      	b.n	800d404 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d406:	2350      	movs	r3, #80	; 0x50
 800d408:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	2b50      	cmp	r3, #80	; 0x50
 800d40e:	d00c      	beq.n	800d42a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800d410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d414:	b672      	cpsid	i
 800d416:	f383 8811 	msr	BASEPRI, r3
 800d41a:	f3bf 8f6f 	isb	sy
 800d41e:	f3bf 8f4f 	dsb	sy
 800d422:	b662      	cpsie	i
 800d424:	61bb      	str	r3, [r7, #24]
}
 800d426:	bf00      	nop
 800d428:	e7fe      	b.n	800d428 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d42a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d432:	2b00      	cmp	r3, #0
 800d434:	d00d      	beq.n	800d452 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d438:	2201      	movs	r2, #1
 800d43a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d43e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d444:	9300      	str	r3, [sp, #0]
 800d446:	4613      	mov	r3, r2
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	68b9      	ldr	r1, [r7, #8]
 800d44c:	68f8      	ldr	r0, [r7, #12]
 800d44e:	f000 f847 	bl	800d4e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d454:	4618      	mov	r0, r3
 800d456:	3730      	adds	r7, #48	; 0x30
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b08a      	sub	sp, #40	; 0x28
 800d460:	af02      	add	r7, sp, #8
 800d462:	60f8      	str	r0, [r7, #12]
 800d464:	60b9      	str	r1, [r7, #8]
 800d466:	4613      	mov	r3, r2
 800d468:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d10c      	bne.n	800d48a <xQueueGenericCreate+0x2e>
	__asm volatile
 800d470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d474:	b672      	cpsid	i
 800d476:	f383 8811 	msr	BASEPRI, r3
 800d47a:	f3bf 8f6f 	isb	sy
 800d47e:	f3bf 8f4f 	dsb	sy
 800d482:	b662      	cpsie	i
 800d484:	613b      	str	r3, [r7, #16]
}
 800d486:	bf00      	nop
 800d488:	e7fe      	b.n	800d488 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d102      	bne.n	800d496 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d490:	2300      	movs	r3, #0
 800d492:	61fb      	str	r3, [r7, #28]
 800d494:	e004      	b.n	800d4a0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	68ba      	ldr	r2, [r7, #8]
 800d49a:	fb02 f303 	mul.w	r3, r2, r3
 800d49e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	3350      	adds	r3, #80	; 0x50
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f002 fdf5 	bl	8010094 <pvPortMalloc>
 800d4aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d4ac:	69bb      	ldr	r3, [r7, #24]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d011      	beq.n	800d4d6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	3350      	adds	r3, #80	; 0x50
 800d4ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d4bc:	69bb      	ldr	r3, [r7, #24]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d4c4:	79fa      	ldrb	r2, [r7, #7]
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	9300      	str	r3, [sp, #0]
 800d4ca:	4613      	mov	r3, r2
 800d4cc:	697a      	ldr	r2, [r7, #20]
 800d4ce:	68b9      	ldr	r1, [r7, #8]
 800d4d0:	68f8      	ldr	r0, [r7, #12]
 800d4d2:	f000 f805 	bl	800d4e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d4d6:	69bb      	ldr	r3, [r7, #24]
	}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3720      	adds	r7, #32
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	607a      	str	r2, [r7, #4]
 800d4ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d103      	bne.n	800d4fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d4f4:	69bb      	ldr	r3, [r7, #24]
 800d4f6:	69ba      	ldr	r2, [r7, #24]
 800d4f8:	601a      	str	r2, [r3, #0]
 800d4fa:	e002      	b.n	800d502 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d4fc:	69bb      	ldr	r3, [r7, #24]
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	68fa      	ldr	r2, [r7, #12]
 800d506:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d508:	69bb      	ldr	r3, [r7, #24]
 800d50a:	68ba      	ldr	r2, [r7, #8]
 800d50c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d50e:	2101      	movs	r1, #1
 800d510:	69b8      	ldr	r0, [r7, #24]
 800d512:	f7ff feb7 	bl	800d284 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d516:	69bb      	ldr	r3, [r7, #24]
 800d518:	78fa      	ldrb	r2, [r7, #3]
 800d51a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d51e:	bf00      	nop
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d526:	b580      	push	{r7, lr}
 800d528:	b082      	sub	sp, #8
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d00e      	beq.n	800d552 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2200      	movs	r2, #0
 800d544:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d546:	2300      	movs	r3, #0
 800d548:	2200      	movs	r2, #0
 800d54a:	2100      	movs	r1, #0
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 f917 	bl	800d780 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d552:	bf00      	nop
 800d554:	3708      	adds	r7, #8
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}

0800d55a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d55a:	b580      	push	{r7, lr}
 800d55c:	b086      	sub	sp, #24
 800d55e:	af00      	add	r7, sp, #0
 800d560:	4603      	mov	r3, r0
 800d562:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d564:	2301      	movs	r3, #1
 800d566:	617b      	str	r3, [r7, #20]
 800d568:	2300      	movs	r3, #0
 800d56a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d56c:	79fb      	ldrb	r3, [r7, #7]
 800d56e:	461a      	mov	r2, r3
 800d570:	6939      	ldr	r1, [r7, #16]
 800d572:	6978      	ldr	r0, [r7, #20]
 800d574:	f7ff ff72 	bl	800d45c <xQueueGenericCreate>
 800d578:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d57a:	68f8      	ldr	r0, [r7, #12]
 800d57c:	f7ff ffd3 	bl	800d526 <prvInitialiseMutex>

		return xNewQueue;
 800d580:	68fb      	ldr	r3, [r7, #12]
	}
 800d582:	4618      	mov	r0, r3
 800d584:	3718      	adds	r7, #24
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}

0800d58a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b088      	sub	sp, #32
 800d58e:	af02      	add	r7, sp, #8
 800d590:	4603      	mov	r3, r0
 800d592:	6039      	str	r1, [r7, #0]
 800d594:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d596:	2301      	movs	r3, #1
 800d598:	617b      	str	r3, [r7, #20]
 800d59a:	2300      	movs	r3, #0
 800d59c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d59e:	79fb      	ldrb	r3, [r7, #7]
 800d5a0:	9300      	str	r3, [sp, #0]
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	6939      	ldr	r1, [r7, #16]
 800d5a8:	6978      	ldr	r0, [r7, #20]
 800d5aa:	f7ff fed5 	bl	800d358 <xQueueGenericCreateStatic>
 800d5ae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d5b0:	68f8      	ldr	r0, [r7, #12]
 800d5b2:	f7ff ffb8 	bl	800d526 <prvInitialiseMutex>

		return xNewQueue;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
	}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3718      	adds	r7, #24
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d5c0:	b590      	push	{r4, r7, lr}
 800d5c2:	b087      	sub	sp, #28
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d10c      	bne.n	800d5ec <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800d5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d6:	b672      	cpsid	i
 800d5d8:	f383 8811 	msr	BASEPRI, r3
 800d5dc:	f3bf 8f6f 	isb	sy
 800d5e0:	f3bf 8f4f 	dsb	sy
 800d5e4:	b662      	cpsie	i
 800d5e6:	60fb      	str	r3, [r7, #12]
}
 800d5e8:	bf00      	nop
 800d5ea:	e7fe      	b.n	800d5ea <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	689c      	ldr	r4, [r3, #8]
 800d5f0:	f001 fdbe 	bl	800f170 <xTaskGetCurrentTaskHandle>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	429c      	cmp	r4, r3
 800d5f8:	d111      	bne.n	800d61e <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	1e5a      	subs	r2, r3, #1
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	68db      	ldr	r3, [r3, #12]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d105      	bne.n	800d618 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d60c:	2300      	movs	r3, #0
 800d60e:	2200      	movs	r2, #0
 800d610:	2100      	movs	r1, #0
 800d612:	6938      	ldr	r0, [r7, #16]
 800d614:	f000 f8b4 	bl	800d780 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d618:	2301      	movs	r3, #1
 800d61a:	617b      	str	r3, [r7, #20]
 800d61c:	e001      	b.n	800d622 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d61e:	2300      	movs	r3, #0
 800d620:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d622:	697b      	ldr	r3, [r7, #20]
	}
 800d624:	4618      	mov	r0, r3
 800d626:	371c      	adds	r7, #28
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd90      	pop	{r4, r7, pc}

0800d62c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d62c:	b590      	push	{r4, r7, lr}
 800d62e:	b087      	sub	sp, #28
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d10c      	bne.n	800d65a <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800d640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d644:	b672      	cpsid	i
 800d646:	f383 8811 	msr	BASEPRI, r3
 800d64a:	f3bf 8f6f 	isb	sy
 800d64e:	f3bf 8f4f 	dsb	sy
 800d652:	b662      	cpsie	i
 800d654:	60fb      	str	r3, [r7, #12]
}
 800d656:	bf00      	nop
 800d658:	e7fe      	b.n	800d658 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	689c      	ldr	r4, [r3, #8]
 800d65e:	f001 fd87 	bl	800f170 <xTaskGetCurrentTaskHandle>
 800d662:	4603      	mov	r3, r0
 800d664:	429c      	cmp	r4, r3
 800d666:	d107      	bne.n	800d678 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	1c5a      	adds	r2, r3, #1
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d672:	2301      	movs	r3, #1
 800d674:	617b      	str	r3, [r7, #20]
 800d676:	e00c      	b.n	800d692 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d678:	6839      	ldr	r1, [r7, #0]
 800d67a:	6938      	ldr	r0, [r7, #16]
 800d67c:	f000 fba2 	bl	800ddc4 <xQueueSemaphoreTake>
 800d680:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d004      	beq.n	800d692 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	68db      	ldr	r3, [r3, #12]
 800d68c:	1c5a      	adds	r2, r3, #1
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d692:	697b      	ldr	r3, [r7, #20]
	}
 800d694:	4618      	mov	r0, r3
 800d696:	371c      	adds	r7, #28
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd90      	pop	{r4, r7, pc}

0800d69c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b08a      	sub	sp, #40	; 0x28
 800d6a0:	af02      	add	r7, sp, #8
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	60b9      	str	r1, [r7, #8]
 800d6a6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d10c      	bne.n	800d6c8 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800d6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b2:	b672      	cpsid	i
 800d6b4:	f383 8811 	msr	BASEPRI, r3
 800d6b8:	f3bf 8f6f 	isb	sy
 800d6bc:	f3bf 8f4f 	dsb	sy
 800d6c0:	b662      	cpsie	i
 800d6c2:	61bb      	str	r3, [r7, #24]
}
 800d6c4:	bf00      	nop
 800d6c6:	e7fe      	b.n	800d6c6 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d6c8:	68ba      	ldr	r2, [r7, #8]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d90c      	bls.n	800d6ea <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800d6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d4:	b672      	cpsid	i
 800d6d6:	f383 8811 	msr	BASEPRI, r3
 800d6da:	f3bf 8f6f 	isb	sy
 800d6de:	f3bf 8f4f 	dsb	sy
 800d6e2:	b662      	cpsie	i
 800d6e4:	617b      	str	r3, [r7, #20]
}
 800d6e6:	bf00      	nop
 800d6e8:	e7fe      	b.n	800d6e8 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d6ea:	2302      	movs	r3, #2
 800d6ec:	9300      	str	r3, [sp, #0]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	2100      	movs	r1, #0
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	f7ff fe2f 	bl	800d358 <xQueueGenericCreateStatic>
 800d6fa:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d002      	beq.n	800d708 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d702:	69fb      	ldr	r3, [r7, #28]
 800d704:	68ba      	ldr	r2, [r7, #8]
 800d706:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d708:	69fb      	ldr	r3, [r7, #28]
	}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3720      	adds	r7, #32
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}

0800d712 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d712:	b580      	push	{r7, lr}
 800d714:	b086      	sub	sp, #24
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]
 800d71a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d10c      	bne.n	800d73c <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800d722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d726:	b672      	cpsid	i
 800d728:	f383 8811 	msr	BASEPRI, r3
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	b662      	cpsie	i
 800d736:	613b      	str	r3, [r7, #16]
}
 800d738:	bf00      	nop
 800d73a:	e7fe      	b.n	800d73a <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d73c:	683a      	ldr	r2, [r7, #0]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	429a      	cmp	r2, r3
 800d742:	d90c      	bls.n	800d75e <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800d744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d748:	b672      	cpsid	i
 800d74a:	f383 8811 	msr	BASEPRI, r3
 800d74e:	f3bf 8f6f 	isb	sy
 800d752:	f3bf 8f4f 	dsb	sy
 800d756:	b662      	cpsie	i
 800d758:	60fb      	str	r3, [r7, #12]
}
 800d75a:	bf00      	nop
 800d75c:	e7fe      	b.n	800d75c <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d75e:	2202      	movs	r2, #2
 800d760:	2100      	movs	r1, #0
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f7ff fe7a 	bl	800d45c <xQueueGenericCreate>
 800d768:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d002      	beq.n	800d776 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	683a      	ldr	r2, [r7, #0]
 800d774:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d776:	697b      	ldr	r3, [r7, #20]
	}
 800d778:	4618      	mov	r0, r3
 800d77a:	3718      	adds	r7, #24
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b08e      	sub	sp, #56	; 0x38
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	607a      	str	r2, [r7, #4]
 800d78c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d78e:	2300      	movs	r3, #0
 800d790:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d10c      	bne.n	800d7b6 <xQueueGenericSend+0x36>
	__asm volatile
 800d79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a0:	b672      	cpsid	i
 800d7a2:	f383 8811 	msr	BASEPRI, r3
 800d7a6:	f3bf 8f6f 	isb	sy
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	b662      	cpsie	i
 800d7b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d7b2:	bf00      	nop
 800d7b4:	e7fe      	b.n	800d7b4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d103      	bne.n	800d7c4 <xQueueGenericSend+0x44>
 800d7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d101      	bne.n	800d7c8 <xQueueGenericSend+0x48>
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	e000      	b.n	800d7ca <xQueueGenericSend+0x4a>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d10c      	bne.n	800d7e8 <xQueueGenericSend+0x68>
	__asm volatile
 800d7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d2:	b672      	cpsid	i
 800d7d4:	f383 8811 	msr	BASEPRI, r3
 800d7d8:	f3bf 8f6f 	isb	sy
 800d7dc:	f3bf 8f4f 	dsb	sy
 800d7e0:	b662      	cpsie	i
 800d7e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d7e4:	bf00      	nop
 800d7e6:	e7fe      	b.n	800d7e6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	2b02      	cmp	r3, #2
 800d7ec:	d103      	bne.n	800d7f6 <xQueueGenericSend+0x76>
 800d7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d101      	bne.n	800d7fa <xQueueGenericSend+0x7a>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	e000      	b.n	800d7fc <xQueueGenericSend+0x7c>
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d10c      	bne.n	800d81a <xQueueGenericSend+0x9a>
	__asm volatile
 800d800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d804:	b672      	cpsid	i
 800d806:	f383 8811 	msr	BASEPRI, r3
 800d80a:	f3bf 8f6f 	isb	sy
 800d80e:	f3bf 8f4f 	dsb	sy
 800d812:	b662      	cpsie	i
 800d814:	623b      	str	r3, [r7, #32]
}
 800d816:	bf00      	nop
 800d818:	e7fe      	b.n	800d818 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d81a:	f001 fcb9 	bl	800f190 <xTaskGetSchedulerState>
 800d81e:	4603      	mov	r3, r0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d102      	bne.n	800d82a <xQueueGenericSend+0xaa>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d101      	bne.n	800d82e <xQueueGenericSend+0xae>
 800d82a:	2301      	movs	r3, #1
 800d82c:	e000      	b.n	800d830 <xQueueGenericSend+0xb0>
 800d82e:	2300      	movs	r3, #0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d10c      	bne.n	800d84e <xQueueGenericSend+0xce>
	__asm volatile
 800d834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d838:	b672      	cpsid	i
 800d83a:	f383 8811 	msr	BASEPRI, r3
 800d83e:	f3bf 8f6f 	isb	sy
 800d842:	f3bf 8f4f 	dsb	sy
 800d846:	b662      	cpsie	i
 800d848:	61fb      	str	r3, [r7, #28]
}
 800d84a:	bf00      	nop
 800d84c:	e7fe      	b.n	800d84c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d84e:	f002 faf5 	bl	800fe3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d302      	bcc.n	800d864 <xQueueGenericSend+0xe4>
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	2b02      	cmp	r3, #2
 800d862:	d129      	bne.n	800d8b8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d864:	683a      	ldr	r2, [r7, #0]
 800d866:	68b9      	ldr	r1, [r7, #8]
 800d868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d86a:	f000 fc82 	bl	800e172 <prvCopyDataToQueue>
 800d86e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d874:	2b00      	cmp	r3, #0
 800d876:	d010      	beq.n	800d89a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87a:	3324      	adds	r3, #36	; 0x24
 800d87c:	4618      	mov	r0, r3
 800d87e:	f001 faa1 	bl	800edc4 <xTaskRemoveFromEventList>
 800d882:	4603      	mov	r3, r0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d013      	beq.n	800d8b0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d888:	4b3f      	ldr	r3, [pc, #252]	; (800d988 <xQueueGenericSend+0x208>)
 800d88a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d88e:	601a      	str	r2, [r3, #0]
 800d890:	f3bf 8f4f 	dsb	sy
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	e00a      	b.n	800d8b0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d007      	beq.n	800d8b0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d8a0:	4b39      	ldr	r3, [pc, #228]	; (800d988 <xQueueGenericSend+0x208>)
 800d8a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8a6:	601a      	str	r2, [r3, #0]
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d8b0:	f002 faf8 	bl	800fea4 <vPortExitCritical>
				return pdPASS;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e063      	b.n	800d980 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d103      	bne.n	800d8c6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d8be:	f002 faf1 	bl	800fea4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	e05c      	b.n	800d980 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d106      	bne.n	800d8da <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d8cc:	f107 0314 	add.w	r3, r7, #20
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f001 fadd 	bl	800ee90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d8da:	f002 fae3 	bl	800fea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d8de:	f001 f831 	bl	800e944 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d8e2:	f002 faab 	bl	800fe3c <vPortEnterCritical>
 800d8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8ec:	b25b      	sxtb	r3, r3
 800d8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f2:	d103      	bne.n	800d8fc <xQueueGenericSend+0x17c>
 800d8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d902:	b25b      	sxtb	r3, r3
 800d904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d908:	d103      	bne.n	800d912 <xQueueGenericSend+0x192>
 800d90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d90c:	2200      	movs	r2, #0
 800d90e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d912:	f002 fac7 	bl	800fea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d916:	1d3a      	adds	r2, r7, #4
 800d918:	f107 0314 	add.w	r3, r7, #20
 800d91c:	4611      	mov	r1, r2
 800d91e:	4618      	mov	r0, r3
 800d920:	f001 facc 	bl	800eebc <xTaskCheckForTimeOut>
 800d924:	4603      	mov	r3, r0
 800d926:	2b00      	cmp	r3, #0
 800d928:	d124      	bne.n	800d974 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d92a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d92c:	f000 fd19 	bl	800e362 <prvIsQueueFull>
 800d930:	4603      	mov	r3, r0
 800d932:	2b00      	cmp	r3, #0
 800d934:	d018      	beq.n	800d968 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d938:	3310      	adds	r3, #16
 800d93a:	687a      	ldr	r2, [r7, #4]
 800d93c:	4611      	mov	r1, r2
 800d93e:	4618      	mov	r0, r3
 800d940:	f001 f9ec 	bl	800ed1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d946:	f000 fca4 	bl	800e292 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d94a:	f001 f809 	bl	800e960 <xTaskResumeAll>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	f47f af7c 	bne.w	800d84e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d956:	4b0c      	ldr	r3, [pc, #48]	; (800d988 <xQueueGenericSend+0x208>)
 800d958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d95c:	601a      	str	r2, [r3, #0]
 800d95e:	f3bf 8f4f 	dsb	sy
 800d962:	f3bf 8f6f 	isb	sy
 800d966:	e772      	b.n	800d84e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d96a:	f000 fc92 	bl	800e292 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d96e:	f000 fff7 	bl	800e960 <xTaskResumeAll>
 800d972:	e76c      	b.n	800d84e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d976:	f000 fc8c 	bl	800e292 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d97a:	f000 fff1 	bl	800e960 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d97e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d980:	4618      	mov	r0, r3
 800d982:	3738      	adds	r7, #56	; 0x38
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	e000ed04 	.word	0xe000ed04

0800d98c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b08e      	sub	sp, #56	; 0x38
 800d990:	af00      	add	r7, sp, #0
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	607a      	str	r2, [r7, #4]
 800d998:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d10c      	bne.n	800d9be <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800d9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a8:	b672      	cpsid	i
 800d9aa:	f383 8811 	msr	BASEPRI, r3
 800d9ae:	f3bf 8f6f 	isb	sy
 800d9b2:	f3bf 8f4f 	dsb	sy
 800d9b6:	b662      	cpsie	i
 800d9b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d9ba:	bf00      	nop
 800d9bc:	e7fe      	b.n	800d9bc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d103      	bne.n	800d9cc <xQueueGenericSendFromISR+0x40>
 800d9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d101      	bne.n	800d9d0 <xQueueGenericSendFromISR+0x44>
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	e000      	b.n	800d9d2 <xQueueGenericSendFromISR+0x46>
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d10c      	bne.n	800d9f0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800d9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9da:	b672      	cpsid	i
 800d9dc:	f383 8811 	msr	BASEPRI, r3
 800d9e0:	f3bf 8f6f 	isb	sy
 800d9e4:	f3bf 8f4f 	dsb	sy
 800d9e8:	b662      	cpsie	i
 800d9ea:	623b      	str	r3, [r7, #32]
}
 800d9ec:	bf00      	nop
 800d9ee:	e7fe      	b.n	800d9ee <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	2b02      	cmp	r3, #2
 800d9f4:	d103      	bne.n	800d9fe <xQueueGenericSendFromISR+0x72>
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d101      	bne.n	800da02 <xQueueGenericSendFromISR+0x76>
 800d9fe:	2301      	movs	r3, #1
 800da00:	e000      	b.n	800da04 <xQueueGenericSendFromISR+0x78>
 800da02:	2300      	movs	r3, #0
 800da04:	2b00      	cmp	r3, #0
 800da06:	d10c      	bne.n	800da22 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800da08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0c:	b672      	cpsid	i
 800da0e:	f383 8811 	msr	BASEPRI, r3
 800da12:	f3bf 8f6f 	isb	sy
 800da16:	f3bf 8f4f 	dsb	sy
 800da1a:	b662      	cpsie	i
 800da1c:	61fb      	str	r3, [r7, #28]
}
 800da1e:	bf00      	nop
 800da20:	e7fe      	b.n	800da20 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da22:	f002 faf3 	bl	801000c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800da26:	f3ef 8211 	mrs	r2, BASEPRI
 800da2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da2e:	b672      	cpsid	i
 800da30:	f383 8811 	msr	BASEPRI, r3
 800da34:	f3bf 8f6f 	isb	sy
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	b662      	cpsie	i
 800da3e:	61ba      	str	r2, [r7, #24]
 800da40:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800da42:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800da46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da4e:	429a      	cmp	r2, r3
 800da50:	d302      	bcc.n	800da58 <xQueueGenericSendFromISR+0xcc>
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	2b02      	cmp	r3, #2
 800da56:	d12c      	bne.n	800dab2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800da58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800da62:	683a      	ldr	r2, [r7, #0]
 800da64:	68b9      	ldr	r1, [r7, #8]
 800da66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da68:	f000 fb83 	bl	800e172 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800da6c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800da70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da74:	d112      	bne.n	800da9c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d016      	beq.n	800daac <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da80:	3324      	adds	r3, #36	; 0x24
 800da82:	4618      	mov	r0, r3
 800da84:	f001 f99e 	bl	800edc4 <xTaskRemoveFromEventList>
 800da88:	4603      	mov	r3, r0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d00e      	beq.n	800daac <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d00b      	beq.n	800daac <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2201      	movs	r2, #1
 800da98:	601a      	str	r2, [r3, #0]
 800da9a:	e007      	b.n	800daac <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800da9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800daa0:	3301      	adds	r3, #1
 800daa2:	b2db      	uxtb	r3, r3
 800daa4:	b25a      	sxtb	r2, r3
 800daa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800daac:	2301      	movs	r3, #1
 800daae:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800dab0:	e001      	b.n	800dab6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dab2:	2300      	movs	r3, #0
 800dab4:	637b      	str	r3, [r7, #52]	; 0x34
 800dab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dac0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3738      	adds	r7, #56	; 0x38
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b08e      	sub	sp, #56	; 0x38
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800dada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d10c      	bne.n	800dafa <xQueueGiveFromISR+0x2e>
	__asm volatile
 800dae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae4:	b672      	cpsid	i
 800dae6:	f383 8811 	msr	BASEPRI, r3
 800daea:	f3bf 8f6f 	isb	sy
 800daee:	f3bf 8f4f 	dsb	sy
 800daf2:	b662      	cpsie	i
 800daf4:	623b      	str	r3, [r7, #32]
}
 800daf6:	bf00      	nop
 800daf8:	e7fe      	b.n	800daf8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d00c      	beq.n	800db1c <xQueueGiveFromISR+0x50>
	__asm volatile
 800db02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db06:	b672      	cpsid	i
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	b662      	cpsie	i
 800db16:	61fb      	str	r3, [r7, #28]
}
 800db18:	bf00      	nop
 800db1a:	e7fe      	b.n	800db1a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800db1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d103      	bne.n	800db2c <xQueueGiveFromISR+0x60>
 800db24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db26:	689b      	ldr	r3, [r3, #8]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d101      	bne.n	800db30 <xQueueGiveFromISR+0x64>
 800db2c:	2301      	movs	r3, #1
 800db2e:	e000      	b.n	800db32 <xQueueGiveFromISR+0x66>
 800db30:	2300      	movs	r3, #0
 800db32:	2b00      	cmp	r3, #0
 800db34:	d10c      	bne.n	800db50 <xQueueGiveFromISR+0x84>
	__asm volatile
 800db36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3a:	b672      	cpsid	i
 800db3c:	f383 8811 	msr	BASEPRI, r3
 800db40:	f3bf 8f6f 	isb	sy
 800db44:	f3bf 8f4f 	dsb	sy
 800db48:	b662      	cpsie	i
 800db4a:	61bb      	str	r3, [r7, #24]
}
 800db4c:	bf00      	nop
 800db4e:	e7fe      	b.n	800db4e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db50:	f002 fa5c 	bl	801000c <vPortValidateInterruptPriority>
	__asm volatile
 800db54:	f3ef 8211 	mrs	r2, BASEPRI
 800db58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db5c:	b672      	cpsid	i
 800db5e:	f383 8811 	msr	BASEPRI, r3
 800db62:	f3bf 8f6f 	isb	sy
 800db66:	f3bf 8f4f 	dsb	sy
 800db6a:	b662      	cpsie	i
 800db6c:	617a      	str	r2, [r7, #20]
 800db6e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800db70:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db78:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800db7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db80:	429a      	cmp	r2, r3
 800db82:	d22b      	bcs.n	800dbdc <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800db84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db90:	1c5a      	adds	r2, r3, #1
 800db92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db94:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800db96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db9e:	d112      	bne.n	800dbc6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d016      	beq.n	800dbd6 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbaa:	3324      	adds	r3, #36	; 0x24
 800dbac:	4618      	mov	r0, r3
 800dbae:	f001 f909 	bl	800edc4 <xTaskRemoveFromEventList>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d00e      	beq.n	800dbd6 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00b      	beq.n	800dbd6 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	601a      	str	r2, [r3, #0]
 800dbc4:	e007      	b.n	800dbd6 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dbc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbca:	3301      	adds	r3, #1
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	b25a      	sxtb	r2, r3
 800dbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	637b      	str	r3, [r7, #52]	; 0x34
 800dbda:	e001      	b.n	800dbe0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	637b      	str	r3, [r7, #52]	; 0x34
 800dbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f383 8811 	msr	BASEPRI, r3
}
 800dbea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3738      	adds	r7, #56	; 0x38
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
	...

0800dbf8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b08c      	sub	sp, #48	; 0x30
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	60f8      	str	r0, [r7, #12]
 800dc00:	60b9      	str	r1, [r7, #8]
 800dc02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dc04:	2300      	movs	r3, #0
 800dc06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d10c      	bne.n	800dc2c <xQueueReceive+0x34>
	__asm volatile
 800dc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc16:	b672      	cpsid	i
 800dc18:	f383 8811 	msr	BASEPRI, r3
 800dc1c:	f3bf 8f6f 	isb	sy
 800dc20:	f3bf 8f4f 	dsb	sy
 800dc24:	b662      	cpsie	i
 800dc26:	623b      	str	r3, [r7, #32]
}
 800dc28:	bf00      	nop
 800dc2a:	e7fe      	b.n	800dc2a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d103      	bne.n	800dc3a <xQueueReceive+0x42>
 800dc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d101      	bne.n	800dc3e <xQueueReceive+0x46>
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	e000      	b.n	800dc40 <xQueueReceive+0x48>
 800dc3e:	2300      	movs	r3, #0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d10c      	bne.n	800dc5e <xQueueReceive+0x66>
	__asm volatile
 800dc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc48:	b672      	cpsid	i
 800dc4a:	f383 8811 	msr	BASEPRI, r3
 800dc4e:	f3bf 8f6f 	isb	sy
 800dc52:	f3bf 8f4f 	dsb	sy
 800dc56:	b662      	cpsie	i
 800dc58:	61fb      	str	r3, [r7, #28]
}
 800dc5a:	bf00      	nop
 800dc5c:	e7fe      	b.n	800dc5c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc5e:	f001 fa97 	bl	800f190 <xTaskGetSchedulerState>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d102      	bne.n	800dc6e <xQueueReceive+0x76>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d101      	bne.n	800dc72 <xQueueReceive+0x7a>
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e000      	b.n	800dc74 <xQueueReceive+0x7c>
 800dc72:	2300      	movs	r3, #0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d10c      	bne.n	800dc92 <xQueueReceive+0x9a>
	__asm volatile
 800dc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc7c:	b672      	cpsid	i
 800dc7e:	f383 8811 	msr	BASEPRI, r3
 800dc82:	f3bf 8f6f 	isb	sy
 800dc86:	f3bf 8f4f 	dsb	sy
 800dc8a:	b662      	cpsie	i
 800dc8c:	61bb      	str	r3, [r7, #24]
}
 800dc8e:	bf00      	nop
 800dc90:	e7fe      	b.n	800dc90 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc92:	f002 f8d3 	bl	800fe3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d01f      	beq.n	800dce2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dca2:	68b9      	ldr	r1, [r7, #8]
 800dca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dca6:	f000 face 	bl	800e246 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcac:	1e5a      	subs	r2, r3, #1
 800dcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb4:	691b      	ldr	r3, [r3, #16]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d00f      	beq.n	800dcda <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbc:	3310      	adds	r3, #16
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f001 f880 	bl	800edc4 <xTaskRemoveFromEventList>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d007      	beq.n	800dcda <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dcca:	4b3d      	ldr	r3, [pc, #244]	; (800ddc0 <xQueueReceive+0x1c8>)
 800dccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcd0:	601a      	str	r2, [r3, #0]
 800dcd2:	f3bf 8f4f 	dsb	sy
 800dcd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dcda:	f002 f8e3 	bl	800fea4 <vPortExitCritical>
				return pdPASS;
 800dcde:	2301      	movs	r3, #1
 800dce0:	e069      	b.n	800ddb6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d103      	bne.n	800dcf0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dce8:	f002 f8dc 	bl	800fea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dcec:	2300      	movs	r3, #0
 800dcee:	e062      	b.n	800ddb6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d106      	bne.n	800dd04 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dcf6:	f107 0310 	add.w	r3, r7, #16
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f001 f8c8 	bl	800ee90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dd00:	2301      	movs	r3, #1
 800dd02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dd04:	f002 f8ce 	bl	800fea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dd08:	f000 fe1c 	bl	800e944 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd0c:	f002 f896 	bl	800fe3c <vPortEnterCritical>
 800dd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd16:	b25b      	sxtb	r3, r3
 800dd18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd1c:	d103      	bne.n	800dd26 <xQueueReceive+0x12e>
 800dd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd20:	2200      	movs	r2, #0
 800dd22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd2c:	b25b      	sxtb	r3, r3
 800dd2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd32:	d103      	bne.n	800dd3c <xQueueReceive+0x144>
 800dd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd36:	2200      	movs	r2, #0
 800dd38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd3c:	f002 f8b2 	bl	800fea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd40:	1d3a      	adds	r2, r7, #4
 800dd42:	f107 0310 	add.w	r3, r7, #16
 800dd46:	4611      	mov	r1, r2
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f001 f8b7 	bl	800eebc <xTaskCheckForTimeOut>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d123      	bne.n	800dd9c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd56:	f000 faee 	bl	800e336 <prvIsQueueEmpty>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d017      	beq.n	800dd90 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd62:	3324      	adds	r3, #36	; 0x24
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	4611      	mov	r1, r2
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f000 ffd7 	bl	800ed1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd70:	f000 fa8f 	bl	800e292 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd74:	f000 fdf4 	bl	800e960 <xTaskResumeAll>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d189      	bne.n	800dc92 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800dd7e:	4b10      	ldr	r3, [pc, #64]	; (800ddc0 <xQueueReceive+0x1c8>)
 800dd80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd84:	601a      	str	r2, [r3, #0]
 800dd86:	f3bf 8f4f 	dsb	sy
 800dd8a:	f3bf 8f6f 	isb	sy
 800dd8e:	e780      	b.n	800dc92 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dd90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd92:	f000 fa7e 	bl	800e292 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd96:	f000 fde3 	bl	800e960 <xTaskResumeAll>
 800dd9a:	e77a      	b.n	800dc92 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dd9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd9e:	f000 fa78 	bl	800e292 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dda2:	f000 fddd 	bl	800e960 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dda6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dda8:	f000 fac5 	bl	800e336 <prvIsQueueEmpty>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	f43f af6f 	beq.w	800dc92 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ddb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3730      	adds	r7, #48	; 0x30
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	e000ed04 	.word	0xe000ed04

0800ddc4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b08e      	sub	sp, #56	; 0x38
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ddda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d10c      	bne.n	800ddfa <xQueueSemaphoreTake+0x36>
	__asm volatile
 800dde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde4:	b672      	cpsid	i
 800dde6:	f383 8811 	msr	BASEPRI, r3
 800ddea:	f3bf 8f6f 	isb	sy
 800ddee:	f3bf 8f4f 	dsb	sy
 800ddf2:	b662      	cpsie	i
 800ddf4:	623b      	str	r3, [r7, #32]
}
 800ddf6:	bf00      	nop
 800ddf8:	e7fe      	b.n	800ddf8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ddfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d00c      	beq.n	800de1c <xQueueSemaphoreTake+0x58>
	__asm volatile
 800de02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de06:	b672      	cpsid	i
 800de08:	f383 8811 	msr	BASEPRI, r3
 800de0c:	f3bf 8f6f 	isb	sy
 800de10:	f3bf 8f4f 	dsb	sy
 800de14:	b662      	cpsie	i
 800de16:	61fb      	str	r3, [r7, #28]
}
 800de18:	bf00      	nop
 800de1a:	e7fe      	b.n	800de1a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de1c:	f001 f9b8 	bl	800f190 <xTaskGetSchedulerState>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d102      	bne.n	800de2c <xQueueSemaphoreTake+0x68>
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d101      	bne.n	800de30 <xQueueSemaphoreTake+0x6c>
 800de2c:	2301      	movs	r3, #1
 800de2e:	e000      	b.n	800de32 <xQueueSemaphoreTake+0x6e>
 800de30:	2300      	movs	r3, #0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d10c      	bne.n	800de50 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800de36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de3a:	b672      	cpsid	i
 800de3c:	f383 8811 	msr	BASEPRI, r3
 800de40:	f3bf 8f6f 	isb	sy
 800de44:	f3bf 8f4f 	dsb	sy
 800de48:	b662      	cpsie	i
 800de4a:	61bb      	str	r3, [r7, #24]
}
 800de4c:	bf00      	nop
 800de4e:	e7fe      	b.n	800de4e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de50:	f001 fff4 	bl	800fe3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800de54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de58:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800de5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d024      	beq.n	800deaa <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800de60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de62:	1e5a      	subs	r2, r3, #1
 800de64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de66:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d104      	bne.n	800de7a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800de70:	f001 fb0c 	bl	800f48c <pvTaskIncrementMutexHeldCount>
 800de74:	4602      	mov	r2, r0
 800de76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de78:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7c:	691b      	ldr	r3, [r3, #16]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d00f      	beq.n	800dea2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de84:	3310      	adds	r3, #16
 800de86:	4618      	mov	r0, r3
 800de88:	f000 ff9c 	bl	800edc4 <xTaskRemoveFromEventList>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d007      	beq.n	800dea2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800de92:	4b55      	ldr	r3, [pc, #340]	; (800dfe8 <xQueueSemaphoreTake+0x224>)
 800de94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de98:	601a      	str	r2, [r3, #0]
 800de9a:	f3bf 8f4f 	dsb	sy
 800de9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dea2:	f001 ffff 	bl	800fea4 <vPortExitCritical>
				return pdPASS;
 800dea6:	2301      	movs	r3, #1
 800dea8:	e099      	b.n	800dfde <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d113      	bne.n	800ded8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800deb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d00c      	beq.n	800ded0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800deb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deba:	b672      	cpsid	i
 800debc:	f383 8811 	msr	BASEPRI, r3
 800dec0:	f3bf 8f6f 	isb	sy
 800dec4:	f3bf 8f4f 	dsb	sy
 800dec8:	b662      	cpsie	i
 800deca:	617b      	str	r3, [r7, #20]
}
 800decc:	bf00      	nop
 800dece:	e7fe      	b.n	800dece <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ded0:	f001 ffe8 	bl	800fea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ded4:	2300      	movs	r3, #0
 800ded6:	e082      	b.n	800dfde <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ded8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d106      	bne.n	800deec <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dede:	f107 030c 	add.w	r3, r7, #12
 800dee2:	4618      	mov	r0, r3
 800dee4:	f000 ffd4 	bl	800ee90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dee8:	2301      	movs	r3, #1
 800deea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800deec:	f001 ffda 	bl	800fea4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800def0:	f000 fd28 	bl	800e944 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800def4:	f001 ffa2 	bl	800fe3c <vPortEnterCritical>
 800def8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800defe:	b25b      	sxtb	r3, r3
 800df00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df04:	d103      	bne.n	800df0e <xQueueSemaphoreTake+0x14a>
 800df06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df08:	2200      	movs	r2, #0
 800df0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df14:	b25b      	sxtb	r3, r3
 800df16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df1a:	d103      	bne.n	800df24 <xQueueSemaphoreTake+0x160>
 800df1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1e:	2200      	movs	r2, #0
 800df20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df24:	f001 ffbe 	bl	800fea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df28:	463a      	mov	r2, r7
 800df2a:	f107 030c 	add.w	r3, r7, #12
 800df2e:	4611      	mov	r1, r2
 800df30:	4618      	mov	r0, r3
 800df32:	f000 ffc3 	bl	800eebc <xTaskCheckForTimeOut>
 800df36:	4603      	mov	r3, r0
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d132      	bne.n	800dfa2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df3e:	f000 f9fa 	bl	800e336 <prvIsQueueEmpty>
 800df42:	4603      	mov	r3, r0
 800df44:	2b00      	cmp	r3, #0
 800df46:	d026      	beq.n	800df96 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d109      	bne.n	800df64 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800df50:	f001 ff74 	bl	800fe3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800df54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df56:	689b      	ldr	r3, [r3, #8]
 800df58:	4618      	mov	r0, r3
 800df5a:	f001 f937 	bl	800f1cc <xTaskPriorityInherit>
 800df5e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800df60:	f001 ffa0 	bl	800fea4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df66:	3324      	adds	r3, #36	; 0x24
 800df68:	683a      	ldr	r2, [r7, #0]
 800df6a:	4611      	mov	r1, r2
 800df6c:	4618      	mov	r0, r3
 800df6e:	f000 fed5 	bl	800ed1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df74:	f000 f98d 	bl	800e292 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df78:	f000 fcf2 	bl	800e960 <xTaskResumeAll>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	f47f af66 	bne.w	800de50 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800df84:	4b18      	ldr	r3, [pc, #96]	; (800dfe8 <xQueueSemaphoreTake+0x224>)
 800df86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df8a:	601a      	str	r2, [r3, #0]
 800df8c:	f3bf 8f4f 	dsb	sy
 800df90:	f3bf 8f6f 	isb	sy
 800df94:	e75c      	b.n	800de50 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800df96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df98:	f000 f97b 	bl	800e292 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df9c:	f000 fce0 	bl	800e960 <xTaskResumeAll>
 800dfa0:	e756      	b.n	800de50 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dfa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfa4:	f000 f975 	bl	800e292 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dfa8:	f000 fcda 	bl	800e960 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfae:	f000 f9c2 	bl	800e336 <prvIsQueueEmpty>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f43f af4b 	beq.w	800de50 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d00d      	beq.n	800dfdc <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800dfc0:	f001 ff3c 	bl	800fe3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dfc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfc6:	f000 f8bc 	bl	800e142 <prvGetDisinheritPriorityAfterTimeout>
 800dfca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfce:	689b      	ldr	r3, [r3, #8]
 800dfd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f001 f9d4 	bl	800f380 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dfd8:	f001 ff64 	bl	800fea4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dfdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3738      	adds	r7, #56	; 0x38
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	e000ed04 	.word	0xe000ed04

0800dfec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b08e      	sub	sp, #56	; 0x38
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	60b9      	str	r1, [r7, #8]
 800dff6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d10c      	bne.n	800e01c <xQueueReceiveFromISR+0x30>
	__asm volatile
 800e002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e006:	b672      	cpsid	i
 800e008:	f383 8811 	msr	BASEPRI, r3
 800e00c:	f3bf 8f6f 	isb	sy
 800e010:	f3bf 8f4f 	dsb	sy
 800e014:	b662      	cpsie	i
 800e016:	623b      	str	r3, [r7, #32]
}
 800e018:	bf00      	nop
 800e01a:	e7fe      	b.n	800e01a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d103      	bne.n	800e02a <xQueueReceiveFromISR+0x3e>
 800e022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e026:	2b00      	cmp	r3, #0
 800e028:	d101      	bne.n	800e02e <xQueueReceiveFromISR+0x42>
 800e02a:	2301      	movs	r3, #1
 800e02c:	e000      	b.n	800e030 <xQueueReceiveFromISR+0x44>
 800e02e:	2300      	movs	r3, #0
 800e030:	2b00      	cmp	r3, #0
 800e032:	d10c      	bne.n	800e04e <xQueueReceiveFromISR+0x62>
	__asm volatile
 800e034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e038:	b672      	cpsid	i
 800e03a:	f383 8811 	msr	BASEPRI, r3
 800e03e:	f3bf 8f6f 	isb	sy
 800e042:	f3bf 8f4f 	dsb	sy
 800e046:	b662      	cpsie	i
 800e048:	61fb      	str	r3, [r7, #28]
}
 800e04a:	bf00      	nop
 800e04c:	e7fe      	b.n	800e04c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e04e:	f001 ffdd 	bl	801000c <vPortValidateInterruptPriority>
	__asm volatile
 800e052:	f3ef 8211 	mrs	r2, BASEPRI
 800e056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05a:	b672      	cpsid	i
 800e05c:	f383 8811 	msr	BASEPRI, r3
 800e060:	f3bf 8f6f 	isb	sy
 800e064:	f3bf 8f4f 	dsb	sy
 800e068:	b662      	cpsie	i
 800e06a:	61ba      	str	r2, [r7, #24]
 800e06c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e06e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e070:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e076:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d02f      	beq.n	800e0de <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e080:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e088:	68b9      	ldr	r1, [r7, #8]
 800e08a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e08c:	f000 f8db 	bl	800e246 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e092:	1e5a      	subs	r2, r3, #1
 800e094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e096:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e098:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0a0:	d112      	bne.n	800e0c8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a4:	691b      	ldr	r3, [r3, #16]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d016      	beq.n	800e0d8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ac:	3310      	adds	r3, #16
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f000 fe88 	bl	800edc4 <xTaskRemoveFromEventList>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d00e      	beq.n	800e0d8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d00b      	beq.n	800e0d8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	601a      	str	r2, [r3, #0]
 800e0c6:	e007      	b.n	800e0d8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	b25a      	sxtb	r2, r3
 800e0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	637b      	str	r3, [r7, #52]	; 0x34
 800e0dc:	e001      	b.n	800e0e2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	637b      	str	r3, [r7, #52]	; 0x34
 800e0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	f383 8811 	msr	BASEPRI, r3
}
 800e0ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3738      	adds	r7, #56	; 0x38
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d10c      	bne.n	800e124 <vQueueDelete+0x2c>
	__asm volatile
 800e10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e10e:	b672      	cpsid	i
 800e110:	f383 8811 	msr	BASEPRI, r3
 800e114:	f3bf 8f6f 	isb	sy
 800e118:	f3bf 8f4f 	dsb	sy
 800e11c:	b662      	cpsie	i
 800e11e:	60bb      	str	r3, [r7, #8]
}
 800e120:	bf00      	nop
 800e122:	e7fe      	b.n	800e122 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e124:	68f8      	ldr	r0, [r7, #12]
 800e126:	f000 f95f 	bl	800e3e8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e130:	2b00      	cmp	r3, #0
 800e132:	d102      	bne.n	800e13a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800e134:	68f8      	ldr	r0, [r7, #12]
 800e136:	f002 f877 	bl	8010228 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e13a:	bf00      	nop
 800e13c:	3710      	adds	r7, #16
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e142:	b480      	push	{r7}
 800e144:	b085      	sub	sp, #20
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d006      	beq.n	800e160 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e15c:	60fb      	str	r3, [r7, #12]
 800e15e:	e001      	b.n	800e164 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e160:	2300      	movs	r3, #0
 800e162:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e164:	68fb      	ldr	r3, [r7, #12]
	}
 800e166:	4618      	mov	r0, r3
 800e168:	3714      	adds	r7, #20
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr

0800e172 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e172:	b580      	push	{r7, lr}
 800e174:	b086      	sub	sp, #24
 800e176:	af00      	add	r7, sp, #0
 800e178:	60f8      	str	r0, [r7, #12]
 800e17a:	60b9      	str	r1, [r7, #8]
 800e17c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e17e:	2300      	movs	r3, #0
 800e180:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e186:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d10d      	bne.n	800e1ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d14d      	bne.n	800e234 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	689b      	ldr	r3, [r3, #8]
 800e19c:	4618      	mov	r0, r3
 800e19e:	f001 f87d 	bl	800f29c <xTaskPriorityDisinherit>
 800e1a2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	609a      	str	r2, [r3, #8]
 800e1aa:	e043      	b.n	800e234 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d119      	bne.n	800e1e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	6858      	ldr	r0, [r3, #4]
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	68b9      	ldr	r1, [r7, #8]
 800e1be:	f008 fbe7 	bl	8016990 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	685a      	ldr	r2, [r3, #4]
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ca:	441a      	add	r2, r3
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	685a      	ldr	r2, [r3, #4]
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	689b      	ldr	r3, [r3, #8]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d32b      	bcc.n	800e234 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	605a      	str	r2, [r3, #4]
 800e1e4:	e026      	b.n	800e234 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	68d8      	ldr	r0, [r3, #12]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	68b9      	ldr	r1, [r7, #8]
 800e1f2:	f008 fbcd 	bl	8016990 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	68da      	ldr	r2, [r3, #12]
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1fe:	425b      	negs	r3, r3
 800e200:	441a      	add	r2, r3
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	68da      	ldr	r2, [r3, #12]
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d207      	bcs.n	800e222 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	689a      	ldr	r2, [r3, #8]
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e21a:	425b      	negs	r3, r3
 800e21c:	441a      	add	r2, r3
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2b02      	cmp	r3, #2
 800e226:	d105      	bne.n	800e234 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d002      	beq.n	800e234 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	3b01      	subs	r3, #1
 800e232:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	1c5a      	adds	r2, r3, #1
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e23c:	697b      	ldr	r3, [r7, #20]
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3718      	adds	r7, #24
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}

0800e246 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e246:	b580      	push	{r7, lr}
 800e248:	b082      	sub	sp, #8
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
 800e24e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e254:	2b00      	cmp	r3, #0
 800e256:	d018      	beq.n	800e28a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	68da      	ldr	r2, [r3, #12]
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e260:	441a      	add	r2, r3
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	68da      	ldr	r2, [r3, #12]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	689b      	ldr	r3, [r3, #8]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d303      	bcc.n	800e27a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	68d9      	ldr	r1, [r3, #12]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e282:	461a      	mov	r2, r3
 800e284:	6838      	ldr	r0, [r7, #0]
 800e286:	f008 fb83 	bl	8016990 <memcpy>
	}
}
 800e28a:	bf00      	nop
 800e28c:	3708      	adds	r7, #8
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}

0800e292 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e292:	b580      	push	{r7, lr}
 800e294:	b084      	sub	sp, #16
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e29a:	f001 fdcf 	bl	800fe3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e2a6:	e011      	b.n	800e2cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d012      	beq.n	800e2d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	3324      	adds	r3, #36	; 0x24
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f000 fd85 	bl	800edc4 <xTaskRemoveFromEventList>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d001      	beq.n	800e2c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e2c0:	f000 fe72 	bl	800efa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e2c4:	7bfb      	ldrb	r3, [r7, #15]
 800e2c6:	3b01      	subs	r3, #1
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e2cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	dce9      	bgt.n	800e2a8 <prvUnlockQueue+0x16>
 800e2d4:	e000      	b.n	800e2d8 <prvUnlockQueue+0x46>
					break;
 800e2d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	22ff      	movs	r2, #255	; 0xff
 800e2dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e2e0:	f001 fde0 	bl	800fea4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e2e4:	f001 fdaa 	bl	800fe3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e2f0:	e011      	b.n	800e316 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	691b      	ldr	r3, [r3, #16]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d012      	beq.n	800e320 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	3310      	adds	r3, #16
 800e2fe:	4618      	mov	r0, r3
 800e300:	f000 fd60 	bl	800edc4 <xTaskRemoveFromEventList>
 800e304:	4603      	mov	r3, r0
 800e306:	2b00      	cmp	r3, #0
 800e308:	d001      	beq.n	800e30e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e30a:	f000 fe4d 	bl	800efa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e30e:	7bbb      	ldrb	r3, [r7, #14]
 800e310:	3b01      	subs	r3, #1
 800e312:	b2db      	uxtb	r3, r3
 800e314:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e316:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	dce9      	bgt.n	800e2f2 <prvUnlockQueue+0x60>
 800e31e:	e000      	b.n	800e322 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e320:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	22ff      	movs	r2, #255	; 0xff
 800e326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e32a:	f001 fdbb 	bl	800fea4 <vPortExitCritical>
}
 800e32e:	bf00      	nop
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}

0800e336 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e336:	b580      	push	{r7, lr}
 800e338:	b084      	sub	sp, #16
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e33e:	f001 fd7d 	bl	800fe3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e346:	2b00      	cmp	r3, #0
 800e348:	d102      	bne.n	800e350 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e34a:	2301      	movs	r3, #1
 800e34c:	60fb      	str	r3, [r7, #12]
 800e34e:	e001      	b.n	800e354 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e350:	2300      	movs	r3, #0
 800e352:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e354:	f001 fda6 	bl	800fea4 <vPortExitCritical>

	return xReturn;
 800e358:	68fb      	ldr	r3, [r7, #12]
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3710      	adds	r7, #16
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b084      	sub	sp, #16
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e36a:	f001 fd67 	bl	800fe3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e376:	429a      	cmp	r2, r3
 800e378:	d102      	bne.n	800e380 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e37a:	2301      	movs	r3, #1
 800e37c:	60fb      	str	r3, [r7, #12]
 800e37e:	e001      	b.n	800e384 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e380:	2300      	movs	r3, #0
 800e382:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e384:	f001 fd8e 	bl	800fea4 <vPortExitCritical>

	return xReturn;
 800e388:	68fb      	ldr	r3, [r7, #12]
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3710      	adds	r7, #16
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
	...

0800e394 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e394:	b480      	push	{r7}
 800e396:	b085      	sub	sp, #20
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e39e:	2300      	movs	r3, #0
 800e3a0:	60fb      	str	r3, [r7, #12]
 800e3a2:	e014      	b.n	800e3ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e3a4:	4a0f      	ldr	r2, [pc, #60]	; (800e3e4 <vQueueAddToRegistry+0x50>)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d10b      	bne.n	800e3c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e3b0:	490c      	ldr	r1, [pc, #48]	; (800e3e4 <vQueueAddToRegistry+0x50>)
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	683a      	ldr	r2, [r7, #0]
 800e3b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e3ba:	4a0a      	ldr	r2, [pc, #40]	; (800e3e4 <vQueueAddToRegistry+0x50>)
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	00db      	lsls	r3, r3, #3
 800e3c0:	4413      	add	r3, r2
 800e3c2:	687a      	ldr	r2, [r7, #4]
 800e3c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e3c6:	e006      	b.n	800e3d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	60fb      	str	r3, [r7, #12]
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2b07      	cmp	r3, #7
 800e3d2:	d9e7      	bls.n	800e3a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e3d4:	bf00      	nop
 800e3d6:	bf00      	nop
 800e3d8:	3714      	adds	r7, #20
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr
 800e3e2:	bf00      	nop
 800e3e4:	20037f70 	.word	0x20037f70

0800e3e8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b085      	sub	sp, #20
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	60fb      	str	r3, [r7, #12]
 800e3f4:	e016      	b.n	800e424 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e3f6:	4a10      	ldr	r2, [pc, #64]	; (800e438 <vQueueUnregisterQueue+0x50>)
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	00db      	lsls	r3, r3, #3
 800e3fc:	4413      	add	r3, r2
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	687a      	ldr	r2, [r7, #4]
 800e402:	429a      	cmp	r2, r3
 800e404:	d10b      	bne.n	800e41e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e406:	4a0c      	ldr	r2, [pc, #48]	; (800e438 <vQueueUnregisterQueue+0x50>)
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2100      	movs	r1, #0
 800e40c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e410:	4a09      	ldr	r2, [pc, #36]	; (800e438 <vQueueUnregisterQueue+0x50>)
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	00db      	lsls	r3, r3, #3
 800e416:	4413      	add	r3, r2
 800e418:	2200      	movs	r2, #0
 800e41a:	605a      	str	r2, [r3, #4]
				break;
 800e41c:	e006      	b.n	800e42c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	3301      	adds	r3, #1
 800e422:	60fb      	str	r3, [r7, #12]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2b07      	cmp	r3, #7
 800e428:	d9e5      	bls.n	800e3f6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e42a:	bf00      	nop
 800e42c:	bf00      	nop
 800e42e:	3714      	adds	r7, #20
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr
 800e438:	20037f70 	.word	0x20037f70

0800e43c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b086      	sub	sp, #24
 800e440:	af00      	add	r7, sp, #0
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	60b9      	str	r1, [r7, #8]
 800e446:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e44c:	f001 fcf6 	bl	800fe3c <vPortEnterCritical>
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e456:	b25b      	sxtb	r3, r3
 800e458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e45c:	d103      	bne.n	800e466 <vQueueWaitForMessageRestricted+0x2a>
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	2200      	movs	r2, #0
 800e462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e46c:	b25b      	sxtb	r3, r3
 800e46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e472:	d103      	bne.n	800e47c <vQueueWaitForMessageRestricted+0x40>
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	2200      	movs	r2, #0
 800e478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e47c:	f001 fd12 	bl	800fea4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e484:	2b00      	cmp	r3, #0
 800e486:	d106      	bne.n	800e496 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	3324      	adds	r3, #36	; 0x24
 800e48c:	687a      	ldr	r2, [r7, #4]
 800e48e:	68b9      	ldr	r1, [r7, #8]
 800e490:	4618      	mov	r0, r3
 800e492:	f000 fc69 	bl	800ed68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e496:	6978      	ldr	r0, [r7, #20]
 800e498:	f7ff fefb 	bl	800e292 <prvUnlockQueue>
	}
 800e49c:	bf00      	nop
 800e49e:	3718      	adds	r7, #24
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b08e      	sub	sp, #56	; 0x38
 800e4a8:	af04      	add	r7, sp, #16
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	607a      	str	r2, [r7, #4]
 800e4b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d10c      	bne.n	800e4d2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800e4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4bc:	b672      	cpsid	i
 800e4be:	f383 8811 	msr	BASEPRI, r3
 800e4c2:	f3bf 8f6f 	isb	sy
 800e4c6:	f3bf 8f4f 	dsb	sy
 800e4ca:	b662      	cpsie	i
 800e4cc:	623b      	str	r3, [r7, #32]
}
 800e4ce:	bf00      	nop
 800e4d0:	e7fe      	b.n	800e4d0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800e4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d10c      	bne.n	800e4f2 <xTaskCreateStatic+0x4e>
	__asm volatile
 800e4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4dc:	b672      	cpsid	i
 800e4de:	f383 8811 	msr	BASEPRI, r3
 800e4e2:	f3bf 8f6f 	isb	sy
 800e4e6:	f3bf 8f4f 	dsb	sy
 800e4ea:	b662      	cpsie	i
 800e4ec:	61fb      	str	r3, [r7, #28]
}
 800e4ee:	bf00      	nop
 800e4f0:	e7fe      	b.n	800e4f0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e4f2:	2360      	movs	r3, #96	; 0x60
 800e4f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	2b60      	cmp	r3, #96	; 0x60
 800e4fa:	d00c      	beq.n	800e516 <xTaskCreateStatic+0x72>
	__asm volatile
 800e4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e500:	b672      	cpsid	i
 800e502:	f383 8811 	msr	BASEPRI, r3
 800e506:	f3bf 8f6f 	isb	sy
 800e50a:	f3bf 8f4f 	dsb	sy
 800e50e:	b662      	cpsie	i
 800e510:	61bb      	str	r3, [r7, #24]
}
 800e512:	bf00      	nop
 800e514:	e7fe      	b.n	800e514 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e516:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d01e      	beq.n	800e55c <xTaskCreateStatic+0xb8>
 800e51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e520:	2b00      	cmp	r3, #0
 800e522:	d01b      	beq.n	800e55c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e526:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e52c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e530:	2202      	movs	r2, #2
 800e532:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e536:	2300      	movs	r3, #0
 800e538:	9303      	str	r3, [sp, #12]
 800e53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53c:	9302      	str	r3, [sp, #8]
 800e53e:	f107 0314 	add.w	r3, r7, #20
 800e542:	9301      	str	r3, [sp, #4]
 800e544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e546:	9300      	str	r3, [sp, #0]
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	68b9      	ldr	r1, [r7, #8]
 800e54e:	68f8      	ldr	r0, [r7, #12]
 800e550:	f000 f850 	bl	800e5f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e556:	f000 f8e5 	bl	800e724 <prvAddNewTaskToReadyList>
 800e55a:	e001      	b.n	800e560 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800e55c:	2300      	movs	r3, #0
 800e55e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e560:	697b      	ldr	r3, [r7, #20]
	}
 800e562:	4618      	mov	r0, r3
 800e564:	3728      	adds	r7, #40	; 0x28
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}

0800e56a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e56a:	b580      	push	{r7, lr}
 800e56c:	b08c      	sub	sp, #48	; 0x30
 800e56e:	af04      	add	r7, sp, #16
 800e570:	60f8      	str	r0, [r7, #12]
 800e572:	60b9      	str	r1, [r7, #8]
 800e574:	603b      	str	r3, [r7, #0]
 800e576:	4613      	mov	r3, r2
 800e578:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e57a:	88fb      	ldrh	r3, [r7, #6]
 800e57c:	009b      	lsls	r3, r3, #2
 800e57e:	4618      	mov	r0, r3
 800e580:	f001 fd88 	bl	8010094 <pvPortMalloc>
 800e584:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d00e      	beq.n	800e5aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e58c:	2060      	movs	r0, #96	; 0x60
 800e58e:	f001 fd81 	bl	8010094 <pvPortMalloc>
 800e592:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d003      	beq.n	800e5a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e59a:	69fb      	ldr	r3, [r7, #28]
 800e59c:	697a      	ldr	r2, [r7, #20]
 800e59e:	631a      	str	r2, [r3, #48]	; 0x30
 800e5a0:	e005      	b.n	800e5ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e5a2:	6978      	ldr	r0, [r7, #20]
 800e5a4:	f001 fe40 	bl	8010228 <vPortFree>
 800e5a8:	e001      	b.n	800e5ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e5ae:	69fb      	ldr	r3, [r7, #28]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d017      	beq.n	800e5e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e5bc:	88fa      	ldrh	r2, [r7, #6]
 800e5be:	2300      	movs	r3, #0
 800e5c0:	9303      	str	r3, [sp, #12]
 800e5c2:	69fb      	ldr	r3, [r7, #28]
 800e5c4:	9302      	str	r3, [sp, #8]
 800e5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c8:	9301      	str	r3, [sp, #4]
 800e5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5cc:	9300      	str	r3, [sp, #0]
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	68b9      	ldr	r1, [r7, #8]
 800e5d2:	68f8      	ldr	r0, [r7, #12]
 800e5d4:	f000 f80e 	bl	800e5f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e5d8:	69f8      	ldr	r0, [r7, #28]
 800e5da:	f000 f8a3 	bl	800e724 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	61bb      	str	r3, [r7, #24]
 800e5e2:	e002      	b.n	800e5ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e5e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e5e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e5ea:	69bb      	ldr	r3, [r7, #24]
	}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3720      	adds	r7, #32
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b088      	sub	sp, #32
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	607a      	str	r2, [r7, #4]
 800e600:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e604:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	009b      	lsls	r3, r3, #2
 800e60a:	461a      	mov	r2, r3
 800e60c:	21a5      	movs	r1, #165	; 0xa5
 800e60e:	f008 f9e7 	bl	80169e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e616:	6879      	ldr	r1, [r7, #4]
 800e618:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e61c:	440b      	add	r3, r1
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	4413      	add	r3, r2
 800e622:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e624:	69bb      	ldr	r3, [r7, #24]
 800e626:	f023 0307 	bic.w	r3, r3, #7
 800e62a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	f003 0307 	and.w	r3, r3, #7
 800e632:	2b00      	cmp	r3, #0
 800e634:	d00c      	beq.n	800e650 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800e636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e63a:	b672      	cpsid	i
 800e63c:	f383 8811 	msr	BASEPRI, r3
 800e640:	f3bf 8f6f 	isb	sy
 800e644:	f3bf 8f4f 	dsb	sy
 800e648:	b662      	cpsie	i
 800e64a:	617b      	str	r3, [r7, #20]
}
 800e64c:	bf00      	nop
 800e64e:	e7fe      	b.n	800e64e <prvInitialiseNewTask+0x5a>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800e650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e652:	69ba      	ldr	r2, [r7, #24]
 800e654:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d01f      	beq.n	800e69c <prvInitialiseNewTask+0xa8>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e65c:	2300      	movs	r3, #0
 800e65e:	61fb      	str	r3, [r7, #28]
 800e660:	e012      	b.n	800e688 <prvInitialiseNewTask+0x94>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e662:	68ba      	ldr	r2, [r7, #8]
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	4413      	add	r3, r2
 800e668:	7819      	ldrb	r1, [r3, #0]
 800e66a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e66c:	69fb      	ldr	r3, [r7, #28]
 800e66e:	4413      	add	r3, r2
 800e670:	3334      	adds	r3, #52	; 0x34
 800e672:	460a      	mov	r2, r1
 800e674:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e676:	68ba      	ldr	r2, [r7, #8]
 800e678:	69fb      	ldr	r3, [r7, #28]
 800e67a:	4413      	add	r3, r2
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d006      	beq.n	800e690 <prvInitialiseNewTask+0x9c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e682:	69fb      	ldr	r3, [r7, #28]
 800e684:	3301      	adds	r3, #1
 800e686:	61fb      	str	r3, [r7, #28]
 800e688:	69fb      	ldr	r3, [r7, #28]
 800e68a:	2b0f      	cmp	r3, #15
 800e68c:	d9e9      	bls.n	800e662 <prvInitialiseNewTask+0x6e>
 800e68e:	e000      	b.n	800e692 <prvInitialiseNewTask+0x9e>
			{
				break;
 800e690:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e694:	2200      	movs	r2, #0
 800e696:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e69a:	e003      	b.n	800e6a4 <prvInitialiseNewTask+0xb0>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69e:	2200      	movs	r2, #0
 800e6a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a6:	2b37      	cmp	r3, #55	; 0x37
 800e6a8:	d901      	bls.n	800e6ae <prvInitialiseNewTask+0xba>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e6aa:	2337      	movs	r3, #55	; 0x37
 800e6ac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6b2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6b8:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800e6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6bc:	2200      	movs	r2, #0
 800e6be:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c2:	3304      	adds	r3, #4
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7fe fd49 	bl	800d15c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6cc:	3318      	adds	r3, #24
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fe fd44 	bl	800d15c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6e8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800e6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e700:	683a      	ldr	r2, [r7, #0]
 800e702:	68f9      	ldr	r1, [r7, #12]
 800e704:	69b8      	ldr	r0, [r7, #24]
 800e706:	f001 fa8b 	bl	800fc20 <pxPortInitialiseStack>
 800e70a:	4602      	mov	r2, r0
 800e70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e70e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e712:	2b00      	cmp	r3, #0
 800e714:	d002      	beq.n	800e71c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e71a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e71c:	bf00      	nop
 800e71e:	3720      	adds	r7, #32
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e72c:	f001 fb86 	bl	800fe3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e730:	4b2d      	ldr	r3, [pc, #180]	; (800e7e8 <prvAddNewTaskToReadyList+0xc4>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	3301      	adds	r3, #1
 800e736:	4a2c      	ldr	r2, [pc, #176]	; (800e7e8 <prvAddNewTaskToReadyList+0xc4>)
 800e738:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e73a:	4b2c      	ldr	r3, [pc, #176]	; (800e7ec <prvAddNewTaskToReadyList+0xc8>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d109      	bne.n	800e756 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e742:	4a2a      	ldr	r2, [pc, #168]	; (800e7ec <prvAddNewTaskToReadyList+0xc8>)
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e748:	4b27      	ldr	r3, [pc, #156]	; (800e7e8 <prvAddNewTaskToReadyList+0xc4>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d110      	bne.n	800e772 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e750:	f000 fc4e 	bl	800eff0 <prvInitialiseTaskLists>
 800e754:	e00d      	b.n	800e772 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e756:	4b26      	ldr	r3, [pc, #152]	; (800e7f0 <prvAddNewTaskToReadyList+0xcc>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d109      	bne.n	800e772 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e75e:	4b23      	ldr	r3, [pc, #140]	; (800e7ec <prvAddNewTaskToReadyList+0xc8>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e768:	429a      	cmp	r2, r3
 800e76a:	d802      	bhi.n	800e772 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e76c:	4a1f      	ldr	r2, [pc, #124]	; (800e7ec <prvAddNewTaskToReadyList+0xc8>)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e772:	4b20      	ldr	r3, [pc, #128]	; (800e7f4 <prvAddNewTaskToReadyList+0xd0>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	3301      	adds	r3, #1
 800e778:	4a1e      	ldr	r2, [pc, #120]	; (800e7f4 <prvAddNewTaskToReadyList+0xd0>)
 800e77a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e77c:	4b1d      	ldr	r3, [pc, #116]	; (800e7f4 <prvAddNewTaskToReadyList+0xd0>)
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e788:	4b1b      	ldr	r3, [pc, #108]	; (800e7f8 <prvAddNewTaskToReadyList+0xd4>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d903      	bls.n	800e798 <prvAddNewTaskToReadyList+0x74>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e794:	4a18      	ldr	r2, [pc, #96]	; (800e7f8 <prvAddNewTaskToReadyList+0xd4>)
 800e796:	6013      	str	r3, [r2, #0]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e79c:	4613      	mov	r3, r2
 800e79e:	009b      	lsls	r3, r3, #2
 800e7a0:	4413      	add	r3, r2
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	4a15      	ldr	r2, [pc, #84]	; (800e7fc <prvAddNewTaskToReadyList+0xd8>)
 800e7a6:	441a      	add	r2, r3
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	3304      	adds	r3, #4
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	4610      	mov	r0, r2
 800e7b0:	f7fe fce1 	bl	800d176 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e7b4:	f001 fb76 	bl	800fea4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e7b8:	4b0d      	ldr	r3, [pc, #52]	; (800e7f0 <prvAddNewTaskToReadyList+0xcc>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d00e      	beq.n	800e7de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e7c0:	4b0a      	ldr	r3, [pc, #40]	; (800e7ec <prvAddNewTaskToReadyList+0xc8>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d207      	bcs.n	800e7de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e7ce:	4b0c      	ldr	r3, [pc, #48]	; (800e800 <prvAddNewTaskToReadyList+0xdc>)
 800e7d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7d4:	601a      	str	r2, [r3, #0]
 800e7d6:	f3bf 8f4f 	dsb	sy
 800e7da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7de:	bf00      	nop
 800e7e0:	3708      	adds	r7, #8
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	20038484 	.word	0x20038484
 800e7ec:	20037fb0 	.word	0x20037fb0
 800e7f0:	20038490 	.word	0x20038490
 800e7f4:	200384a0 	.word	0x200384a0
 800e7f8:	2003848c 	.word	0x2003848c
 800e7fc:	20037fb4 	.word	0x20037fb4
 800e800:	e000ed04 	.word	0xe000ed04

0800e804 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e804:	b580      	push	{r7, lr}
 800e806:	b084      	sub	sp, #16
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e80c:	2300      	movs	r3, #0
 800e80e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d019      	beq.n	800e84a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e816:	4b14      	ldr	r3, [pc, #80]	; (800e868 <vTaskDelay+0x64>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d00c      	beq.n	800e838 <vTaskDelay+0x34>
	__asm volatile
 800e81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e822:	b672      	cpsid	i
 800e824:	f383 8811 	msr	BASEPRI, r3
 800e828:	f3bf 8f6f 	isb	sy
 800e82c:	f3bf 8f4f 	dsb	sy
 800e830:	b662      	cpsie	i
 800e832:	60bb      	str	r3, [r7, #8]
}
 800e834:	bf00      	nop
 800e836:	e7fe      	b.n	800e836 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800e838:	f000 f884 	bl	800e944 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e83c:	2100      	movs	r1, #0
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f000 fe38 	bl	800f4b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e844:	f000 f88c 	bl	800e960 <xTaskResumeAll>
 800e848:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d107      	bne.n	800e860 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800e850:	4b06      	ldr	r3, [pc, #24]	; (800e86c <vTaskDelay+0x68>)
 800e852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e856:	601a      	str	r2, [r3, #0]
 800e858:	f3bf 8f4f 	dsb	sy
 800e85c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e860:	bf00      	nop
 800e862:	3710      	adds	r7, #16
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}
 800e868:	200384ac 	.word	0x200384ac
 800e86c:	e000ed04 	.word	0xe000ed04

0800e870 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b08a      	sub	sp, #40	; 0x28
 800e874:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e876:	2300      	movs	r3, #0
 800e878:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e87a:	2300      	movs	r3, #0
 800e87c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e87e:	463a      	mov	r2, r7
 800e880:	1d39      	adds	r1, r7, #4
 800e882:	f107 0308 	add.w	r3, r7, #8
 800e886:	4618      	mov	r0, r3
 800e888:	f7fe fc14 	bl	800d0b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e88c:	6839      	ldr	r1, [r7, #0]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	68ba      	ldr	r2, [r7, #8]
 800e892:	9202      	str	r2, [sp, #8]
 800e894:	9301      	str	r3, [sp, #4]
 800e896:	2300      	movs	r3, #0
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	2300      	movs	r3, #0
 800e89c:	460a      	mov	r2, r1
 800e89e:	4923      	ldr	r1, [pc, #140]	; (800e92c <vTaskStartScheduler+0xbc>)
 800e8a0:	4823      	ldr	r0, [pc, #140]	; (800e930 <vTaskStartScheduler+0xc0>)
 800e8a2:	f7ff fdff 	bl	800e4a4 <xTaskCreateStatic>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	4a22      	ldr	r2, [pc, #136]	; (800e934 <vTaskStartScheduler+0xc4>)
 800e8aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e8ac:	4b21      	ldr	r3, [pc, #132]	; (800e934 <vTaskStartScheduler+0xc4>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d002      	beq.n	800e8ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	617b      	str	r3, [r7, #20]
 800e8b8:	e001      	b.n	800e8be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d102      	bne.n	800e8ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e8c4:	f000 fe50 	bl	800f568 <xTimerCreateTimerTask>
 800e8c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d118      	bne.n	800e902 <vTaskStartScheduler+0x92>
	__asm volatile
 800e8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d4:	b672      	cpsid	i
 800e8d6:	f383 8811 	msr	BASEPRI, r3
 800e8da:	f3bf 8f6f 	isb	sy
 800e8de:	f3bf 8f4f 	dsb	sy
 800e8e2:	b662      	cpsie	i
 800e8e4:	613b      	str	r3, [r7, #16]
}
 800e8e6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e8e8:	4b13      	ldr	r3, [pc, #76]	; (800e938 <vTaskStartScheduler+0xc8>)
 800e8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e8f0:	4b12      	ldr	r3, [pc, #72]	; (800e93c <vTaskStartScheduler+0xcc>)
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e8f6:	4b12      	ldr	r3, [pc, #72]	; (800e940 <vTaskStartScheduler+0xd0>)
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e8fc:	f001 fa20 	bl	800fd40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e900:	e010      	b.n	800e924 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e908:	d10c      	bne.n	800e924 <vTaskStartScheduler+0xb4>
	__asm volatile
 800e90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e90e:	b672      	cpsid	i
 800e910:	f383 8811 	msr	BASEPRI, r3
 800e914:	f3bf 8f6f 	isb	sy
 800e918:	f3bf 8f4f 	dsb	sy
 800e91c:	b662      	cpsie	i
 800e91e:	60fb      	str	r3, [r7, #12]
}
 800e920:	bf00      	nop
 800e922:	e7fe      	b.n	800e922 <vTaskStartScheduler+0xb2>
}
 800e924:	bf00      	nop
 800e926:	3718      	adds	r7, #24
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	0801733c 	.word	0x0801733c
 800e930:	0800efc1 	.word	0x0800efc1
 800e934:	200384a8 	.word	0x200384a8
 800e938:	200384a4 	.word	0x200384a4
 800e93c:	20038490 	.word	0x20038490
 800e940:	20038488 	.word	0x20038488

0800e944 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e944:	b480      	push	{r7}
 800e946:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e948:	4b04      	ldr	r3, [pc, #16]	; (800e95c <vTaskSuspendAll+0x18>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	3301      	adds	r3, #1
 800e94e:	4a03      	ldr	r2, [pc, #12]	; (800e95c <vTaskSuspendAll+0x18>)
 800e950:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e952:	bf00      	nop
 800e954:	46bd      	mov	sp, r7
 800e956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95a:	4770      	bx	lr
 800e95c:	200384ac 	.word	0x200384ac

0800e960 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b084      	sub	sp, #16
 800e964:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e966:	2300      	movs	r3, #0
 800e968:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e96a:	2300      	movs	r3, #0
 800e96c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e96e:	4b43      	ldr	r3, [pc, #268]	; (800ea7c <xTaskResumeAll+0x11c>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d10c      	bne.n	800e990 <xTaskResumeAll+0x30>
	__asm volatile
 800e976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97a:	b672      	cpsid	i
 800e97c:	f383 8811 	msr	BASEPRI, r3
 800e980:	f3bf 8f6f 	isb	sy
 800e984:	f3bf 8f4f 	dsb	sy
 800e988:	b662      	cpsie	i
 800e98a:	603b      	str	r3, [r7, #0]
}
 800e98c:	bf00      	nop
 800e98e:	e7fe      	b.n	800e98e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e990:	f001 fa54 	bl	800fe3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e994:	4b39      	ldr	r3, [pc, #228]	; (800ea7c <xTaskResumeAll+0x11c>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	3b01      	subs	r3, #1
 800e99a:	4a38      	ldr	r2, [pc, #224]	; (800ea7c <xTaskResumeAll+0x11c>)
 800e99c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e99e:	4b37      	ldr	r3, [pc, #220]	; (800ea7c <xTaskResumeAll+0x11c>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d162      	bne.n	800ea6c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e9a6:	4b36      	ldr	r3, [pc, #216]	; (800ea80 <xTaskResumeAll+0x120>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d05e      	beq.n	800ea6c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e9ae:	e02f      	b.n	800ea10 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9b0:	4b34      	ldr	r3, [pc, #208]	; (800ea84 <xTaskResumeAll+0x124>)
 800e9b2:	68db      	ldr	r3, [r3, #12]
 800e9b4:	68db      	ldr	r3, [r3, #12]
 800e9b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	3318      	adds	r3, #24
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7fe fc37 	bl	800d230 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	3304      	adds	r3, #4
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7fe fc32 	bl	800d230 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9d0:	4b2d      	ldr	r3, [pc, #180]	; (800ea88 <xTaskResumeAll+0x128>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d903      	bls.n	800e9e0 <xTaskResumeAll+0x80>
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9dc:	4a2a      	ldr	r2, [pc, #168]	; (800ea88 <xTaskResumeAll+0x128>)
 800e9de:	6013      	str	r3, [r2, #0]
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9e4:	4613      	mov	r3, r2
 800e9e6:	009b      	lsls	r3, r3, #2
 800e9e8:	4413      	add	r3, r2
 800e9ea:	009b      	lsls	r3, r3, #2
 800e9ec:	4a27      	ldr	r2, [pc, #156]	; (800ea8c <xTaskResumeAll+0x12c>)
 800e9ee:	441a      	add	r2, r3
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	3304      	adds	r3, #4
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	4610      	mov	r0, r2
 800e9f8:	f7fe fbbd 	bl	800d176 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea00:	4b23      	ldr	r3, [pc, #140]	; (800ea90 <xTaskResumeAll+0x130>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d302      	bcc.n	800ea10 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800ea0a:	4b22      	ldr	r3, [pc, #136]	; (800ea94 <xTaskResumeAll+0x134>)
 800ea0c:	2201      	movs	r2, #1
 800ea0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ea10:	4b1c      	ldr	r3, [pc, #112]	; (800ea84 <xTaskResumeAll+0x124>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d1cb      	bne.n	800e9b0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d001      	beq.n	800ea22 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ea1e:	f000 fb87 	bl	800f130 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ea22:	4b1d      	ldr	r3, [pc, #116]	; (800ea98 <xTaskResumeAll+0x138>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d010      	beq.n	800ea50 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ea2e:	f000 f859 	bl	800eae4 <xTaskIncrementTick>
 800ea32:	4603      	mov	r3, r0
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d002      	beq.n	800ea3e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800ea38:	4b16      	ldr	r3, [pc, #88]	; (800ea94 <xTaskResumeAll+0x134>)
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	3b01      	subs	r3, #1
 800ea42:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d1f1      	bne.n	800ea2e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800ea4a:	4b13      	ldr	r3, [pc, #76]	; (800ea98 <xTaskResumeAll+0x138>)
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ea50:	4b10      	ldr	r3, [pc, #64]	; (800ea94 <xTaskResumeAll+0x134>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d009      	beq.n	800ea6c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ea58:	2301      	movs	r3, #1
 800ea5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ea5c:	4b0f      	ldr	r3, [pc, #60]	; (800ea9c <xTaskResumeAll+0x13c>)
 800ea5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea62:	601a      	str	r2, [r3, #0]
 800ea64:	f3bf 8f4f 	dsb	sy
 800ea68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea6c:	f001 fa1a 	bl	800fea4 <vPortExitCritical>

	return xAlreadyYielded;
 800ea70:	68bb      	ldr	r3, [r7, #8]
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3710      	adds	r7, #16
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	200384ac 	.word	0x200384ac
 800ea80:	20038484 	.word	0x20038484
 800ea84:	20038444 	.word	0x20038444
 800ea88:	2003848c 	.word	0x2003848c
 800ea8c:	20037fb4 	.word	0x20037fb4
 800ea90:	20037fb0 	.word	0x20037fb0
 800ea94:	20038498 	.word	0x20038498
 800ea98:	20038494 	.word	0x20038494
 800ea9c:	e000ed04 	.word	0xe000ed04

0800eaa0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800eaa6:	4b05      	ldr	r3, [pc, #20]	; (800eabc <xTaskGetTickCount+0x1c>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800eaac:	687b      	ldr	r3, [r7, #4]
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	370c      	adds	r7, #12
 800eab2:	46bd      	mov	sp, r7
 800eab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab8:	4770      	bx	lr
 800eaba:	bf00      	nop
 800eabc:	20038488 	.word	0x20038488

0800eac0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eac6:	f001 faa1 	bl	801000c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800eaca:	2300      	movs	r3, #0
 800eacc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800eace:	4b04      	ldr	r3, [pc, #16]	; (800eae0 <xTaskGetTickCountFromISR+0x20>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ead4:	683b      	ldr	r3, [r7, #0]
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3708      	adds	r7, #8
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
 800eade:	bf00      	nop
 800eae0:	20038488 	.word	0x20038488

0800eae4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b086      	sub	sp, #24
 800eae8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800eaea:	2300      	movs	r3, #0
 800eaec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eaee:	4b50      	ldr	r3, [pc, #320]	; (800ec30 <xTaskIncrementTick+0x14c>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f040 808b 	bne.w	800ec0e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800eaf8:	4b4e      	ldr	r3, [pc, #312]	; (800ec34 <xTaskIncrementTick+0x150>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	3301      	adds	r3, #1
 800eafe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800eb00:	4a4c      	ldr	r2, [pc, #304]	; (800ec34 <xTaskIncrementTick+0x150>)
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800eb06:	693b      	ldr	r3, [r7, #16]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d122      	bne.n	800eb52 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800eb0c:	4b4a      	ldr	r3, [pc, #296]	; (800ec38 <xTaskIncrementTick+0x154>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d00c      	beq.n	800eb30 <xTaskIncrementTick+0x4c>
	__asm volatile
 800eb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb1a:	b672      	cpsid	i
 800eb1c:	f383 8811 	msr	BASEPRI, r3
 800eb20:	f3bf 8f6f 	isb	sy
 800eb24:	f3bf 8f4f 	dsb	sy
 800eb28:	b662      	cpsie	i
 800eb2a:	603b      	str	r3, [r7, #0]
}
 800eb2c:	bf00      	nop
 800eb2e:	e7fe      	b.n	800eb2e <xTaskIncrementTick+0x4a>
 800eb30:	4b41      	ldr	r3, [pc, #260]	; (800ec38 <xTaskIncrementTick+0x154>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	60fb      	str	r3, [r7, #12]
 800eb36:	4b41      	ldr	r3, [pc, #260]	; (800ec3c <xTaskIncrementTick+0x158>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	4a3f      	ldr	r2, [pc, #252]	; (800ec38 <xTaskIncrementTick+0x154>)
 800eb3c:	6013      	str	r3, [r2, #0]
 800eb3e:	4a3f      	ldr	r2, [pc, #252]	; (800ec3c <xTaskIncrementTick+0x158>)
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	6013      	str	r3, [r2, #0]
 800eb44:	4b3e      	ldr	r3, [pc, #248]	; (800ec40 <xTaskIncrementTick+0x15c>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	3301      	adds	r3, #1
 800eb4a:	4a3d      	ldr	r2, [pc, #244]	; (800ec40 <xTaskIncrementTick+0x15c>)
 800eb4c:	6013      	str	r3, [r2, #0]
 800eb4e:	f000 faef 	bl	800f130 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800eb52:	4b3c      	ldr	r3, [pc, #240]	; (800ec44 <xTaskIncrementTick+0x160>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	693a      	ldr	r2, [r7, #16]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d349      	bcc.n	800ebf0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb5c:	4b36      	ldr	r3, [pc, #216]	; (800ec38 <xTaskIncrementTick+0x154>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d104      	bne.n	800eb70 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb66:	4b37      	ldr	r3, [pc, #220]	; (800ec44 <xTaskIncrementTick+0x160>)
 800eb68:	f04f 32ff 	mov.w	r2, #4294967295
 800eb6c:	601a      	str	r2, [r3, #0]
					break;
 800eb6e:	e03f      	b.n	800ebf0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb70:	4b31      	ldr	r3, [pc, #196]	; (800ec38 <xTaskIncrementTick+0x154>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	68db      	ldr	r3, [r3, #12]
 800eb76:	68db      	ldr	r3, [r3, #12]
 800eb78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	685b      	ldr	r3, [r3, #4]
 800eb7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800eb80:	693a      	ldr	r2, [r7, #16]
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d203      	bcs.n	800eb90 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800eb88:	4a2e      	ldr	r2, [pc, #184]	; (800ec44 <xTaskIncrementTick+0x160>)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800eb8e:	e02f      	b.n	800ebf0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	3304      	adds	r3, #4
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7fe fb4b 	bl	800d230 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d004      	beq.n	800ebac <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	3318      	adds	r3, #24
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7fe fb42 	bl	800d230 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebb0:	4b25      	ldr	r3, [pc, #148]	; (800ec48 <xTaskIncrementTick+0x164>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d903      	bls.n	800ebc0 <xTaskIncrementTick+0xdc>
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebbc:	4a22      	ldr	r2, [pc, #136]	; (800ec48 <xTaskIncrementTick+0x164>)
 800ebbe:	6013      	str	r3, [r2, #0]
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc4:	4613      	mov	r3, r2
 800ebc6:	009b      	lsls	r3, r3, #2
 800ebc8:	4413      	add	r3, r2
 800ebca:	009b      	lsls	r3, r3, #2
 800ebcc:	4a1f      	ldr	r2, [pc, #124]	; (800ec4c <xTaskIncrementTick+0x168>)
 800ebce:	441a      	add	r2, r3
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	3304      	adds	r3, #4
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	4610      	mov	r0, r2
 800ebd8:	f7fe facd 	bl	800d176 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebe0:	4b1b      	ldr	r3, [pc, #108]	; (800ec50 <xTaskIncrementTick+0x16c>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d3b8      	bcc.n	800eb5c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800ebea:	2301      	movs	r3, #1
 800ebec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ebee:	e7b5      	b.n	800eb5c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ebf0:	4b17      	ldr	r3, [pc, #92]	; (800ec50 <xTaskIncrementTick+0x16c>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebf6:	4915      	ldr	r1, [pc, #84]	; (800ec4c <xTaskIncrementTick+0x168>)
 800ebf8:	4613      	mov	r3, r2
 800ebfa:	009b      	lsls	r3, r3, #2
 800ebfc:	4413      	add	r3, r2
 800ebfe:	009b      	lsls	r3, r3, #2
 800ec00:	440b      	add	r3, r1
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	2b01      	cmp	r3, #1
 800ec06:	d907      	bls.n	800ec18 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800ec08:	2301      	movs	r3, #1
 800ec0a:	617b      	str	r3, [r7, #20]
 800ec0c:	e004      	b.n	800ec18 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ec0e:	4b11      	ldr	r3, [pc, #68]	; (800ec54 <xTaskIncrementTick+0x170>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	3301      	adds	r3, #1
 800ec14:	4a0f      	ldr	r2, [pc, #60]	; (800ec54 <xTaskIncrementTick+0x170>)
 800ec16:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ec18:	4b0f      	ldr	r3, [pc, #60]	; (800ec58 <xTaskIncrementTick+0x174>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d001      	beq.n	800ec24 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800ec20:	2301      	movs	r3, #1
 800ec22:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ec24:	697b      	ldr	r3, [r7, #20]
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3718      	adds	r7, #24
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	200384ac 	.word	0x200384ac
 800ec34:	20038488 	.word	0x20038488
 800ec38:	2003843c 	.word	0x2003843c
 800ec3c:	20038440 	.word	0x20038440
 800ec40:	2003849c 	.word	0x2003849c
 800ec44:	200384a4 	.word	0x200384a4
 800ec48:	2003848c 	.word	0x2003848c
 800ec4c:	20037fb4 	.word	0x20037fb4
 800ec50:	20037fb0 	.word	0x20037fb0
 800ec54:	20038494 	.word	0x20038494
 800ec58:	20038498 	.word	0x20038498

0800ec5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b085      	sub	sp, #20
 800ec60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ec62:	4b29      	ldr	r3, [pc, #164]	; (800ed08 <vTaskSwitchContext+0xac>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d003      	beq.n	800ec72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ec6a:	4b28      	ldr	r3, [pc, #160]	; (800ed0c <vTaskSwitchContext+0xb0>)
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ec70:	e043      	b.n	800ecfa <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800ec72:	4b26      	ldr	r3, [pc, #152]	; (800ed0c <vTaskSwitchContext+0xb0>)
 800ec74:	2200      	movs	r2, #0
 800ec76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec78:	4b25      	ldr	r3, [pc, #148]	; (800ed10 <vTaskSwitchContext+0xb4>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	60fb      	str	r3, [r7, #12]
 800ec7e:	e012      	b.n	800eca6 <vTaskSwitchContext+0x4a>
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d10c      	bne.n	800eca0 <vTaskSwitchContext+0x44>
	__asm volatile
 800ec86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec8a:	b672      	cpsid	i
 800ec8c:	f383 8811 	msr	BASEPRI, r3
 800ec90:	f3bf 8f6f 	isb	sy
 800ec94:	f3bf 8f4f 	dsb	sy
 800ec98:	b662      	cpsie	i
 800ec9a:	607b      	str	r3, [r7, #4]
}
 800ec9c:	bf00      	nop
 800ec9e:	e7fe      	b.n	800ec9e <vTaskSwitchContext+0x42>
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	3b01      	subs	r3, #1
 800eca4:	60fb      	str	r3, [r7, #12]
 800eca6:	491b      	ldr	r1, [pc, #108]	; (800ed14 <vTaskSwitchContext+0xb8>)
 800eca8:	68fa      	ldr	r2, [r7, #12]
 800ecaa:	4613      	mov	r3, r2
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	4413      	add	r3, r2
 800ecb0:	009b      	lsls	r3, r3, #2
 800ecb2:	440b      	add	r3, r1
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d0e2      	beq.n	800ec80 <vTaskSwitchContext+0x24>
 800ecba:	68fa      	ldr	r2, [r7, #12]
 800ecbc:	4613      	mov	r3, r2
 800ecbe:	009b      	lsls	r3, r3, #2
 800ecc0:	4413      	add	r3, r2
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	4a13      	ldr	r2, [pc, #76]	; (800ed14 <vTaskSwitchContext+0xb8>)
 800ecc6:	4413      	add	r3, r2
 800ecc8:	60bb      	str	r3, [r7, #8]
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	685a      	ldr	r2, [r3, #4]
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	605a      	str	r2, [r3, #4]
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	685a      	ldr	r2, [r3, #4]
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	3308      	adds	r3, #8
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d104      	bne.n	800ecea <vTaskSwitchContext+0x8e>
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	685a      	ldr	r2, [r3, #4]
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	605a      	str	r2, [r3, #4]
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	685b      	ldr	r3, [r3, #4]
 800ecee:	68db      	ldr	r3, [r3, #12]
 800ecf0:	4a09      	ldr	r2, [pc, #36]	; (800ed18 <vTaskSwitchContext+0xbc>)
 800ecf2:	6013      	str	r3, [r2, #0]
 800ecf4:	4a06      	ldr	r2, [pc, #24]	; (800ed10 <vTaskSwitchContext+0xb4>)
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6013      	str	r3, [r2, #0]
}
 800ecfa:	bf00      	nop
 800ecfc:	3714      	adds	r7, #20
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr
 800ed06:	bf00      	nop
 800ed08:	200384ac 	.word	0x200384ac
 800ed0c:	20038498 	.word	0x20038498
 800ed10:	2003848c 	.word	0x2003848c
 800ed14:	20037fb4 	.word	0x20037fb4
 800ed18:	20037fb0 	.word	0x20037fb0

0800ed1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b084      	sub	sp, #16
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d10c      	bne.n	800ed46 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800ed2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed30:	b672      	cpsid	i
 800ed32:	f383 8811 	msr	BASEPRI, r3
 800ed36:	f3bf 8f6f 	isb	sy
 800ed3a:	f3bf 8f4f 	dsb	sy
 800ed3e:	b662      	cpsie	i
 800ed40:	60fb      	str	r3, [r7, #12]
}
 800ed42:	bf00      	nop
 800ed44:	e7fe      	b.n	800ed44 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ed46:	4b07      	ldr	r3, [pc, #28]	; (800ed64 <vTaskPlaceOnEventList+0x48>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	3318      	adds	r3, #24
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f7fe fa35 	bl	800d1be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ed54:	2101      	movs	r1, #1
 800ed56:	6838      	ldr	r0, [r7, #0]
 800ed58:	f000 fbac 	bl	800f4b4 <prvAddCurrentTaskToDelayedList>
}
 800ed5c:	bf00      	nop
 800ed5e:	3710      	adds	r7, #16
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}
 800ed64:	20037fb0 	.word	0x20037fb0

0800ed68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b086      	sub	sp, #24
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	60b9      	str	r1, [r7, #8]
 800ed72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d10c      	bne.n	800ed94 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800ed7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed7e:	b672      	cpsid	i
 800ed80:	f383 8811 	msr	BASEPRI, r3
 800ed84:	f3bf 8f6f 	isb	sy
 800ed88:	f3bf 8f4f 	dsb	sy
 800ed8c:	b662      	cpsie	i
 800ed8e:	617b      	str	r3, [r7, #20]
}
 800ed90:	bf00      	nop
 800ed92:	e7fe      	b.n	800ed92 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ed94:	4b0a      	ldr	r3, [pc, #40]	; (800edc0 <vTaskPlaceOnEventListRestricted+0x58>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	3318      	adds	r3, #24
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	68f8      	ldr	r0, [r7, #12]
 800ed9e:	f7fe f9ea 	bl	800d176 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d002      	beq.n	800edae <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800eda8:	f04f 33ff 	mov.w	r3, #4294967295
 800edac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800edae:	6879      	ldr	r1, [r7, #4]
 800edb0:	68b8      	ldr	r0, [r7, #8]
 800edb2:	f000 fb7f 	bl	800f4b4 <prvAddCurrentTaskToDelayedList>
	}
 800edb6:	bf00      	nop
 800edb8:	3718      	adds	r7, #24
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}
 800edbe:	bf00      	nop
 800edc0:	20037fb0 	.word	0x20037fb0

0800edc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b086      	sub	sp, #24
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	68db      	ldr	r3, [r3, #12]
 800edd0:	68db      	ldr	r3, [r3, #12]
 800edd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d10c      	bne.n	800edf4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800edda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edde:	b672      	cpsid	i
 800ede0:	f383 8811 	msr	BASEPRI, r3
 800ede4:	f3bf 8f6f 	isb	sy
 800ede8:	f3bf 8f4f 	dsb	sy
 800edec:	b662      	cpsie	i
 800edee:	60fb      	str	r3, [r7, #12]
}
 800edf0:	bf00      	nop
 800edf2:	e7fe      	b.n	800edf2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	3318      	adds	r3, #24
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7fe fa19 	bl	800d230 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edfe:	4b1e      	ldr	r3, [pc, #120]	; (800ee78 <xTaskRemoveFromEventList+0xb4>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d11d      	bne.n	800ee42 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	3304      	adds	r3, #4
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7fe fa10 	bl	800d230 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee14:	4b19      	ldr	r3, [pc, #100]	; (800ee7c <xTaskRemoveFromEventList+0xb8>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d903      	bls.n	800ee24 <xTaskRemoveFromEventList+0x60>
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee20:	4a16      	ldr	r2, [pc, #88]	; (800ee7c <xTaskRemoveFromEventList+0xb8>)
 800ee22:	6013      	str	r3, [r2, #0]
 800ee24:	693b      	ldr	r3, [r7, #16]
 800ee26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee28:	4613      	mov	r3, r2
 800ee2a:	009b      	lsls	r3, r3, #2
 800ee2c:	4413      	add	r3, r2
 800ee2e:	009b      	lsls	r3, r3, #2
 800ee30:	4a13      	ldr	r2, [pc, #76]	; (800ee80 <xTaskRemoveFromEventList+0xbc>)
 800ee32:	441a      	add	r2, r3
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	3304      	adds	r3, #4
 800ee38:	4619      	mov	r1, r3
 800ee3a:	4610      	mov	r0, r2
 800ee3c:	f7fe f99b 	bl	800d176 <vListInsertEnd>
 800ee40:	e005      	b.n	800ee4e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	3318      	adds	r3, #24
 800ee46:	4619      	mov	r1, r3
 800ee48:	480e      	ldr	r0, [pc, #56]	; (800ee84 <xTaskRemoveFromEventList+0xc0>)
 800ee4a:	f7fe f994 	bl	800d176 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ee4e:	693b      	ldr	r3, [r7, #16]
 800ee50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee52:	4b0d      	ldr	r3, [pc, #52]	; (800ee88 <xTaskRemoveFromEventList+0xc4>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d905      	bls.n	800ee68 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ee60:	4b0a      	ldr	r3, [pc, #40]	; (800ee8c <xTaskRemoveFromEventList+0xc8>)
 800ee62:	2201      	movs	r2, #1
 800ee64:	601a      	str	r2, [r3, #0]
 800ee66:	e001      	b.n	800ee6c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ee6c:	697b      	ldr	r3, [r7, #20]
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3718      	adds	r7, #24
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
 800ee76:	bf00      	nop
 800ee78:	200384ac 	.word	0x200384ac
 800ee7c:	2003848c 	.word	0x2003848c
 800ee80:	20037fb4 	.word	0x20037fb4
 800ee84:	20038444 	.word	0x20038444
 800ee88:	20037fb0 	.word	0x20037fb0
 800ee8c:	20038498 	.word	0x20038498

0800ee90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ee90:	b480      	push	{r7}
 800ee92:	b083      	sub	sp, #12
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ee98:	4b06      	ldr	r3, [pc, #24]	; (800eeb4 <vTaskInternalSetTimeOutState+0x24>)
 800ee9a:	681a      	ldr	r2, [r3, #0]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eea0:	4b05      	ldr	r3, [pc, #20]	; (800eeb8 <vTaskInternalSetTimeOutState+0x28>)
 800eea2:	681a      	ldr	r2, [r3, #0]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	605a      	str	r2, [r3, #4]
}
 800eea8:	bf00      	nop
 800eeaa:	370c      	adds	r7, #12
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr
 800eeb4:	2003849c 	.word	0x2003849c
 800eeb8:	20038488 	.word	0x20038488

0800eebc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b088      	sub	sp, #32
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d10c      	bne.n	800eee6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800eecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed0:	b672      	cpsid	i
 800eed2:	f383 8811 	msr	BASEPRI, r3
 800eed6:	f3bf 8f6f 	isb	sy
 800eeda:	f3bf 8f4f 	dsb	sy
 800eede:	b662      	cpsie	i
 800eee0:	613b      	str	r3, [r7, #16]
}
 800eee2:	bf00      	nop
 800eee4:	e7fe      	b.n	800eee4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d10c      	bne.n	800ef06 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800eeec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef0:	b672      	cpsid	i
 800eef2:	f383 8811 	msr	BASEPRI, r3
 800eef6:	f3bf 8f6f 	isb	sy
 800eefa:	f3bf 8f4f 	dsb	sy
 800eefe:	b662      	cpsie	i
 800ef00:	60fb      	str	r3, [r7, #12]
}
 800ef02:	bf00      	nop
 800ef04:	e7fe      	b.n	800ef04 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ef06:	f000 ff99 	bl	800fe3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ef0a:	4b24      	ldr	r3, [pc, #144]	; (800ef9c <xTaskCheckForTimeOut+0xe0>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	69ba      	ldr	r2, [r7, #24]
 800ef16:	1ad3      	subs	r3, r2, r3
 800ef18:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800ef1a:	4b21      	ldr	r3, [pc, #132]	; (800efa0 <xTaskCheckForTimeOut+0xe4>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d007      	beq.n	800ef36 <xTaskCheckForTimeOut+0x7a>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800ef26:	4b1e      	ldr	r3, [pc, #120]	; (800efa0 <xTaskCheckForTimeOut+0xe4>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
				xReturn = pdTRUE;
 800ef30:	2301      	movs	r3, #1
 800ef32:	61fb      	str	r3, [r7, #28]
 800ef34:	e02b      	b.n	800ef8e <xTaskCheckForTimeOut+0xd2>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef3e:	d102      	bne.n	800ef46 <xTaskCheckForTimeOut+0x8a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ef40:	2300      	movs	r3, #0
 800ef42:	61fb      	str	r3, [r7, #28]
 800ef44:	e023      	b.n	800ef8e <xTaskCheckForTimeOut+0xd2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681a      	ldr	r2, [r3, #0]
 800ef4a:	4b16      	ldr	r3, [pc, #88]	; (800efa4 <xTaskCheckForTimeOut+0xe8>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d007      	beq.n	800ef62 <xTaskCheckForTimeOut+0xa6>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	685b      	ldr	r3, [r3, #4]
 800ef56:	69ba      	ldr	r2, [r7, #24]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d302      	bcc.n	800ef62 <xTaskCheckForTimeOut+0xa6>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	61fb      	str	r3, [r7, #28]
 800ef60:	e015      	b.n	800ef8e <xTaskCheckForTimeOut+0xd2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	697a      	ldr	r2, [r7, #20]
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d20b      	bcs.n	800ef84 <xTaskCheckForTimeOut+0xc8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	681a      	ldr	r2, [r3, #0]
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	1ad2      	subs	r2, r2, r3
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f7ff ff89 	bl	800ee90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	61fb      	str	r3, [r7, #28]
 800ef82:	e004      	b.n	800ef8e <xTaskCheckForTimeOut+0xd2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	2200      	movs	r2, #0
 800ef88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ef8e:	f000 ff89 	bl	800fea4 <vPortExitCritical>

	return xReturn;
 800ef92:	69fb      	ldr	r3, [r7, #28]
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3720      	adds	r7, #32
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}
 800ef9c:	20038488 	.word	0x20038488
 800efa0:	20037fb0 	.word	0x20037fb0
 800efa4:	2003849c 	.word	0x2003849c

0800efa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800efa8:	b480      	push	{r7}
 800efaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800efac:	4b03      	ldr	r3, [pc, #12]	; (800efbc <vTaskMissedYield+0x14>)
 800efae:	2201      	movs	r2, #1
 800efb0:	601a      	str	r2, [r3, #0]
}
 800efb2:	bf00      	nop
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr
 800efbc:	20038498 	.word	0x20038498

0800efc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800efc8:	f000 f852 	bl	800f070 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800efcc:	4b06      	ldr	r3, [pc, #24]	; (800efe8 <prvIdleTask+0x28>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2b01      	cmp	r3, #1
 800efd2:	d9f9      	bls.n	800efc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800efd4:	4b05      	ldr	r3, [pc, #20]	; (800efec <prvIdleTask+0x2c>)
 800efd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efda:	601a      	str	r2, [r3, #0]
 800efdc:	f3bf 8f4f 	dsb	sy
 800efe0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800efe4:	e7f0      	b.n	800efc8 <prvIdleTask+0x8>
 800efe6:	bf00      	nop
 800efe8:	20037fb4 	.word	0x20037fb4
 800efec:	e000ed04 	.word	0xe000ed04

0800eff0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b082      	sub	sp, #8
 800eff4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eff6:	2300      	movs	r3, #0
 800eff8:	607b      	str	r3, [r7, #4]
 800effa:	e00c      	b.n	800f016 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800effc:	687a      	ldr	r2, [r7, #4]
 800effe:	4613      	mov	r3, r2
 800f000:	009b      	lsls	r3, r3, #2
 800f002:	4413      	add	r3, r2
 800f004:	009b      	lsls	r3, r3, #2
 800f006:	4a12      	ldr	r2, [pc, #72]	; (800f050 <prvInitialiseTaskLists+0x60>)
 800f008:	4413      	add	r3, r2
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7fe f886 	bl	800d11c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	3301      	adds	r3, #1
 800f014:	607b      	str	r3, [r7, #4]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2b37      	cmp	r3, #55	; 0x37
 800f01a:	d9ef      	bls.n	800effc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f01c:	480d      	ldr	r0, [pc, #52]	; (800f054 <prvInitialiseTaskLists+0x64>)
 800f01e:	f7fe f87d 	bl	800d11c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f022:	480d      	ldr	r0, [pc, #52]	; (800f058 <prvInitialiseTaskLists+0x68>)
 800f024:	f7fe f87a 	bl	800d11c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f028:	480c      	ldr	r0, [pc, #48]	; (800f05c <prvInitialiseTaskLists+0x6c>)
 800f02a:	f7fe f877 	bl	800d11c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f02e:	480c      	ldr	r0, [pc, #48]	; (800f060 <prvInitialiseTaskLists+0x70>)
 800f030:	f7fe f874 	bl	800d11c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f034:	480b      	ldr	r0, [pc, #44]	; (800f064 <prvInitialiseTaskLists+0x74>)
 800f036:	f7fe f871 	bl	800d11c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f03a:	4b0b      	ldr	r3, [pc, #44]	; (800f068 <prvInitialiseTaskLists+0x78>)
 800f03c:	4a05      	ldr	r2, [pc, #20]	; (800f054 <prvInitialiseTaskLists+0x64>)
 800f03e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f040:	4b0a      	ldr	r3, [pc, #40]	; (800f06c <prvInitialiseTaskLists+0x7c>)
 800f042:	4a05      	ldr	r2, [pc, #20]	; (800f058 <prvInitialiseTaskLists+0x68>)
 800f044:	601a      	str	r2, [r3, #0]
}
 800f046:	bf00      	nop
 800f048:	3708      	adds	r7, #8
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	20037fb4 	.word	0x20037fb4
 800f054:	20038414 	.word	0x20038414
 800f058:	20038428 	.word	0x20038428
 800f05c:	20038444 	.word	0x20038444
 800f060:	20038458 	.word	0x20038458
 800f064:	20038470 	.word	0x20038470
 800f068:	2003843c 	.word	0x2003843c
 800f06c:	20038440 	.word	0x20038440

0800f070 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f076:	e019      	b.n	800f0ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f078:	f000 fee0 	bl	800fe3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f07c:	4b10      	ldr	r3, [pc, #64]	; (800f0c0 <prvCheckTasksWaitingTermination+0x50>)
 800f07e:	68db      	ldr	r3, [r3, #12]
 800f080:	68db      	ldr	r3, [r3, #12]
 800f082:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	3304      	adds	r3, #4
 800f088:	4618      	mov	r0, r3
 800f08a:	f7fe f8d1 	bl	800d230 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f08e:	4b0d      	ldr	r3, [pc, #52]	; (800f0c4 <prvCheckTasksWaitingTermination+0x54>)
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	3b01      	subs	r3, #1
 800f094:	4a0b      	ldr	r2, [pc, #44]	; (800f0c4 <prvCheckTasksWaitingTermination+0x54>)
 800f096:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f098:	4b0b      	ldr	r3, [pc, #44]	; (800f0c8 <prvCheckTasksWaitingTermination+0x58>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	3b01      	subs	r3, #1
 800f09e:	4a0a      	ldr	r2, [pc, #40]	; (800f0c8 <prvCheckTasksWaitingTermination+0x58>)
 800f0a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f0a2:	f000 feff 	bl	800fea4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 f810 	bl	800f0cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f0ac:	4b06      	ldr	r3, [pc, #24]	; (800f0c8 <prvCheckTasksWaitingTermination+0x58>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d1e1      	bne.n	800f078 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f0b4:	bf00      	nop
 800f0b6:	bf00      	nop
 800f0b8:	3708      	adds	r7, #8
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	20038458 	.word	0x20038458
 800f0c4:	20038484 	.word	0x20038484
 800f0c8:	2003846c 	.word	0x2003846c

0800f0cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b084      	sub	sp, #16
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d108      	bne.n	800f0f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f001 f8a0 	bl	8010228 <vPortFree>
				vPortFree( pxTCB );
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f001 f89d 	bl	8010228 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f0ee:	e01a      	b.n	800f126 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d103      	bne.n	800f102 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f001 f894 	bl	8010228 <vPortFree>
	}
 800f100:	e011      	b.n	800f126 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f108:	2b02      	cmp	r3, #2
 800f10a:	d00c      	beq.n	800f126 <prvDeleteTCB+0x5a>
	__asm volatile
 800f10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f110:	b672      	cpsid	i
 800f112:	f383 8811 	msr	BASEPRI, r3
 800f116:	f3bf 8f6f 	isb	sy
 800f11a:	f3bf 8f4f 	dsb	sy
 800f11e:	b662      	cpsie	i
 800f120:	60fb      	str	r3, [r7, #12]
}
 800f122:	bf00      	nop
 800f124:	e7fe      	b.n	800f124 <prvDeleteTCB+0x58>
	}
 800f126:	bf00      	nop
 800f128:	3710      	adds	r7, #16
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
	...

0800f130 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f130:	b480      	push	{r7}
 800f132:	b083      	sub	sp, #12
 800f134:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f136:	4b0c      	ldr	r3, [pc, #48]	; (800f168 <prvResetNextTaskUnblockTime+0x38>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d104      	bne.n	800f14a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f140:	4b0a      	ldr	r3, [pc, #40]	; (800f16c <prvResetNextTaskUnblockTime+0x3c>)
 800f142:	f04f 32ff 	mov.w	r2, #4294967295
 800f146:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f148:	e008      	b.n	800f15c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f14a:	4b07      	ldr	r3, [pc, #28]	; (800f168 <prvResetNextTaskUnblockTime+0x38>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	68db      	ldr	r3, [r3, #12]
 800f152:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	4a04      	ldr	r2, [pc, #16]	; (800f16c <prvResetNextTaskUnblockTime+0x3c>)
 800f15a:	6013      	str	r3, [r2, #0]
}
 800f15c:	bf00      	nop
 800f15e:	370c      	adds	r7, #12
 800f160:	46bd      	mov	sp, r7
 800f162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f166:	4770      	bx	lr
 800f168:	2003843c 	.word	0x2003843c
 800f16c:	200384a4 	.word	0x200384a4

0800f170 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f170:	b480      	push	{r7}
 800f172:	b083      	sub	sp, #12
 800f174:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f176:	4b05      	ldr	r3, [pc, #20]	; (800f18c <xTaskGetCurrentTaskHandle+0x1c>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f17c:	687b      	ldr	r3, [r7, #4]
	}
 800f17e:	4618      	mov	r0, r3
 800f180:	370c      	adds	r7, #12
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr
 800f18a:	bf00      	nop
 800f18c:	20037fb0 	.word	0x20037fb0

0800f190 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f190:	b480      	push	{r7}
 800f192:	b083      	sub	sp, #12
 800f194:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f196:	4b0b      	ldr	r3, [pc, #44]	; (800f1c4 <xTaskGetSchedulerState+0x34>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d102      	bne.n	800f1a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f19e:	2301      	movs	r3, #1
 800f1a0:	607b      	str	r3, [r7, #4]
 800f1a2:	e008      	b.n	800f1b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1a4:	4b08      	ldr	r3, [pc, #32]	; (800f1c8 <xTaskGetSchedulerState+0x38>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d102      	bne.n	800f1b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f1ac:	2302      	movs	r3, #2
 800f1ae:	607b      	str	r3, [r7, #4]
 800f1b0:	e001      	b.n	800f1b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f1b6:	687b      	ldr	r3, [r7, #4]
	}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	370c      	adds	r7, #12
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr
 800f1c4:	20038490 	.word	0x20038490
 800f1c8:	200384ac 	.word	0x200384ac

0800f1cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b084      	sub	sp, #16
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d051      	beq.n	800f286 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1e6:	4b2a      	ldr	r3, [pc, #168]	; (800f290 <xTaskPriorityInherit+0xc4>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d241      	bcs.n	800f274 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	699b      	ldr	r3, [r3, #24]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	db06      	blt.n	800f206 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1f8:	4b25      	ldr	r3, [pc, #148]	; (800f290 <xTaskPriorityInherit+0xc4>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	6959      	ldr	r1, [r3, #20]
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f20e:	4613      	mov	r3, r2
 800f210:	009b      	lsls	r3, r3, #2
 800f212:	4413      	add	r3, r2
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	4a1f      	ldr	r2, [pc, #124]	; (800f294 <xTaskPriorityInherit+0xc8>)
 800f218:	4413      	add	r3, r2
 800f21a:	4299      	cmp	r1, r3
 800f21c:	d122      	bne.n	800f264 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	3304      	adds	r3, #4
 800f222:	4618      	mov	r0, r3
 800f224:	f7fe f804 	bl	800d230 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f228:	4b19      	ldr	r3, [pc, #100]	; (800f290 <xTaskPriorityInherit+0xc4>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f236:	4b18      	ldr	r3, [pc, #96]	; (800f298 <xTaskPriorityInherit+0xcc>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d903      	bls.n	800f246 <xTaskPriorityInherit+0x7a>
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f242:	4a15      	ldr	r2, [pc, #84]	; (800f298 <xTaskPriorityInherit+0xcc>)
 800f244:	6013      	str	r3, [r2, #0]
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f24a:	4613      	mov	r3, r2
 800f24c:	009b      	lsls	r3, r3, #2
 800f24e:	4413      	add	r3, r2
 800f250:	009b      	lsls	r3, r3, #2
 800f252:	4a10      	ldr	r2, [pc, #64]	; (800f294 <xTaskPriorityInherit+0xc8>)
 800f254:	441a      	add	r2, r3
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	3304      	adds	r3, #4
 800f25a:	4619      	mov	r1, r3
 800f25c:	4610      	mov	r0, r2
 800f25e:	f7fd ff8a 	bl	800d176 <vListInsertEnd>
 800f262:	e004      	b.n	800f26e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f264:	4b0a      	ldr	r3, [pc, #40]	; (800f290 <xTaskPriorityInherit+0xc4>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f26e:	2301      	movs	r3, #1
 800f270:	60fb      	str	r3, [r7, #12]
 800f272:	e008      	b.n	800f286 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f278:	4b05      	ldr	r3, [pc, #20]	; (800f290 <xTaskPriorityInherit+0xc4>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f27e:	429a      	cmp	r2, r3
 800f280:	d201      	bcs.n	800f286 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f282:	2301      	movs	r3, #1
 800f284:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f286:	68fb      	ldr	r3, [r7, #12]
	}
 800f288:	4618      	mov	r0, r3
 800f28a:	3710      	adds	r7, #16
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}
 800f290:	20037fb0 	.word	0x20037fb0
 800f294:	20037fb4 	.word	0x20037fb4
 800f298:	2003848c 	.word	0x2003848c

0800f29c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b086      	sub	sp, #24
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d05a      	beq.n	800f368 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f2b2:	4b30      	ldr	r3, [pc, #192]	; (800f374 <xTaskPriorityDisinherit+0xd8>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	693a      	ldr	r2, [r7, #16]
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d00c      	beq.n	800f2d6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800f2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c0:	b672      	cpsid	i
 800f2c2:	f383 8811 	msr	BASEPRI, r3
 800f2c6:	f3bf 8f6f 	isb	sy
 800f2ca:	f3bf 8f4f 	dsb	sy
 800f2ce:	b662      	cpsie	i
 800f2d0:	60fb      	str	r3, [r7, #12]
}
 800f2d2:	bf00      	nop
 800f2d4:	e7fe      	b.n	800f2d4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d10c      	bne.n	800f2f8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800f2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e2:	b672      	cpsid	i
 800f2e4:	f383 8811 	msr	BASEPRI, r3
 800f2e8:	f3bf 8f6f 	isb	sy
 800f2ec:	f3bf 8f4f 	dsb	sy
 800f2f0:	b662      	cpsie	i
 800f2f2:	60bb      	str	r3, [r7, #8]
}
 800f2f4:	bf00      	nop
 800f2f6:	e7fe      	b.n	800f2f6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2fc:	1e5a      	subs	r2, r3, #1
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d02c      	beq.n	800f368 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f312:	2b00      	cmp	r3, #0
 800f314:	d128      	bne.n	800f368 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f316:	693b      	ldr	r3, [r7, #16]
 800f318:	3304      	adds	r3, #4
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7fd ff88 	bl	800d230 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f324:	693b      	ldr	r3, [r7, #16]
 800f326:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f32c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f338:	4b0f      	ldr	r3, [pc, #60]	; (800f378 <xTaskPriorityDisinherit+0xdc>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d903      	bls.n	800f348 <xTaskPriorityDisinherit+0xac>
 800f340:	693b      	ldr	r3, [r7, #16]
 800f342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f344:	4a0c      	ldr	r2, [pc, #48]	; (800f378 <xTaskPriorityDisinherit+0xdc>)
 800f346:	6013      	str	r3, [r2, #0]
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f34c:	4613      	mov	r3, r2
 800f34e:	009b      	lsls	r3, r3, #2
 800f350:	4413      	add	r3, r2
 800f352:	009b      	lsls	r3, r3, #2
 800f354:	4a09      	ldr	r2, [pc, #36]	; (800f37c <xTaskPriorityDisinherit+0xe0>)
 800f356:	441a      	add	r2, r3
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	3304      	adds	r3, #4
 800f35c:	4619      	mov	r1, r3
 800f35e:	4610      	mov	r0, r2
 800f360:	f7fd ff09 	bl	800d176 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f364:	2301      	movs	r3, #1
 800f366:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f368:	697b      	ldr	r3, [r7, #20]
	}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3718      	adds	r7, #24
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}
 800f372:	bf00      	nop
 800f374:	20037fb0 	.word	0x20037fb0
 800f378:	2003848c 	.word	0x2003848c
 800f37c:	20037fb4 	.word	0x20037fb4

0800f380 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f380:	b580      	push	{r7, lr}
 800f382:	b088      	sub	sp, #32
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f38e:	2301      	movs	r3, #1
 800f390:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d06e      	beq.n	800f476 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f398:	69bb      	ldr	r3, [r7, #24]
 800f39a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d10c      	bne.n	800f3ba <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800f3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3a4:	b672      	cpsid	i
 800f3a6:	f383 8811 	msr	BASEPRI, r3
 800f3aa:	f3bf 8f6f 	isb	sy
 800f3ae:	f3bf 8f4f 	dsb	sy
 800f3b2:	b662      	cpsie	i
 800f3b4:	60fb      	str	r3, [r7, #12]
}
 800f3b6:	bf00      	nop
 800f3b8:	e7fe      	b.n	800f3b8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f3ba:	69bb      	ldr	r3, [r7, #24]
 800f3bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3be:	683a      	ldr	r2, [r7, #0]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d902      	bls.n	800f3ca <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	61fb      	str	r3, [r7, #28]
 800f3c8:	e002      	b.n	800f3d0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f3ca:	69bb      	ldr	r3, [r7, #24]
 800f3cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3ce:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f3d0:	69bb      	ldr	r3, [r7, #24]
 800f3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3d4:	69fa      	ldr	r2, [r7, #28]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d04d      	beq.n	800f476 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f3da:	69bb      	ldr	r3, [r7, #24]
 800f3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3de:	697a      	ldr	r2, [r7, #20]
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d148      	bne.n	800f476 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f3e4:	4b26      	ldr	r3, [pc, #152]	; (800f480 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	69ba      	ldr	r2, [r7, #24]
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d10c      	bne.n	800f408 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800f3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f2:	b672      	cpsid	i
 800f3f4:	f383 8811 	msr	BASEPRI, r3
 800f3f8:	f3bf 8f6f 	isb	sy
 800f3fc:	f3bf 8f4f 	dsb	sy
 800f400:	b662      	cpsie	i
 800f402:	60bb      	str	r3, [r7, #8]
}
 800f404:	bf00      	nop
 800f406:	e7fe      	b.n	800f406 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f408:	69bb      	ldr	r3, [r7, #24]
 800f40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f40c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f40e:	69bb      	ldr	r3, [r7, #24]
 800f410:	69fa      	ldr	r2, [r7, #28]
 800f412:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	699b      	ldr	r3, [r3, #24]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	db04      	blt.n	800f426 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f41c:	69fb      	ldr	r3, [r7, #28]
 800f41e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f422:	69bb      	ldr	r3, [r7, #24]
 800f424:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f426:	69bb      	ldr	r3, [r7, #24]
 800f428:	6959      	ldr	r1, [r3, #20]
 800f42a:	693a      	ldr	r2, [r7, #16]
 800f42c:	4613      	mov	r3, r2
 800f42e:	009b      	lsls	r3, r3, #2
 800f430:	4413      	add	r3, r2
 800f432:	009b      	lsls	r3, r3, #2
 800f434:	4a13      	ldr	r2, [pc, #76]	; (800f484 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f436:	4413      	add	r3, r2
 800f438:	4299      	cmp	r1, r3
 800f43a:	d11c      	bne.n	800f476 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f43c:	69bb      	ldr	r3, [r7, #24]
 800f43e:	3304      	adds	r3, #4
 800f440:	4618      	mov	r0, r3
 800f442:	f7fd fef5 	bl	800d230 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f446:	69bb      	ldr	r3, [r7, #24]
 800f448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f44a:	4b0f      	ldr	r3, [pc, #60]	; (800f488 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	429a      	cmp	r2, r3
 800f450:	d903      	bls.n	800f45a <vTaskPriorityDisinheritAfterTimeout+0xda>
 800f452:	69bb      	ldr	r3, [r7, #24]
 800f454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f456:	4a0c      	ldr	r2, [pc, #48]	; (800f488 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800f458:	6013      	str	r3, [r2, #0]
 800f45a:	69bb      	ldr	r3, [r7, #24]
 800f45c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f45e:	4613      	mov	r3, r2
 800f460:	009b      	lsls	r3, r3, #2
 800f462:	4413      	add	r3, r2
 800f464:	009b      	lsls	r3, r3, #2
 800f466:	4a07      	ldr	r2, [pc, #28]	; (800f484 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f468:	441a      	add	r2, r3
 800f46a:	69bb      	ldr	r3, [r7, #24]
 800f46c:	3304      	adds	r3, #4
 800f46e:	4619      	mov	r1, r3
 800f470:	4610      	mov	r0, r2
 800f472:	f7fd fe80 	bl	800d176 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f476:	bf00      	nop
 800f478:	3720      	adds	r7, #32
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	20037fb0 	.word	0x20037fb0
 800f484:	20037fb4 	.word	0x20037fb4
 800f488:	2003848c 	.word	0x2003848c

0800f48c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f48c:	b480      	push	{r7}
 800f48e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f490:	4b07      	ldr	r3, [pc, #28]	; (800f4b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d004      	beq.n	800f4a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f498:	4b05      	ldr	r3, [pc, #20]	; (800f4b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f49e:	3201      	adds	r2, #1
 800f4a0:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800f4a2:	4b03      	ldr	r3, [pc, #12]	; (800f4b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
	}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr
 800f4b0:	20037fb0 	.word	0x20037fb0

0800f4b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f4be:	4b24      	ldr	r3, [pc, #144]	; (800f550 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800f4c4:	4b23      	ldr	r3, [pc, #140]	; (800f554 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4ce:	4b21      	ldr	r3, [pc, #132]	; (800f554 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	3304      	adds	r3, #4
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7fd feab 	bl	800d230 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4e0:	d10a      	bne.n	800f4f8 <prvAddCurrentTaskToDelayedList+0x44>
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d007      	beq.n	800f4f8 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f4e8:	4b1a      	ldr	r3, [pc, #104]	; (800f554 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	3304      	adds	r3, #4
 800f4ee:	4619      	mov	r1, r3
 800f4f0:	4819      	ldr	r0, [pc, #100]	; (800f558 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f4f2:	f7fd fe40 	bl	800d176 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f4f6:	e026      	b.n	800f546 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f4f8:	68fa      	ldr	r2, [r7, #12]
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f500:	4b14      	ldr	r3, [pc, #80]	; (800f554 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	68ba      	ldr	r2, [r7, #8]
 800f506:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f508:	68ba      	ldr	r2, [r7, #8]
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d209      	bcs.n	800f524 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f510:	4b12      	ldr	r3, [pc, #72]	; (800f55c <prvAddCurrentTaskToDelayedList+0xa8>)
 800f512:	681a      	ldr	r2, [r3, #0]
 800f514:	4b0f      	ldr	r3, [pc, #60]	; (800f554 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	3304      	adds	r3, #4
 800f51a:	4619      	mov	r1, r3
 800f51c:	4610      	mov	r0, r2
 800f51e:	f7fd fe4e 	bl	800d1be <vListInsert>
}
 800f522:	e010      	b.n	800f546 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f524:	4b0e      	ldr	r3, [pc, #56]	; (800f560 <prvAddCurrentTaskToDelayedList+0xac>)
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	4b0a      	ldr	r3, [pc, #40]	; (800f554 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	3304      	adds	r3, #4
 800f52e:	4619      	mov	r1, r3
 800f530:	4610      	mov	r0, r2
 800f532:	f7fd fe44 	bl	800d1be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f536:	4b0b      	ldr	r3, [pc, #44]	; (800f564 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	68ba      	ldr	r2, [r7, #8]
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d202      	bcs.n	800f546 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 800f540:	4a08      	ldr	r2, [pc, #32]	; (800f564 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	6013      	str	r3, [r2, #0]
}
 800f546:	bf00      	nop
 800f548:	3710      	adds	r7, #16
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	20038488 	.word	0x20038488
 800f554:	20037fb0 	.word	0x20037fb0
 800f558:	20038470 	.word	0x20038470
 800f55c:	20038440 	.word	0x20038440
 800f560:	2003843c 	.word	0x2003843c
 800f564:	200384a4 	.word	0x200384a4

0800f568 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b08a      	sub	sp, #40	; 0x28
 800f56c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f56e:	2300      	movs	r3, #0
 800f570:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f572:	f000 fb15 	bl	800fba0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f576:	4b1d      	ldr	r3, [pc, #116]	; (800f5ec <xTimerCreateTimerTask+0x84>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d021      	beq.n	800f5c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f57e:	2300      	movs	r3, #0
 800f580:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f582:	2300      	movs	r3, #0
 800f584:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f586:	1d3a      	adds	r2, r7, #4
 800f588:	f107 0108 	add.w	r1, r7, #8
 800f58c:	f107 030c 	add.w	r3, r7, #12
 800f590:	4618      	mov	r0, r3
 800f592:	f7fd fda9 	bl	800d0e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f596:	6879      	ldr	r1, [r7, #4]
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	68fa      	ldr	r2, [r7, #12]
 800f59c:	9202      	str	r2, [sp, #8]
 800f59e:	9301      	str	r3, [sp, #4]
 800f5a0:	2302      	movs	r3, #2
 800f5a2:	9300      	str	r3, [sp, #0]
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	460a      	mov	r2, r1
 800f5a8:	4911      	ldr	r1, [pc, #68]	; (800f5f0 <xTimerCreateTimerTask+0x88>)
 800f5aa:	4812      	ldr	r0, [pc, #72]	; (800f5f4 <xTimerCreateTimerTask+0x8c>)
 800f5ac:	f7fe ff7a 	bl	800e4a4 <xTaskCreateStatic>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	4a11      	ldr	r2, [pc, #68]	; (800f5f8 <xTimerCreateTimerTask+0x90>)
 800f5b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f5b6:	4b10      	ldr	r3, [pc, #64]	; (800f5f8 <xTimerCreateTimerTask+0x90>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d001      	beq.n	800f5c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f5be:	2301      	movs	r3, #1
 800f5c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d10c      	bne.n	800f5e2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800f5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5cc:	b672      	cpsid	i
 800f5ce:	f383 8811 	msr	BASEPRI, r3
 800f5d2:	f3bf 8f6f 	isb	sy
 800f5d6:	f3bf 8f4f 	dsb	sy
 800f5da:	b662      	cpsie	i
 800f5dc:	613b      	str	r3, [r7, #16]
}
 800f5de:	bf00      	nop
 800f5e0:	e7fe      	b.n	800f5e0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800f5e2:	697b      	ldr	r3, [r7, #20]
}
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	3718      	adds	r7, #24
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}
 800f5ec:	200384e0 	.word	0x200384e0
 800f5f0:	08017344 	.word	0x08017344
 800f5f4:	0800f739 	.word	0x0800f739
 800f5f8:	200384e4 	.word	0x200384e4

0800f5fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b08a      	sub	sp, #40	; 0x28
 800f600:	af00      	add	r7, sp, #0
 800f602:	60f8      	str	r0, [r7, #12]
 800f604:	60b9      	str	r1, [r7, #8]
 800f606:	607a      	str	r2, [r7, #4]
 800f608:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f60a:	2300      	movs	r3, #0
 800f60c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d10c      	bne.n	800f62e <xTimerGenericCommand+0x32>
	__asm volatile
 800f614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f618:	b672      	cpsid	i
 800f61a:	f383 8811 	msr	BASEPRI, r3
 800f61e:	f3bf 8f6f 	isb	sy
 800f622:	f3bf 8f4f 	dsb	sy
 800f626:	b662      	cpsie	i
 800f628:	623b      	str	r3, [r7, #32]
}
 800f62a:	bf00      	nop
 800f62c:	e7fe      	b.n	800f62c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f62e:	4b1a      	ldr	r3, [pc, #104]	; (800f698 <xTimerGenericCommand+0x9c>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d02a      	beq.n	800f68c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	2b05      	cmp	r3, #5
 800f646:	dc18      	bgt.n	800f67a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f648:	f7ff fda2 	bl	800f190 <xTaskGetSchedulerState>
 800f64c:	4603      	mov	r3, r0
 800f64e:	2b02      	cmp	r3, #2
 800f650:	d109      	bne.n	800f666 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f652:	4b11      	ldr	r3, [pc, #68]	; (800f698 <xTimerGenericCommand+0x9c>)
 800f654:	6818      	ldr	r0, [r3, #0]
 800f656:	f107 0110 	add.w	r1, r7, #16
 800f65a:	2300      	movs	r3, #0
 800f65c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f65e:	f7fe f88f 	bl	800d780 <xQueueGenericSend>
 800f662:	6278      	str	r0, [r7, #36]	; 0x24
 800f664:	e012      	b.n	800f68c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f666:	4b0c      	ldr	r3, [pc, #48]	; (800f698 <xTimerGenericCommand+0x9c>)
 800f668:	6818      	ldr	r0, [r3, #0]
 800f66a:	f107 0110 	add.w	r1, r7, #16
 800f66e:	2300      	movs	r3, #0
 800f670:	2200      	movs	r2, #0
 800f672:	f7fe f885 	bl	800d780 <xQueueGenericSend>
 800f676:	6278      	str	r0, [r7, #36]	; 0x24
 800f678:	e008      	b.n	800f68c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f67a:	4b07      	ldr	r3, [pc, #28]	; (800f698 <xTimerGenericCommand+0x9c>)
 800f67c:	6818      	ldr	r0, [r3, #0]
 800f67e:	f107 0110 	add.w	r1, r7, #16
 800f682:	2300      	movs	r3, #0
 800f684:	683a      	ldr	r2, [r7, #0]
 800f686:	f7fe f981 	bl	800d98c <xQueueGenericSendFromISR>
 800f68a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3728      	adds	r7, #40	; 0x28
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop
 800f698:	200384e0 	.word	0x200384e0

0800f69c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b088      	sub	sp, #32
 800f6a0:	af02      	add	r7, sp, #8
 800f6a2:	6078      	str	r0, [r7, #4]
 800f6a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6a6:	4b23      	ldr	r3, [pc, #140]	; (800f734 <prvProcessExpiredTimer+0x98>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	68db      	ldr	r3, [r3, #12]
 800f6ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	3304      	adds	r3, #4
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7fd fdbb 	bl	800d230 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f6c0:	f003 0304 	and.w	r3, r3, #4
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d024      	beq.n	800f712 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	699a      	ldr	r2, [r3, #24]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	18d1      	adds	r1, r2, r3
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	683a      	ldr	r2, [r7, #0]
 800f6d4:	6978      	ldr	r0, [r7, #20]
 800f6d6:	f000 f8d3 	bl	800f880 <prvInsertTimerInActiveList>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d021      	beq.n	800f724 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	9300      	str	r3, [sp, #0]
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	2100      	movs	r1, #0
 800f6ea:	6978      	ldr	r0, [r7, #20]
 800f6ec:	f7ff ff86 	bl	800f5fc <xTimerGenericCommand>
 800f6f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d115      	bne.n	800f724 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800f6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6fc:	b672      	cpsid	i
 800f6fe:	f383 8811 	msr	BASEPRI, r3
 800f702:	f3bf 8f6f 	isb	sy
 800f706:	f3bf 8f4f 	dsb	sy
 800f70a:	b662      	cpsie	i
 800f70c:	60fb      	str	r3, [r7, #12]
}
 800f70e:	bf00      	nop
 800f710:	e7fe      	b.n	800f710 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f718:	f023 0301 	bic.w	r3, r3, #1
 800f71c:	b2da      	uxtb	r2, r3
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	6a1b      	ldr	r3, [r3, #32]
 800f728:	6978      	ldr	r0, [r7, #20]
 800f72a:	4798      	blx	r3
}
 800f72c:	bf00      	nop
 800f72e:	3718      	adds	r7, #24
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	200384d8 	.word	0x200384d8

0800f738 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b084      	sub	sp, #16
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f740:	f107 0308 	add.w	r3, r7, #8
 800f744:	4618      	mov	r0, r3
 800f746:	f000 f857 	bl	800f7f8 <prvGetNextExpireTime>
 800f74a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	4619      	mov	r1, r3
 800f750:	68f8      	ldr	r0, [r7, #12]
 800f752:	f000 f803 	bl	800f75c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f756:	f000 f8d5 	bl	800f904 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f75a:	e7f1      	b.n	800f740 <prvTimerTask+0x8>

0800f75c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b084      	sub	sp, #16
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f766:	f7ff f8ed 	bl	800e944 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f76a:	f107 0308 	add.w	r3, r7, #8
 800f76e:	4618      	mov	r0, r3
 800f770:	f000 f866 	bl	800f840 <prvSampleTimeNow>
 800f774:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d130      	bne.n	800f7de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d10a      	bne.n	800f798 <prvProcessTimerOrBlockTask+0x3c>
 800f782:	687a      	ldr	r2, [r7, #4]
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	429a      	cmp	r2, r3
 800f788:	d806      	bhi.n	800f798 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f78a:	f7ff f8e9 	bl	800e960 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f78e:	68f9      	ldr	r1, [r7, #12]
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f7ff ff83 	bl	800f69c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f796:	e024      	b.n	800f7e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d008      	beq.n	800f7b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f79e:	4b13      	ldr	r3, [pc, #76]	; (800f7ec <prvProcessTimerOrBlockTask+0x90>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d101      	bne.n	800f7ac <prvProcessTimerOrBlockTask+0x50>
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	e000      	b.n	800f7ae <prvProcessTimerOrBlockTask+0x52>
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f7b0:	4b0f      	ldr	r3, [pc, #60]	; (800f7f0 <prvProcessTimerOrBlockTask+0x94>)
 800f7b2:	6818      	ldr	r0, [r3, #0]
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	1ad3      	subs	r3, r2, r3
 800f7ba:	683a      	ldr	r2, [r7, #0]
 800f7bc:	4619      	mov	r1, r3
 800f7be:	f7fe fe3d 	bl	800e43c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f7c2:	f7ff f8cd 	bl	800e960 <xTaskResumeAll>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d10a      	bne.n	800f7e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f7cc:	4b09      	ldr	r3, [pc, #36]	; (800f7f4 <prvProcessTimerOrBlockTask+0x98>)
 800f7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7d2:	601a      	str	r2, [r3, #0]
 800f7d4:	f3bf 8f4f 	dsb	sy
 800f7d8:	f3bf 8f6f 	isb	sy
}
 800f7dc:	e001      	b.n	800f7e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f7de:	f7ff f8bf 	bl	800e960 <xTaskResumeAll>
}
 800f7e2:	bf00      	nop
 800f7e4:	3710      	adds	r7, #16
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	200384dc 	.word	0x200384dc
 800f7f0:	200384e0 	.word	0x200384e0
 800f7f4:	e000ed04 	.word	0xe000ed04

0800f7f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f7f8:	b480      	push	{r7}
 800f7fa:	b085      	sub	sp, #20
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f800:	4b0e      	ldr	r3, [pc, #56]	; (800f83c <prvGetNextExpireTime+0x44>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d101      	bne.n	800f80e <prvGetNextExpireTime+0x16>
 800f80a:	2201      	movs	r2, #1
 800f80c:	e000      	b.n	800f810 <prvGetNextExpireTime+0x18>
 800f80e:	2200      	movs	r2, #0
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d105      	bne.n	800f828 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f81c:	4b07      	ldr	r3, [pc, #28]	; (800f83c <prvGetNextExpireTime+0x44>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	68db      	ldr	r3, [r3, #12]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	60fb      	str	r3, [r7, #12]
 800f826:	e001      	b.n	800f82c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f828:	2300      	movs	r3, #0
 800f82a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f82c:	68fb      	ldr	r3, [r7, #12]
}
 800f82e:	4618      	mov	r0, r3
 800f830:	3714      	adds	r7, #20
 800f832:	46bd      	mov	sp, r7
 800f834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f838:	4770      	bx	lr
 800f83a:	bf00      	nop
 800f83c:	200384d8 	.word	0x200384d8

0800f840 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b084      	sub	sp, #16
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f848:	f7ff f92a 	bl	800eaa0 <xTaskGetTickCount>
 800f84c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f84e:	4b0b      	ldr	r3, [pc, #44]	; (800f87c <prvSampleTimeNow+0x3c>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	68fa      	ldr	r2, [r7, #12]
 800f854:	429a      	cmp	r2, r3
 800f856:	d205      	bcs.n	800f864 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f858:	f000 f93c 	bl	800fad4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2201      	movs	r2, #1
 800f860:	601a      	str	r2, [r3, #0]
 800f862:	e002      	b.n	800f86a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2200      	movs	r2, #0
 800f868:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f86a:	4a04      	ldr	r2, [pc, #16]	; (800f87c <prvSampleTimeNow+0x3c>)
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f870:	68fb      	ldr	r3, [r7, #12]
}
 800f872:	4618      	mov	r0, r3
 800f874:	3710      	adds	r7, #16
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	200384e8 	.word	0x200384e8

0800f880 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b086      	sub	sp, #24
 800f884:	af00      	add	r7, sp, #0
 800f886:	60f8      	str	r0, [r7, #12]
 800f888:	60b9      	str	r1, [r7, #8]
 800f88a:	607a      	str	r2, [r7, #4]
 800f88c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f88e:	2300      	movs	r3, #0
 800f890:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	68ba      	ldr	r2, [r7, #8]
 800f896:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	68fa      	ldr	r2, [r7, #12]
 800f89c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f89e:	68ba      	ldr	r2, [r7, #8]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	429a      	cmp	r2, r3
 800f8a4:	d812      	bhi.n	800f8cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8a6:	687a      	ldr	r2, [r7, #4]
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	1ad2      	subs	r2, r2, r3
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	699b      	ldr	r3, [r3, #24]
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d302      	bcc.n	800f8ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	617b      	str	r3, [r7, #20]
 800f8b8:	e01b      	b.n	800f8f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f8ba:	4b10      	ldr	r3, [pc, #64]	; (800f8fc <prvInsertTimerInActiveList+0x7c>)
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	3304      	adds	r3, #4
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	4610      	mov	r0, r2
 800f8c6:	f7fd fc7a 	bl	800d1be <vListInsert>
 800f8ca:	e012      	b.n	800f8f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f8cc:	687a      	ldr	r2, [r7, #4]
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d206      	bcs.n	800f8e2 <prvInsertTimerInActiveList+0x62>
 800f8d4:	68ba      	ldr	r2, [r7, #8]
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d302      	bcc.n	800f8e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f8dc:	2301      	movs	r3, #1
 800f8de:	617b      	str	r3, [r7, #20]
 800f8e0:	e007      	b.n	800f8f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f8e2:	4b07      	ldr	r3, [pc, #28]	; (800f900 <prvInsertTimerInActiveList+0x80>)
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	3304      	adds	r3, #4
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	4610      	mov	r0, r2
 800f8ee:	f7fd fc66 	bl	800d1be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f8f2:	697b      	ldr	r3, [r7, #20]
}
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	3718      	adds	r7, #24
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}
 800f8fc:	200384dc 	.word	0x200384dc
 800f900:	200384d8 	.word	0x200384d8

0800f904 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b08e      	sub	sp, #56	; 0x38
 800f908:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f90a:	e0d0      	b.n	800faae <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	da1a      	bge.n	800f948 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f912:	1d3b      	adds	r3, r7, #4
 800f914:	3304      	adds	r3, #4
 800f916:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d10c      	bne.n	800f938 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800f91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f922:	b672      	cpsid	i
 800f924:	f383 8811 	msr	BASEPRI, r3
 800f928:	f3bf 8f6f 	isb	sy
 800f92c:	f3bf 8f4f 	dsb	sy
 800f930:	b662      	cpsie	i
 800f932:	61fb      	str	r3, [r7, #28]
}
 800f934:	bf00      	nop
 800f936:	e7fe      	b.n	800f936 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f93e:	6850      	ldr	r0, [r2, #4]
 800f940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f942:	6892      	ldr	r2, [r2, #8]
 800f944:	4611      	mov	r1, r2
 800f946:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	f2c0 80ae 	blt.w	800faac <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f956:	695b      	ldr	r3, [r3, #20]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d004      	beq.n	800f966 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f95e:	3304      	adds	r3, #4
 800f960:	4618      	mov	r0, r3
 800f962:	f7fd fc65 	bl	800d230 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f966:	463b      	mov	r3, r7
 800f968:	4618      	mov	r0, r3
 800f96a:	f7ff ff69 	bl	800f840 <prvSampleTimeNow>
 800f96e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2b09      	cmp	r3, #9
 800f974:	f200 809b 	bhi.w	800faae <prvProcessReceivedCommands+0x1aa>
 800f978:	a201      	add	r2, pc, #4	; (adr r2, 800f980 <prvProcessReceivedCommands+0x7c>)
 800f97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f97e:	bf00      	nop
 800f980:	0800f9a9 	.word	0x0800f9a9
 800f984:	0800f9a9 	.word	0x0800f9a9
 800f988:	0800f9a9 	.word	0x0800f9a9
 800f98c:	0800fa21 	.word	0x0800fa21
 800f990:	0800fa35 	.word	0x0800fa35
 800f994:	0800fa83 	.word	0x0800fa83
 800f998:	0800f9a9 	.word	0x0800f9a9
 800f99c:	0800f9a9 	.word	0x0800f9a9
 800f9a0:	0800fa21 	.word	0x0800fa21
 800f9a4:	0800fa35 	.word	0x0800fa35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f9ae:	f043 0301 	orr.w	r3, r3, #1
 800f9b2:	b2da      	uxtb	r2, r3
 800f9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f9ba:	68ba      	ldr	r2, [r7, #8]
 800f9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9be:	699b      	ldr	r3, [r3, #24]
 800f9c0:	18d1      	adds	r1, r2, r3
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9c8:	f7ff ff5a 	bl	800f880 <prvInsertTimerInActiveList>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d06d      	beq.n	800faae <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d4:	6a1b      	ldr	r3, [r3, #32]
 800f9d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f9e0:	f003 0304 	and.w	r3, r3, #4
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d062      	beq.n	800faae <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f9e8:	68ba      	ldr	r2, [r7, #8]
 800f9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ec:	699b      	ldr	r3, [r3, #24]
 800f9ee:	441a      	add	r2, r3
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	9300      	str	r3, [sp, #0]
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	2100      	movs	r1, #0
 800f9f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9fa:	f7ff fdff 	bl	800f5fc <xTimerGenericCommand>
 800f9fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fa00:	6a3b      	ldr	r3, [r7, #32]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d153      	bne.n	800faae <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800fa06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa0a:	b672      	cpsid	i
 800fa0c:	f383 8811 	msr	BASEPRI, r3
 800fa10:	f3bf 8f6f 	isb	sy
 800fa14:	f3bf 8f4f 	dsb	sy
 800fa18:	b662      	cpsie	i
 800fa1a:	61bb      	str	r3, [r7, #24]
}
 800fa1c:	bf00      	nop
 800fa1e:	e7fe      	b.n	800fa1e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa26:	f023 0301 	bic.w	r3, r3, #1
 800fa2a:	b2da      	uxtb	r2, r3
 800fa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fa32:	e03c      	b.n	800faae <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fa34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa3a:	f043 0301 	orr.w	r3, r3, #1
 800fa3e:	b2da      	uxtb	r2, r3
 800fa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fa46:	68ba      	ldr	r2, [r7, #8]
 800fa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fa4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa4e:	699b      	ldr	r3, [r3, #24]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d10c      	bne.n	800fa6e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800fa54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa58:	b672      	cpsid	i
 800fa5a:	f383 8811 	msr	BASEPRI, r3
 800fa5e:	f3bf 8f6f 	isb	sy
 800fa62:	f3bf 8f4f 	dsb	sy
 800fa66:	b662      	cpsie	i
 800fa68:	617b      	str	r3, [r7, #20]
}
 800fa6a:	bf00      	nop
 800fa6c:	e7fe      	b.n	800fa6c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fa6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa70:	699a      	ldr	r2, [r3, #24]
 800fa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa74:	18d1      	adds	r1, r2, r3
 800fa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa7c:	f7ff ff00 	bl	800f880 <prvInsertTimerInActiveList>
					break;
 800fa80:	e015      	b.n	800faae <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fa82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa88:	f003 0302 	and.w	r3, r3, #2
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d103      	bne.n	800fa98 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800fa90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa92:	f000 fbc9 	bl	8010228 <vPortFree>
 800fa96:	e00a      	b.n	800faae <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa9e:	f023 0301 	bic.w	r3, r3, #1
 800faa2:	b2da      	uxtb	r2, r3
 800faa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800faaa:	e000      	b.n	800faae <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800faac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800faae:	4b08      	ldr	r3, [pc, #32]	; (800fad0 <prvProcessReceivedCommands+0x1cc>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	1d39      	adds	r1, r7, #4
 800fab4:	2200      	movs	r2, #0
 800fab6:	4618      	mov	r0, r3
 800fab8:	f7fe f89e 	bl	800dbf8 <xQueueReceive>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	f47f af24 	bne.w	800f90c <prvProcessReceivedCommands+0x8>
	}
}
 800fac4:	bf00      	nop
 800fac6:	bf00      	nop
 800fac8:	3730      	adds	r7, #48	; 0x30
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}
 800face:	bf00      	nop
 800fad0:	200384e0 	.word	0x200384e0

0800fad4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b088      	sub	sp, #32
 800fad8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fada:	e04a      	b.n	800fb72 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fadc:	4b2e      	ldr	r3, [pc, #184]	; (800fb98 <prvSwitchTimerLists+0xc4>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fae6:	4b2c      	ldr	r3, [pc, #176]	; (800fb98 <prvSwitchTimerLists+0xc4>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	68db      	ldr	r3, [r3, #12]
 800faec:	68db      	ldr	r3, [r3, #12]
 800faee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	3304      	adds	r3, #4
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7fd fb9b 	bl	800d230 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	6a1b      	ldr	r3, [r3, #32]
 800fafe:	68f8      	ldr	r0, [r7, #12]
 800fb00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb08:	f003 0304 	and.w	r3, r3, #4
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d030      	beq.n	800fb72 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	699b      	ldr	r3, [r3, #24]
 800fb14:	693a      	ldr	r2, [r7, #16]
 800fb16:	4413      	add	r3, r2
 800fb18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fb1a:	68ba      	ldr	r2, [r7, #8]
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d90e      	bls.n	800fb40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	68ba      	ldr	r2, [r7, #8]
 800fb26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	68fa      	ldr	r2, [r7, #12]
 800fb2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb2e:	4b1a      	ldr	r3, [pc, #104]	; (800fb98 <prvSwitchTimerLists+0xc4>)
 800fb30:	681a      	ldr	r2, [r3, #0]
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	3304      	adds	r3, #4
 800fb36:	4619      	mov	r1, r3
 800fb38:	4610      	mov	r0, r2
 800fb3a:	f7fd fb40 	bl	800d1be <vListInsert>
 800fb3e:	e018      	b.n	800fb72 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb40:	2300      	movs	r3, #0
 800fb42:	9300      	str	r3, [sp, #0]
 800fb44:	2300      	movs	r3, #0
 800fb46:	693a      	ldr	r2, [r7, #16]
 800fb48:	2100      	movs	r1, #0
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	f7ff fd56 	bl	800f5fc <xTimerGenericCommand>
 800fb50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d10c      	bne.n	800fb72 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800fb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5c:	b672      	cpsid	i
 800fb5e:	f383 8811 	msr	BASEPRI, r3
 800fb62:	f3bf 8f6f 	isb	sy
 800fb66:	f3bf 8f4f 	dsb	sy
 800fb6a:	b662      	cpsie	i
 800fb6c:	603b      	str	r3, [r7, #0]
}
 800fb6e:	bf00      	nop
 800fb70:	e7fe      	b.n	800fb70 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fb72:	4b09      	ldr	r3, [pc, #36]	; (800fb98 <prvSwitchTimerLists+0xc4>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d1af      	bne.n	800fadc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fb7c:	4b06      	ldr	r3, [pc, #24]	; (800fb98 <prvSwitchTimerLists+0xc4>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fb82:	4b06      	ldr	r3, [pc, #24]	; (800fb9c <prvSwitchTimerLists+0xc8>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	4a04      	ldr	r2, [pc, #16]	; (800fb98 <prvSwitchTimerLists+0xc4>)
 800fb88:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fb8a:	4a04      	ldr	r2, [pc, #16]	; (800fb9c <prvSwitchTimerLists+0xc8>)
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	6013      	str	r3, [r2, #0]
}
 800fb90:	bf00      	nop
 800fb92:	3718      	adds	r7, #24
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}
 800fb98:	200384d8 	.word	0x200384d8
 800fb9c:	200384dc 	.word	0x200384dc

0800fba0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fba6:	f000 f949 	bl	800fe3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fbaa:	4b15      	ldr	r3, [pc, #84]	; (800fc00 <prvCheckForValidListAndQueue+0x60>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d120      	bne.n	800fbf4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fbb2:	4814      	ldr	r0, [pc, #80]	; (800fc04 <prvCheckForValidListAndQueue+0x64>)
 800fbb4:	f7fd fab2 	bl	800d11c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fbb8:	4813      	ldr	r0, [pc, #76]	; (800fc08 <prvCheckForValidListAndQueue+0x68>)
 800fbba:	f7fd faaf 	bl	800d11c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fbbe:	4b13      	ldr	r3, [pc, #76]	; (800fc0c <prvCheckForValidListAndQueue+0x6c>)
 800fbc0:	4a10      	ldr	r2, [pc, #64]	; (800fc04 <prvCheckForValidListAndQueue+0x64>)
 800fbc2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fbc4:	4b12      	ldr	r3, [pc, #72]	; (800fc10 <prvCheckForValidListAndQueue+0x70>)
 800fbc6:	4a10      	ldr	r2, [pc, #64]	; (800fc08 <prvCheckForValidListAndQueue+0x68>)
 800fbc8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fbca:	2300      	movs	r3, #0
 800fbcc:	9300      	str	r3, [sp, #0]
 800fbce:	4b11      	ldr	r3, [pc, #68]	; (800fc14 <prvCheckForValidListAndQueue+0x74>)
 800fbd0:	4a11      	ldr	r2, [pc, #68]	; (800fc18 <prvCheckForValidListAndQueue+0x78>)
 800fbd2:	2110      	movs	r1, #16
 800fbd4:	200a      	movs	r0, #10
 800fbd6:	f7fd fbbf 	bl	800d358 <xQueueGenericCreateStatic>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	4a08      	ldr	r2, [pc, #32]	; (800fc00 <prvCheckForValidListAndQueue+0x60>)
 800fbde:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fbe0:	4b07      	ldr	r3, [pc, #28]	; (800fc00 <prvCheckForValidListAndQueue+0x60>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d005      	beq.n	800fbf4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fbe8:	4b05      	ldr	r3, [pc, #20]	; (800fc00 <prvCheckForValidListAndQueue+0x60>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	490b      	ldr	r1, [pc, #44]	; (800fc1c <prvCheckForValidListAndQueue+0x7c>)
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7fe fbd0 	bl	800e394 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fbf4:	f000 f956 	bl	800fea4 <vPortExitCritical>
}
 800fbf8:	bf00      	nop
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}
 800fbfe:	bf00      	nop
 800fc00:	200384e0 	.word	0x200384e0
 800fc04:	200384b0 	.word	0x200384b0
 800fc08:	200384c4 	.word	0x200384c4
 800fc0c:	200384d8 	.word	0x200384d8
 800fc10:	200384dc 	.word	0x200384dc
 800fc14:	2003858c 	.word	0x2003858c
 800fc18:	200384ec 	.word	0x200384ec
 800fc1c:	0801734c 	.word	0x0801734c

0800fc20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fc20:	b480      	push	{r7}
 800fc22:	b085      	sub	sp, #20
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	60f8      	str	r0, [r7, #12]
 800fc28:	60b9      	str	r1, [r7, #8]
 800fc2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	3b04      	subs	r3, #4
 800fc30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fc38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	3b04      	subs	r3, #4
 800fc3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	f023 0201 	bic.w	r2, r3, #1
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	3b04      	subs	r3, #4
 800fc4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fc50:	4a0c      	ldr	r2, [pc, #48]	; (800fc84 <pxPortInitialiseStack+0x64>)
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	3b14      	subs	r3, #20
 800fc5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fc5c:	687a      	ldr	r2, [r7, #4]
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	3b04      	subs	r3, #4
 800fc66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	f06f 0202 	mvn.w	r2, #2
 800fc6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	3b20      	subs	r3, #32
 800fc74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fc76:	68fb      	ldr	r3, [r7, #12]
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3714      	adds	r7, #20
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr
 800fc84:	0800fc89 	.word	0x0800fc89

0800fc88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fc88:	b480      	push	{r7}
 800fc8a:	b085      	sub	sp, #20
 800fc8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fc8e:	2300      	movs	r3, #0
 800fc90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fc92:	4b14      	ldr	r3, [pc, #80]	; (800fce4 <prvTaskExitError+0x5c>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc9a:	d00c      	beq.n	800fcb6 <prvTaskExitError+0x2e>
	__asm volatile
 800fc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fca0:	b672      	cpsid	i
 800fca2:	f383 8811 	msr	BASEPRI, r3
 800fca6:	f3bf 8f6f 	isb	sy
 800fcaa:	f3bf 8f4f 	dsb	sy
 800fcae:	b662      	cpsie	i
 800fcb0:	60fb      	str	r3, [r7, #12]
}
 800fcb2:	bf00      	nop
 800fcb4:	e7fe      	b.n	800fcb4 <prvTaskExitError+0x2c>
	__asm volatile
 800fcb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcba:	b672      	cpsid	i
 800fcbc:	f383 8811 	msr	BASEPRI, r3
 800fcc0:	f3bf 8f6f 	isb	sy
 800fcc4:	f3bf 8f4f 	dsb	sy
 800fcc8:	b662      	cpsie	i
 800fcca:	60bb      	str	r3, [r7, #8]
}
 800fccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fcce:	bf00      	nop
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d0fc      	beq.n	800fcd0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fcd6:	bf00      	nop
 800fcd8:	bf00      	nop
 800fcda:	3714      	adds	r7, #20
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce2:	4770      	bx	lr
 800fce4:	200005c4 	.word	0x200005c4
	...

0800fcf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fcf0:	4b07      	ldr	r3, [pc, #28]	; (800fd10 <pxCurrentTCBConst2>)
 800fcf2:	6819      	ldr	r1, [r3, #0]
 800fcf4:	6808      	ldr	r0, [r1, #0]
 800fcf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcfa:	f380 8809 	msr	PSP, r0
 800fcfe:	f3bf 8f6f 	isb	sy
 800fd02:	f04f 0000 	mov.w	r0, #0
 800fd06:	f380 8811 	msr	BASEPRI, r0
 800fd0a:	4770      	bx	lr
 800fd0c:	f3af 8000 	nop.w

0800fd10 <pxCurrentTCBConst2>:
 800fd10:	20037fb0 	.word	0x20037fb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fd14:	bf00      	nop
 800fd16:	bf00      	nop

0800fd18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fd18:	4808      	ldr	r0, [pc, #32]	; (800fd3c <prvPortStartFirstTask+0x24>)
 800fd1a:	6800      	ldr	r0, [r0, #0]
 800fd1c:	6800      	ldr	r0, [r0, #0]
 800fd1e:	f380 8808 	msr	MSP, r0
 800fd22:	f04f 0000 	mov.w	r0, #0
 800fd26:	f380 8814 	msr	CONTROL, r0
 800fd2a:	b662      	cpsie	i
 800fd2c:	b661      	cpsie	f
 800fd2e:	f3bf 8f4f 	dsb	sy
 800fd32:	f3bf 8f6f 	isb	sy
 800fd36:	df00      	svc	0
 800fd38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fd3a:	bf00      	nop
 800fd3c:	e000ed08 	.word	0xe000ed08

0800fd40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b084      	sub	sp, #16
 800fd44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fd46:	4b37      	ldr	r3, [pc, #220]	; (800fe24 <xPortStartScheduler+0xe4>)
 800fd48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	b2db      	uxtb	r3, r3
 800fd50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	22ff      	movs	r2, #255	; 0xff
 800fd56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	b2db      	uxtb	r3, r3
 800fd5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fd60:	78fb      	ldrb	r3, [r7, #3]
 800fd62:	b2db      	uxtb	r3, r3
 800fd64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fd68:	b2da      	uxtb	r2, r3
 800fd6a:	4b2f      	ldr	r3, [pc, #188]	; (800fe28 <xPortStartScheduler+0xe8>)
 800fd6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fd6e:	4b2f      	ldr	r3, [pc, #188]	; (800fe2c <xPortStartScheduler+0xec>)
 800fd70:	2207      	movs	r2, #7
 800fd72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fd74:	e009      	b.n	800fd8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800fd76:	4b2d      	ldr	r3, [pc, #180]	; (800fe2c <xPortStartScheduler+0xec>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	3b01      	subs	r3, #1
 800fd7c:	4a2b      	ldr	r2, [pc, #172]	; (800fe2c <xPortStartScheduler+0xec>)
 800fd7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fd80:	78fb      	ldrb	r3, [r7, #3]
 800fd82:	b2db      	uxtb	r3, r3
 800fd84:	005b      	lsls	r3, r3, #1
 800fd86:	b2db      	uxtb	r3, r3
 800fd88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fd8a:	78fb      	ldrb	r3, [r7, #3]
 800fd8c:	b2db      	uxtb	r3, r3
 800fd8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd92:	2b80      	cmp	r3, #128	; 0x80
 800fd94:	d0ef      	beq.n	800fd76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fd96:	4b25      	ldr	r3, [pc, #148]	; (800fe2c <xPortStartScheduler+0xec>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f1c3 0307 	rsb	r3, r3, #7
 800fd9e:	2b04      	cmp	r3, #4
 800fda0:	d00c      	beq.n	800fdbc <xPortStartScheduler+0x7c>
	__asm volatile
 800fda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda6:	b672      	cpsid	i
 800fda8:	f383 8811 	msr	BASEPRI, r3
 800fdac:	f3bf 8f6f 	isb	sy
 800fdb0:	f3bf 8f4f 	dsb	sy
 800fdb4:	b662      	cpsie	i
 800fdb6:	60bb      	str	r3, [r7, #8]
}
 800fdb8:	bf00      	nop
 800fdba:	e7fe      	b.n	800fdba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fdbc:	4b1b      	ldr	r3, [pc, #108]	; (800fe2c <xPortStartScheduler+0xec>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	021b      	lsls	r3, r3, #8
 800fdc2:	4a1a      	ldr	r2, [pc, #104]	; (800fe2c <xPortStartScheduler+0xec>)
 800fdc4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fdc6:	4b19      	ldr	r3, [pc, #100]	; (800fe2c <xPortStartScheduler+0xec>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fdce:	4a17      	ldr	r2, [pc, #92]	; (800fe2c <xPortStartScheduler+0xec>)
 800fdd0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	b2da      	uxtb	r2, r3
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fdda:	4b15      	ldr	r3, [pc, #84]	; (800fe30 <xPortStartScheduler+0xf0>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	4a14      	ldr	r2, [pc, #80]	; (800fe30 <xPortStartScheduler+0xf0>)
 800fde0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fde4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fde6:	4b12      	ldr	r3, [pc, #72]	; (800fe30 <xPortStartScheduler+0xf0>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	4a11      	ldr	r2, [pc, #68]	; (800fe30 <xPortStartScheduler+0xf0>)
 800fdec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fdf0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fdf2:	f000 f8dd 	bl	800ffb0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fdf6:	4b0f      	ldr	r3, [pc, #60]	; (800fe34 <xPortStartScheduler+0xf4>)
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fdfc:	f000 f8fc 	bl	800fff8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fe00:	4b0d      	ldr	r3, [pc, #52]	; (800fe38 <xPortStartScheduler+0xf8>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	4a0c      	ldr	r2, [pc, #48]	; (800fe38 <xPortStartScheduler+0xf8>)
 800fe06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fe0a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fe0c:	f7ff ff84 	bl	800fd18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fe10:	f7fe ff24 	bl	800ec5c <vTaskSwitchContext>
	prvTaskExitError();
 800fe14:	f7ff ff38 	bl	800fc88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fe18:	2300      	movs	r3, #0
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3710      	adds	r7, #16
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	e000e400 	.word	0xe000e400
 800fe28:	200385dc 	.word	0x200385dc
 800fe2c:	200385e0 	.word	0x200385e0
 800fe30:	e000ed20 	.word	0xe000ed20
 800fe34:	200005c4 	.word	0x200005c4
 800fe38:	e000ef34 	.word	0xe000ef34

0800fe3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fe3c:	b480      	push	{r7}
 800fe3e:	b083      	sub	sp, #12
 800fe40:	af00      	add	r7, sp, #0
	__asm volatile
 800fe42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe46:	b672      	cpsid	i
 800fe48:	f383 8811 	msr	BASEPRI, r3
 800fe4c:	f3bf 8f6f 	isb	sy
 800fe50:	f3bf 8f4f 	dsb	sy
 800fe54:	b662      	cpsie	i
 800fe56:	607b      	str	r3, [r7, #4]
}
 800fe58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fe5a:	4b10      	ldr	r3, [pc, #64]	; (800fe9c <vPortEnterCritical+0x60>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	3301      	adds	r3, #1
 800fe60:	4a0e      	ldr	r2, [pc, #56]	; (800fe9c <vPortEnterCritical+0x60>)
 800fe62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fe64:	4b0d      	ldr	r3, [pc, #52]	; (800fe9c <vPortEnterCritical+0x60>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	2b01      	cmp	r3, #1
 800fe6a:	d111      	bne.n	800fe90 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fe6c:	4b0c      	ldr	r3, [pc, #48]	; (800fea0 <vPortEnterCritical+0x64>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	b2db      	uxtb	r3, r3
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d00c      	beq.n	800fe90 <vPortEnterCritical+0x54>
	__asm volatile
 800fe76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe7a:	b672      	cpsid	i
 800fe7c:	f383 8811 	msr	BASEPRI, r3
 800fe80:	f3bf 8f6f 	isb	sy
 800fe84:	f3bf 8f4f 	dsb	sy
 800fe88:	b662      	cpsie	i
 800fe8a:	603b      	str	r3, [r7, #0]
}
 800fe8c:	bf00      	nop
 800fe8e:	e7fe      	b.n	800fe8e <vPortEnterCritical+0x52>
	}
}
 800fe90:	bf00      	nop
 800fe92:	370c      	adds	r7, #12
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr
 800fe9c:	200005c4 	.word	0x200005c4
 800fea0:	e000ed04 	.word	0xe000ed04

0800fea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fea4:	b480      	push	{r7}
 800fea6:	b083      	sub	sp, #12
 800fea8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800feaa:	4b13      	ldr	r3, [pc, #76]	; (800fef8 <vPortExitCritical+0x54>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d10c      	bne.n	800fecc <vPortExitCritical+0x28>
	__asm volatile
 800feb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb6:	b672      	cpsid	i
 800feb8:	f383 8811 	msr	BASEPRI, r3
 800febc:	f3bf 8f6f 	isb	sy
 800fec0:	f3bf 8f4f 	dsb	sy
 800fec4:	b662      	cpsie	i
 800fec6:	607b      	str	r3, [r7, #4]
}
 800fec8:	bf00      	nop
 800feca:	e7fe      	b.n	800feca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800fecc:	4b0a      	ldr	r3, [pc, #40]	; (800fef8 <vPortExitCritical+0x54>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	3b01      	subs	r3, #1
 800fed2:	4a09      	ldr	r2, [pc, #36]	; (800fef8 <vPortExitCritical+0x54>)
 800fed4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fed6:	4b08      	ldr	r3, [pc, #32]	; (800fef8 <vPortExitCritical+0x54>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d105      	bne.n	800feea <vPortExitCritical+0x46>
 800fede:	2300      	movs	r3, #0
 800fee0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	f383 8811 	msr	BASEPRI, r3
}
 800fee8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800feea:	bf00      	nop
 800feec:	370c      	adds	r7, #12
 800feee:	46bd      	mov	sp, r7
 800fef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef4:	4770      	bx	lr
 800fef6:	bf00      	nop
 800fef8:	200005c4 	.word	0x200005c4
 800fefc:	00000000 	.word	0x00000000

0800ff00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ff00:	f3ef 8009 	mrs	r0, PSP
 800ff04:	f3bf 8f6f 	isb	sy
 800ff08:	4b15      	ldr	r3, [pc, #84]	; (800ff60 <pxCurrentTCBConst>)
 800ff0a:	681a      	ldr	r2, [r3, #0]
 800ff0c:	f01e 0f10 	tst.w	lr, #16
 800ff10:	bf08      	it	eq
 800ff12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ff16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff1a:	6010      	str	r0, [r2, #0]
 800ff1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ff20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ff24:	b672      	cpsid	i
 800ff26:	f380 8811 	msr	BASEPRI, r0
 800ff2a:	f3bf 8f4f 	dsb	sy
 800ff2e:	f3bf 8f6f 	isb	sy
 800ff32:	b662      	cpsie	i
 800ff34:	f7fe fe92 	bl	800ec5c <vTaskSwitchContext>
 800ff38:	f04f 0000 	mov.w	r0, #0
 800ff3c:	f380 8811 	msr	BASEPRI, r0
 800ff40:	bc09      	pop	{r0, r3}
 800ff42:	6819      	ldr	r1, [r3, #0]
 800ff44:	6808      	ldr	r0, [r1, #0]
 800ff46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff4a:	f01e 0f10 	tst.w	lr, #16
 800ff4e:	bf08      	it	eq
 800ff50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ff54:	f380 8809 	msr	PSP, r0
 800ff58:	f3bf 8f6f 	isb	sy
 800ff5c:	4770      	bx	lr
 800ff5e:	bf00      	nop

0800ff60 <pxCurrentTCBConst>:
 800ff60:	20037fb0 	.word	0x20037fb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ff64:	bf00      	nop
 800ff66:	bf00      	nop

0800ff68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ff6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff72:	b672      	cpsid	i
 800ff74:	f383 8811 	msr	BASEPRI, r3
 800ff78:	f3bf 8f6f 	isb	sy
 800ff7c:	f3bf 8f4f 	dsb	sy
 800ff80:	b662      	cpsie	i
 800ff82:	607b      	str	r3, [r7, #4]
}
 800ff84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ff86:	f7fe fdad 	bl	800eae4 <xTaskIncrementTick>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d003      	beq.n	800ff98 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ff90:	4b06      	ldr	r3, [pc, #24]	; (800ffac <xPortSysTickHandler+0x44>)
 800ff92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff96:	601a      	str	r2, [r3, #0]
 800ff98:	2300      	movs	r3, #0
 800ff9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	f383 8811 	msr	BASEPRI, r3
}
 800ffa2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ffa4:	bf00      	nop
 800ffa6:	3708      	adds	r7, #8
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	e000ed04 	.word	0xe000ed04

0800ffb0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ffb4:	4b0b      	ldr	r3, [pc, #44]	; (800ffe4 <vPortSetupTimerInterrupt+0x34>)
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ffba:	4b0b      	ldr	r3, [pc, #44]	; (800ffe8 <vPortSetupTimerInterrupt+0x38>)
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ffc0:	4b0a      	ldr	r3, [pc, #40]	; (800ffec <vPortSetupTimerInterrupt+0x3c>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	4a0a      	ldr	r2, [pc, #40]	; (800fff0 <vPortSetupTimerInterrupt+0x40>)
 800ffc6:	fba2 2303 	umull	r2, r3, r2, r3
 800ffca:	099b      	lsrs	r3, r3, #6
 800ffcc:	4a09      	ldr	r2, [pc, #36]	; (800fff4 <vPortSetupTimerInterrupt+0x44>)
 800ffce:	3b01      	subs	r3, #1
 800ffd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ffd2:	4b04      	ldr	r3, [pc, #16]	; (800ffe4 <vPortSetupTimerInterrupt+0x34>)
 800ffd4:	2207      	movs	r2, #7
 800ffd6:	601a      	str	r2, [r3, #0]
}
 800ffd8:	bf00      	nop
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe0:	4770      	bx	lr
 800ffe2:	bf00      	nop
 800ffe4:	e000e010 	.word	0xe000e010
 800ffe8:	e000e018 	.word	0xe000e018
 800ffec:	200005b8 	.word	0x200005b8
 800fff0:	10624dd3 	.word	0x10624dd3
 800fff4:	e000e014 	.word	0xe000e014

0800fff8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fff8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010008 <vPortEnableVFP+0x10>
 800fffc:	6801      	ldr	r1, [r0, #0]
 800fffe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010002:	6001      	str	r1, [r0, #0]
 8010004:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010006:	bf00      	nop
 8010008:	e000ed88 	.word	0xe000ed88

0801000c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801000c:	b480      	push	{r7}
 801000e:	b085      	sub	sp, #20
 8010010:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010012:	f3ef 8305 	mrs	r3, IPSR
 8010016:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	2b0f      	cmp	r3, #15
 801001c:	d916      	bls.n	801004c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801001e:	4a19      	ldr	r2, [pc, #100]	; (8010084 <vPortValidateInterruptPriority+0x78>)
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	4413      	add	r3, r2
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010028:	4b17      	ldr	r3, [pc, #92]	; (8010088 <vPortValidateInterruptPriority+0x7c>)
 801002a:	781b      	ldrb	r3, [r3, #0]
 801002c:	7afa      	ldrb	r2, [r7, #11]
 801002e:	429a      	cmp	r2, r3
 8010030:	d20c      	bcs.n	801004c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010036:	b672      	cpsid	i
 8010038:	f383 8811 	msr	BASEPRI, r3
 801003c:	f3bf 8f6f 	isb	sy
 8010040:	f3bf 8f4f 	dsb	sy
 8010044:	b662      	cpsie	i
 8010046:	607b      	str	r3, [r7, #4]
}
 8010048:	bf00      	nop
 801004a:	e7fe      	b.n	801004a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801004c:	4b0f      	ldr	r3, [pc, #60]	; (801008c <vPortValidateInterruptPriority+0x80>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010054:	4b0e      	ldr	r3, [pc, #56]	; (8010090 <vPortValidateInterruptPriority+0x84>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	429a      	cmp	r2, r3
 801005a:	d90c      	bls.n	8010076 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801005c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010060:	b672      	cpsid	i
 8010062:	f383 8811 	msr	BASEPRI, r3
 8010066:	f3bf 8f6f 	isb	sy
 801006a:	f3bf 8f4f 	dsb	sy
 801006e:	b662      	cpsie	i
 8010070:	603b      	str	r3, [r7, #0]
}
 8010072:	bf00      	nop
 8010074:	e7fe      	b.n	8010074 <vPortValidateInterruptPriority+0x68>
	}
 8010076:	bf00      	nop
 8010078:	3714      	adds	r7, #20
 801007a:	46bd      	mov	sp, r7
 801007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010080:	4770      	bx	lr
 8010082:	bf00      	nop
 8010084:	e000e3f0 	.word	0xe000e3f0
 8010088:	200385dc 	.word	0x200385dc
 801008c:	e000ed0c 	.word	0xe000ed0c
 8010090:	200385e0 	.word	0x200385e0

08010094 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b08a      	sub	sp, #40	; 0x28
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801009c:	2300      	movs	r3, #0
 801009e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80100a0:	f7fe fc50 	bl	800e944 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80100a4:	4b5b      	ldr	r3, [pc, #364]	; (8010214 <pvPortMalloc+0x180>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d101      	bne.n	80100b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80100ac:	f000 f91a 	bl	80102e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80100b0:	4b59      	ldr	r3, [pc, #356]	; (8010218 <pvPortMalloc+0x184>)
 80100b2:	681a      	ldr	r2, [r3, #0]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	4013      	ands	r3, r2
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	f040 8092 	bne.w	80101e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d01f      	beq.n	8010104 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80100c4:	2208      	movs	r2, #8
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	4413      	add	r3, r2
 80100ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f003 0307 	and.w	r3, r3, #7
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d016      	beq.n	8010104 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f023 0307 	bic.w	r3, r3, #7
 80100dc:	3308      	adds	r3, #8
 80100de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f003 0307 	and.w	r3, r3, #7
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d00c      	beq.n	8010104 <pvPortMalloc+0x70>
	__asm volatile
 80100ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ee:	b672      	cpsid	i
 80100f0:	f383 8811 	msr	BASEPRI, r3
 80100f4:	f3bf 8f6f 	isb	sy
 80100f8:	f3bf 8f4f 	dsb	sy
 80100fc:	b662      	cpsie	i
 80100fe:	617b      	str	r3, [r7, #20]
}
 8010100:	bf00      	nop
 8010102:	e7fe      	b.n	8010102 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d06b      	beq.n	80101e2 <pvPortMalloc+0x14e>
 801010a:	4b44      	ldr	r3, [pc, #272]	; (801021c <pvPortMalloc+0x188>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	687a      	ldr	r2, [r7, #4]
 8010110:	429a      	cmp	r2, r3
 8010112:	d866      	bhi.n	80101e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010114:	4b42      	ldr	r3, [pc, #264]	; (8010220 <pvPortMalloc+0x18c>)
 8010116:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010118:	4b41      	ldr	r3, [pc, #260]	; (8010220 <pvPortMalloc+0x18c>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801011e:	e004      	b.n	801012a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8010120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010122:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801012a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	429a      	cmp	r2, r3
 8010132:	d903      	bls.n	801013c <pvPortMalloc+0xa8>
 8010134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d1f1      	bne.n	8010120 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801013c:	4b35      	ldr	r3, [pc, #212]	; (8010214 <pvPortMalloc+0x180>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010142:	429a      	cmp	r2, r3
 8010144:	d04d      	beq.n	80101e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010146:	6a3b      	ldr	r3, [r7, #32]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	2208      	movs	r2, #8
 801014c:	4413      	add	r3, r2
 801014e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010152:	681a      	ldr	r2, [r3, #0]
 8010154:	6a3b      	ldr	r3, [r7, #32]
 8010156:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015a:	685a      	ldr	r2, [r3, #4]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	1ad2      	subs	r2, r2, r3
 8010160:	2308      	movs	r3, #8
 8010162:	005b      	lsls	r3, r3, #1
 8010164:	429a      	cmp	r2, r3
 8010166:	d921      	bls.n	80101ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	4413      	add	r3, r2
 801016e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010170:	69bb      	ldr	r3, [r7, #24]
 8010172:	f003 0307 	and.w	r3, r3, #7
 8010176:	2b00      	cmp	r3, #0
 8010178:	d00c      	beq.n	8010194 <pvPortMalloc+0x100>
	__asm volatile
 801017a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801017e:	b672      	cpsid	i
 8010180:	f383 8811 	msr	BASEPRI, r3
 8010184:	f3bf 8f6f 	isb	sy
 8010188:	f3bf 8f4f 	dsb	sy
 801018c:	b662      	cpsie	i
 801018e:	613b      	str	r3, [r7, #16]
}
 8010190:	bf00      	nop
 8010192:	e7fe      	b.n	8010192 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010196:	685a      	ldr	r2, [r3, #4]
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	1ad2      	subs	r2, r2, r3
 801019c:	69bb      	ldr	r3, [r7, #24]
 801019e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80101a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a2:	687a      	ldr	r2, [r7, #4]
 80101a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80101a6:	69b8      	ldr	r0, [r7, #24]
 80101a8:	f000 f8fe 	bl	80103a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80101ac:	4b1b      	ldr	r3, [pc, #108]	; (801021c <pvPortMalloc+0x188>)
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b2:	685b      	ldr	r3, [r3, #4]
 80101b4:	1ad3      	subs	r3, r2, r3
 80101b6:	4a19      	ldr	r2, [pc, #100]	; (801021c <pvPortMalloc+0x188>)
 80101b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80101ba:	4b18      	ldr	r3, [pc, #96]	; (801021c <pvPortMalloc+0x188>)
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	4b19      	ldr	r3, [pc, #100]	; (8010224 <pvPortMalloc+0x190>)
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d203      	bcs.n	80101ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80101c6:	4b15      	ldr	r3, [pc, #84]	; (801021c <pvPortMalloc+0x188>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	4a16      	ldr	r2, [pc, #88]	; (8010224 <pvPortMalloc+0x190>)
 80101cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80101ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d0:	685a      	ldr	r2, [r3, #4]
 80101d2:	4b11      	ldr	r3, [pc, #68]	; (8010218 <pvPortMalloc+0x184>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	431a      	orrs	r2, r3
 80101d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80101dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101de:	2200      	movs	r2, #0
 80101e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80101e2:	f7fe fbbd 	bl	800e960 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80101e6:	69fb      	ldr	r3, [r7, #28]
 80101e8:	f003 0307 	and.w	r3, r3, #7
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d00c      	beq.n	801020a <pvPortMalloc+0x176>
	__asm volatile
 80101f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f4:	b672      	cpsid	i
 80101f6:	f383 8811 	msr	BASEPRI, r3
 80101fa:	f3bf 8f6f 	isb	sy
 80101fe:	f3bf 8f4f 	dsb	sy
 8010202:	b662      	cpsie	i
 8010204:	60fb      	str	r3, [r7, #12]
}
 8010206:	bf00      	nop
 8010208:	e7fe      	b.n	8010208 <pvPortMalloc+0x174>
	return pvReturn;
 801020a:	69fb      	ldr	r3, [r7, #28]
}
 801020c:	4618      	mov	r0, r3
 801020e:	3728      	adds	r7, #40	; 0x28
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}
 8010214:	200405ec 	.word	0x200405ec
 8010218:	200405f8 	.word	0x200405f8
 801021c:	200405f0 	.word	0x200405f0
 8010220:	200405e4 	.word	0x200405e4
 8010224:	200405f4 	.word	0x200405f4

08010228 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b086      	sub	sp, #24
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d04c      	beq.n	80102d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801023a:	2308      	movs	r3, #8
 801023c:	425b      	negs	r3, r3
 801023e:	697a      	ldr	r2, [r7, #20]
 8010240:	4413      	add	r3, r2
 8010242:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	685a      	ldr	r2, [r3, #4]
 801024c:	4b23      	ldr	r3, [pc, #140]	; (80102dc <vPortFree+0xb4>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	4013      	ands	r3, r2
 8010252:	2b00      	cmp	r3, #0
 8010254:	d10c      	bne.n	8010270 <vPortFree+0x48>
	__asm volatile
 8010256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801025a:	b672      	cpsid	i
 801025c:	f383 8811 	msr	BASEPRI, r3
 8010260:	f3bf 8f6f 	isb	sy
 8010264:	f3bf 8f4f 	dsb	sy
 8010268:	b662      	cpsie	i
 801026a:	60fb      	str	r3, [r7, #12]
}
 801026c:	bf00      	nop
 801026e:	e7fe      	b.n	801026e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d00c      	beq.n	8010292 <vPortFree+0x6a>
	__asm volatile
 8010278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801027c:	b672      	cpsid	i
 801027e:	f383 8811 	msr	BASEPRI, r3
 8010282:	f3bf 8f6f 	isb	sy
 8010286:	f3bf 8f4f 	dsb	sy
 801028a:	b662      	cpsie	i
 801028c:	60bb      	str	r3, [r7, #8]
}
 801028e:	bf00      	nop
 8010290:	e7fe      	b.n	8010290 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	685a      	ldr	r2, [r3, #4]
 8010296:	4b11      	ldr	r3, [pc, #68]	; (80102dc <vPortFree+0xb4>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	4013      	ands	r3, r2
 801029c:	2b00      	cmp	r3, #0
 801029e:	d019      	beq.n	80102d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80102a0:	693b      	ldr	r3, [r7, #16]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d115      	bne.n	80102d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	685a      	ldr	r2, [r3, #4]
 80102ac:	4b0b      	ldr	r3, [pc, #44]	; (80102dc <vPortFree+0xb4>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	43db      	mvns	r3, r3
 80102b2:	401a      	ands	r2, r3
 80102b4:	693b      	ldr	r3, [r7, #16]
 80102b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80102b8:	f7fe fb44 	bl	800e944 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	685a      	ldr	r2, [r3, #4]
 80102c0:	4b07      	ldr	r3, [pc, #28]	; (80102e0 <vPortFree+0xb8>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	4413      	add	r3, r2
 80102c6:	4a06      	ldr	r2, [pc, #24]	; (80102e0 <vPortFree+0xb8>)
 80102c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80102ca:	6938      	ldr	r0, [r7, #16]
 80102cc:	f000 f86c 	bl	80103a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80102d0:	f7fe fb46 	bl	800e960 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80102d4:	bf00      	nop
 80102d6:	3718      	adds	r7, #24
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}
 80102dc:	200405f8 	.word	0x200405f8
 80102e0:	200405f0 	.word	0x200405f0

080102e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80102e4:	b480      	push	{r7}
 80102e6:	b085      	sub	sp, #20
 80102e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80102ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80102ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80102f0:	4b27      	ldr	r3, [pc, #156]	; (8010390 <prvHeapInit+0xac>)
 80102f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	f003 0307 	and.w	r3, r3, #7
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d00c      	beq.n	8010318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	3307      	adds	r3, #7
 8010302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	f023 0307 	bic.w	r3, r3, #7
 801030a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801030c:	68ba      	ldr	r2, [r7, #8]
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	1ad3      	subs	r3, r2, r3
 8010312:	4a1f      	ldr	r2, [pc, #124]	; (8010390 <prvHeapInit+0xac>)
 8010314:	4413      	add	r3, r2
 8010316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801031c:	4a1d      	ldr	r2, [pc, #116]	; (8010394 <prvHeapInit+0xb0>)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010322:	4b1c      	ldr	r3, [pc, #112]	; (8010394 <prvHeapInit+0xb0>)
 8010324:	2200      	movs	r2, #0
 8010326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	68ba      	ldr	r2, [r7, #8]
 801032c:	4413      	add	r3, r2
 801032e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010330:	2208      	movs	r2, #8
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	1a9b      	subs	r3, r3, r2
 8010336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	f023 0307 	bic.w	r3, r3, #7
 801033e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	4a15      	ldr	r2, [pc, #84]	; (8010398 <prvHeapInit+0xb4>)
 8010344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010346:	4b14      	ldr	r3, [pc, #80]	; (8010398 <prvHeapInit+0xb4>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	2200      	movs	r2, #0
 801034c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801034e:	4b12      	ldr	r3, [pc, #72]	; (8010398 <prvHeapInit+0xb4>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	2200      	movs	r2, #0
 8010354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	68fa      	ldr	r2, [r7, #12]
 801035e:	1ad2      	subs	r2, r2, r3
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010364:	4b0c      	ldr	r3, [pc, #48]	; (8010398 <prvHeapInit+0xb4>)
 8010366:	681a      	ldr	r2, [r3, #0]
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	4a0a      	ldr	r2, [pc, #40]	; (801039c <prvHeapInit+0xb8>)
 8010372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	4a09      	ldr	r2, [pc, #36]	; (80103a0 <prvHeapInit+0xbc>)
 801037a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801037c:	4b09      	ldr	r3, [pc, #36]	; (80103a4 <prvHeapInit+0xc0>)
 801037e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010382:	601a      	str	r2, [r3, #0]
}
 8010384:	bf00      	nop
 8010386:	3714      	adds	r7, #20
 8010388:	46bd      	mov	sp, r7
 801038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038e:	4770      	bx	lr
 8010390:	200385e4 	.word	0x200385e4
 8010394:	200405e4 	.word	0x200405e4
 8010398:	200405ec 	.word	0x200405ec
 801039c:	200405f4 	.word	0x200405f4
 80103a0:	200405f0 	.word	0x200405f0
 80103a4:	200405f8 	.word	0x200405f8

080103a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80103a8:	b480      	push	{r7}
 80103aa:	b085      	sub	sp, #20
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80103b0:	4b28      	ldr	r3, [pc, #160]	; (8010454 <prvInsertBlockIntoFreeList+0xac>)
 80103b2:	60fb      	str	r3, [r7, #12]
 80103b4:	e002      	b.n	80103bc <prvInsertBlockIntoFreeList+0x14>
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	60fb      	str	r3, [r7, #12]
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	687a      	ldr	r2, [r7, #4]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d8f7      	bhi.n	80103b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	685b      	ldr	r3, [r3, #4]
 80103ce:	68ba      	ldr	r2, [r7, #8]
 80103d0:	4413      	add	r3, r2
 80103d2:	687a      	ldr	r2, [r7, #4]
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d108      	bne.n	80103ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	685a      	ldr	r2, [r3, #4]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	685b      	ldr	r3, [r3, #4]
 80103e0:	441a      	add	r2, r3
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	685b      	ldr	r3, [r3, #4]
 80103f2:	68ba      	ldr	r2, [r7, #8]
 80103f4:	441a      	add	r2, r3
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	429a      	cmp	r2, r3
 80103fc:	d118      	bne.n	8010430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	681a      	ldr	r2, [r3, #0]
 8010402:	4b15      	ldr	r3, [pc, #84]	; (8010458 <prvInsertBlockIntoFreeList+0xb0>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	429a      	cmp	r2, r3
 8010408:	d00d      	beq.n	8010426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	685a      	ldr	r2, [r3, #4]
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	441a      	add	r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	681a      	ldr	r2, [r3, #0]
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	601a      	str	r2, [r3, #0]
 8010424:	e008      	b.n	8010438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010426:	4b0c      	ldr	r3, [pc, #48]	; (8010458 <prvInsertBlockIntoFreeList+0xb0>)
 8010428:	681a      	ldr	r2, [r3, #0]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	601a      	str	r2, [r3, #0]
 801042e:	e003      	b.n	8010438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010438:	68fa      	ldr	r2, [r7, #12]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	429a      	cmp	r2, r3
 801043e:	d002      	beq.n	8010446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	687a      	ldr	r2, [r7, #4]
 8010444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010446:	bf00      	nop
 8010448:	3714      	adds	r7, #20
 801044a:	46bd      	mov	sp, r7
 801044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010450:	4770      	bx	lr
 8010452:	bf00      	nop
 8010454:	200405e4 	.word	0x200405e4
 8010458:	200405ec 	.word	0x200405ec

0801045c <MP3InitDecoder>:
 * Outputs:     none
 *
 * Return:      handle to mp3 decoder instance, 0 if malloc fails
 **************************************************************************************/
HMP3Decoder MP3InitDecoder(void)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b082      	sub	sp, #8
 8010460:	af00      	add	r7, sp, #0
	MP3DecInfo *mp3DecInfo;

	mp3DecInfo = AllocateBuffers();
 8010462:	f000 ff91 	bl	8011388 <xmp3_AllocateBuffers>
 8010466:	6078      	str	r0, [r7, #4]

	return (HMP3Decoder)mp3DecInfo;
 8010468:	687b      	ldr	r3, [r7, #4]
}
 801046a:	4618      	mov	r0, r3
 801046c:	3708      	adds	r7, #8
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}

08010472 <MP3FindSyncWord>:
 *
 * Return:      offset to first sync word (bytes from start of buf)
 *              -1 if sync not found after searching nBytes
 **************************************************************************************/
int MP3FindSyncWord(unsigned char *buf, int nBytes)
{
 8010472:	b480      	push	{r7}
 8010474:	b085      	sub	sp, #20
 8010476:	af00      	add	r7, sp, #0
 8010478:	6078      	str	r0, [r7, #4]
 801047a:	6039      	str	r1, [r7, #0]
	int i;

	/* find byte-aligned syncword - need 12 (MPEG 1,2) or 11 (MPEG 2.5) matching bits */
	for (i = 0; i < nBytes - 1; i++) {
 801047c:	2300      	movs	r3, #0
 801047e:	60fb      	str	r3, [r7, #12]
 8010480:	e013      	b.n	80104aa <MP3FindSyncWord+0x38>
		if ( (buf[i+0] & SYNCWORDH) == SYNCWORDH && (buf[i+1] & SYNCWORDL) == SYNCWORDL )
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	687a      	ldr	r2, [r7, #4]
 8010486:	4413      	add	r3, r2
 8010488:	781b      	ldrb	r3, [r3, #0]
 801048a:	2bff      	cmp	r3, #255	; 0xff
 801048c:	d10a      	bne.n	80104a4 <MP3FindSyncWord+0x32>
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	3301      	adds	r3, #1
 8010492:	687a      	ldr	r2, [r7, #4]
 8010494:	4413      	add	r3, r2
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 801049c:	2be0      	cmp	r3, #224	; 0xe0
 801049e:	d101      	bne.n	80104a4 <MP3FindSyncWord+0x32>
			return i;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	e009      	b.n	80104b8 <MP3FindSyncWord+0x46>
	for (i = 0; i < nBytes - 1; i++) {
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	3301      	adds	r3, #1
 80104a8:	60fb      	str	r3, [r7, #12]
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	3b01      	subs	r3, #1
 80104ae:	68fa      	ldr	r2, [r7, #12]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	dbe6      	blt.n	8010482 <MP3FindSyncWord+0x10>
	}
	
	return -1;
 80104b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3714      	adds	r7, #20
 80104bc:	46bd      	mov	sp, r7
 80104be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c2:	4770      	bx	lr

080104c4 <MP3FindFreeSync>:
 *              since free mode requires CBR (see spec) we generally only call
 *                this function once (first frame) then store the result (nSlots)
 *                and just use it from then on
 **************************************************************************************/
static int MP3FindFreeSync(unsigned char *buf, unsigned char firstFH[4], int nBytes)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b086      	sub	sp, #24
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	60b9      	str	r1, [r7, #8]
 80104ce:	607a      	str	r2, [r7, #4]
	int offset = 0;
 80104d0:	2300      	movs	r3, #0
 80104d2:	613b      	str	r3, [r7, #16]
	unsigned char *bufPtr = buf;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	617b      	str	r3, [r7, #20]
	 *  - run out of nBytes (FindMP3SyncWord() returns -1)
	 *  - find the next valid frame header (sync word, version, layer, CRC flag, bitrate, and sample rate
	 *      in next header must match current header)
	 */
	while (1) {
		offset = MP3FindSyncWord(bufPtr, nBytes);
 80104d8:	6879      	ldr	r1, [r7, #4]
 80104da:	6978      	ldr	r0, [r7, #20]
 80104dc:	f7ff ffc9 	bl	8010472 <MP3FindSyncWord>
 80104e0:	6138      	str	r0, [r7, #16]
		bufPtr += offset;
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	697a      	ldr	r2, [r7, #20]
 80104e6:	4413      	add	r3, r2
 80104e8:	617b      	str	r3, [r7, #20]
		if (offset < 0) {
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	da02      	bge.n	80104f6 <MP3FindFreeSync+0x32>
			return -1;
 80104f0:	f04f 33ff 	mov.w	r3, #4294967295
 80104f4:	e032      	b.n	801055c <MP3FindFreeSync+0x98>
		} else if ( (bufPtr[0] == firstFH[0]) && (bufPtr[1] == firstFH[1]) && ((bufPtr[2] & 0xfc) == (firstFH[2] & 0xfc)) ) {
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	781a      	ldrb	r2, [r3, #0]
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	429a      	cmp	r2, r3
 8010500:	d123      	bne.n	801054a <MP3FindFreeSync+0x86>
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	3301      	adds	r3, #1
 8010506:	781a      	ldrb	r2, [r3, #0]
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	3301      	adds	r3, #1
 801050c:	781b      	ldrb	r3, [r3, #0]
 801050e:	429a      	cmp	r2, r3
 8010510:	d11b      	bne.n	801054a <MP3FindFreeSync+0x86>
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	3302      	adds	r3, #2
 8010516:	781a      	ldrb	r2, [r3, #0]
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	3302      	adds	r3, #2
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	4053      	eors	r3, r2
 8010520:	b2db      	uxtb	r3, r3
 8010522:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8010526:	2b00      	cmp	r3, #0
 8010528:	d10f      	bne.n	801054a <MP3FindFreeSync+0x86>
			/* want to return number of bytes per frame, NOT counting the padding byte, so subtract one if padFlag == 1 */
			if ((firstFH[2] >> 1) & 0x01)
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	3302      	adds	r3, #2
 801052e:	781b      	ldrb	r3, [r3, #0]
 8010530:	085b      	lsrs	r3, r3, #1
 8010532:	b2db      	uxtb	r3, r3
 8010534:	f003 0301 	and.w	r3, r3, #1
 8010538:	2b00      	cmp	r3, #0
 801053a:	d002      	beq.n	8010542 <MP3FindFreeSync+0x7e>
				bufPtr--;
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	3b01      	subs	r3, #1
 8010540:	617b      	str	r3, [r7, #20]
			return bufPtr - buf;
 8010542:	697a      	ldr	r2, [r7, #20]
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	1ad3      	subs	r3, r2, r3
 8010548:	e008      	b.n	801055c <MP3FindFreeSync+0x98>
		}
		bufPtr += 3;
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	3303      	adds	r3, #3
 801054e:	617b      	str	r3, [r7, #20]
		nBytes -= (offset + 3);
 8010550:	693b      	ldr	r3, [r7, #16]
 8010552:	3303      	adds	r3, #3
 8010554:	687a      	ldr	r2, [r7, #4]
 8010556:	1ad3      	subs	r3, r2, r3
 8010558:	607b      	str	r3, [r7, #4]
		offset = MP3FindSyncWord(bufPtr, nBytes);
 801055a:	e7bd      	b.n	80104d8 <MP3FindFreeSync+0x14>
	};

	return -1;
}
 801055c:	4618      	mov	r0, r3
 801055e:	3718      	adds	r7, #24
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <MP3GetLastFrameInfo>:
 * Return:      none
 *
 * Notes:       call this right after calling MP3Decode
 **************************************************************************************/
void MP3GetLastFrameInfo(HMP3Decoder hMP3Decoder, MP3FrameInfo *mp3FrameInfo)
{
 8010564:	b490      	push	{r4, r7}
 8010566:	b084      	sub	sp, #16
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	6039      	str	r1, [r7, #0]
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	60fb      	str	r3, [r7, #12]

	if (!mp3DecInfo || mp3DecInfo->layer != 3) {
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d004      	beq.n	8010582 <MP3GetLastFrameInfo+0x1e>
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 801057e:	2b03      	cmp	r3, #3
 8010580:	d015      	beq.n	80105ae <MP3GetLastFrameInfo+0x4a>
		mp3FrameInfo->bitrate = 0;
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	2200      	movs	r2, #0
 8010586:	601a      	str	r2, [r3, #0]
		mp3FrameInfo->nChans = 0;
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	2200      	movs	r2, #0
 801058c:	605a      	str	r2, [r3, #4]
		mp3FrameInfo->samprate = 0;
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	2200      	movs	r2, #0
 8010592:	609a      	str	r2, [r3, #8]
		mp3FrameInfo->bitsPerSample = 0;
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	2200      	movs	r2, #0
 8010598:	60da      	str	r2, [r3, #12]
		mp3FrameInfo->outputSamps = 0;
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	2200      	movs	r2, #0
 801059e:	611a      	str	r2, [r3, #16]
		mp3FrameInfo->layer = 0;
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	2200      	movs	r2, #0
 80105a4:	615a      	str	r2, [r3, #20]
		mp3FrameInfo->version = 0;
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	2200      	movs	r2, #0
 80105aa:	619a      	str	r2, [r3, #24]
 80105ac:	e033      	b.n	8010616 <MP3GetLastFrameInfo+0xb2>
	} else {
		mp3FrameInfo->bitrate = mp3DecInfo->bitrate;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	f8d3 27b8 	ldr.w	r2, [r3, #1976]	; 0x7b8
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	601a      	str	r2, [r3, #0]
		mp3FrameInfo->nChans = mp3DecInfo->nChans;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	f8d3 27bc 	ldr.w	r2, [r3, #1980]	; 0x7bc
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	605a      	str	r2, [r3, #4]
		mp3FrameInfo->samprate = mp3DecInfo->samprate;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f8d3 27c0 	ldr.w	r2, [r3, #1984]	; 0x7c0
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	609a      	str	r2, [r3, #8]
		mp3FrameInfo->bitsPerSample = 16;
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	2210      	movs	r2, #16
 80105d0:	60da      	str	r2, [r3, #12]
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	f8d3 27bc 	ldr.w	r2, [r3, #1980]	; 0x7bc
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	f893 37d4 	ldrb.w	r3, [r3, #2004]	; 0x7d4
 80105de:	461c      	mov	r4, r3
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 80105e6:	1e59      	subs	r1, r3, #1
 80105e8:	480d      	ldr	r0, [pc, #52]	; (8010620 <MP3GetLastFrameInfo+0xbc>)
 80105ea:	4623      	mov	r3, r4
 80105ec:	005b      	lsls	r3, r3, #1
 80105ee:	4423      	add	r3, r4
 80105f0:	440b      	add	r3, r1
 80105f2:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80105f6:	fb03 f202 	mul.w	r2, r3, r2
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	611a      	str	r2, [r3, #16]
		mp3FrameInfo->layer = mp3DecInfo->layer;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f8d3 27d0 	ldr.w	r2, [r3, #2000]	; 0x7d0
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	615a      	str	r2, [r3, #20]
		mp3FrameInfo->version = mp3DecInfo->version;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f893 37d4 	ldrb.w	r3, [r3, #2004]	; 0x7d4
 801060e:	461a      	mov	r2, r3
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	619a      	str	r2, [r3, #24]
	}
}
 8010614:	bf00      	nop
 8010616:	bf00      	nop
 8010618:	3710      	adds	r7, #16
 801061a:	46bd      	mov	sp, r7
 801061c:	bc90      	pop	{r4, r7}
 801061e:	4770      	bx	lr
 8010620:	08017920 	.word	0x08017920

08010624 <MP3GetNextFrameInfo>:
 * Outputs:     filled-in MP3FrameInfo struct
 *
 * Return:      error code, defined in mp3dec.h (0 means no error, < 0 means error)
 **************************************************************************************/
int MP3GetNextFrameInfo(HMP3Decoder hMP3Decoder, MP3FrameInfo *mp3FrameInfo, unsigned char *buf)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b086      	sub	sp, #24
 8010628:	af00      	add	r7, sp, #0
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	607a      	str	r2, [r7, #4]
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	617b      	str	r3, [r7, #20]

	if (!mp3DecInfo)
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d102      	bne.n	8010640 <MP3GetNextFrameInfo+0x1c>
		return ERR_MP3_NULL_POINTER;
 801063a:	f06f 0304 	mvn.w	r3, #4
 801063e:	e014      	b.n	801066a <MP3GetNextFrameInfo+0x46>

	if (UnpackFrameHeader(mp3DecInfo, buf) == -1 || mp3DecInfo->layer != 3)
 8010640:	6879      	ldr	r1, [r7, #4]
 8010642:	6978      	ldr	r0, [r7, #20]
 8010644:	f000 fb64 	bl	8010d10 <xmp3_UnpackFrameHeader>
 8010648:	4603      	mov	r3, r0
 801064a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801064e:	d004      	beq.n	801065a <MP3GetNextFrameInfo+0x36>
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	; 0x7d0
 8010656:	2b03      	cmp	r3, #3
 8010658:	d002      	beq.n	8010660 <MP3GetNextFrameInfo+0x3c>
		return ERR_MP3_INVALID_FRAMEHEADER;
 801065a:	f06f 0305 	mvn.w	r3, #5
 801065e:	e004      	b.n	801066a <MP3GetNextFrameInfo+0x46>

	MP3GetLastFrameInfo(mp3DecInfo, mp3FrameInfo);
 8010660:	68b9      	ldr	r1, [r7, #8]
 8010662:	6978      	ldr	r0, [r7, #20]
 8010664:	f7ff ff7e 	bl	8010564 <MP3GetLastFrameInfo>

	return ERR_MP3_NONE;
 8010668:	2300      	movs	r3, #0
}
 801066a:	4618      	mov	r0, r3
 801066c:	3718      	adds	r7, #24
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}

08010672 <MP3ClearBadFrame>:
 * Outputs:     zeroed out pcm buffer
 *
 * Return:      none
 **************************************************************************************/
static void MP3ClearBadFrame(MP3DecInfo *mp3DecInfo, short *outbuf)
{
 8010672:	b480      	push	{r7}
 8010674:	b085      	sub	sp, #20
 8010676:	af00      	add	r7, sp, #0
 8010678:	6078      	str	r0, [r7, #4]
 801067a:	6039      	str	r1, [r7, #0]
	int i;

	if (!mp3DecInfo)
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d01c      	beq.n	80106bc <MP3ClearBadFrame+0x4a>
		return;

	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 8010682:	2300      	movs	r3, #0
 8010684:	60fb      	str	r3, [r7, #12]
 8010686:	e008      	b.n	801069a <MP3ClearBadFrame+0x28>
		outbuf[i] = 0;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	005b      	lsls	r3, r3, #1
 801068c:	683a      	ldr	r2, [r7, #0]
 801068e:	4413      	add	r3, r2
 8010690:	2200      	movs	r2, #0
 8010692:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	3301      	adds	r3, #1
 8010698:	60fb      	str	r3, [r7, #12]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	f8d2 27c8 	ldr.w	r2, [r2, #1992]	; 0x7c8
 80106a6:	fb02 f303 	mul.w	r3, r2, r3
 80106aa:	687a      	ldr	r2, [r7, #4]
 80106ac:	f8d2 27bc 	ldr.w	r2, [r2, #1980]	; 0x7bc
 80106b0:	fb02 f303 	mul.w	r3, r2, r3
 80106b4:	68fa      	ldr	r2, [r7, #12]
 80106b6:	429a      	cmp	r2, r3
 80106b8:	dbe6      	blt.n	8010688 <MP3ClearBadFrame+0x16>
 80106ba:	e000      	b.n	80106be <MP3ClearBadFrame+0x4c>
		return;
 80106bc:	bf00      	nop
}
 80106be:	3714      	adds	r7, #20
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr

080106c8 <MP3Decode>:
 *
 * Notes:       switching useSize on and off between frames in the same stream 
 *                is not supported (bit reservoir is not maintained if useSize on)
 **************************************************************************************/
int MP3Decode(HMP3Decoder hMP3Decoder, unsigned char **inbuf, int *bytesLeft, short *outbuf, int useSize)
{
 80106c8:	b590      	push	{r4, r7, lr}
 80106ca:	b095      	sub	sp, #84	; 0x54
 80106cc:	af02      	add	r7, sp, #8
 80106ce:	60f8      	str	r0, [r7, #12]
 80106d0:	60b9      	str	r1, [r7, #8]
 80106d2:	607a      	str	r2, [r7, #4]
 80106d4:	603b      	str	r3, [r7, #0]
	int offset, bitOffset, mainBits, gr, ch, fhBytes, siBytes, freeFrameBytes;
	int prevBitOffset, sfBlockBits, huffBlockBits;
	unsigned char *mainPtr;
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	637b      	str	r3, [r7, #52]	; 0x34
	
	#ifdef PROFILE
	long time;
	#endif

	if (!mp3DecInfo)
 80106da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d102      	bne.n	80106e6 <MP3Decode+0x1e>
		return ERR_MP3_NULL_POINTER;
 80106e0:	f06f 0304 	mvn.w	r3, #4
 80106e4:	e204      	b.n	8010af0 <MP3Decode+0x428>

	/* unpack frame header */
	fhBytes = UnpackFrameHeader(mp3DecInfo, *inbuf);
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	4619      	mov	r1, r3
 80106ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80106ee:	f000 fb0f 	bl	8010d10 <xmp3_UnpackFrameHeader>
 80106f2:	6338      	str	r0, [r7, #48]	; 0x30
	if (fhBytes < 0)	
 80106f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	da02      	bge.n	8010700 <MP3Decode+0x38>
		return ERR_MP3_INVALID_FRAMEHEADER;		/* don't clear outbuf since we don't know size (failed to parse header) */
 80106fa:	f06f 0305 	mvn.w	r3, #5
 80106fe:	e1f7      	b.n	8010af0 <MP3Decode+0x428>
	*inbuf += fhBytes;
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	681a      	ldr	r2, [r3, #0]
 8010704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010706:	441a      	add	r2, r3
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	601a      	str	r2, [r3, #0]
	
#ifdef PROFILE
	time = systime_get();
#endif
	/* unpack side info */
	siBytes = UnpackSideInfo(mp3DecInfo, *inbuf);
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	4619      	mov	r1, r3
 8010712:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010714:	f000 fc7e 	bl	8011014 <xmp3_UnpackSideInfo>
 8010718:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (siBytes < 0) {
 801071a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071c:	2b00      	cmp	r3, #0
 801071e:	da06      	bge.n	801072e <MP3Decode+0x66>
		MP3ClearBadFrame(mp3DecInfo, outbuf);
 8010720:	6839      	ldr	r1, [r7, #0]
 8010722:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010724:	f7ff ffa5 	bl	8010672 <MP3ClearBadFrame>
		return ERR_MP3_INVALID_SIDEINFO;
 8010728:	f06f 0306 	mvn.w	r3, #6
 801072c:	e1e0      	b.n	8010af0 <MP3Decode+0x428>
	}
	*inbuf += siBytes;
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	681a      	ldr	r2, [r3, #0]
 8010732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010734:	441a      	add	r2, r3
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	601a      	str	r2, [r3, #0]
	*bytesLeft -= (fhBytes + siBytes);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681a      	ldr	r2, [r3, #0]
 801073e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010742:	440b      	add	r3, r1
 8010744:	1ad2      	subs	r2, r2, r3
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	601a      	str	r2, [r3, #0]
	printf("UnpackSideInfo: %i ms\n", time);
#endif
	
	
	/* if free mode, need to calculate bitrate and nSlots manually, based on frame size */
	if (mp3DecInfo->bitrate == 0 || mp3DecInfo->freeBitrateFlag) {
 801074a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801074c:	f8d3 37b8 	ldr.w	r3, [r3, #1976]	; 0x7b8
 8010750:	2b00      	cmp	r3, #0
 8010752:	d004      	beq.n	801075e <MP3Decode+0x96>
 8010754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010756:	f8d3 37b0 	ldr.w	r3, [r3, #1968]	; 0x7b0
 801075a:	2b00      	cmp	r3, #0
 801075c:	d04d      	beq.n	80107fa <MP3Decode+0x132>
		if (!mp3DecInfo->freeBitrateFlag) {
 801075e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010760:	f8d3 37b0 	ldr.w	r3, [r3, #1968]	; 0x7b0
 8010764:	2b00      	cmp	r3, #0
 8010766:	d13d      	bne.n	80107e4 <MP3Decode+0x11c>
			/* first time through, need to scan for next sync word and figure out frame size */
			mp3DecInfo->freeBitrateFlag = 1;
 8010768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801076a:	2201      	movs	r2, #1
 801076c:	f8c3 27b0 	str.w	r2, [r3, #1968]	; 0x7b0
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	6818      	ldr	r0, [r3, #0]
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	681a      	ldr	r2, [r3, #0]
 8010778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801077a:	4259      	negs	r1, r3
 801077c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801077e:	1acb      	subs	r3, r1, r3
 8010780:	18d1      	adds	r1, r2, r3
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	461a      	mov	r2, r3
 8010788:	f7ff fe9c 	bl	80104c4 <MP3FindFreeSync>
 801078c:	4602      	mov	r2, r0
 801078e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010790:	f8c3 27b4 	str.w	r2, [r3, #1972]	; 0x7b4
			if (mp3DecInfo->freeBitrateSlots < 0) {
 8010794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010796:	f8d3 37b4 	ldr.w	r3, [r3, #1972]	; 0x7b4
 801079a:	2b00      	cmp	r3, #0
 801079c:	da06      	bge.n	80107ac <MP3Decode+0xe4>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 801079e:	6839      	ldr	r1, [r7, #0]
 80107a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80107a2:	f7ff ff66 	bl	8010672 <MP3ClearBadFrame>
				return ERR_MP3_FREE_BITRATE_SYNC;
 80107a6:	f06f 0302 	mvn.w	r3, #2
 80107aa:	e1a1      	b.n	8010af0 <MP3Decode+0x428>
			}
			freeFrameBytes = mp3DecInfo->freeBitrateSlots + fhBytes + siBytes;
 80107ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ae:	f8d3 27b4 	ldr.w	r2, [r3, #1972]	; 0x7b4
 80107b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b4:	4413      	add	r3, r2
 80107b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107b8:	4413      	add	r3, r2
 80107ba:	62bb      	str	r3, [r7, #40]	; 0x28
			mp3DecInfo->bitrate = (freeFrameBytes * mp3DecInfo->samprate * 8) / (mp3DecInfo->nGrans * mp3DecInfo->nGranSamps);
 80107bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107be:	f8d3 37c0 	ldr.w	r3, [r3, #1984]	; 0x7c0
 80107c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107c4:	fb02 f303 	mul.w	r3, r2, r3
 80107c8:	00da      	lsls	r2, r3, #3
 80107ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107cc:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 80107d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80107d2:	f8d1 17c8 	ldr.w	r1, [r1, #1992]	; 0x7c8
 80107d6:	fb01 f303 	mul.w	r3, r1, r3
 80107da:	fb92 f2f3 	sdiv	r2, r2, r3
 80107de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e0:	f8c3 27b8 	str.w	r2, [r3, #1976]	; 0x7b8
		}
		mp3DecInfo->nSlots = mp3DecInfo->freeBitrateSlots + CheckPadBit(mp3DecInfo);	/* add pad byte, if required */
 80107e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107e6:	f8d3 47b4 	ldr.w	r4, [r3, #1972]	; 0x7b4
 80107ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80107ec:	f000 fa71 	bl	8010cd2 <xmp3_CheckPadBit>
 80107f0:	4603      	mov	r3, r0
 80107f2:	18e2      	adds	r2, r4, r3
 80107f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107f6:	f8c3 27cc 	str.w	r2, [r3, #1996]	; 0x7cc
	 *  - calling function assembles "self-contained" MP3 frames by shifting any main_data 
	 *      from the bit reservoir (in previous frames) to AFTER the sync word and side info
	 *  - calling function should set mainDataBegin to 0, and tell us exactly how large this
	 *      frame is (in bytesLeft)
	 */
	if (useSize) {
 80107fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d02f      	beq.n	8010860 <MP3Decode+0x198>
		mp3DecInfo->nSlots = *bytesLeft;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681a      	ldr	r2, [r3, #0]
 8010804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010806:	f8c3 27cc 	str.w	r2, [r3, #1996]	; 0x7cc
		if (mp3DecInfo->mainDataBegin != 0 || mp3DecInfo->nSlots <= 0) {
 801080a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801080c:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 8010810:	2b00      	cmp	r3, #0
 8010812:	d104      	bne.n	801081e <MP3Decode+0x156>
 8010814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010816:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 801081a:	2b00      	cmp	r3, #0
 801081c:	dc06      	bgt.n	801082c <MP3Decode+0x164>
			/* error - non self-contained frame, or missing frame (size <= 0), could do loss concealment here */
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 801081e:	6839      	ldr	r1, [r7, #0]
 8010820:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010822:	f7ff ff26 	bl	8010672 <MP3ClearBadFrame>
			return ERR_MP3_INVALID_FRAMEHEADER;
 8010826:	f06f 0305 	mvn.w	r3, #5
 801082a:	e161      	b.n	8010af0 <MP3Decode+0x428>
		}

		/* can operate in-place on reformatted frames */
		mp3DecInfo->mainDataBytes = mp3DecInfo->nSlots;
 801082c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801082e:	f8d3 27cc 	ldr.w	r2, [r3, #1996]	; 0x7cc
 8010832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010834:	f8c3 27dc 	str.w	r2, [r3, #2012]	; 0x7dc
		mainPtr = *inbuf;
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	63bb      	str	r3, [r7, #56]	; 0x38
		*inbuf += mp3DecInfo->nSlots;
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010844:	f8d2 27cc 	ldr.w	r2, [r2, #1996]	; 0x7cc
 8010848:	441a      	add	r2, r3
 801084a:	68bb      	ldr	r3, [r7, #8]
 801084c:	601a      	str	r2, [r3, #0]
		*bytesLeft -= (mp3DecInfo->nSlots);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010854:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8010858:	1ad2      	subs	r2, r2, r3
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	601a      	str	r2, [r3, #0]
 801085e:	e085      	b.n	801096c <MP3Decode+0x2a4>
	} else {
		/* out of data - assume last or truncated frame */
		if (mp3DecInfo->nSlots > *bytesLeft) {
 8010860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010862:	f8d3 27cc 	ldr.w	r2, [r3, #1996]	; 0x7cc
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	429a      	cmp	r2, r3
 801086c:	dd06      	ble.n	801087c <MP3Decode+0x1b4>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 801086e:	6839      	ldr	r1, [r7, #0]
 8010870:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010872:	f7ff fefe 	bl	8010672 <MP3ClearBadFrame>
			return ERR_MP3_INDATA_UNDERFLOW;	
 8010876:	f04f 33ff 	mov.w	r3, #4294967295
 801087a:	e139      	b.n	8010af0 <MP3Decode+0x428>

#ifdef PROFILE
	time = systime_get();
#endif
		/* fill main data buffer with enough new data for this frame */
		if (mp3DecInfo->mainDataBytes >= mp3DecInfo->mainDataBegin) {
 801087c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801087e:	f8d3 27dc 	ldr.w	r2, [r3, #2012]	; 0x7dc
 8010882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010884:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 8010888:	429a      	cmp	r2, r3
 801088a:	db40      	blt.n	801090e <MP3Decode+0x246>
			/* adequate "old" main data available (i.e. bit reservoir) */
			memmove(mp3DecInfo->mainBuf, mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes - mp3DecInfo->mainDataBegin, mp3DecInfo->mainDataBegin);
 801088c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801088e:	f103 001c 	add.w	r0, r3, #28
 8010892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010894:	f103 021c 	add.w	r2, r3, #28
 8010898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801089a:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 801089e:	4619      	mov	r1, r3
 80108a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a2:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 80108a6:	1acb      	subs	r3, r1, r3
 80108a8:	18d1      	adds	r1, r2, r3
 80108aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ac:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	; 0x7d8
 80108b0:	461a      	mov	r2, r3
 80108b2:	f006 f87b 	bl	80169ac <memmove>
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBegin, *inbuf, mp3DecInfo->nSlots);
 80108b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108b8:	331c      	adds	r3, #28
 80108ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108bc:	f8d2 27d8 	ldr.w	r2, [r2, #2008]	; 0x7d8
 80108c0:	1898      	adds	r0, r3, r2
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	6819      	ldr	r1, [r3, #0]
 80108c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108c8:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 80108cc:	461a      	mov	r2, r3
 80108ce:	f006 f85f 	bl	8016990 <memcpy>

			mp3DecInfo->mainDataBytes = mp3DecInfo->mainDataBegin + mp3DecInfo->nSlots;
 80108d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108d4:	f8d3 27d8 	ldr.w	r2, [r3, #2008]	; 0x7d8
 80108d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108da:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 80108de:	441a      	add	r2, r3
 80108e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108e2:	f8c3 27dc 	str.w	r2, [r3, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108ec:	f8d2 27cc 	ldr.w	r2, [r2, #1996]	; 0x7cc
 80108f0:	441a      	add	r2, r3
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	601a      	str	r2, [r3, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681a      	ldr	r2, [r3, #0]
 80108fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108fc:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8010900:	1ad2      	subs	r2, r2, r3
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	601a      	str	r2, [r3, #0]
			mainPtr = mp3DecInfo->mainBuf;
 8010906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010908:	331c      	adds	r3, #28
 801090a:	63bb      	str	r3, [r7, #56]	; 0x38
 801090c:	e02e      	b.n	801096c <MP3Decode+0x2a4>
		} else {
			/* not enough data in bit reservoir from previous frames (perhaps starting in middle of file) */
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes, *inbuf, mp3DecInfo->nSlots);
 801090e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010910:	331c      	adds	r3, #28
 8010912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010914:	f8d2 27dc 	ldr.w	r2, [r2, #2012]	; 0x7dc
 8010918:	1898      	adds	r0, r3, r2
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	6819      	ldr	r1, [r3, #0]
 801091e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010920:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8010924:	461a      	mov	r2, r3
 8010926:	f006 f833 	bl	8016990 <memcpy>
			mp3DecInfo->mainDataBytes += mp3DecInfo->nSlots;
 801092a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801092c:	f8d3 27dc 	ldr.w	r2, [r3, #2012]	; 0x7dc
 8010930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010932:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8010936:	441a      	add	r2, r3
 8010938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801093a:	f8c3 27dc 	str.w	r2, [r3, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010944:	f8d2 27cc 	ldr.w	r2, [r2, #1996]	; 0x7cc
 8010948:	441a      	add	r2, r3
 801094a:	68bb      	ldr	r3, [r7, #8]
 801094c:	601a      	str	r2, [r3, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010954:	f8d3 37cc 	ldr.w	r3, [r3, #1996]	; 0x7cc
 8010958:	1ad2      	subs	r2, r2, r3
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	601a      	str	r2, [r3, #0]
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 801095e:	6839      	ldr	r1, [r7, #0]
 8010960:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010962:	f7ff fe86 	bl	8010672 <MP3ClearBadFrame>
			return ERR_MP3_MAINDATA_UNDERFLOW;
 8010966:	f06f 0301 	mvn.w	r3, #1
 801096a:	e0c1      	b.n	8010af0 <MP3Decode+0x428>
	time = systime_get() - time;
	printf("data buffer filling: %i ms\n", time);
#endif

	}
	bitOffset = 0;
 801096c:	2300      	movs	r3, #0
 801096e:	617b      	str	r3, [r7, #20]
	mainBits = mp3DecInfo->mainDataBytes * 8;
 8010970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010972:	f8d3 37dc 	ldr.w	r3, [r3, #2012]	; 0x7dc
 8010976:	00db      	lsls	r3, r3, #3
 8010978:	647b      	str	r3, [r7, #68]	; 0x44

	/* decode one complete frame */
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 801097a:	2300      	movs	r3, #0
 801097c:	643b      	str	r3, [r7, #64]	; 0x40
 801097e:	e0af      	b.n	8010ae0 <MP3Decode+0x418>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8010980:	2300      	movs	r3, #0
 8010982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010984:	e05e      	b.n	8010a44 <MP3Decode+0x37c>
			
			#ifdef PROFILE
				time = systime_get();
			#endif
			/* unpack scale factors and compute size of scale factor block */
			prevBitOffset = bitOffset;
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	627b      	str	r3, [r7, #36]	; 0x24
			offset = UnpackScaleFactors(mp3DecInfo, mainPtr, &bitOffset, mainBits, gr, ch);
 801098a:	f107 0214 	add.w	r2, r7, #20
 801098e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010990:	9301      	str	r3, [sp, #4]
 8010992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010994:	9300      	str	r3, [sp, #0]
 8010996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010998:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801099a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801099c:	f005 f934 	bl	8015c08 <xmp3_UnpackScaleFactors>
 80109a0:	6238      	str	r0, [r7, #32]
			#ifdef PROFILE
				time = systime_get() - time;
				printf("UnpackScaleFactors: %i ms\n", time);
			#endif

			sfBlockBits = 8*offset - prevBitOffset + bitOffset;
 80109a2:	6a3b      	ldr	r3, [r7, #32]
 80109a4:	00da      	lsls	r2, r3, #3
 80109a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a8:	1ad2      	subs	r2, r2, r3
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	4413      	add	r3, r2
 80109ae:	61fb      	str	r3, [r7, #28]
			huffBlockBits = mp3DecInfo->part23Length[gr][ch] - sfBlockBits;
 80109b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80109b4:	0051      	lsls	r1, r2, #1
 80109b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80109b8:	440a      	add	r2, r1
 80109ba:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
 80109be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80109c2:	69fb      	ldr	r3, [r7, #28]
 80109c4:	1ad3      	subs	r3, r2, r3
 80109c6:	61bb      	str	r3, [r7, #24]
			mainPtr += offset;
 80109c8:	6a3b      	ldr	r3, [r7, #32]
 80109ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80109cc:	4413      	add	r3, r2
 80109ce:	63bb      	str	r3, [r7, #56]	; 0x38
			mainBits -= sfBlockBits;
 80109d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80109d2:	69fb      	ldr	r3, [r7, #28]
 80109d4:	1ad3      	subs	r3, r2, r3
 80109d6:	647b      	str	r3, [r7, #68]	; 0x44

			if (offset < 0 || mainBits < huffBlockBits) {
 80109d8:	6a3b      	ldr	r3, [r7, #32]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	db03      	blt.n	80109e6 <MP3Decode+0x31e>
 80109de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80109e0:	69bb      	ldr	r3, [r7, #24]
 80109e2:	429a      	cmp	r2, r3
 80109e4:	da06      	bge.n	80109f4 <MP3Decode+0x32c>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 80109e6:	6839      	ldr	r1, [r7, #0]
 80109e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80109ea:	f7ff fe42 	bl	8010672 <MP3ClearBadFrame>
				return ERR_MP3_INVALID_SCALEFACT;
 80109ee:	f06f 0307 	mvn.w	r3, #7
 80109f2:	e07d      	b.n	8010af0 <MP3Decode+0x428>

			#ifdef PROFILE
				time = systime_get();
			#endif
			/* decode Huffman code words */
			prevBitOffset = bitOffset;
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	627b      	str	r3, [r7, #36]	; 0x24
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 80109f8:	f107 0214 	add.w	r2, r7, #20
 80109fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109fe:	9301      	str	r3, [sp, #4]
 8010a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a02:	9300      	str	r3, [sp, #0]
 8010a04:	69bb      	ldr	r3, [r7, #24]
 8010a06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010a08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010a0a:	f002 fe01 	bl	8013610 <xmp3_DecodeHuffman>
 8010a0e:	6238      	str	r0, [r7, #32]
			if (offset < 0) {
 8010a10:	6a3b      	ldr	r3, [r7, #32]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	da06      	bge.n	8010a24 <MP3Decode+0x35c>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 8010a16:	6839      	ldr	r1, [r7, #0]
 8010a18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010a1a:	f7ff fe2a 	bl	8010672 <MP3ClearBadFrame>
				return ERR_MP3_INVALID_HUFFCODES;
 8010a1e:	f06f 0308 	mvn.w	r3, #8
 8010a22:	e065      	b.n	8010af0 <MP3Decode+0x428>
			#ifdef PROFILE
				time = systime_get() - time;
				printf("Huffman: %i ms\n", time);
			#endif

			mainPtr += offset;
 8010a24:	6a3b      	ldr	r3, [r7, #32]
 8010a26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a28:	4413      	add	r3, r2
 8010a2a:	63bb      	str	r3, [r7, #56]	; 0x38
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 8010a2c:	6a3b      	ldr	r3, [r7, #32]
 8010a2e:	00da      	lsls	r2, r3, #3
 8010a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a32:	1ad2      	subs	r2, r2, r3
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	4413      	add	r3, r2
 8010a38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a3a:	1ad3      	subs	r3, r2, r3
 8010a3c:	647b      	str	r3, [r7, #68]	; 0x44
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8010a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a40:	3301      	adds	r3, #1
 8010a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a46:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 8010a4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	db9a      	blt.n	8010986 <MP3Decode+0x2be>
		
		#ifdef PROFILE
			time = systime_get();
		#endif
		/* dequantize coefficients, decode stereo, reorder short blocks */
		if (Dequantize(mp3DecInfo, gr) < 0) {
 8010a50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010a52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010a54:	f001 fcde 	bl	8012414 <xmp3_Dequantize>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	da06      	bge.n	8010a6c <MP3Decode+0x3a4>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 8010a5e:	6839      	ldr	r1, [r7, #0]
 8010a60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010a62:	f7ff fe06 	bl	8010672 <MP3ClearBadFrame>
			return ERR_MP3_INVALID_DEQUANTIZE;			
 8010a66:	f06f 0309 	mvn.w	r3, #9
 8010a6a:	e041      	b.n	8010af0 <MP3Decode+0x428>
			time = systime_get() - time;
			printf("Dequantize: %i ms\n", time);
		#endif

		/* alias reduction, inverse MDCT, overlap-add, frequency inversion */
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a70:	e011      	b.n	8010a96 <MP3Decode+0x3ce>
		{
		#ifdef PROFILE
			time = systime_get();
		#endif
			if (IMDCT(mp3DecInfo, gr, ch) < 0) {
 8010a72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010a76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010a78:	f004 fba0 	bl	80151bc <xmp3_IMDCT>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	da06      	bge.n	8010a90 <MP3Decode+0x3c8>
				MP3ClearBadFrame(mp3DecInfo, outbuf);
 8010a82:	6839      	ldr	r1, [r7, #0]
 8010a84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010a86:	f7ff fdf4 	bl	8010672 <MP3ClearBadFrame>
				return ERR_MP3_INVALID_IMDCT;			
 8010a8a:	f06f 030a 	mvn.w	r3, #10
 8010a8e:	e02f      	b.n	8010af0 <MP3Decode+0x428>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 8010a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a92:	3301      	adds	r3, #1
 8010a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a98:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 8010a9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	dbe7      	blt.n	8010a72 <MP3Decode+0x3aa>
		
		#ifdef PROFILE
			time = systime_get();
		#endif
		/* subband transform - if stereo, interleaves pcm LRLRLR */
		if (Subband(mp3DecInfo, outbuf + gr*mp3DecInfo->nGranSamps*mp3DecInfo->nChans) < 0) {
 8010aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aa4:	f8d3 37c8 	ldr.w	r3, [r3, #1992]	; 0x7c8
 8010aa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010aaa:	fb02 f303 	mul.w	r3, r2, r3
 8010aae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ab0:	f8d2 27bc 	ldr.w	r2, [r2, #1980]	; 0x7bc
 8010ab4:	fb02 f303 	mul.w	r3, r2, r3
 8010ab8:	005b      	lsls	r3, r3, #1
 8010aba:	683a      	ldr	r2, [r7, #0]
 8010abc:	4413      	add	r3, r2
 8010abe:	4619      	mov	r1, r3
 8010ac0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010ac2:	f005 fe65 	bl	8016790 <xmp3_Subband>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	da06      	bge.n	8010ada <MP3Decode+0x412>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
 8010acc:	6839      	ldr	r1, [r7, #0]
 8010ace:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010ad0:	f7ff fdcf 	bl	8010672 <MP3ClearBadFrame>
			return ERR_MP3_INVALID_SUBBAND;			
 8010ad4:	f06f 030b 	mvn.w	r3, #11
 8010ad8:	e00a      	b.n	8010af0 <MP3Decode+0x428>
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 8010ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010adc:	3301      	adds	r3, #1
 8010ade:	643b      	str	r3, [r7, #64]	; 0x40
 8010ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ae2:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 8010ae6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	f6ff af49 	blt.w	8010980 <MP3Decode+0x2b8>
			time = systime_get() - time;
			printf("Subband: %i ms\n", time);
		#endif
		
	}
	return ERR_MP3_NONE;
 8010aee:	2300      	movs	r3, #0
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	374c      	adds	r7, #76	; 0x4c
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd90      	pop	{r4, r7, pc}

08010af8 <xmp3_SetBitstreamPointer>:
 * Outputs:     filled bitstream info struct
 *
 * Return:      none
 **************************************************************************************/
void SetBitstreamPointer(BitStreamInfo *bsi, int nBytes, unsigned char *buf)
{
 8010af8:	b480      	push	{r7}
 8010afa:	b085      	sub	sp, #20
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	60f8      	str	r0, [r7, #12]
 8010b00:	60b9      	str	r1, [r7, #8]
 8010b02:	607a      	str	r2, [r7, #4]
	/* init bitstream */
	bsi->bytePtr = buf;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	687a      	ldr	r2, [r7, #4]
 8010b08:	601a      	str	r2, [r3, #0]
	bsi->iCache = 0;		/* 4-byte unsigned int */
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	605a      	str	r2, [r3, #4]
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	2200      	movs	r2, #0
 8010b14:	609a      	str	r2, [r3, #8]
	bsi->nBytes = nBytes;
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	68ba      	ldr	r2, [r7, #8]
 8010b1a:	60da      	str	r2, [r3, #12]
}
 8010b1c:	bf00      	nop
 8010b1e:	3714      	adds	r7, #20
 8010b20:	46bd      	mov	sp, r7
 8010b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b26:	4770      	bx	lr

08010b28 <RefillBitstreamCache>:
 *
 * TODO:        optimize for ARM
 *              possibly add little/big-endian modes for doing 32-bit loads
 **************************************************************************************/
static __inline void RefillBitstreamCache(BitStreamInfo *bsi)
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b085      	sub	sp, #20
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
	int nBytes = bsi->nBytes;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	60fb      	str	r3, [r7, #12]

	/* optimize for common case, independent of machine endian-ness */
	if (nBytes >= 4) {
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	2b03      	cmp	r3, #3
 8010b3a:	dd35      	ble.n	8010ba8 <RefillBitstreamCache+0x80>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	1c59      	adds	r1, r3, #1
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	6011      	str	r1, [r2, #0]
 8010b46:	781b      	ldrb	r3, [r3, #0]
 8010b48:	061b      	lsls	r3, r3, #24
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	605a      	str	r2, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	1c59      	adds	r1, r3, #1
 8010b56:	687a      	ldr	r2, [r7, #4]
 8010b58:	6011      	str	r1, [r2, #0]
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	041a      	lsls	r2, r3, #16
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	685b      	ldr	r3, [r3, #4]
 8010b62:	431a      	orrs	r2, r3
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	605a      	str	r2, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	1c59      	adds	r1, r3, #1
 8010b6e:	687a      	ldr	r2, [r7, #4]
 8010b70:	6011      	str	r1, [r2, #0]
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	021a      	lsls	r2, r3, #8
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	685b      	ldr	r3, [r3, #4]
 8010b7a:	431a      	orrs	r2, r3
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	605a      	str	r2, [r3, #4]
		bsi->iCache |= (*bsi->bytePtr++);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	1c59      	adds	r1, r3, #1
 8010b86:	687a      	ldr	r2, [r7, #4]
 8010b88:	6011      	str	r1, [r2, #0]
 8010b8a:	781a      	ldrb	r2, [r3, #0]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	685b      	ldr	r3, [r3, #4]
 8010b90:	431a      	orrs	r2, r3
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	605a      	str	r2, [r3, #4]
		bsi->cachedBits = 32;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2220      	movs	r2, #32
 8010b9a:	609a      	str	r2, [r3, #8]
		bsi->nBytes -= 4;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	1f1a      	subs	r2, r3, #4
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	60da      	str	r2, [r3, #12]
		}
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
		bsi->cachedBits = 8*bsi->nBytes;
		bsi->nBytes = 0;
	}
}
 8010ba6:	e02a      	b.n	8010bfe <RefillBitstreamCache+0xd6>
		bsi->iCache = 0;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2200      	movs	r2, #0
 8010bac:	605a      	str	r2, [r3, #4]
		while (nBytes--) {
 8010bae:	e00f      	b.n	8010bd0 <RefillBitstreamCache+0xa8>
			bsi->iCache |= (*bsi->bytePtr++);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	1c59      	adds	r1, r3, #1
 8010bb6:	687a      	ldr	r2, [r7, #4]
 8010bb8:	6011      	str	r1, [r2, #0]
 8010bba:	781a      	ldrb	r2, [r3, #0]
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	685b      	ldr	r3, [r3, #4]
 8010bc0:	431a      	orrs	r2, r3
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	605a      	str	r2, [r3, #4]
			bsi->iCache <<= 8;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	685b      	ldr	r3, [r3, #4]
 8010bca:	021a      	lsls	r2, r3, #8
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	605a      	str	r2, [r3, #4]
		while (nBytes--) {
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	1e5a      	subs	r2, r3, #1
 8010bd4:	60fa      	str	r2, [r7, #12]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d1ea      	bne.n	8010bb0 <RefillBitstreamCache+0x88>
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	685a      	ldr	r2, [r3, #4]
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	68db      	ldr	r3, [r3, #12]
 8010be2:	f1c3 0303 	rsb	r3, r3, #3
 8010be6:	00db      	lsls	r3, r3, #3
 8010be8:	409a      	lsls	r2, r3
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	605a      	str	r2, [r3, #4]
		bsi->cachedBits = 8*bsi->nBytes;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	68db      	ldr	r3, [r3, #12]
 8010bf2:	00da      	lsls	r2, r3, #3
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	609a      	str	r2, [r3, #8]
		bsi->nBytes = 0;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	60da      	str	r2, [r3, #12]
}
 8010bfe:	bf00      	nop
 8010c00:	3714      	adds	r7, #20
 8010c02:	46bd      	mov	sp, r7
 8010c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c08:	4770      	bx	lr

08010c0a <xmp3_GetBits>:
 *              if nBits = 0, returns 0 (useful for scalefactor unpacking)
 *
 * TODO:        optimize for ARM
 **************************************************************************************/
unsigned int GetBits(BitStreamInfo *bsi, int nBits)
{
 8010c0a:	b580      	push	{r7, lr}
 8010c0c:	b084      	sub	sp, #16
 8010c0e:	af00      	add	r7, sp, #0
 8010c10:	6078      	str	r0, [r7, #4]
 8010c12:	6039      	str	r1, [r7, #0]
	unsigned int data, lowBits;

	nBits &= 0x1f;							/* nBits mod 32 to avoid unpredictable results like >> by negative amount */
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	f003 031f 	and.w	r3, r3, #31
 8010c1a:	603b      	str	r3, [r7, #0]
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	685a      	ldr	r2, [r3, #4]
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	f1c3 031f 	rsb	r3, r3, #31
 8010c26:	fa22 f303 	lsr.w	r3, r2, r3
 8010c2a:	60fb      	str	r3, [r7, #12]
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	085b      	lsrs	r3, r3, #1
 8010c30:	60fb      	str	r3, [r7, #12]
	bsi->iCache <<= nBits;					/* left-justify cache */
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	685a      	ldr	r2, [r3, #4]
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	409a      	lsls	r2, r3
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	605a      	str	r2, [r3, #4]
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	689a      	ldr	r2, [r3, #8]
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	1ad2      	subs	r2, r2, r3
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	609a      	str	r2, [r3, #8]

	/* if we cross an int boundary, refill the cache */
	if (bsi->cachedBits < 0) {
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	689b      	ldr	r3, [r3, #8]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	da1e      	bge.n	8010c90 <xmp3_GetBits+0x86>
		lowBits = -bsi->cachedBits;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	689b      	ldr	r3, [r3, #8]
 8010c56:	425b      	negs	r3, r3
 8010c58:	60bb      	str	r3, [r7, #8]
		RefillBitstreamCache(bsi);
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	f7ff ff64 	bl	8010b28 <RefillBitstreamCache>
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	685a      	ldr	r2, [r3, #4]
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	f1c3 0320 	rsb	r3, r3, #32
 8010c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8010c6e:	68fa      	ldr	r2, [r7, #12]
 8010c70:	4313      	orrs	r3, r2
 8010c72:	60fb      	str	r3, [r7, #12]
	
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	689b      	ldr	r3, [r3, #8]
 8010c78:	461a      	mov	r2, r3
 8010c7a:	68bb      	ldr	r3, [r7, #8]
 8010c7c:	1ad3      	subs	r3, r2, r3
 8010c7e:	461a      	mov	r2, r3
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	609a      	str	r2, [r3, #8]
		bsi->iCache <<= lowBits;			/* left-justify cache */
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	685a      	ldr	r2, [r3, #4]
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	409a      	lsls	r2, r3
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	605a      	str	r2, [r3, #4]
	}

	return data;
 8010c90:	68fb      	ldr	r3, [r7, #12]
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	3710      	adds	r7, #16
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}

08010c9a <xmp3_CalcBitsUsed>:
 * Outputs:     none
 *
 * Return:      number of bits read from bitstream, as offset from startBuf:startOffset
 **************************************************************************************/
int CalcBitsUsed(BitStreamInfo *bsi, unsigned char *startBuf, int startOffset)
{
 8010c9a:	b480      	push	{r7}
 8010c9c:	b087      	sub	sp, #28
 8010c9e:	af00      	add	r7, sp, #0
 8010ca0:	60f8      	str	r0, [r7, #12]
 8010ca2:	60b9      	str	r1, [r7, #8]
 8010ca4:	607a      	str	r2, [r7, #4]
	int bitsUsed;

	bitsUsed  = (bsi->bytePtr - startBuf) * 8;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	681a      	ldr	r2, [r3, #0]
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	1ad3      	subs	r3, r2, r3
 8010cae:	00db      	lsls	r3, r3, #3
 8010cb0:	617b      	str	r3, [r7, #20]
	bitsUsed -= bsi->cachedBits;
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	689b      	ldr	r3, [r3, #8]
 8010cb6:	697a      	ldr	r2, [r7, #20]
 8010cb8:	1ad3      	subs	r3, r2, r3
 8010cba:	617b      	str	r3, [r7, #20]
	bitsUsed -= startOffset;
 8010cbc:	697a      	ldr	r2, [r7, #20]
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	1ad3      	subs	r3, r2, r3
 8010cc2:	617b      	str	r3, [r7, #20]

	return bitsUsed;
 8010cc4:	697b      	ldr	r3, [r7, #20]
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	371c      	adds	r7, #28
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd0:	4770      	bx	lr

08010cd2 <xmp3_CheckPadBit>:
 * Outputs:     none
 *
 * Return:      1 if pad bit is set, 0 if not, -1 if null input pointer
 **************************************************************************************/
int CheckPadBit(MP3DecInfo *mp3DecInfo)
{
 8010cd2:	b480      	push	{r7}
 8010cd4:	b085      	sub	sp, #20
 8010cd6:	af00      	add	r7, sp, #0
 8010cd8:	6078      	str	r0, [r7, #4]
	FrameHeader *fh;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS)
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d003      	beq.n	8010ce8 <xmp3_CheckPadBit+0x16>
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d102      	bne.n	8010cee <xmp3_CheckPadBit+0x1c>
		return -1;
 8010ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8010cec:	e009      	b.n	8010d02 <xmp3_CheckPadBit+0x30>

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	60fb      	str	r3, [r7, #12]

	return (fh->paddingBit ? 1 : 0);
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	695b      	ldr	r3, [r3, #20]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	bf14      	ite	ne
 8010cfc:	2301      	movne	r3, #1
 8010cfe:	2300      	moveq	r3, #0
 8010d00:	b2db      	uxtb	r3, r3
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3714      	adds	r7, #20
 8010d06:	46bd      	mov	sp, r7
 8010d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0c:	4770      	bx	lr
	...

08010d10 <xmp3_UnpackFrameHeader>:
 *
 * TODO:        check for valid modes, depending on capabilities of decoder
 *              test CRC on actual stream (verify no endian problems)
 **************************************************************************************/
int UnpackFrameHeader(MP3DecInfo *mp3DecInfo, unsigned char *buf)
{
 8010d10:	b490      	push	{r4, r7}
 8010d12:	b084      	sub	sp, #16
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	6039      	str	r1, [r7, #0]

	int verIdx;
	FrameHeader *fh;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || (buf[0] & SYNCWORDH) != SYNCWORDH || (buf[1] & SYNCWORDL) != SYNCWORDL)
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d00e      	beq.n	8010d3e <xmp3_UnpackFrameHeader+0x2e>
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d00a      	beq.n	8010d3e <xmp3_UnpackFrameHeader+0x2e>
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	2bff      	cmp	r3, #255	; 0xff
 8010d2e:	d106      	bne.n	8010d3e <xmp3_UnpackFrameHeader+0x2e>
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	3301      	adds	r3, #1
 8010d34:	781b      	ldrb	r3, [r3, #0]
 8010d36:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8010d3a:	2be0      	cmp	r3, #224	; 0xe0
 8010d3c:	d002      	beq.n	8010d44 <xmp3_UnpackFrameHeader+0x34>
		return -1;
 8010d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8010d42:	e155      	b.n	8010ff0 <xmp3_UnpackFrameHeader+0x2e0>

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	60fb      	str	r3, [r7, #12]

	/* read header fields - use bitmasks instead of GetBits() for speed, since format never varies */
	verIdx =         (buf[1] >> 3) & 0x03;
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	3301      	adds	r3, #1
 8010d4e:	781b      	ldrb	r3, [r3, #0]
 8010d50:	08db      	lsrs	r3, r3, #3
 8010d52:	b2db      	uxtb	r3, r3
 8010d54:	f003 0303 	and.w	r3, r3, #3
 8010d58:	60bb      	str	r3, [r7, #8]
	fh->ver =        (MPEGVersion)( verIdx == 0 ? MPEG25 : ((verIdx & 0x01) ? MPEG1 : MPEG2) );
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d009      	beq.n	8010d74 <xmp3_UnpackFrameHeader+0x64>
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	f003 0301 	and.w	r3, r3, #1
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	bf0c      	ite	eq
 8010d6a:	2301      	moveq	r3, #1
 8010d6c:	2300      	movne	r3, #0
 8010d6e:	b2db      	uxtb	r3, r3
 8010d70:	b2da      	uxtb	r2, r3
 8010d72:	e000      	b.n	8010d76 <xmp3_UnpackFrameHeader+0x66>
 8010d74:	2202      	movs	r2, #2
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	701a      	strb	r2, [r3, #0]
	fh->layer = 4 - ((buf[1] >> 1) & 0x03);     /* easy mapping of index to layer number, 4 = error */
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	3301      	adds	r3, #1
 8010d7e:	781b      	ldrb	r3, [r3, #0]
 8010d80:	085b      	lsrs	r3, r3, #1
 8010d82:	b2db      	uxtb	r3, r3
 8010d84:	f003 0303 	and.w	r3, r3, #3
 8010d88:	f1c3 0204 	rsb	r2, r3, #4
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	605a      	str	r2, [r3, #4]
	fh->crc =   1 - ((buf[1] >> 0) & 0x01);
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	3301      	adds	r3, #1
 8010d94:	781b      	ldrb	r3, [r3, #0]
 8010d96:	f003 0301 	and.w	r3, r3, #1
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	bf0c      	ite	eq
 8010d9e:	2301      	moveq	r3, #1
 8010da0:	2300      	movne	r3, #0
 8010da2:	b2db      	uxtb	r3, r3
 8010da4:	461a      	mov	r2, r3
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	609a      	str	r2, [r3, #8]
	fh->brIdx =      (buf[2] >> 4) & 0x0f;
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	3302      	adds	r3, #2
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	091b      	lsrs	r3, r3, #4
 8010db2:	b2db      	uxtb	r3, r3
 8010db4:	f003 020f 	and.w	r2, r3, #15
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	60da      	str	r2, [r3, #12]
	fh->srIdx =      (buf[2] >> 2) & 0x03;
 8010dbc:	683b      	ldr	r3, [r7, #0]
 8010dbe:	3302      	adds	r3, #2
 8010dc0:	781b      	ldrb	r3, [r3, #0]
 8010dc2:	089b      	lsrs	r3, r3, #2
 8010dc4:	b2db      	uxtb	r3, r3
 8010dc6:	f003 0203 	and.w	r2, r3, #3
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	611a      	str	r2, [r3, #16]
	fh->paddingBit = (buf[2] >> 1) & 0x01;
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	3302      	adds	r3, #2
 8010dd2:	781b      	ldrb	r3, [r3, #0]
 8010dd4:	085b      	lsrs	r3, r3, #1
 8010dd6:	b2db      	uxtb	r3, r3
 8010dd8:	f003 0201 	and.w	r2, r3, #1
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	615a      	str	r2, [r3, #20]
	fh->privateBit = (buf[2] >> 0) & 0x01;
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	3302      	adds	r3, #2
 8010de4:	781b      	ldrb	r3, [r3, #0]
 8010de6:	f003 0201 	and.w	r2, r3, #1
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	619a      	str	r2, [r3, #24]
	fh->sMode =      (StereoMode)((buf[3] >> 6) & 0x03);      /* maps to correct enum (see definition) */    
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	3303      	adds	r3, #3
 8010df2:	781b      	ldrb	r3, [r3, #0]
 8010df4:	099b      	lsrs	r3, r3, #6
 8010df6:	b2da      	uxtb	r2, r3
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	771a      	strb	r2, [r3, #28]
	fh->modeExt =    (buf[3] >> 4) & 0x03;
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	3303      	adds	r3, #3
 8010e00:	781b      	ldrb	r3, [r3, #0]
 8010e02:	091b      	lsrs	r3, r3, #4
 8010e04:	b2db      	uxtb	r3, r3
 8010e06:	f003 0203 	and.w	r2, r3, #3
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	621a      	str	r2, [r3, #32]
	fh->copyFlag =   (buf[3] >> 3) & 0x01;
 8010e0e:	683b      	ldr	r3, [r7, #0]
 8010e10:	3303      	adds	r3, #3
 8010e12:	781b      	ldrb	r3, [r3, #0]
 8010e14:	08db      	lsrs	r3, r3, #3
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	f003 0201 	and.w	r2, r3, #1
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	625a      	str	r2, [r3, #36]	; 0x24
	fh->origFlag =   (buf[3] >> 2) & 0x01;
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	3303      	adds	r3, #3
 8010e24:	781b      	ldrb	r3, [r3, #0]
 8010e26:	089b      	lsrs	r3, r3, #2
 8010e28:	b2db      	uxtb	r3, r3
 8010e2a:	f003 0201 	and.w	r2, r3, #1
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	629a      	str	r2, [r3, #40]	; 0x28
	fh->emphasis =   (buf[3] >> 0) & 0x03;
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	3303      	adds	r3, #3
 8010e36:	781b      	ldrb	r3, [r3, #0]
 8010e38:	f003 0203 	and.w	r2, r3, #3
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	62da      	str	r2, [r3, #44]	; 0x2c

	/* check parameters to avoid indexing tables with bad values */
	if (fh->srIdx == 3 || fh->layer == 4 || fh->brIdx == 15)
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	691b      	ldr	r3, [r3, #16]
 8010e44:	2b03      	cmp	r3, #3
 8010e46:	d007      	beq.n	8010e58 <xmp3_UnpackFrameHeader+0x148>
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	685b      	ldr	r3, [r3, #4]
 8010e4c:	2b04      	cmp	r3, #4
 8010e4e:	d003      	beq.n	8010e58 <xmp3_UnpackFrameHeader+0x148>
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	68db      	ldr	r3, [r3, #12]
 8010e54:	2b0f      	cmp	r3, #15
 8010e56:	d102      	bne.n	8010e5e <xmp3_UnpackFrameHeader+0x14e>
		return -1;
 8010e58:	f04f 33ff 	mov.w	r3, #4294967295
 8010e5c:	e0c8      	b.n	8010ff0 <xmp3_UnpackFrameHeader+0x2e0>

	fh->sfBand = &sfBandTable[fh->ver][fh->srIdx];	/* for readability (we reference sfBandTable many times in decoder) */
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	781b      	ldrb	r3, [r3, #0]
 8010e62:	4619      	mov	r1, r3
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	691b      	ldr	r3, [r3, #16]
 8010e68:	224a      	movs	r2, #74	; 0x4a
 8010e6a:	fb03 f202 	mul.w	r2, r3, r2
 8010e6e:	23de      	movs	r3, #222	; 0xde
 8010e70:	fb01 f303 	mul.w	r3, r1, r3
 8010e74:	4413      	add	r3, r2
 8010e76:	4a61      	ldr	r2, [pc, #388]	; (8010ffc <xmp3_UnpackFrameHeader+0x2ec>)
 8010e78:	441a      	add	r2, r3
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	635a      	str	r2, [r3, #52]	; 0x34
	if (fh->sMode != Joint)		/* just to be safe (dequant, stproc check fh->modeExt) */
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	7f1b      	ldrb	r3, [r3, #28]
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d002      	beq.n	8010e8c <xmp3_UnpackFrameHeader+0x17c>
		fh->modeExt = 0;
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	2200      	movs	r2, #0
 8010e8a:	621a      	str	r2, [r3, #32]

	/* init user-accessible data */
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	7f1b      	ldrb	r3, [r3, #28]
 8010e90:	2b03      	cmp	r3, #3
 8010e92:	d101      	bne.n	8010e98 <xmp3_UnpackFrameHeader+0x188>
 8010e94:	2201      	movs	r2, #1
 8010e96:	e000      	b.n	8010e9a <xmp3_UnpackFrameHeader+0x18a>
 8010e98:	2202      	movs	r2, #2
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8c3 27bc 	str.w	r2, [r3, #1980]	; 0x7bc
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	691a      	ldr	r2, [r3, #16]
 8010eaa:	4955      	ldr	r1, [pc, #340]	; (8011000 <xmp3_UnpackFrameHeader+0x2f0>)
 8010eac:	4603      	mov	r3, r0
 8010eae:	005b      	lsls	r3, r3, #1
 8010eb0:	4403      	add	r3, r0
 8010eb2:	4413      	add	r3, r2
 8010eb4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8c3 27c0 	str.w	r2, [r3, #1984]	; 0x7c0
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	781b      	ldrb	r3, [r3, #0]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d101      	bne.n	8010eca <xmp3_UnpackFrameHeader+0x1ba>
 8010ec6:	2202      	movs	r2, #2
 8010ec8:	e000      	b.n	8010ecc <xmp3_UnpackFrameHeader+0x1bc>
 8010eca:	2201      	movs	r2, #1
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8c3 27c4 	str.w	r2, [r3, #1988]	; 0x7c4
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	781b      	ldrb	r3, [r3, #0]
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	1e5a      	subs	r2, r3, #1
 8010ede:	4949      	ldr	r1, [pc, #292]	; (8011004 <xmp3_UnpackFrameHeader+0x2f4>)
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	005b      	lsls	r3, r3, #1
 8010ee4:	4403      	add	r3, r0
 8010ee6:	4413      	add	r3, r2
 8010ee8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8010eec:	461a      	mov	r2, r3
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 8010ef4:	fb92 f2f3 	sdiv	r2, r2, r3
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f8c3 27c8 	str.w	r2, [r3, #1992]	; 0x7c8
	mp3DecInfo->layer = fh->layer;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	685a      	ldr	r2, [r3, #4]
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f8c3 27d0 	str.w	r2, [r3, #2000]	; 0x7d0
	mp3DecInfo->version = fh->ver;
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	781a      	ldrb	r2, [r3, #0]
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f883 27d4 	strb.w	r2, [r3, #2004]	; 0x7d4
	/* get bitrate and nSlots from table, unless brIdx == 0 (free mode) in which case caller must figure it out himself
	 * question - do we want to overwrite mp3DecInfo->bitrate with 0 each time if it's free mode, and
	 *  copy the pre-calculated actual free bitrate into it in mp3dec.c (according to the spec, 
	 *  this shouldn't be necessary, since it should be either all frames free or none free)
	 */
	if (fh->brIdx) {
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	68db      	ldr	r3, [r3, #12]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d056      	beq.n	8010fc8 <xmp3_UnpackFrameHeader+0x2b8>
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	4619      	mov	r1, r3
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	685b      	ldr	r3, [r3, #4]
 8010f24:	3b01      	subs	r3, #1
 8010f26:	68fa      	ldr	r2, [r7, #12]
 8010f28:	68d0      	ldr	r0, [r2, #12]
 8010f2a:	4c37      	ldr	r4, [pc, #220]	; (8011008 <xmp3_UnpackFrameHeader+0x2f8>)
 8010f2c:	461a      	mov	r2, r3
 8010f2e:	0112      	lsls	r2, r2, #4
 8010f30:	1ad2      	subs	r2, r2, r3
 8010f32:	460b      	mov	r3, r1
 8010f34:	005b      	lsls	r3, r3, #1
 8010f36:	440b      	add	r3, r1
 8010f38:	0119      	lsls	r1, r3, #4
 8010f3a:	1ac9      	subs	r1, r1, r3
 8010f3c:	1853      	adds	r3, r2, r1
 8010f3e:	4403      	add	r3, r0
 8010f40:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 8010f44:	461a      	mov	r2, r3
 8010f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010f4a:	fb03 f202 	mul.w	r2, r3, r2
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f8c3 27b8 	str.w	r2, [r3, #1976]	; 0x7b8
	
		/* nSlots = total frame bytes (from table) - sideInfo bytes - header - CRC (if present) + pad (if present) */
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	4619      	mov	r1, r3
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	691b      	ldr	r3, [r3, #16]
 8010f5e:	68fa      	ldr	r2, [r7, #12]
 8010f60:	68d0      	ldr	r0, [r2, #12]
 8010f62:	4c2a      	ldr	r4, [pc, #168]	; (801100c <xmp3_UnpackFrameHeader+0x2fc>)
 8010f64:	461a      	mov	r2, r3
 8010f66:	0112      	lsls	r2, r2, #4
 8010f68:	1ad2      	subs	r2, r2, r3
 8010f6a:	460b      	mov	r3, r1
 8010f6c:	005b      	lsls	r3, r3, #1
 8010f6e:	440b      	add	r3, r1
 8010f70:	0119      	lsls	r1, r3, #4
 8010f72:	1ac9      	subs	r1, r1, r3
 8010f74:	1853      	adds	r3, r2, r1
 8010f76:	4403      	add	r3, r0
 8010f78:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 8010f7c:	4619      	mov	r1, r3
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	781b      	ldrb	r3, [r3, #0]
 8010f82:	461c      	mov	r4, r3
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	7f1b      	ldrb	r3, [r3, #28]
 8010f88:	2b03      	cmp	r3, #3
 8010f8a:	bf14      	ite	ne
 8010f8c:	2301      	movne	r3, #1
 8010f8e:	2300      	moveq	r3, #0
 8010f90:	b2db      	uxtb	r3, r3
 8010f92:	4618      	mov	r0, r3
 8010f94:	4a1e      	ldr	r2, [pc, #120]	; (8011010 <xmp3_UnpackFrameHeader+0x300>)
 8010f96:	0063      	lsls	r3, r4, #1
 8010f98:	4403      	add	r3, r0
 8010f9a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 8010f9e:	1acb      	subs	r3, r1, r3
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 8010fa0:	1f1a      	subs	r2, r3, #4
			4 - (fh->crc ? 2 : 0) + (fh->paddingBit ? 1 : 0);
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	689b      	ldr	r3, [r3, #8]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d001      	beq.n	8010fae <xmp3_UnpackFrameHeader+0x29e>
 8010faa:	2302      	movs	r3, #2
 8010fac:	e000      	b.n	8010fb0 <xmp3_UnpackFrameHeader+0x2a0>
 8010fae:	2300      	movs	r3, #0
 8010fb0:	1ad3      	subs	r3, r2, r3
 8010fb2:	68fa      	ldr	r2, [r7, #12]
 8010fb4:	6952      	ldr	r2, [r2, #20]
 8010fb6:	2a00      	cmp	r2, #0
 8010fb8:	bf14      	ite	ne
 8010fba:	2201      	movne	r2, #1
 8010fbc:	2200      	moveq	r2, #0
 8010fbe:	b2d2      	uxtb	r2, r2
 8010fc0:	441a      	add	r2, r3
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f8c3 27cc 	str.w	r2, [r3, #1996]	; 0x7cc
	}

	/* load crc word, if enabled, and return length of frame header (in bytes) */
	if (fh->crc) {
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	689b      	ldr	r3, [r3, #8]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d00b      	beq.n	8010fe8 <xmp3_UnpackFrameHeader+0x2d8>
		fh->CRCWord = ((int)buf[4] << 8 | (int)buf[5] << 0);
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	3304      	adds	r3, #4
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	021b      	lsls	r3, r3, #8
 8010fd8:	683a      	ldr	r2, [r7, #0]
 8010fda:	3205      	adds	r2, #5
 8010fdc:	7812      	ldrb	r2, [r2, #0]
 8010fde:	431a      	orrs	r2, r3
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	631a      	str	r2, [r3, #48]	; 0x30
		return 6;
 8010fe4:	2306      	movs	r3, #6
 8010fe6:	e003      	b.n	8010ff0 <xmp3_UnpackFrameHeader+0x2e0>
	} else {
		fh->CRCWord = 0;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	2200      	movs	r2, #0
 8010fec:	631a      	str	r2, [r3, #48]	; 0x30
		return 4;
 8010fee:	2304      	movs	r3, #4
	}
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	3710      	adds	r7, #16
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bc90      	pop	{r4, r7}
 8010ff8:	4770      	bx	lr
 8010ffa:	bf00      	nop
 8010ffc:	08017a50 	.word	0x08017a50
 8011000:	080177ec 	.word	0x080177ec
 8011004:	08017920 	.word	0x08017920
 8011008:	08017810 	.word	0x08017810
 801100c:	08017940 	.word	0x08017940
 8011010:	08017934 	.word	0x08017934

08011014 <xmp3_UnpackSideInfo>:
 *
 * Return:      length (in bytes) of side info data
 *              -1 if null input pointers
 **************************************************************************************/
int UnpackSideInfo(MP3DecInfo *mp3DecInfo, unsigned char *buf)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b08e      	sub	sp, #56	; 0x38
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
 801101c:	6039      	str	r1, [r7, #0]
	FrameHeader *fh;
	SideInfo *si;
	SideInfoSub *sis;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS)
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d007      	beq.n	8011034 <xmp3_UnpackSideInfo+0x20>
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d003      	beq.n	8011034 <xmp3_UnpackSideInfo+0x20>
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	685b      	ldr	r3, [r3, #4]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d102      	bne.n	801103a <xmp3_UnpackSideInfo+0x26>
		return -1;
 8011034:	f04f 33ff 	mov.w	r3, #4294967295
 8011038:	e186      	b.n	8011348 <xmp3_UnpackSideInfo+0x334>

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	627b      	str	r3, [r7, #36]	; 0x24
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	685b      	ldr	r3, [r3, #4]
 8011044:	623b      	str	r3, [r7, #32]

	bsi = &bitStreamInfo;
 8011046:	f107 0308 	add.w	r3, r7, #8
 801104a:	61fb      	str	r3, [r7, #28]
	if (fh->ver == MPEG1) {
 801104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d147      	bne.n	80110e4 <xmp3_UnpackSideInfo+0xd0>
		/* MPEG 1 */
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 8011054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011056:	7f1b      	ldrb	r3, [r3, #28]
 8011058:	2b03      	cmp	r3, #3
 801105a:	d101      	bne.n	8011060 <xmp3_UnpackSideInfo+0x4c>
 801105c:	2311      	movs	r3, #17
 801105e:	e000      	b.n	8011062 <xmp3_UnpackSideInfo+0x4e>
 8011060:	2320      	movs	r3, #32
 8011062:	62bb      	str	r3, [r7, #40]	; 0x28
		SetBitstreamPointer(bsi, nBytes, buf);
 8011064:	683a      	ldr	r2, [r7, #0]
 8011066:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011068:	69f8      	ldr	r0, [r7, #28]
 801106a:	f7ff fd45 	bl	8010af8 <xmp3_SetBitstreamPointer>
		si->mainDataBegin = GetBits(bsi, 9);
 801106e:	2109      	movs	r1, #9
 8011070:	69f8      	ldr	r0, [r7, #28]
 8011072:	f7ff fdca 	bl	8010c0a <xmp3_GetBits>
 8011076:	4603      	mov	r3, r0
 8011078:	461a      	mov	r2, r3
 801107a:	6a3b      	ldr	r3, [r7, #32]
 801107c:	601a      	str	r2, [r3, #0]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 801107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011080:	7f1b      	ldrb	r3, [r3, #28]
 8011082:	2b03      	cmp	r3, #3
 8011084:	d101      	bne.n	801108a <xmp3_UnpackSideInfo+0x76>
 8011086:	2305      	movs	r3, #5
 8011088:	e000      	b.n	801108c <xmp3_UnpackSideInfo+0x78>
 801108a:	2303      	movs	r3, #3
 801108c:	4619      	mov	r1, r3
 801108e:	69f8      	ldr	r0, [r7, #28]
 8011090:	f7ff fdbb 	bl	8010c0a <xmp3_GetBits>
 8011094:	4603      	mov	r3, r0
 8011096:	461a      	mov	r2, r3
 8011098:	6a3b      	ldr	r3, [r7, #32]
 801109a:	605a      	str	r2, [r3, #4]

		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 801109c:	2300      	movs	r3, #0
 801109e:	633b      	str	r3, [r7, #48]	; 0x30
 80110a0:	e019      	b.n	80110d6 <xmp3_UnpackSideInfo+0xc2>
			for (bd = 0; bd < MAX_SCFBD; bd++)
 80110a2:	2300      	movs	r3, #0
 80110a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110a6:	e010      	b.n	80110ca <xmp3_UnpackSideInfo+0xb6>
				si->scfsi[ch][bd] = GetBits(bsi, 1);
 80110a8:	2101      	movs	r1, #1
 80110aa:	69f8      	ldr	r0, [r7, #28]
 80110ac:	f7ff fdad 	bl	8010c0a <xmp3_GetBits>
 80110b0:	4603      	mov	r3, r0
 80110b2:	4618      	mov	r0, r3
 80110b4:	6a3b      	ldr	r3, [r7, #32]
 80110b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110b8:	0091      	lsls	r1, r2, #2
 80110ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110bc:	440a      	add	r2, r1
 80110be:	3202      	adds	r2, #2
 80110c0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
			for (bd = 0; bd < MAX_SCFBD; bd++)
 80110c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c6:	3301      	adds	r3, #1
 80110c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110cc:	2b03      	cmp	r3, #3
 80110ce:	ddeb      	ble.n	80110a8 <xmp3_UnpackSideInfo+0x94>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 80110d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110d2:	3301      	adds	r3, #1
 80110d4:	633b      	str	r3, [r7, #48]	; 0x30
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 80110dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110de:	429a      	cmp	r2, r3
 80110e0:	dbdf      	blt.n	80110a2 <xmp3_UnpackSideInfo+0x8e>
 80110e2:	e023      	b.n	801112c <xmp3_UnpackSideInfo+0x118>
	} else {
		/* MPEG 2, MPEG 2.5 */
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 80110e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e6:	7f1b      	ldrb	r3, [r3, #28]
 80110e8:	2b03      	cmp	r3, #3
 80110ea:	d101      	bne.n	80110f0 <xmp3_UnpackSideInfo+0xdc>
 80110ec:	2309      	movs	r3, #9
 80110ee:	e000      	b.n	80110f2 <xmp3_UnpackSideInfo+0xde>
 80110f0:	2311      	movs	r3, #17
 80110f2:	62bb      	str	r3, [r7, #40]	; 0x28
		SetBitstreamPointer(bsi, nBytes, buf);
 80110f4:	683a      	ldr	r2, [r7, #0]
 80110f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80110f8:	69f8      	ldr	r0, [r7, #28]
 80110fa:	f7ff fcfd 	bl	8010af8 <xmp3_SetBitstreamPointer>
		si->mainDataBegin = GetBits(bsi, 8);
 80110fe:	2108      	movs	r1, #8
 8011100:	69f8      	ldr	r0, [r7, #28]
 8011102:	f7ff fd82 	bl	8010c0a <xmp3_GetBits>
 8011106:	4603      	mov	r3, r0
 8011108:	461a      	mov	r2, r3
 801110a:	6a3b      	ldr	r3, [r7, #32]
 801110c:	601a      	str	r2, [r3, #0]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
 801110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011110:	7f1b      	ldrb	r3, [r3, #28]
 8011112:	2b03      	cmp	r3, #3
 8011114:	d101      	bne.n	801111a <xmp3_UnpackSideInfo+0x106>
 8011116:	2301      	movs	r3, #1
 8011118:	e000      	b.n	801111c <xmp3_UnpackSideInfo+0x108>
 801111a:	2302      	movs	r3, #2
 801111c:	4619      	mov	r1, r3
 801111e:	69f8      	ldr	r0, [r7, #28]
 8011120:	f7ff fd73 	bl	8010c0a <xmp3_GetBits>
 8011124:	4603      	mov	r3, r0
 8011126:	461a      	mov	r2, r3
 8011128:	6a3b      	ldr	r3, [r7, #32]
 801112a:	605a      	str	r2, [r3, #4]
	}

	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 801112c:	2300      	movs	r3, #0
 801112e:	637b      	str	r3, [r7, #52]	; 0x34
 8011130:	e0fd      	b.n	801132e <xmp3_UnpackSideInfo+0x31a>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8011132:	2300      	movs	r3, #0
 8011134:	633b      	str	r3, [r7, #48]	; 0x30
 8011136:	e0f0      	b.n	801131a <xmp3_UnpackSideInfo+0x306>
			sis = &si->sis[gr][ch];						/* side info subblock for this granule, channel */
 8011138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801113a:	461a      	mov	r2, r3
 801113c:	00d2      	lsls	r2, r2, #3
 801113e:	441a      	add	r2, r3
 8011140:	00d3      	lsls	r3, r2, #3
 8011142:	461a      	mov	r2, r3
 8011144:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011146:	460b      	mov	r3, r1
 8011148:	00db      	lsls	r3, r3, #3
 801114a:	440b      	add	r3, r1
 801114c:	011b      	lsls	r3, r3, #4
 801114e:	4413      	add	r3, r2
 8011150:	3328      	adds	r3, #40	; 0x28
 8011152:	6a3a      	ldr	r2, [r7, #32]
 8011154:	4413      	add	r3, r2
 8011156:	61bb      	str	r3, [r7, #24]

			sis->part23Length =    GetBits(bsi, 12);
 8011158:	210c      	movs	r1, #12
 801115a:	69f8      	ldr	r0, [r7, #28]
 801115c:	f7ff fd55 	bl	8010c0a <xmp3_GetBits>
 8011160:	4603      	mov	r3, r0
 8011162:	461a      	mov	r2, r3
 8011164:	69bb      	ldr	r3, [r7, #24]
 8011166:	601a      	str	r2, [r3, #0]
			sis->nBigvals =        GetBits(bsi, 9);
 8011168:	2109      	movs	r1, #9
 801116a:	69f8      	ldr	r0, [r7, #28]
 801116c:	f7ff fd4d 	bl	8010c0a <xmp3_GetBits>
 8011170:	4603      	mov	r3, r0
 8011172:	461a      	mov	r2, r3
 8011174:	69bb      	ldr	r3, [r7, #24]
 8011176:	605a      	str	r2, [r3, #4]
			sis->globalGain =      GetBits(bsi, 8);
 8011178:	2108      	movs	r1, #8
 801117a:	69f8      	ldr	r0, [r7, #28]
 801117c:	f7ff fd45 	bl	8010c0a <xmp3_GetBits>
 8011180:	4603      	mov	r3, r0
 8011182:	461a      	mov	r2, r3
 8011184:	69bb      	ldr	r3, [r7, #24]
 8011186:	609a      	str	r2, [r3, #8]
			sis->sfCompress =      GetBits(bsi, (fh->ver == MPEG1 ? 4 : 9));
 8011188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d101      	bne.n	8011194 <xmp3_UnpackSideInfo+0x180>
 8011190:	2304      	movs	r3, #4
 8011192:	e000      	b.n	8011196 <xmp3_UnpackSideInfo+0x182>
 8011194:	2309      	movs	r3, #9
 8011196:	4619      	mov	r1, r3
 8011198:	69f8      	ldr	r0, [r7, #28]
 801119a:	f7ff fd36 	bl	8010c0a <xmp3_GetBits>
 801119e:	4603      	mov	r3, r0
 80111a0:	461a      	mov	r2, r3
 80111a2:	69bb      	ldr	r3, [r7, #24]
 80111a4:	60da      	str	r2, [r3, #12]
			sis->winSwitchFlag =   GetBits(bsi, 1);
 80111a6:	2101      	movs	r1, #1
 80111a8:	69f8      	ldr	r0, [r7, #28]
 80111aa:	f7ff fd2e 	bl	8010c0a <xmp3_GetBits>
 80111ae:	4603      	mov	r3, r0
 80111b0:	461a      	mov	r2, r3
 80111b2:	69bb      	ldr	r3, [r7, #24]
 80111b4:	611a      	str	r2, [r3, #16]

			if(sis->winSwitchFlag) {
 80111b6:	69bb      	ldr	r3, [r7, #24]
 80111b8:	691b      	ldr	r3, [r3, #16]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d05e      	beq.n	801127c <xmp3_UnpackSideInfo+0x268>
				/* this is a start, stop, short, or mixed block */
				sis->blockType =       GetBits(bsi, 2);		/* 0 = normal, 1 = start, 2 = short, 3 = stop */
 80111be:	2102      	movs	r1, #2
 80111c0:	69f8      	ldr	r0, [r7, #28]
 80111c2:	f7ff fd22 	bl	8010c0a <xmp3_GetBits>
 80111c6:	4603      	mov	r3, r0
 80111c8:	461a      	mov	r2, r3
 80111ca:	69bb      	ldr	r3, [r7, #24]
 80111cc:	615a      	str	r2, [r3, #20]
				sis->mixedBlock =      GetBits(bsi, 1);		/* 0 = not mixed, 1 = mixed */
 80111ce:	2101      	movs	r1, #1
 80111d0:	69f8      	ldr	r0, [r7, #28]
 80111d2:	f7ff fd1a 	bl	8010c0a <xmp3_GetBits>
 80111d6:	4603      	mov	r3, r0
 80111d8:	461a      	mov	r2, r3
 80111da:	69bb      	ldr	r3, [r7, #24]
 80111dc:	619a      	str	r2, [r3, #24]
				sis->tableSelect[0] =  GetBits(bsi, 5);
 80111de:	2105      	movs	r1, #5
 80111e0:	69f8      	ldr	r0, [r7, #28]
 80111e2:	f7ff fd12 	bl	8010c0a <xmp3_GetBits>
 80111e6:	4603      	mov	r3, r0
 80111e8:	461a      	mov	r2, r3
 80111ea:	69bb      	ldr	r3, [r7, #24]
 80111ec:	61da      	str	r2, [r3, #28]
				sis->tableSelect[1] =  GetBits(bsi, 5);
 80111ee:	2105      	movs	r1, #5
 80111f0:	69f8      	ldr	r0, [r7, #28]
 80111f2:	f7ff fd0a 	bl	8010c0a <xmp3_GetBits>
 80111f6:	4603      	mov	r3, r0
 80111f8:	461a      	mov	r2, r3
 80111fa:	69bb      	ldr	r3, [r7, #24]
 80111fc:	621a      	str	r2, [r3, #32]
				sis->tableSelect[2] =  0;					/* unused */
 80111fe:	69bb      	ldr	r3, [r7, #24]
 8011200:	2200      	movs	r2, #0
 8011202:	625a      	str	r2, [r3, #36]	; 0x24
				sis->subBlockGain[0] = GetBits(bsi, 3);
 8011204:	2103      	movs	r1, #3
 8011206:	69f8      	ldr	r0, [r7, #28]
 8011208:	f7ff fcff 	bl	8010c0a <xmp3_GetBits>
 801120c:	4603      	mov	r3, r0
 801120e:	461a      	mov	r2, r3
 8011210:	69bb      	ldr	r3, [r7, #24]
 8011212:	629a      	str	r2, [r3, #40]	; 0x28
				sis->subBlockGain[1] = GetBits(bsi, 3);
 8011214:	2103      	movs	r1, #3
 8011216:	69f8      	ldr	r0, [r7, #28]
 8011218:	f7ff fcf7 	bl	8010c0a <xmp3_GetBits>
 801121c:	4603      	mov	r3, r0
 801121e:	461a      	mov	r2, r3
 8011220:	69bb      	ldr	r3, [r7, #24]
 8011222:	62da      	str	r2, [r3, #44]	; 0x2c
				sis->subBlockGain[2] = GetBits(bsi, 3);
 8011224:	2103      	movs	r1, #3
 8011226:	69f8      	ldr	r0, [r7, #28]
 8011228:	f7ff fcef 	bl	8010c0a <xmp3_GetBits>
 801122c:	4603      	mov	r3, r0
 801122e:	461a      	mov	r2, r3
 8011230:	69bb      	ldr	r3, [r7, #24]
 8011232:	631a      	str	r2, [r3, #48]	; 0x30

				/* TODO - check logic */
				if (sis->blockType == 0) {
 8011234:	69bb      	ldr	r3, [r7, #24]
 8011236:	695b      	ldr	r3, [r3, #20]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d109      	bne.n	8011250 <xmp3_UnpackSideInfo+0x23c>
					/* this should not be allowed, according to spec */
					sis->nBigvals = 0;
 801123c:	69bb      	ldr	r3, [r7, #24]
 801123e:	2200      	movs	r2, #0
 8011240:	605a      	str	r2, [r3, #4]
					sis->part23Length = 0;
 8011242:	69bb      	ldr	r3, [r7, #24]
 8011244:	2200      	movs	r2, #0
 8011246:	601a      	str	r2, [r3, #0]
					sis->sfCompress = 0;
 8011248:	69bb      	ldr	r3, [r7, #24]
 801124a:	2200      	movs	r2, #0
 801124c:	60da      	str	r2, [r3, #12]
 801124e:	e00e      	b.n	801126e <xmp3_UnpackSideInfo+0x25a>
				} else if (sis->blockType == 2 && sis->mixedBlock == 0) {
 8011250:	69bb      	ldr	r3, [r7, #24]
 8011252:	695b      	ldr	r3, [r3, #20]
 8011254:	2b02      	cmp	r3, #2
 8011256:	d107      	bne.n	8011268 <xmp3_UnpackSideInfo+0x254>
 8011258:	69bb      	ldr	r3, [r7, #24]
 801125a:	699b      	ldr	r3, [r3, #24]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d103      	bne.n	8011268 <xmp3_UnpackSideInfo+0x254>
					/* short block, not mixed */
					sis->region0Count = 8;
 8011260:	69bb      	ldr	r3, [r7, #24]
 8011262:	2208      	movs	r2, #8
 8011264:	635a      	str	r2, [r3, #52]	; 0x34
 8011266:	e002      	b.n	801126e <xmp3_UnpackSideInfo+0x25a>
				} else {
					/* start, stop, or short-mixed */
					sis->region0Count = 7;
 8011268:	69bb      	ldr	r3, [r7, #24]
 801126a:	2207      	movs	r2, #7
 801126c:	635a      	str	r2, [r3, #52]	; 0x34
				}
				sis->region1Count = 20 - sis->region0Count;
 801126e:	69bb      	ldr	r3, [r7, #24]
 8011270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011272:	f1c3 0214 	rsb	r2, r3, #20
 8011276:	69bb      	ldr	r3, [r7, #24]
 8011278:	639a      	str	r2, [r3, #56]	; 0x38
 801127a:	e02d      	b.n	80112d8 <xmp3_UnpackSideInfo+0x2c4>
			} else {
				/* this is a normal block */
				sis->blockType = 0;
 801127c:	69bb      	ldr	r3, [r7, #24]
 801127e:	2200      	movs	r2, #0
 8011280:	615a      	str	r2, [r3, #20]
				sis->mixedBlock = 0;
 8011282:	69bb      	ldr	r3, [r7, #24]
 8011284:	2200      	movs	r2, #0
 8011286:	619a      	str	r2, [r3, #24]
				sis->tableSelect[0] =  GetBits(bsi, 5);
 8011288:	2105      	movs	r1, #5
 801128a:	69f8      	ldr	r0, [r7, #28]
 801128c:	f7ff fcbd 	bl	8010c0a <xmp3_GetBits>
 8011290:	4603      	mov	r3, r0
 8011292:	461a      	mov	r2, r3
 8011294:	69bb      	ldr	r3, [r7, #24]
 8011296:	61da      	str	r2, [r3, #28]
				sis->tableSelect[1] =  GetBits(bsi, 5);
 8011298:	2105      	movs	r1, #5
 801129a:	69f8      	ldr	r0, [r7, #28]
 801129c:	f7ff fcb5 	bl	8010c0a <xmp3_GetBits>
 80112a0:	4603      	mov	r3, r0
 80112a2:	461a      	mov	r2, r3
 80112a4:	69bb      	ldr	r3, [r7, #24]
 80112a6:	621a      	str	r2, [r3, #32]
				sis->tableSelect[2] =  GetBits(bsi, 5);
 80112a8:	2105      	movs	r1, #5
 80112aa:	69f8      	ldr	r0, [r7, #28]
 80112ac:	f7ff fcad 	bl	8010c0a <xmp3_GetBits>
 80112b0:	4603      	mov	r3, r0
 80112b2:	461a      	mov	r2, r3
 80112b4:	69bb      	ldr	r3, [r7, #24]
 80112b6:	625a      	str	r2, [r3, #36]	; 0x24
				sis->region0Count =    GetBits(bsi, 4);
 80112b8:	2104      	movs	r1, #4
 80112ba:	69f8      	ldr	r0, [r7, #28]
 80112bc:	f7ff fca5 	bl	8010c0a <xmp3_GetBits>
 80112c0:	4603      	mov	r3, r0
 80112c2:	461a      	mov	r2, r3
 80112c4:	69bb      	ldr	r3, [r7, #24]
 80112c6:	635a      	str	r2, [r3, #52]	; 0x34
				sis->region1Count =    GetBits(bsi, 3);
 80112c8:	2103      	movs	r1, #3
 80112ca:	69f8      	ldr	r0, [r7, #28]
 80112cc:	f7ff fc9d 	bl	8010c0a <xmp3_GetBits>
 80112d0:	4603      	mov	r3, r0
 80112d2:	461a      	mov	r2, r3
 80112d4:	69bb      	ldr	r3, [r7, #24]
 80112d6:	639a      	str	r2, [r3, #56]	; 0x38
			}
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 80112d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112da:	781b      	ldrb	r3, [r3, #0]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d106      	bne.n	80112ee <xmp3_UnpackSideInfo+0x2da>
 80112e0:	2101      	movs	r1, #1
 80112e2:	69f8      	ldr	r0, [r7, #28]
 80112e4:	f7ff fc91 	bl	8010c0a <xmp3_GetBits>
 80112e8:	4603      	mov	r3, r0
 80112ea:	461a      	mov	r2, r3
 80112ec:	e000      	b.n	80112f0 <xmp3_UnpackSideInfo+0x2dc>
 80112ee:	2200      	movs	r2, #0
 80112f0:	69bb      	ldr	r3, [r7, #24]
 80112f2:	63da      	str	r2, [r3, #60]	; 0x3c
			sis->sfactScale =        GetBits(bsi, 1);
 80112f4:	2101      	movs	r1, #1
 80112f6:	69f8      	ldr	r0, [r7, #28]
 80112f8:	f7ff fc87 	bl	8010c0a <xmp3_GetBits>
 80112fc:	4603      	mov	r3, r0
 80112fe:	461a      	mov	r2, r3
 8011300:	69bb      	ldr	r3, [r7, #24]
 8011302:	641a      	str	r2, [r3, #64]	; 0x40
			sis->count1TableSelect = GetBits(bsi, 1);
 8011304:	2101      	movs	r1, #1
 8011306:	69f8      	ldr	r0, [r7, #28]
 8011308:	f7ff fc7f 	bl	8010c0a <xmp3_GetBits>
 801130c:	4603      	mov	r3, r0
 801130e:	461a      	mov	r2, r3
 8011310:	69bb      	ldr	r3, [r7, #24]
 8011312:	645a      	str	r2, [r3, #68]	; 0x44
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8011314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011316:	3301      	adds	r3, #1
 8011318:	633b      	str	r3, [r7, #48]	; 0x30
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 8011320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011322:	429a      	cmp	r2, r3
 8011324:	f6ff af08 	blt.w	8011138 <xmp3_UnpackSideInfo+0x124>
	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 8011328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801132a:	3301      	adds	r3, #1
 801132c:	637b      	str	r3, [r7, #52]	; 0x34
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	; 0x7c4
 8011334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011336:	429a      	cmp	r2, r3
 8011338:	f6ff aefb 	blt.w	8011132 <xmp3_UnpackSideInfo+0x11e>
		}
	}
	mp3DecInfo->mainDataBegin = si->mainDataBegin;	/* needed by main decode loop */
 801133c:	6a3b      	ldr	r3, [r7, #32]
 801133e:	681a      	ldr	r2, [r3, #0]
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f8c3 27d8 	str.w	r2, [r3, #2008]	; 0x7d8

	ASSERT(nBytes == CalcBitsUsed(bsi, buf, 0) >> 3);

	return nBytes;	
 8011346:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8011348:	4618      	mov	r0, r3
 801134a:	3738      	adds	r7, #56	; 0x38
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}

08011350 <ClearBuffer>:
 * Return:      none
 *
 * Notes:       slow, platform-independent equivalent to memset(buf, 0, nBytes)
 **************************************************************************************/
static void ClearBuffer(void *buf, int nBytes)
{
 8011350:	b480      	push	{r7}
 8011352:	b085      	sub	sp, #20
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	6039      	str	r1, [r7, #0]
	int i;
	unsigned char *cbuf = (unsigned char *)buf;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < nBytes; i++)
 801135e:	2300      	movs	r3, #0
 8011360:	60fb      	str	r3, [r7, #12]
 8011362:	e007      	b.n	8011374 <ClearBuffer+0x24>
		cbuf[i] = 0;
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	68ba      	ldr	r2, [r7, #8]
 8011368:	4413      	add	r3, r2
 801136a:	2200      	movs	r2, #0
 801136c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nBytes; i++)
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	3301      	adds	r3, #1
 8011372:	60fb      	str	r3, [r7, #12]
 8011374:	68fa      	ldr	r2, [r7, #12]
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	429a      	cmp	r2, r3
 801137a:	dbf3      	blt.n	8011364 <ClearBuffer+0x14>

	return;
 801137c:	bf00      	nop
}
 801137e:	3714      	adds	r7, #20
 8011380:	46bd      	mov	sp, r7
 8011382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011386:	4770      	bx	lr

08011388 <xmp3_AllocateBuffers>:
 * Notes:       if one or more mallocs fail, function frees any buffers already
 *                allocated before returning
 **************************************************************************************/

MP3DecInfo *AllocateBuffers(void)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b088      	sub	sp, #32
 801138c:	af00      	add	r7, sp, #0
	HuffmanInfo *hi;
	DequantInfo *di;
	IMDCTInfo *mi;
	SubbandInfo *sbi;

	mp3DecInfo = (MP3DecInfo *)pvPortMalloc(sizeof(MP3DecInfo));
 801138e:	f44f 60fe 	mov.w	r0, #2032	; 0x7f0
 8011392:	f7fe fe7f 	bl	8010094 <pvPortMalloc>
 8011396:	61f8      	str	r0, [r7, #28]
	if (!mp3DecInfo)
 8011398:	69fb      	ldr	r3, [r7, #28]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d101      	bne.n	80113a2 <xmp3_AllocateBuffers+0x1a>
		return 0;
 801139e:	2300      	movs	r3, #0
 80113a0:	e078      	b.n	8011494 <xmp3_AllocateBuffers+0x10c>
	ClearBuffer(mp3DecInfo, sizeof(MP3DecInfo));
 80113a2:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 80113a6:	69f8      	ldr	r0, [r7, #28]
 80113a8:	f7ff ffd2 	bl	8011350 <ClearBuffer>
	

	fh =  (FrameHeader *)     pvPortMalloc(sizeof(FrameHeader));
 80113ac:	2038      	movs	r0, #56	; 0x38
 80113ae:	f7fe fe71 	bl	8010094 <pvPortMalloc>
 80113b2:	61b8      	str	r0, [r7, #24]
	si =  (SideInfo *)        pvPortMalloc(sizeof(SideInfo));
 80113b4:	f44f 70a4 	mov.w	r0, #328	; 0x148
 80113b8:	f7fe fe6c 	bl	8010094 <pvPortMalloc>
 80113bc:	6178      	str	r0, [r7, #20]
	sfi = (ScaleFactorInfo *) pvPortMalloc(sizeof(ScaleFactorInfo));
 80113be:	f44f 708e 	mov.w	r0, #284	; 0x11c
 80113c2:	f7fe fe67 	bl	8010094 <pvPortMalloc>
 80113c6:	6138      	str	r0, [r7, #16]
	hi =  (HuffmanInfo *)     pvPortMalloc(sizeof(HuffmanInfo));
 80113c8:	f241 2010 	movw	r0, #4624	; 0x1210
 80113cc:	f7fe fe62 	bl	8010094 <pvPortMalloc>
 80113d0:	60f8      	str	r0, [r7, #12]
	di =  (DequantInfo *)     pvPortMalloc(sizeof(DequantInfo));
 80113d2:	f44f 7052 	mov.w	r0, #840	; 0x348
 80113d6:	f7fe fe5d 	bl	8010094 <pvPortMalloc>
 80113da:	60b8      	str	r0, [r7, #8]
	mi =  (IMDCTInfo *)       pvPortMalloc(sizeof(IMDCTInfo));
 80113dc:	f44f 50d9 	mov.w	r0, #6944	; 0x1b20
 80113e0:	f7fe fe58 	bl	8010094 <pvPortMalloc>
 80113e4:	6078      	str	r0, [r7, #4]
	sbi = (SubbandInfo *)     pvPortMalloc(sizeof(SubbandInfo));
 80113e6:	f242 2004 	movw	r0, #8708	; 0x2204
 80113ea:	f7fe fe53 	bl	8010094 <pvPortMalloc>
 80113ee:	6038      	str	r0, [r7, #0]

	mp3DecInfo->FrameHeaderPS =     (void *)fh;
 80113f0:	69fb      	ldr	r3, [r7, #28]
 80113f2:	69ba      	ldr	r2, [r7, #24]
 80113f4:	601a      	str	r2, [r3, #0]
	mp3DecInfo->SideInfoPS =        (void *)si;
 80113f6:	69fb      	ldr	r3, [r7, #28]
 80113f8:	697a      	ldr	r2, [r7, #20]
 80113fa:	605a      	str	r2, [r3, #4]
	mp3DecInfo->ScaleFactorInfoPS = (void *)sfi;
 80113fc:	69fb      	ldr	r3, [r7, #28]
 80113fe:	693a      	ldr	r2, [r7, #16]
 8011400:	609a      	str	r2, [r3, #8]
	mp3DecInfo->HuffmanInfoPS =     (void *)hi;
 8011402:	69fb      	ldr	r3, [r7, #28]
 8011404:	68fa      	ldr	r2, [r7, #12]
 8011406:	60da      	str	r2, [r3, #12]
	mp3DecInfo->DequantInfoPS =     (void *)di;
 8011408:	69fb      	ldr	r3, [r7, #28]
 801140a:	68ba      	ldr	r2, [r7, #8]
 801140c:	611a      	str	r2, [r3, #16]
	mp3DecInfo->IMDCTInfoPS =       (void *)mi;
 801140e:	69fb      	ldr	r3, [r7, #28]
 8011410:	687a      	ldr	r2, [r7, #4]
 8011412:	615a      	str	r2, [r3, #20]
	mp3DecInfo->SubbandInfoPS =     (void *)sbi;
 8011414:	69fb      	ldr	r3, [r7, #28]
 8011416:	683a      	ldr	r2, [r7, #0]
 8011418:	619a      	str	r2, [r3, #24]

	if (!fh || !si || !sfi || !hi || !di || !mi || !sbi) {
 801141a:	69bb      	ldr	r3, [r7, #24]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d011      	beq.n	8011444 <xmp3_AllocateBuffers+0xbc>
 8011420:	697b      	ldr	r3, [r7, #20]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d00e      	beq.n	8011444 <xmp3_AllocateBuffers+0xbc>
 8011426:	693b      	ldr	r3, [r7, #16]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d00b      	beq.n	8011444 <xmp3_AllocateBuffers+0xbc>
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d008      	beq.n	8011444 <xmp3_AllocateBuffers+0xbc>
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d005      	beq.n	8011444 <xmp3_AllocateBuffers+0xbc>
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d002      	beq.n	8011444 <xmp3_AllocateBuffers+0xbc>
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d104      	bne.n	801144e <xmp3_AllocateBuffers+0xc6>
		FreeBuffers(mp3DecInfo);	/* safe to call - only frees memory that was successfully allocated */
 8011444:	69f8      	ldr	r0, [r7, #28]
 8011446:	f000 f829 	bl	801149c <xmp3_FreeBuffers>
		return 0;
 801144a:	2300      	movs	r3, #0
 801144c:	e022      	b.n	8011494 <xmp3_AllocateBuffers+0x10c>
	}

	/* important to do this - DSP primitives assume a bunch of state variables are 0 on first use */
	ClearBuffer(fh,  sizeof(FrameHeader));
 801144e:	2138      	movs	r1, #56	; 0x38
 8011450:	69b8      	ldr	r0, [r7, #24]
 8011452:	f7ff ff7d 	bl	8011350 <ClearBuffer>
	ClearBuffer(si,  sizeof(SideInfo));
 8011456:	f44f 71a4 	mov.w	r1, #328	; 0x148
 801145a:	6978      	ldr	r0, [r7, #20]
 801145c:	f7ff ff78 	bl	8011350 <ClearBuffer>
	ClearBuffer(sfi, sizeof(ScaleFactorInfo));
 8011460:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8011464:	6938      	ldr	r0, [r7, #16]
 8011466:	f7ff ff73 	bl	8011350 <ClearBuffer>
	ClearBuffer(hi,  sizeof(HuffmanInfo));
 801146a:	f241 2110 	movw	r1, #4624	; 0x1210
 801146e:	68f8      	ldr	r0, [r7, #12]
 8011470:	f7ff ff6e 	bl	8011350 <ClearBuffer>
	ClearBuffer(di,  sizeof(DequantInfo));
 8011474:	f44f 7152 	mov.w	r1, #840	; 0x348
 8011478:	68b8      	ldr	r0, [r7, #8]
 801147a:	f7ff ff69 	bl	8011350 <ClearBuffer>
	ClearBuffer(mi,  sizeof(IMDCTInfo));
 801147e:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f7ff ff64 	bl	8011350 <ClearBuffer>
	ClearBuffer(sbi, sizeof(SubbandInfo));
 8011488:	f242 2104 	movw	r1, #8708	; 0x2204
 801148c:	6838      	ldr	r0, [r7, #0]
 801148e:	f7ff ff5f 	bl	8011350 <ClearBuffer>

	return mp3DecInfo;
 8011492:	69fb      	ldr	r3, [r7, #28]
}
 8011494:	4618      	mov	r0, r3
 8011496:	3720      	adds	r7, #32
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}

0801149c <xmp3_FreeBuffers>:
 * Return:      none
 *
 * Notes:       safe to call even if some buffers were not allocated (uses SAFE_FREE)
 **************************************************************************************/
void FreeBuffers(MP3DecInfo *mp3DecInfo)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b082      	sub	sp, #8
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
	if (!mp3DecInfo)
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d05c      	beq.n	8011564 <xmp3_FreeBuffers+0xc8>
		return;

	SAFE_FREE(mp3DecInfo->FrameHeaderPS);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d004      	beq.n	80114bc <xmp3_FreeBuffers+0x20>
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7fe feb6 	bl	8010228 <vPortFree>
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2200      	movs	r2, #0
 80114c0:	601a      	str	r2, [r3, #0]
	SAFE_FREE(mp3DecInfo->SideInfoPS);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d004      	beq.n	80114d4 <xmp3_FreeBuffers+0x38>
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	685b      	ldr	r3, [r3, #4]
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7fe feaa 	bl	8010228 <vPortFree>
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2200      	movs	r2, #0
 80114d8:	605a      	str	r2, [r3, #4]
	SAFE_FREE(mp3DecInfo->ScaleFactorInfoPS);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	689b      	ldr	r3, [r3, #8]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d004      	beq.n	80114ec <xmp3_FreeBuffers+0x50>
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	689b      	ldr	r3, [r3, #8]
 80114e6:	4618      	mov	r0, r3
 80114e8:	f7fe fe9e 	bl	8010228 <vPortFree>
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2200      	movs	r2, #0
 80114f0:	609a      	str	r2, [r3, #8]
	SAFE_FREE(mp3DecInfo->HuffmanInfoPS);
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	68db      	ldr	r3, [r3, #12]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d004      	beq.n	8011504 <xmp3_FreeBuffers+0x68>
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	68db      	ldr	r3, [r3, #12]
 80114fe:	4618      	mov	r0, r3
 8011500:	f7fe fe92 	bl	8010228 <vPortFree>
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2200      	movs	r2, #0
 8011508:	60da      	str	r2, [r3, #12]
	SAFE_FREE(mp3DecInfo->DequantInfoPS);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	691b      	ldr	r3, [r3, #16]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d004      	beq.n	801151c <xmp3_FreeBuffers+0x80>
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	691b      	ldr	r3, [r3, #16]
 8011516:	4618      	mov	r0, r3
 8011518:	f7fe fe86 	bl	8010228 <vPortFree>
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2200      	movs	r2, #0
 8011520:	611a      	str	r2, [r3, #16]
	SAFE_FREE(mp3DecInfo->IMDCTInfoPS);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	695b      	ldr	r3, [r3, #20]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d004      	beq.n	8011534 <xmp3_FreeBuffers+0x98>
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	695b      	ldr	r3, [r3, #20]
 801152e:	4618      	mov	r0, r3
 8011530:	f7fe fe7a 	bl	8010228 <vPortFree>
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2200      	movs	r2, #0
 8011538:	615a      	str	r2, [r3, #20]
	SAFE_FREE(mp3DecInfo->SubbandInfoPS);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	699b      	ldr	r3, [r3, #24]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d004      	beq.n	801154c <xmp3_FreeBuffers+0xb0>
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	699b      	ldr	r3, [r3, #24]
 8011546:	4618      	mov	r0, r3
 8011548:	f7fe fe6e 	bl	8010228 <vPortFree>
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2200      	movs	r2, #0
 8011550:	619a      	str	r2, [r3, #24]

	SAFE_FREE(mp3DecInfo);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d002      	beq.n	801155e <xmp3_FreeBuffers+0xc2>
 8011558:	6878      	ldr	r0, [r7, #4]
 801155a:	f7fe fe65 	bl	8010228 <vPortFree>
 801155e:	2300      	movs	r3, #0
 8011560:	607b      	str	r3, [r7, #4]
 8011562:	e000      	b.n	8011566 <xmp3_FreeBuffers+0xca>
		return;
 8011564:	bf00      	nop
}
 8011566:	3708      	adds	r7, #8
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}

0801156c <MULSHIFT32>:
}

#elif defined(__GNUC__) && defined(ARM)

static __inline int MULSHIFT32(int x, int y)
{
 801156c:	b480      	push	{r7}
 801156e:	b085      	sub	sp, #20
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	6039      	str	r1, [r7, #0]
	 * For inline assembly, x and y are not assumed to be R0, R1 so it shouldn't matter
	 *   which one is returned. (If this were a function call, returning y (R1) would 
	 *   require an extra "mov r0, r1")
     */
    int zlow;
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8011576:	6879      	ldr	r1, [r7, #4]
 8011578:	683b      	ldr	r3, [r7, #0]
 801157a:	fb81 2303 	smull	r2, r3, r1, r3
 801157e:	60fa      	str	r2, [r7, #12]
 8011580:	603b      	str	r3, [r7, #0]

    return y;
 8011582:	683b      	ldr	r3, [r7, #0]
}
 8011584:	4618      	mov	r0, r3
 8011586:	3714      	adds	r7, #20
 8011588:	46bd      	mov	sp, r7
 801158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158e:	4770      	bx	lr

08011590 <xmp3_FDCT32>:
 * TODO:        code organization and optimization for ARM
 *              possibly interleave stereo (cut # of coef loads in half - may not have
 *                enough registers)
 **************************************************************************************/
void FDCT32(int *buf, int *dest, int offset, int oddBlock, int gb)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b09e      	sub	sp, #120	; 0x78
 8011594:	af00      	add	r7, sp, #0
 8011596:	60f8      	str	r0, [r7, #12]
 8011598:	60b9      	str	r1, [r7, #8]
 801159a:	607a      	str	r2, [r7, #4]
 801159c:	603b      	str	r3, [r7, #0]
    int i, s, tmp, es;
    const int *cptr = dcttab;
 801159e:	4b08      	ldr	r3, [pc, #32]	; (80115c0 <xmp3_FDCT32+0x30>)
 80115a0:	66bb      	str	r3, [r7, #104]	; 0x68

	/* scaling - ensure at least 6 guard bits for DCT 
	 * (in practice this is already true 99% of time, so this code is
	 *  almost never triggered)
	 */
	es = 0;
 80115a2:	2300      	movs	r3, #0
 80115a4:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (gb < 6) {
 80115a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80115aa:	2b05      	cmp	r3, #5
 80115ac:	dc1d      	bgt.n	80115ea <xmp3_FDCT32+0x5a>
		es = 6 - gb;
 80115ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80115b2:	f1c3 0306 	rsb	r3, r3, #6
 80115b6:	66fb      	str	r3, [r7, #108]	; 0x6c
		for (i = 0; i < 32; i++)
 80115b8:	2300      	movs	r3, #0
 80115ba:	677b      	str	r3, [r7, #116]	; 0x74
 80115bc:	e012      	b.n	80115e4 <xmp3_FDCT32+0x54>
 80115be:	bf00      	nop
 80115c0:	08017cec 	.word	0x08017cec
			buf[i] >>= es;
 80115c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80115c6:	009b      	lsls	r3, r3, #2
 80115c8:	68fa      	ldr	r2, [r7, #12]
 80115ca:	4413      	add	r3, r2
 80115cc:	6819      	ldr	r1, [r3, #0]
 80115ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80115d0:	009b      	lsls	r3, r3, #2
 80115d2:	68fa      	ldr	r2, [r7, #12]
 80115d4:	4413      	add	r3, r2
 80115d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80115d8:	fa41 f202 	asr.w	r2, r1, r2
 80115dc:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 32; i++)
 80115de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80115e0:	3301      	adds	r3, #1
 80115e2:	677b      	str	r3, [r7, #116]	; 0x74
 80115e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80115e6:	2b1f      	cmp	r3, #31
 80115e8:	ddec      	ble.n	80115c4 <xmp3_FDCT32+0x34>
	}

	/* first pass */    
	D32FP(0, 1, 5, 1);
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	663b      	str	r3, [r7, #96]	; 0x60
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80115f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011600:	657b      	str	r3, [r7, #84]	; 0x54
 8011602:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011606:	4413      	add	r3, r2
 8011608:	653b      	str	r3, [r7, #80]	; 0x50
 801160a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801160c:	1d1a      	adds	r2, r3, #4
 801160e:	66ba      	str	r2, [r7, #104]	; 0x68
 8011610:	6818      	ldr	r0, [r3, #0]
 8011612:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011616:	1ad3      	subs	r3, r2, r3
 8011618:	4619      	mov	r1, r3
 801161a:	f7ff ffa7 	bl	801156c <MULSHIFT32>
 801161e:	4603      	mov	r3, r0
 8011620:	005b      	lsls	r3, r3, #1
 8011622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011624:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011628:	4413      	add	r3, r2
 801162a:	64bb      	str	r3, [r7, #72]	; 0x48
 801162c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801162e:	1d1a      	adds	r2, r3, #4
 8011630:	66ba      	str	r2, [r7, #104]	; 0x68
 8011632:	6818      	ldr	r0, [r3, #0]
 8011634:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011638:	1ad3      	subs	r3, r2, r3
 801163a:	4619      	mov	r1, r3
 801163c:	f7ff ff96 	bl	801156c <MULSHIFT32>
 8011640:	4603      	mov	r3, r0
 8011642:	015b      	lsls	r3, r3, #5
 8011644:	647b      	str	r3, [r7, #68]	; 0x44
 8011646:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801164a:	441a      	add	r2, r3
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	601a      	str	r2, [r3, #0]
 8011650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011652:	6818      	ldr	r0, [r3, #0]
 8011654:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011658:	1ad3      	subs	r3, r2, r3
 801165a:	4619      	mov	r1, r3
 801165c:	f7ff ff86 	bl	801156c <MULSHIFT32>
 8011660:	4602      	mov	r2, r0
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	333c      	adds	r3, #60	; 0x3c
 8011666:	0052      	lsls	r2, r2, #1
 8011668:	601a      	str	r2, [r3, #0]
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	3340      	adds	r3, #64	; 0x40
 801166e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011670:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011672:	440a      	add	r2, r1
 8011674:	601a      	str	r2, [r3, #0]
 8011676:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011678:	1d1a      	adds	r2, r3, #4
 801167a:	66ba      	str	r2, [r7, #104]	; 0x68
 801167c:	6818      	ldr	r0, [r3, #0]
 801167e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011682:	1ad3      	subs	r3, r2, r3
 8011684:	4619      	mov	r1, r3
 8011686:	f7ff ff71 	bl	801156c <MULSHIFT32>
 801168a:	4602      	mov	r2, r0
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	337c      	adds	r3, #124	; 0x7c
 8011690:	0052      	lsls	r2, r2, #1
 8011692:	601a      	str	r2, [r3, #0]
	D32FP(1, 1, 3, 1);
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	663b      	str	r3, [r7, #96]	; 0x60
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801169e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116aa:	657b      	str	r3, [r7, #84]	; 0x54
 80116ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80116ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116b0:	4413      	add	r3, r2
 80116b2:	653b      	str	r3, [r7, #80]	; 0x50
 80116b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80116b6:	1d1a      	adds	r2, r3, #4
 80116b8:	66ba      	str	r2, [r7, #104]	; 0x68
 80116ba:	6818      	ldr	r0, [r3, #0]
 80116bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80116be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116c0:	1ad3      	subs	r3, r2, r3
 80116c2:	4619      	mov	r1, r3
 80116c4:	f7ff ff52 	bl	801156c <MULSHIFT32>
 80116c8:	4603      	mov	r3, r0
 80116ca:	005b      	lsls	r3, r3, #1
 80116cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80116ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80116d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116d2:	4413      	add	r3, r2
 80116d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80116d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80116d8:	1d1a      	adds	r2, r3, #4
 80116da:	66ba      	str	r2, [r7, #104]	; 0x68
 80116dc:	6818      	ldr	r0, [r3, #0]
 80116de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80116e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116e2:	1ad3      	subs	r3, r2, r3
 80116e4:	4619      	mov	r1, r3
 80116e6:	f7ff ff41 	bl	801156c <MULSHIFT32>
 80116ea:	4603      	mov	r3, r0
 80116ec:	00db      	lsls	r3, r3, #3
 80116ee:	647b      	str	r3, [r7, #68]	; 0x44
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	3304      	adds	r3, #4
 80116f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80116f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80116f8:	440a      	add	r2, r1
 80116fa:	601a      	str	r2, [r3, #0]
 80116fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80116fe:	6818      	ldr	r0, [r3, #0]
 8011700:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011704:	1ad3      	subs	r3, r2, r3
 8011706:	4619      	mov	r1, r3
 8011708:	f7ff ff30 	bl	801156c <MULSHIFT32>
 801170c:	4602      	mov	r2, r0
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	3338      	adds	r3, #56	; 0x38
 8011712:	0052      	lsls	r2, r2, #1
 8011714:	601a      	str	r2, [r3, #0]
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	3344      	adds	r3, #68	; 0x44
 801171a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801171c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801171e:	440a      	add	r2, r1
 8011720:	601a      	str	r2, [r3, #0]
 8011722:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011724:	1d1a      	adds	r2, r3, #4
 8011726:	66ba      	str	r2, [r7, #104]	; 0x68
 8011728:	6818      	ldr	r0, [r3, #0]
 801172a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801172c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801172e:	1ad3      	subs	r3, r2, r3
 8011730:	4619      	mov	r1, r3
 8011732:	f7ff ff1b 	bl	801156c <MULSHIFT32>
 8011736:	4602      	mov	r2, r0
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	3378      	adds	r3, #120	; 0x78
 801173c:	0052      	lsls	r2, r2, #1
 801173e:	601a      	str	r2, [r3, #0]
	D32FP(2, 1, 3, 1);
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	689b      	ldr	r3, [r3, #8]
 8011744:	663b      	str	r3, [r7, #96]	; 0x60
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801174a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011750:	65bb      	str	r3, [r7, #88]	; 0x58
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011756:	657b      	str	r3, [r7, #84]	; 0x54
 8011758:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801175a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801175c:	4413      	add	r3, r2
 801175e:	653b      	str	r3, [r7, #80]	; 0x50
 8011760:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011762:	1d1a      	adds	r2, r3, #4
 8011764:	66ba      	str	r2, [r7, #104]	; 0x68
 8011766:	6818      	ldr	r0, [r3, #0]
 8011768:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801176a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801176c:	1ad3      	subs	r3, r2, r3
 801176e:	4619      	mov	r1, r3
 8011770:	f7ff fefc 	bl	801156c <MULSHIFT32>
 8011774:	4603      	mov	r3, r0
 8011776:	005b      	lsls	r3, r3, #1
 8011778:	64fb      	str	r3, [r7, #76]	; 0x4c
 801177a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801177c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801177e:	4413      	add	r3, r2
 8011780:	64bb      	str	r3, [r7, #72]	; 0x48
 8011782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011784:	1d1a      	adds	r2, r3, #4
 8011786:	66ba      	str	r2, [r7, #104]	; 0x68
 8011788:	6818      	ldr	r0, [r3, #0]
 801178a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801178c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801178e:	1ad3      	subs	r3, r2, r3
 8011790:	4619      	mov	r1, r3
 8011792:	f7ff feeb 	bl	801156c <MULSHIFT32>
 8011796:	4603      	mov	r3, r0
 8011798:	00db      	lsls	r3, r3, #3
 801179a:	647b      	str	r3, [r7, #68]	; 0x44
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	3308      	adds	r3, #8
 80117a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80117a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80117a4:	440a      	add	r2, r1
 80117a6:	601a      	str	r2, [r3, #0]
 80117a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80117aa:	6818      	ldr	r0, [r3, #0]
 80117ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80117ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117b0:	1ad3      	subs	r3, r2, r3
 80117b2:	4619      	mov	r1, r3
 80117b4:	f7ff feda 	bl	801156c <MULSHIFT32>
 80117b8:	4602      	mov	r2, r0
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	3334      	adds	r3, #52	; 0x34
 80117be:	0052      	lsls	r2, r2, #1
 80117c0:	601a      	str	r2, [r3, #0]
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	3348      	adds	r3, #72	; 0x48
 80117c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80117c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80117ca:	440a      	add	r2, r1
 80117cc:	601a      	str	r2, [r3, #0]
 80117ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80117d0:	1d1a      	adds	r2, r3, #4
 80117d2:	66ba      	str	r2, [r7, #104]	; 0x68
 80117d4:	6818      	ldr	r0, [r3, #0]
 80117d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80117d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117da:	1ad3      	subs	r3, r2, r3
 80117dc:	4619      	mov	r1, r3
 80117de:	f7ff fec5 	bl	801156c <MULSHIFT32>
 80117e2:	4602      	mov	r2, r0
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	3374      	adds	r3, #116	; 0x74
 80117e8:	0052      	lsls	r2, r2, #1
 80117ea:	601a      	str	r2, [r3, #0]
	D32FP(3, 1, 2, 1);
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	68db      	ldr	r3, [r3, #12]
 80117f0:	663b      	str	r3, [r7, #96]	; 0x60
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011802:	657b      	str	r3, [r7, #84]	; 0x54
 8011804:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011808:	4413      	add	r3, r2
 801180a:	653b      	str	r3, [r7, #80]	; 0x50
 801180c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801180e:	1d1a      	adds	r2, r3, #4
 8011810:	66ba      	str	r2, [r7, #104]	; 0x68
 8011812:	6818      	ldr	r0, [r3, #0]
 8011814:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011818:	1ad3      	subs	r3, r2, r3
 801181a:	4619      	mov	r1, r3
 801181c:	f7ff fea6 	bl	801156c <MULSHIFT32>
 8011820:	4603      	mov	r3, r0
 8011822:	005b      	lsls	r3, r3, #1
 8011824:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011826:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801182a:	4413      	add	r3, r2
 801182c:	64bb      	str	r3, [r7, #72]	; 0x48
 801182e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011830:	1d1a      	adds	r2, r3, #4
 8011832:	66ba      	str	r2, [r7, #104]	; 0x68
 8011834:	6818      	ldr	r0, [r3, #0]
 8011836:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801183a:	1ad3      	subs	r3, r2, r3
 801183c:	4619      	mov	r1, r3
 801183e:	f7ff fe95 	bl	801156c <MULSHIFT32>
 8011842:	4603      	mov	r3, r0
 8011844:	009b      	lsls	r3, r3, #2
 8011846:	647b      	str	r3, [r7, #68]	; 0x44
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	330c      	adds	r3, #12
 801184c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801184e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011850:	440a      	add	r2, r1
 8011852:	601a      	str	r2, [r3, #0]
 8011854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011856:	6818      	ldr	r0, [r3, #0]
 8011858:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801185a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801185c:	1ad3      	subs	r3, r2, r3
 801185e:	4619      	mov	r1, r3
 8011860:	f7ff fe84 	bl	801156c <MULSHIFT32>
 8011864:	4602      	mov	r2, r0
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	3330      	adds	r3, #48	; 0x30
 801186a:	0052      	lsls	r2, r2, #1
 801186c:	601a      	str	r2, [r3, #0]
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	334c      	adds	r3, #76	; 0x4c
 8011872:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011874:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011876:	440a      	add	r2, r1
 8011878:	601a      	str	r2, [r3, #0]
 801187a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801187c:	1d1a      	adds	r2, r3, #4
 801187e:	66ba      	str	r2, [r7, #104]	; 0x68
 8011880:	6818      	ldr	r0, [r3, #0]
 8011882:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011886:	1ad3      	subs	r3, r2, r3
 8011888:	4619      	mov	r1, r3
 801188a:	f7ff fe6f 	bl	801156c <MULSHIFT32>
 801188e:	4602      	mov	r2, r0
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	3370      	adds	r3, #112	; 0x70
 8011894:	0052      	lsls	r2, r2, #1
 8011896:	601a      	str	r2, [r3, #0]
	D32FP(4, 1, 2, 1);
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	691b      	ldr	r3, [r3, #16]
 801189c:	663b      	str	r3, [r7, #96]	; 0x60
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118ae:	657b      	str	r3, [r7, #84]	; 0x54
 80118b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80118b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118b4:	4413      	add	r3, r2
 80118b6:	653b      	str	r3, [r7, #80]	; 0x50
 80118b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80118ba:	1d1a      	adds	r2, r3, #4
 80118bc:	66ba      	str	r2, [r7, #104]	; 0x68
 80118be:	6818      	ldr	r0, [r3, #0]
 80118c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80118c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118c4:	1ad3      	subs	r3, r2, r3
 80118c6:	4619      	mov	r1, r3
 80118c8:	f7ff fe50 	bl	801156c <MULSHIFT32>
 80118cc:	4603      	mov	r3, r0
 80118ce:	005b      	lsls	r3, r3, #1
 80118d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80118d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80118d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118d6:	4413      	add	r3, r2
 80118d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80118da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80118dc:	1d1a      	adds	r2, r3, #4
 80118de:	66ba      	str	r2, [r7, #104]	; 0x68
 80118e0:	6818      	ldr	r0, [r3, #0]
 80118e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80118e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118e6:	1ad3      	subs	r3, r2, r3
 80118e8:	4619      	mov	r1, r3
 80118ea:	f7ff fe3f 	bl	801156c <MULSHIFT32>
 80118ee:	4603      	mov	r3, r0
 80118f0:	009b      	lsls	r3, r3, #2
 80118f2:	647b      	str	r3, [r7, #68]	; 0x44
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	3310      	adds	r3, #16
 80118f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80118fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80118fc:	440a      	add	r2, r1
 80118fe:	601a      	str	r2, [r3, #0]
 8011900:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011902:	6818      	ldr	r0, [r3, #0]
 8011904:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011908:	1ad3      	subs	r3, r2, r3
 801190a:	4619      	mov	r1, r3
 801190c:	f7ff fe2e 	bl	801156c <MULSHIFT32>
 8011910:	4602      	mov	r2, r0
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	332c      	adds	r3, #44	; 0x2c
 8011916:	0052      	lsls	r2, r2, #1
 8011918:	601a      	str	r2, [r3, #0]
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	3350      	adds	r3, #80	; 0x50
 801191e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011922:	440a      	add	r2, r1
 8011924:	601a      	str	r2, [r3, #0]
 8011926:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011928:	1d1a      	adds	r2, r3, #4
 801192a:	66ba      	str	r2, [r7, #104]	; 0x68
 801192c:	6818      	ldr	r0, [r3, #0]
 801192e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011932:	1ad3      	subs	r3, r2, r3
 8011934:	4619      	mov	r1, r3
 8011936:	f7ff fe19 	bl	801156c <MULSHIFT32>
 801193a:	4602      	mov	r2, r0
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	336c      	adds	r3, #108	; 0x6c
 8011940:	0052      	lsls	r2, r2, #1
 8011942:	601a      	str	r2, [r3, #0]
	D32FP(5, 1, 1, 2);
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	695b      	ldr	r3, [r3, #20]
 8011948:	663b      	str	r3, [r7, #96]	; 0x60
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801194e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011954:	65bb      	str	r3, [r7, #88]	; 0x58
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801195a:	657b      	str	r3, [r7, #84]	; 0x54
 801195c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801195e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011960:	4413      	add	r3, r2
 8011962:	653b      	str	r3, [r7, #80]	; 0x50
 8011964:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011966:	1d1a      	adds	r2, r3, #4
 8011968:	66ba      	str	r2, [r7, #104]	; 0x68
 801196a:	6818      	ldr	r0, [r3, #0]
 801196c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801196e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011970:	1ad3      	subs	r3, r2, r3
 8011972:	4619      	mov	r1, r3
 8011974:	f7ff fdfa 	bl	801156c <MULSHIFT32>
 8011978:	4603      	mov	r3, r0
 801197a:	005b      	lsls	r3, r3, #1
 801197c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801197e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011982:	4413      	add	r3, r2
 8011984:	64bb      	str	r3, [r7, #72]	; 0x48
 8011986:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011988:	1d1a      	adds	r2, r3, #4
 801198a:	66ba      	str	r2, [r7, #104]	; 0x68
 801198c:	6818      	ldr	r0, [r3, #0]
 801198e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011992:	1ad3      	subs	r3, r2, r3
 8011994:	4619      	mov	r1, r3
 8011996:	f7ff fde9 	bl	801156c <MULSHIFT32>
 801199a:	4603      	mov	r3, r0
 801199c:	005b      	lsls	r3, r3, #1
 801199e:	647b      	str	r3, [r7, #68]	; 0x44
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	3314      	adds	r3, #20
 80119a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80119a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80119a8:	440a      	add	r2, r1
 80119aa:	601a      	str	r2, [r3, #0]
 80119ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80119ae:	6818      	ldr	r0, [r3, #0]
 80119b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80119b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119b4:	1ad3      	subs	r3, r2, r3
 80119b6:	4619      	mov	r1, r3
 80119b8:	f7ff fdd8 	bl	801156c <MULSHIFT32>
 80119bc:	4602      	mov	r2, r0
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	3328      	adds	r3, #40	; 0x28
 80119c2:	0092      	lsls	r2, r2, #2
 80119c4:	601a      	str	r2, [r3, #0]
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	3354      	adds	r3, #84	; 0x54
 80119ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80119cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80119ce:	440a      	add	r2, r1
 80119d0:	601a      	str	r2, [r3, #0]
 80119d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80119d4:	1d1a      	adds	r2, r3, #4
 80119d6:	66ba      	str	r2, [r7, #104]	; 0x68
 80119d8:	6818      	ldr	r0, [r3, #0]
 80119da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80119dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119de:	1ad3      	subs	r3, r2, r3
 80119e0:	4619      	mov	r1, r3
 80119e2:	f7ff fdc3 	bl	801156c <MULSHIFT32>
 80119e6:	4602      	mov	r2, r0
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	3368      	adds	r3, #104	; 0x68
 80119ec:	0092      	lsls	r2, r2, #2
 80119ee:	601a      	str	r2, [r3, #0]
	D32FP(6, 1, 1, 2);
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	699b      	ldr	r3, [r3, #24]
 80119f4:	663b      	str	r3, [r7, #96]	; 0x60
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80119fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a00:	65bb      	str	r3, [r7, #88]	; 0x58
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a06:	657b      	str	r3, [r7, #84]	; 0x54
 8011a08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a0c:	4413      	add	r3, r2
 8011a0e:	653b      	str	r3, [r7, #80]	; 0x50
 8011a10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011a12:	1d1a      	adds	r2, r3, #4
 8011a14:	66ba      	str	r2, [r7, #104]	; 0x68
 8011a16:	6818      	ldr	r0, [r3, #0]
 8011a18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a1c:	1ad3      	subs	r3, r2, r3
 8011a1e:	4619      	mov	r1, r3
 8011a20:	f7ff fda4 	bl	801156c <MULSHIFT32>
 8011a24:	4603      	mov	r3, r0
 8011a26:	005b      	lsls	r3, r3, #1
 8011a28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a2e:	4413      	add	r3, r2
 8011a30:	64bb      	str	r3, [r7, #72]	; 0x48
 8011a32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011a34:	1d1a      	adds	r2, r3, #4
 8011a36:	66ba      	str	r2, [r7, #104]	; 0x68
 8011a38:	6818      	ldr	r0, [r3, #0]
 8011a3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a3e:	1ad3      	subs	r3, r2, r3
 8011a40:	4619      	mov	r1, r3
 8011a42:	f7ff fd93 	bl	801156c <MULSHIFT32>
 8011a46:	4603      	mov	r3, r0
 8011a48:	005b      	lsls	r3, r3, #1
 8011a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	3318      	adds	r3, #24
 8011a50:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011a52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a54:	440a      	add	r2, r1
 8011a56:	601a      	str	r2, [r3, #0]
 8011a58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011a5a:	6818      	ldr	r0, [r3, #0]
 8011a5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a60:	1ad3      	subs	r3, r2, r3
 8011a62:	4619      	mov	r1, r3
 8011a64:	f7ff fd82 	bl	801156c <MULSHIFT32>
 8011a68:	4602      	mov	r2, r0
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	3324      	adds	r3, #36	; 0x24
 8011a6e:	0092      	lsls	r2, r2, #2
 8011a70:	601a      	str	r2, [r3, #0]
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	3358      	adds	r3, #88	; 0x58
 8011a76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011a78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011a7a:	440a      	add	r2, r1
 8011a7c:	601a      	str	r2, [r3, #0]
 8011a7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011a80:	1d1a      	adds	r2, r3, #4
 8011a82:	66ba      	str	r2, [r7, #104]	; 0x68
 8011a84:	6818      	ldr	r0, [r3, #0]
 8011a86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a8a:	1ad3      	subs	r3, r2, r3
 8011a8c:	4619      	mov	r1, r3
 8011a8e:	f7ff fd6d 	bl	801156c <MULSHIFT32>
 8011a92:	4602      	mov	r2, r0
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	3364      	adds	r3, #100	; 0x64
 8011a98:	0092      	lsls	r2, r2, #2
 8011a9a:	601a      	str	r2, [r3, #0]
	D32FP(7, 1, 1, 4);
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	69db      	ldr	r3, [r3, #28]
 8011aa0:	663b      	str	r3, [r7, #96]	; 0x60
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011aa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	6a1b      	ldr	r3, [r3, #32]
 8011aac:	65bb      	str	r3, [r7, #88]	; 0x58
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ab2:	657b      	str	r3, [r7, #84]	; 0x54
 8011ab4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011ab8:	4413      	add	r3, r2
 8011aba:	653b      	str	r3, [r7, #80]	; 0x50
 8011abc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011abe:	1d1a      	adds	r2, r3, #4
 8011ac0:	66ba      	str	r2, [r7, #104]	; 0x68
 8011ac2:	6818      	ldr	r0, [r3, #0]
 8011ac4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011ac8:	1ad3      	subs	r3, r2, r3
 8011aca:	4619      	mov	r1, r3
 8011acc:	f7ff fd4e 	bl	801156c <MULSHIFT32>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	005b      	lsls	r3, r3, #1
 8011ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ad6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ada:	4413      	add	r3, r2
 8011adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8011ade:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011ae0:	1d1a      	adds	r2, r3, #4
 8011ae2:	66ba      	str	r2, [r7, #104]	; 0x68
 8011ae4:	6818      	ldr	r0, [r3, #0]
 8011ae6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011aea:	1ad3      	subs	r3, r2, r3
 8011aec:	4619      	mov	r1, r3
 8011aee:	f7ff fd3d 	bl	801156c <MULSHIFT32>
 8011af2:	4603      	mov	r3, r0
 8011af4:	005b      	lsls	r3, r3, #1
 8011af6:	647b      	str	r3, [r7, #68]	; 0x44
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	331c      	adds	r3, #28
 8011afc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b00:	440a      	add	r2, r1
 8011b02:	601a      	str	r2, [r3, #0]
 8011b04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b06:	6818      	ldr	r0, [r3, #0]
 8011b08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b0c:	1ad3      	subs	r3, r2, r3
 8011b0e:	4619      	mov	r1, r3
 8011b10:	f7ff fd2c 	bl	801156c <MULSHIFT32>
 8011b14:	4602      	mov	r2, r0
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	3320      	adds	r3, #32
 8011b1a:	0112      	lsls	r2, r2, #4
 8011b1c:	601a      	str	r2, [r3, #0]
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	335c      	adds	r3, #92	; 0x5c
 8011b22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011b24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011b26:	440a      	add	r2, r1
 8011b28:	601a      	str	r2, [r3, #0]
 8011b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b2c:	1d1a      	adds	r2, r3, #4
 8011b2e:	66ba      	str	r2, [r7, #104]	; 0x68
 8011b30:	6818      	ldr	r0, [r3, #0]
 8011b32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b36:	1ad3      	subs	r3, r2, r3
 8011b38:	4619      	mov	r1, r3
 8011b3a:	f7ff fd17 	bl	801156c <MULSHIFT32>
 8011b3e:	4602      	mov	r2, r0
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	3360      	adds	r3, #96	; 0x60
 8011b44:	0112      	lsls	r2, r2, #4
 8011b46:	601a      	str	r2, [r3, #0]

	/* second pass */
	for (i = 4; i > 0; i--) {
 8011b48:	2304      	movs	r3, #4
 8011b4a:	677b      	str	r3, [r7, #116]	; 0x74
 8011b4c:	e104      	b.n	8011d58 <xmp3_FDCT32+0x7c8>
		a0 = buf[0]; 	    a7 = buf[7];		a3 = buf[3];	    a4 = buf[4];
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	663b      	str	r3, [r7, #96]	; 0x60
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	69db      	ldr	r3, [r3, #28]
 8011b58:	633b      	str	r3, [r7, #48]	; 0x30
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	68db      	ldr	r3, [r3, #12]
 8011b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	691b      	ldr	r3, [r3, #16]
 8011b64:	62fb      	str	r3, [r7, #44]	; 0x2c
		b0 = a0 + a7;	    b7 = MULSHIFT32(*cptr++, a0 - a7) << 1;
 8011b66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b6a:	4413      	add	r3, r2
 8011b6c:	653b      	str	r3, [r7, #80]	; 0x50
 8011b6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b70:	1d1a      	adds	r2, r3, #4
 8011b72:	66ba      	str	r2, [r7, #104]	; 0x68
 8011b74:	6818      	ldr	r0, [r3, #0]
 8011b76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b7a:	1ad3      	subs	r3, r2, r3
 8011b7c:	4619      	mov	r1, r3
 8011b7e:	f7ff fcf5 	bl	801156c <MULSHIFT32>
 8011b82:	4603      	mov	r3, r0
 8011b84:	005b      	lsls	r3, r3, #1
 8011b86:	62bb      	str	r3, [r7, #40]	; 0x28
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 8011b88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b8c:	4413      	add	r3, r2
 8011b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b92:	1d1a      	adds	r2, r3, #4
 8011b94:	66ba      	str	r2, [r7, #104]	; 0x68
 8011b96:	6818      	ldr	r0, [r3, #0]
 8011b98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9c:	1ad3      	subs	r3, r2, r3
 8011b9e:	4619      	mov	r1, r3
 8011ba0:	f7ff fce4 	bl	801156c <MULSHIFT32>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	00db      	lsls	r3, r3, #3
 8011ba8:	627b      	str	r3, [r7, #36]	; 0x24
		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
 8011baa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bae:	4413      	add	r3, r2
 8011bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8011bb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011bb4:	6818      	ldr	r0, [r3, #0]
 8011bb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bba:	1ad3      	subs	r3, r2, r3
 8011bbc:	4619      	mov	r1, r3
 8011bbe:	f7ff fcd5 	bl	801156c <MULSHIFT32>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	005b      	lsls	r3, r3, #1
 8011bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
 8011bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bcc:	4413      	add	r3, r2
 8011bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011bd2:	1d1a      	adds	r2, r3, #4
 8011bd4:	66ba      	str	r2, [r7, #104]	; 0x68
 8011bd6:	6818      	ldr	r0, [r3, #0]
 8011bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bdc:	1ad3      	subs	r3, r2, r3
 8011bde:	4619      	mov	r1, r3
 8011be0:	f7ff fcc4 	bl	801156c <MULSHIFT32>
 8011be4:	4603      	mov	r3, r0
 8011be6:	005b      	lsls	r3, r3, #1
 8011be8:	633b      	str	r3, [r7, #48]	; 0x30

		a1 = buf[1];	    a6 = buf[6];	    a2 = buf[2];	    a5 = buf[5];
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	685b      	ldr	r3, [r3, #4]
 8011bee:	65bb      	str	r3, [r7, #88]	; 0x58
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	699b      	ldr	r3, [r3, #24]
 8011bf4:	623b      	str	r3, [r7, #32]
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	689b      	ldr	r3, [r3, #8]
 8011bfa:	657b      	str	r3, [r7, #84]	; 0x54
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	695b      	ldr	r3, [r3, #20]
 8011c00:	61fb      	str	r3, [r7, #28]
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 8011c02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011c04:	6a3b      	ldr	r3, [r7, #32]
 8011c06:	4413      	add	r3, r2
 8011c08:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c0c:	1d1a      	adds	r2, r3, #4
 8011c0e:	66ba      	str	r2, [r7, #104]	; 0x68
 8011c10:	6818      	ldr	r0, [r3, #0]
 8011c12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011c14:	6a3b      	ldr	r3, [r7, #32]
 8011c16:	1ad3      	subs	r3, r2, r3
 8011c18:	4619      	mov	r1, r3
 8011c1a:	f7ff fca7 	bl	801156c <MULSHIFT32>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	005b      	lsls	r3, r3, #1
 8011c22:	61bb      	str	r3, [r7, #24]
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 8011c24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011c26:	69fb      	ldr	r3, [r7, #28]
 8011c28:	4413      	add	r3, r2
 8011c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8011c2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c2e:	1d1a      	adds	r2, r3, #4
 8011c30:	66ba      	str	r2, [r7, #104]	; 0x68
 8011c32:	6818      	ldr	r0, [r3, #0]
 8011c34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011c36:	69fb      	ldr	r3, [r7, #28]
 8011c38:	1ad3      	subs	r3, r2, r3
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	f7ff fc96 	bl	801156c <MULSHIFT32>
 8011c40:	4603      	mov	r3, r0
 8011c42:	005b      	lsls	r3, r3, #1
 8011c44:	617b      	str	r3, [r7, #20]
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 8011c46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c4a:	4413      	add	r3, r2
 8011c4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8011c4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c50:	6818      	ldr	r0, [r3, #0]
 8011c52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c56:	1ad3      	subs	r3, r2, r3
 8011c58:	4619      	mov	r1, r3
 8011c5a:	f7ff fc87 	bl	801156c <MULSHIFT32>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	009b      	lsls	r3, r3, #2
 8011c62:	657b      	str	r3, [r7, #84]	; 0x54
		a5 = b5 + b6;	    a6 = MULSHIFT32(*cptr++, b6 - b5) << 2;
 8011c64:	697a      	ldr	r2, [r7, #20]
 8011c66:	69bb      	ldr	r3, [r7, #24]
 8011c68:	4413      	add	r3, r2
 8011c6a:	61fb      	str	r3, [r7, #28]
 8011c6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011c6e:	1d1a      	adds	r2, r3, #4
 8011c70:	66ba      	str	r2, [r7, #104]	; 0x68
 8011c72:	6818      	ldr	r0, [r3, #0]
 8011c74:	69ba      	ldr	r2, [r7, #24]
 8011c76:	697b      	ldr	r3, [r7, #20]
 8011c78:	1ad3      	subs	r3, r2, r3
 8011c7a:	4619      	mov	r1, r3
 8011c7c:	f7ff fc76 	bl	801156c <MULSHIFT32>
 8011c80:	4603      	mov	r3, r0
 8011c82:	009b      	lsls	r3, r3, #2
 8011c84:	623b      	str	r3, [r7, #32]

		b0 = a0 + a1;	    b1 = MULSHIFT32(COS4_0, a0 - a1) << 1;
 8011c86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011c88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c8a:	4413      	add	r3, r2
 8011c8c:	653b      	str	r3, [r7, #80]	; 0x50
 8011c8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011c90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c92:	1ad3      	subs	r3, r2, r3
 8011c94:	4619      	mov	r1, r3
 8011c96:	4846      	ldr	r0, [pc, #280]	; (8011db0 <xmp3_FDCT32+0x820>)
 8011c98:	f7ff fc68 	bl	801156c <MULSHIFT32>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	005b      	lsls	r3, r3, #1
 8011ca0:	64bb      	str	r3, [r7, #72]	; 0x48
		b2 = a2 + a3;	    b3 = MULSHIFT32(COS4_0, a3 - a2) << 1;
 8011ca2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011ca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011ca6:	4413      	add	r3, r2
 8011ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8011caa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cae:	1ad3      	subs	r3, r2, r3
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	483f      	ldr	r0, [pc, #252]	; (8011db0 <xmp3_FDCT32+0x820>)
 8011cb4:	f7ff fc5a 	bl	801156c <MULSHIFT32>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	005b      	lsls	r3, r3, #1
 8011cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
		buf[0] = b0;	    buf[1] = b1;
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011cc2:	601a      	str	r2, [r3, #0]
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	3304      	adds	r3, #4
 8011cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cca:	601a      	str	r2, [r3, #0]
		buf[2] = b2 + b3;	buf[3] = b3;
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	3308      	adds	r3, #8
 8011cd0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011cd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011cd4:	440a      	add	r2, r1
 8011cd6:	601a      	str	r2, [r3, #0]
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	330c      	adds	r3, #12
 8011cdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011cde:	601a      	str	r2, [r3, #0]

		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 8011ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ce2:	69fb      	ldr	r3, [r7, #28]
 8011ce4:	4413      	add	r3, r2
 8011ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8011ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011cea:	69fb      	ldr	r3, [r7, #28]
 8011cec:	1ad3      	subs	r3, r2, r3
 8011cee:	4619      	mov	r1, r3
 8011cf0:	482f      	ldr	r0, [pc, #188]	; (8011db0 <xmp3_FDCT32+0x820>)
 8011cf2:	f7ff fc3b 	bl	801156c <MULSHIFT32>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	005b      	lsls	r3, r3, #1
 8011cfa:	617b      	str	r3, [r7, #20]
		b6 = a6 + a7;	    b7 = MULSHIFT32(COS4_0, a7 - a6) << 1;
 8011cfc:	6a3a      	ldr	r2, [r7, #32]
 8011cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d00:	4413      	add	r3, r2
 8011d02:	61bb      	str	r3, [r7, #24]
 8011d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d06:	6a3b      	ldr	r3, [r7, #32]
 8011d08:	1ad3      	subs	r3, r2, r3
 8011d0a:	4619      	mov	r1, r3
 8011d0c:	4828      	ldr	r0, [pc, #160]	; (8011db0 <xmp3_FDCT32+0x820>)
 8011d0e:	f7ff fc2d 	bl	801156c <MULSHIFT32>
 8011d12:	4603      	mov	r3, r0
 8011d14:	005b      	lsls	r3, r3, #1
 8011d16:	62bb      	str	r3, [r7, #40]	; 0x28
		b6 += b7;
 8011d18:	69ba      	ldr	r2, [r7, #24]
 8011d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d1c:	4413      	add	r3, r2
 8011d1e:	61bb      	str	r3, [r7, #24]
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	3310      	adds	r3, #16
 8011d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d26:	69ba      	ldr	r2, [r7, #24]
 8011d28:	440a      	add	r2, r1
 8011d2a:	601a      	str	r2, [r3, #0]
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	3314      	adds	r3, #20
 8011d30:	6979      	ldr	r1, [r7, #20]
 8011d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d34:	440a      	add	r2, r1
 8011d36:	601a      	str	r2, [r3, #0]
		buf[6] = b5 + b6;	buf[7] = b7;
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	3318      	adds	r3, #24
 8011d3c:	6979      	ldr	r1, [r7, #20]
 8011d3e:	69ba      	ldr	r2, [r7, #24]
 8011d40:	440a      	add	r2, r1
 8011d42:	601a      	str	r2, [r3, #0]
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	331c      	adds	r3, #28
 8011d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d4a:	601a      	str	r2, [r3, #0]

		buf += 8;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	3320      	adds	r3, #32
 8011d50:	60fb      	str	r3, [r7, #12]
	for (i = 4; i > 0; i--) {
 8011d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011d54:	3b01      	subs	r3, #1
 8011d56:	677b      	str	r3, [r7, #116]	; 0x74
 8011d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	f73f aef7 	bgt.w	8011b4e <xmp3_FDCT32+0x5be>
	}
	buf -= 32;	/* reset */
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	3b80      	subs	r3, #128	; 0x80
 8011d64:	60fb      	str	r3, [r7, #12]

	/* sample 0 - always delayed one block */
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 8011d66:	687a      	ldr	r2, [r7, #4]
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	1ad3      	subs	r3, r2, r3
 8011d6c:	f003 0307 	and.w	r3, r3, #7
 8011d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011d74:	009b      	lsls	r3, r3, #2
 8011d76:	683a      	ldr	r2, [r7, #0]
 8011d78:	2a00      	cmp	r2, #0
 8011d7a:	d001      	beq.n	8011d80 <xmp3_FDCT32+0x7f0>
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	e001      	b.n	8011d84 <xmp3_FDCT32+0x7f4>
 8011d80:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8011d84:	4413      	add	r3, r2
 8011d86:	68ba      	ldr	r2, [r7, #8]
 8011d88:	4413      	add	r3, r2
 8011d8a:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[ 0];				d[0] = d[8] = s;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	673b      	str	r3, [r7, #112]	; 0x70
 8011d92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d94:	3320      	adds	r3, #32
 8011d96:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011d98:	601a      	str	r2, [r3, #0]
 8011d9a:	681a      	ldr	r2, [r3, #0]
 8011d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d9e:	601a      	str	r2, [r3, #0]
    
	/* samples 16 to 31 */
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	009b      	lsls	r3, r3, #2
 8011da4:	683a      	ldr	r2, [r7, #0]
 8011da6:	2a00      	cmp	r2, #0
 8011da8:	d004      	beq.n	8011db4 <xmp3_FDCT32+0x824>
 8011daa:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8011dae:	e002      	b.n	8011db6 <xmp3_FDCT32+0x826>
 8011db0:	5a82799a 	.word	0x5a82799a
 8011db4:	2200      	movs	r2, #0
 8011db6:	4413      	add	r3, r2
 8011db8:	68ba      	ldr	r2, [r7, #8]
 8011dba:	4413      	add	r3, r2
 8011dbc:	667b      	str	r3, [r7, #100]	; 0x64

	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	685b      	ldr	r3, [r3, #4]
 8011dc2:	673b      	str	r3, [r7, #112]	; 0x70
 8011dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011dc6:	3320      	adds	r3, #32
 8011dc8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011dca:	601a      	str	r2, [r3, #0]
 8011dcc:	681a      	ldr	r2, [r3, #0]
 8011dce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011dd0:	601a      	str	r2, [r3, #0]
 8011dd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011dd4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011dd8:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[25] + buf[29];
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	3364      	adds	r3, #100	; 0x64
 8011dde:	681a      	ldr	r2, [r3, #0]
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	3374      	adds	r3, #116	; 0x74
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	4413      	add	r3, r2
 8011de8:	643b      	str	r3, [r7, #64]	; 0x40
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	3344      	adds	r3, #68	; 0x44
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011df2:	4413      	add	r3, r2
 8011df4:	673b      	str	r3, [r7, #112]	; 0x70
 8011df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011df8:	3320      	adds	r3, #32
 8011dfa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011dfc:	601a      	str	r2, [r3, #0]
 8011dfe:	681a      	ldr	r2, [r3, #0]
 8011e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e02:	601a      	str	r2, [r3, #0]
 8011e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e06:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011e0a:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[ 9] + buf[13];		d[0] = d[8] = s;	d += 64;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	3324      	adds	r3, #36	; 0x24
 8011e10:	681a      	ldr	r2, [r3, #0]
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	3334      	adds	r3, #52	; 0x34
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	4413      	add	r3, r2
 8011e1a:	673b      	str	r3, [r7, #112]	; 0x70
 8011e1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e1e:	3320      	adds	r3, #32
 8011e20:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011e22:	601a      	str	r2, [r3, #0]
 8011e24:	681a      	ldr	r2, [r3, #0]
 8011e26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e28:	601a      	str	r2, [r3, #0]
 8011e2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011e30:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	3354      	adds	r3, #84	; 0x54
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011e3a:	4413      	add	r3, r2
 8011e3c:	673b      	str	r3, [r7, #112]	; 0x70
 8011e3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e40:	3320      	adds	r3, #32
 8011e42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011e44:	601a      	str	r2, [r3, #0]
 8011e46:	681a      	ldr	r2, [r3, #0]
 8011e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e4a:	601a      	str	r2, [r3, #0]
 8011e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e4e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011e52:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[29] + buf[27];
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	3374      	adds	r3, #116	; 0x74
 8011e58:	681a      	ldr	r2, [r3, #0]
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	336c      	adds	r3, #108	; 0x6c
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	4413      	add	r3, r2
 8011e62:	643b      	str	r3, [r7, #64]	; 0x40
	s = buf[ 5];				d[0] = d[8] = s;	d += 64;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	695b      	ldr	r3, [r3, #20]
 8011e68:	673b      	str	r3, [r7, #112]	; 0x70
 8011e6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e6c:	3320      	adds	r3, #32
 8011e6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011e70:	601a      	str	r2, [r3, #0]
 8011e72:	681a      	ldr	r2, [r3, #0]
 8011e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e76:	601a      	str	r2, [r3, #0]
 8011e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011e7e:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	3354      	adds	r3, #84	; 0x54
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011e88:	4413      	add	r3, r2
 8011e8a:	673b      	str	r3, [r7, #112]	; 0x70
 8011e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e8e:	3320      	adds	r3, #32
 8011e90:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011e92:	601a      	str	r2, [r3, #0]
 8011e94:	681a      	ldr	r2, [r3, #0]
 8011e96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e98:	601a      	str	r2, [r3, #0]
 8011e9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011ea0:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[13] + buf[11];		d[0] = d[8] = s;	d += 64;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	3334      	adds	r3, #52	; 0x34
 8011ea6:	681a      	ldr	r2, [r3, #0]
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	332c      	adds	r3, #44	; 0x2c
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	4413      	add	r3, r2
 8011eb0:	673b      	str	r3, [r7, #112]	; 0x70
 8011eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011eb4:	3320      	adds	r3, #32
 8011eb6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011eb8:	601a      	str	r2, [r3, #0]
 8011eba:	681a      	ldr	r2, [r3, #0]
 8011ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ebe:	601a      	str	r2, [r3, #0]
 8011ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ec2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011ec6:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	334c      	adds	r3, #76	; 0x4c
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011ed0:	4413      	add	r3, r2
 8011ed2:	673b      	str	r3, [r7, #112]	; 0x70
 8011ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ed6:	3320      	adds	r3, #32
 8011ed8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011eda:	601a      	str	r2, [r3, #0]
 8011edc:	681a      	ldr	r2, [r3, #0]
 8011ede:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ee0:	601a      	str	r2, [r3, #0]
 8011ee2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ee4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011ee8:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[27] + buf[31];
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	336c      	adds	r3, #108	; 0x6c
 8011eee:	681a      	ldr	r2, [r3, #0]
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	337c      	adds	r3, #124	; 0x7c
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	4413      	add	r3, r2
 8011ef8:	643b      	str	r3, [r7, #64]	; 0x40
	s = buf[ 3];				d[0] = d[8] = s;	d += 64;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	68db      	ldr	r3, [r3, #12]
 8011efe:	673b      	str	r3, [r7, #112]	; 0x70
 8011f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f02:	3320      	adds	r3, #32
 8011f04:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011f06:	601a      	str	r2, [r3, #0]
 8011f08:	681a      	ldr	r2, [r3, #0]
 8011f0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f0c:	601a      	str	r2, [r3, #0]
 8011f0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f10:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011f14:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	334c      	adds	r3, #76	; 0x4c
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f1e:	4413      	add	r3, r2
 8011f20:	673b      	str	r3, [r7, #112]	; 0x70
 8011f22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f24:	3320      	adds	r3, #32
 8011f26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011f28:	601a      	str	r2, [r3, #0]
 8011f2a:	681a      	ldr	r2, [r3, #0]
 8011f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f2e:	601a      	str	r2, [r3, #0]
 8011f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f32:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011f36:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[11] + buf[15];		d[0] = d[8] = s;	d += 64;
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	332c      	adds	r3, #44	; 0x2c
 8011f3c:	681a      	ldr	r2, [r3, #0]
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	333c      	adds	r3, #60	; 0x3c
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	4413      	add	r3, r2
 8011f46:	673b      	str	r3, [r7, #112]	; 0x70
 8011f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f4a:	3320      	adds	r3, #32
 8011f4c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011f4e:	601a      	str	r2, [r3, #0]
 8011f50:	681a      	ldr	r2, [r3, #0]
 8011f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f54:	601a      	str	r2, [r3, #0]
 8011f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011f5c:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	335c      	adds	r3, #92	; 0x5c
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f66:	4413      	add	r3, r2
 8011f68:	673b      	str	r3, [r7, #112]	; 0x70
 8011f6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f6c:	3320      	adds	r3, #32
 8011f6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011f70:	601a      	str	r2, [r3, #0]
 8011f72:	681a      	ldr	r2, [r3, #0]
 8011f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f76:	601a      	str	r2, [r3, #0]
 8011f78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011f7e:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[31];
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f84:	643b      	str	r3, [r7, #64]	; 0x40
	s = buf[ 7];				d[0] = d[8] = s;	d += 64;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	69db      	ldr	r3, [r3, #28]
 8011f8a:	673b      	str	r3, [r7, #112]	; 0x70
 8011f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f8e:	3320      	adds	r3, #32
 8011f90:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011f92:	601a      	str	r2, [r3, #0]
 8011f94:	681a      	ldr	r2, [r3, #0]
 8011f96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f98:	601a      	str	r2, [r3, #0]
 8011f9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011fa0:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	335c      	adds	r3, #92	; 0x5c
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011faa:	4413      	add	r3, r2
 8011fac:	673b      	str	r3, [r7, #112]	; 0x70
 8011fae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011fb0:	3320      	adds	r3, #32
 8011fb2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011fb4:	601a      	str	r2, [r3, #0]
 8011fb6:	681a      	ldr	r2, [r3, #0]
 8011fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011fba:	601a      	str	r2, [r3, #0]
 8011fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011fbe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011fc2:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[15];				d[0] = d[8] = s;	d += 64;
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fc8:	673b      	str	r3, [r7, #112]	; 0x70
 8011fca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011fcc:	3320      	adds	r3, #32
 8011fce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011fd0:	601a      	str	r2, [r3, #0]
 8011fd2:	681a      	ldr	r2, [r3, #0]
 8011fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011fd6:	601a      	str	r2, [r3, #0]
 8011fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011fda:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011fde:	667b      	str	r3, [r7, #100]	; 0x64
	s = tmp;					d[0] = d[8] = s;
 8011fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011fe2:	673b      	str	r3, [r7, #112]	; 0x70
 8011fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011fe6:	3320      	adds	r3, #32
 8011fe8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011fea:	601a      	str	r2, [r3, #0]
 8011fec:	681a      	ldr	r2, [r3, #0]
 8011fee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ff0:	601a      	str	r2, [r3, #0]

	/* samples 16 to 1 (sample 16 used again) */
	d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 8011ff2:	687a      	ldr	r2, [r7, #4]
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	1ad3      	subs	r3, r2, r3
 8011ff8:	f003 0307 	and.w	r3, r3, #7
 8011ffc:	3310      	adds	r3, #16
 8011ffe:	009b      	lsls	r3, r3, #2
 8012000:	683a      	ldr	r2, [r7, #0]
 8012002:	2a00      	cmp	r2, #0
 8012004:	d001      	beq.n	801200a <xmp3_FDCT32+0xa7a>
 8012006:	2200      	movs	r2, #0
 8012008:	e001      	b.n	801200e <xmp3_FDCT32+0xa7e>
 801200a:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 801200e:	4413      	add	r3, r2
 8012010:	68ba      	ldr	r2, [r7, #8]
 8012012:	4413      	add	r3, r2
 8012014:	667b      	str	r3, [r7, #100]	; 0x64

	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	685b      	ldr	r3, [r3, #4]
 801201a:	673b      	str	r3, [r7, #112]	; 0x70
 801201c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801201e:	3320      	adds	r3, #32
 8012020:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012022:	601a      	str	r2, [r3, #0]
 8012024:	681a      	ldr	r2, [r3, #0]
 8012026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012028:	601a      	str	r2, [r3, #0]
 801202a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801202c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012030:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[30] + buf[25];
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	3378      	adds	r3, #120	; 0x78
 8012036:	681a      	ldr	r2, [r3, #0]
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	3364      	adds	r3, #100	; 0x64
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	4413      	add	r3, r2
 8012040:	643b      	str	r3, [r7, #64]	; 0x40
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	3344      	adds	r3, #68	; 0x44
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801204a:	4413      	add	r3, r2
 801204c:	673b      	str	r3, [r7, #112]	; 0x70
 801204e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012050:	3320      	adds	r3, #32
 8012052:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012054:	601a      	str	r2, [r3, #0]
 8012056:	681a      	ldr	r2, [r3, #0]
 8012058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801205a:	601a      	str	r2, [r3, #0]
 801205c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801205e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012062:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[14] + buf[ 9];		d[0] = d[8] = s;	d += 64;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	3338      	adds	r3, #56	; 0x38
 8012068:	681a      	ldr	r2, [r3, #0]
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	3324      	adds	r3, #36	; 0x24
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	4413      	add	r3, r2
 8012072:	673b      	str	r3, [r7, #112]	; 0x70
 8012074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012076:	3320      	adds	r3, #32
 8012078:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801207a:	601a      	str	r2, [r3, #0]
 801207c:	681a      	ldr	r2, [r3, #0]
 801207e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012080:	601a      	str	r2, [r3, #0]
 8012082:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012084:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012088:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	3358      	adds	r3, #88	; 0x58
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012092:	4413      	add	r3, r2
 8012094:	673b      	str	r3, [r7, #112]	; 0x70
 8012096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012098:	3320      	adds	r3, #32
 801209a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801209c:	601a      	str	r2, [r3, #0]
 801209e:	681a      	ldr	r2, [r3, #0]
 80120a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80120a2:	601a      	str	r2, [r3, #0]
 80120a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80120a6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80120aa:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[ 6];				d[0] = d[8] = s;	d += 64;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	699b      	ldr	r3, [r3, #24]
 80120b0:	673b      	str	r3, [r7, #112]	; 0x70
 80120b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80120b4:	3320      	adds	r3, #32
 80120b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80120b8:	601a      	str	r2, [r3, #0]
 80120ba:	681a      	ldr	r2, [r3, #0]
 80120bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80120be:	601a      	str	r2, [r3, #0]
 80120c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80120c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80120c6:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[26] + buf[30];
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	3368      	adds	r3, #104	; 0x68
 80120cc:	681a      	ldr	r2, [r3, #0]
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	3378      	adds	r3, #120	; 0x78
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	4413      	add	r3, r2
 80120d6:	643b      	str	r3, [r7, #64]	; 0x40
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	3358      	adds	r3, #88	; 0x58
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80120e0:	4413      	add	r3, r2
 80120e2:	673b      	str	r3, [r7, #112]	; 0x70
 80120e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80120e6:	3320      	adds	r3, #32
 80120e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80120ea:	601a      	str	r2, [r3, #0]
 80120ec:	681a      	ldr	r2, [r3, #0]
 80120ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80120f0:	601a      	str	r2, [r3, #0]
 80120f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80120f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80120f8:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[10] + buf[14];		d[0] = d[8] = s;	d += 64;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	3328      	adds	r3, #40	; 0x28
 80120fe:	681a      	ldr	r2, [r3, #0]
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	3338      	adds	r3, #56	; 0x38
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	4413      	add	r3, r2
 8012108:	673b      	str	r3, [r7, #112]	; 0x70
 801210a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801210c:	3320      	adds	r3, #32
 801210e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012110:	601a      	str	r2, [r3, #0]
 8012112:	681a      	ldr	r2, [r3, #0]
 8012114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012116:	601a      	str	r2, [r3, #0]
 8012118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801211a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801211e:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	3348      	adds	r3, #72	; 0x48
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012128:	4413      	add	r3, r2
 801212a:	673b      	str	r3, [r7, #112]	; 0x70
 801212c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801212e:	3320      	adds	r3, #32
 8012130:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012132:	601a      	str	r2, [r3, #0]
 8012134:	681a      	ldr	r2, [r3, #0]
 8012136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012138:	601a      	str	r2, [r3, #0]
 801213a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801213c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012140:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[ 2];				d[0] = d[8] = s;	d += 64;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	689b      	ldr	r3, [r3, #8]
 8012146:	673b      	str	r3, [r7, #112]	; 0x70
 8012148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801214a:	3320      	adds	r3, #32
 801214c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801214e:	601a      	str	r2, [r3, #0]
 8012150:	681a      	ldr	r2, [r3, #0]
 8012152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012154:	601a      	str	r2, [r3, #0]
 8012156:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012158:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801215c:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[28] + buf[26];
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	3370      	adds	r3, #112	; 0x70
 8012162:	681a      	ldr	r2, [r3, #0]
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	3368      	adds	r3, #104	; 0x68
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	4413      	add	r3, r2
 801216c:	643b      	str	r3, [r7, #64]	; 0x40
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	3348      	adds	r3, #72	; 0x48
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012176:	4413      	add	r3, r2
 8012178:	673b      	str	r3, [r7, #112]	; 0x70
 801217a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801217c:	3320      	adds	r3, #32
 801217e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012180:	601a      	str	r2, [r3, #0]
 8012182:	681a      	ldr	r2, [r3, #0]
 8012184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012186:	601a      	str	r2, [r3, #0]
 8012188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801218a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801218e:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[12] + buf[10];		d[0] = d[8] = s;	d += 64;
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	3330      	adds	r3, #48	; 0x30
 8012194:	681a      	ldr	r2, [r3, #0]
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	3328      	adds	r3, #40	; 0x28
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	4413      	add	r3, r2
 801219e:	673b      	str	r3, [r7, #112]	; 0x70
 80121a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80121a2:	3320      	adds	r3, #32
 80121a4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80121a6:	601a      	str	r2, [r3, #0]
 80121a8:	681a      	ldr	r2, [r3, #0]
 80121aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80121ac:	601a      	str	r2, [r3, #0]
 80121ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80121b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80121b4:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	3350      	adds	r3, #80	; 0x50
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80121be:	4413      	add	r3, r2
 80121c0:	673b      	str	r3, [r7, #112]	; 0x70
 80121c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80121c4:	3320      	adds	r3, #32
 80121c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80121c8:	601a      	str	r2, [r3, #0]
 80121ca:	681a      	ldr	r2, [r3, #0]
 80121cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80121ce:	601a      	str	r2, [r3, #0]
 80121d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80121d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80121d6:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[ 4];				d[0] = d[8] = s;	d += 64;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	691b      	ldr	r3, [r3, #16]
 80121dc:	673b      	str	r3, [r7, #112]	; 0x70
 80121de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80121e0:	3320      	adds	r3, #32
 80121e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80121e4:	601a      	str	r2, [r3, #0]
 80121e6:	681a      	ldr	r2, [r3, #0]
 80121e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80121ea:	601a      	str	r2, [r3, #0]
 80121ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80121ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80121f2:	667b      	str	r3, [r7, #100]	; 0x64

	tmp = buf[24] + buf[28];
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	3360      	adds	r3, #96	; 0x60
 80121f8:	681a      	ldr	r2, [r3, #0]
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	3370      	adds	r3, #112	; 0x70
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	4413      	add	r3, r2
 8012202:	643b      	str	r3, [r7, #64]	; 0x40
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	3350      	adds	r3, #80	; 0x50
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801220c:	4413      	add	r3, r2
 801220e:	673b      	str	r3, [r7, #112]	; 0x70
 8012210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012212:	3320      	adds	r3, #32
 8012214:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012216:	601a      	str	r2, [r3, #0]
 8012218:	681a      	ldr	r2, [r3, #0]
 801221a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801221c:	601a      	str	r2, [r3, #0]
 801221e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012220:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012224:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[ 8] + buf[12];		d[0] = d[8] = s;	d += 64;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	3320      	adds	r3, #32
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	3330      	adds	r3, #48	; 0x30
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	4413      	add	r3, r2
 8012234:	673b      	str	r3, [r7, #112]	; 0x70
 8012236:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012238:	3320      	adds	r3, #32
 801223a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801223c:	601a      	str	r2, [r3, #0]
 801223e:	681a      	ldr	r2, [r3, #0]
 8012240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012242:	601a      	str	r2, [r3, #0]
 8012244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012246:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801224a:	667b      	str	r3, [r7, #100]	; 0x64
	s = buf[16] + tmp;			d[0] = d[8] = s;
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	3340      	adds	r3, #64	; 0x40
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012254:	4413      	add	r3, r2
 8012256:	673b      	str	r3, [r7, #112]	; 0x70
 8012258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801225a:	3320      	adds	r3, #32
 801225c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801225e:	601a      	str	r2, [r3, #0]
 8012260:	681a      	ldr	r2, [r3, #0]
 8012262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012264:	601a      	str	r2, [r3, #0]

	/* this is so rarely invoked that it's not worth making two versions of the output
	 *   shuffle code (one for no shift, one for clip + variable shift) like in IMDCT
	 * here we just load, clip, shift, and store on the rare instances that es != 0
	 */
	if (es) {
 8012266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012268:	2b00      	cmp	r3, #0
 801226a:	f000 80b2 	beq.w	80123d2 <xmp3_FDCT32+0xe42>
		d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 801226e:	687a      	ldr	r2, [r7, #4]
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	1ad3      	subs	r3, r2, r3
 8012274:	f003 0307 	and.w	r3, r3, #7
 8012278:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801227c:	009b      	lsls	r3, r3, #2
 801227e:	683a      	ldr	r2, [r7, #0]
 8012280:	2a00      	cmp	r2, #0
 8012282:	d001      	beq.n	8012288 <xmp3_FDCT32+0xcf8>
 8012284:	2200      	movs	r2, #0
 8012286:	e001      	b.n	801228c <xmp3_FDCT32+0xcfc>
 8012288:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 801228c:	4413      	add	r3, r2
 801228e:	68ba      	ldr	r2, [r7, #8]
 8012290:	4413      	add	r3, r2
 8012292:	667b      	str	r3, [r7, #100]	; 0x64
		s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);
 8012294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	673b      	str	r3, [r7, #112]	; 0x70
 801229a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801229c:	17db      	asrs	r3, r3, #31
 801229e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80122a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80122a2:	f1c3 031f 	rsb	r3, r3, #31
 80122a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80122a8:	fa42 f303 	asr.w	r3, r2, r3
 80122ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80122ae:	429a      	cmp	r2, r3
 80122b0:	d008      	beq.n	80122c4 <xmp3_FDCT32+0xd34>
 80122b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80122b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80122b8:	fa22 f303 	lsr.w	r3, r2, r3
 80122bc:	3b01      	subs	r3, #1
 80122be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80122c0:	4053      	eors	r3, r2
 80122c2:	673b      	str	r3, [r7, #112]	; 0x70
 80122c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122c6:	3320      	adds	r3, #32
 80122c8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80122ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80122cc:	fa01 f202 	lsl.w	r2, r1, r2
 80122d0:	601a      	str	r2, [r3, #0]
 80122d2:	681a      	ldr	r2, [r3, #0]
 80122d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122d6:	601a      	str	r2, [r3, #0]
	
		d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	009b      	lsls	r3, r3, #2
 80122dc:	683a      	ldr	r2, [r7, #0]
 80122de:	2a00      	cmp	r2, #0
 80122e0:	d002      	beq.n	80122e8 <xmp3_FDCT32+0xd58>
 80122e2:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 80122e6:	e000      	b.n	80122ea <xmp3_FDCT32+0xd5a>
 80122e8:	2200      	movs	r2, #0
 80122ea:	4413      	add	r3, r2
 80122ec:	68ba      	ldr	r2, [r7, #8]
 80122ee:	4413      	add	r3, r2
 80122f0:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 16; i <= 31; i++) {
 80122f2:	2310      	movs	r3, #16
 80122f4:	677b      	str	r3, [r7, #116]	; 0x74
 80122f6:	e028      	b.n	801234a <xmp3_FDCT32+0xdba>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 80122f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	673b      	str	r3, [r7, #112]	; 0x70
 80122fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012300:	17db      	asrs	r3, r3, #31
 8012302:	637b      	str	r3, [r7, #52]	; 0x34
 8012304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012306:	f1c3 031f 	rsb	r3, r3, #31
 801230a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801230c:	fa42 f303 	asr.w	r3, r2, r3
 8012310:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012312:	429a      	cmp	r2, r3
 8012314:	d008      	beq.n	8012328 <xmp3_FDCT32+0xd98>
 8012316:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801231a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801231c:	fa22 f303 	lsr.w	r3, r2, r3
 8012320:	3b01      	subs	r3, #1
 8012322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012324:	4053      	eors	r3, r2
 8012326:	673b      	str	r3, [r7, #112]	; 0x70
 8012328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801232a:	3320      	adds	r3, #32
 801232c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801232e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012330:	fa01 f202 	lsl.w	r2, r1, r2
 8012334:	601a      	str	r2, [r3, #0]
 8012336:	681a      	ldr	r2, [r3, #0]
 8012338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801233a:	601a      	str	r2, [r3, #0]
 801233c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801233e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012342:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 16; i <= 31; i++) {
 8012344:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012346:	3301      	adds	r3, #1
 8012348:	677b      	str	r3, [r7, #116]	; 0x74
 801234a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801234c:	2b1f      	cmp	r3, #31
 801234e:	ddd3      	ble.n	80122f8 <xmp3_FDCT32+0xd68>
		}

		d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 8012350:	687a      	ldr	r2, [r7, #4]
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	1ad3      	subs	r3, r2, r3
 8012356:	f003 0307 	and.w	r3, r3, #7
 801235a:	3310      	adds	r3, #16
 801235c:	009b      	lsls	r3, r3, #2
 801235e:	683a      	ldr	r2, [r7, #0]
 8012360:	2a00      	cmp	r2, #0
 8012362:	d001      	beq.n	8012368 <xmp3_FDCT32+0xdd8>
 8012364:	2200      	movs	r2, #0
 8012366:	e001      	b.n	801236c <xmp3_FDCT32+0xddc>
 8012368:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 801236c:	4413      	add	r3, r2
 801236e:	68ba      	ldr	r2, [r7, #8]
 8012370:	4413      	add	r3, r2
 8012372:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 15; i >= 0; i--) {
 8012374:	230f      	movs	r3, #15
 8012376:	677b      	str	r3, [r7, #116]	; 0x74
 8012378:	e028      	b.n	80123cc <xmp3_FDCT32+0xe3c>
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 801237a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	673b      	str	r3, [r7, #112]	; 0x70
 8012380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012382:	17db      	asrs	r3, r3, #31
 8012384:	63bb      	str	r3, [r7, #56]	; 0x38
 8012386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012388:	f1c3 031f 	rsb	r3, r3, #31
 801238c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801238e:	fa42 f303 	asr.w	r3, r2, r3
 8012392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012394:	429a      	cmp	r2, r3
 8012396:	d008      	beq.n	80123aa <xmp3_FDCT32+0xe1a>
 8012398:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801239c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801239e:	fa22 f303 	lsr.w	r3, r2, r3
 80123a2:	3b01      	subs	r3, #1
 80123a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80123a6:	4053      	eors	r3, r2
 80123a8:	673b      	str	r3, [r7, #112]	; 0x70
 80123aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80123ac:	3320      	adds	r3, #32
 80123ae:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80123b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80123b2:	fa01 f202 	lsl.w	r2, r1, r2
 80123b6:	601a      	str	r2, [r3, #0]
 80123b8:	681a      	ldr	r2, [r3, #0]
 80123ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80123bc:	601a      	str	r2, [r3, #0]
 80123be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80123c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80123c4:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 15; i >= 0; i--) {
 80123c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80123c8:	3b01      	subs	r3, #1
 80123ca:	677b      	str	r3, [r7, #116]	; 0x74
 80123cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	dad3      	bge.n	801237a <xmp3_FDCT32+0xdea>
		}
	}
}
 80123d2:	bf00      	nop
 80123d4:	3778      	adds	r7, #120	; 0x78
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}
 80123da:	bf00      	nop

080123dc <CLZ>:

	return t;
}

static __inline int CLZ(int x)
{
 80123dc:	b480      	push	{r7}
 80123de:	b085      	sub	sp, #20
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
	int numZeros;

	if (!x)
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d101      	bne.n	80123ee <CLZ+0x12>
		return (sizeof(int) * 8);
 80123ea:	2320      	movs	r3, #32
 80123ec:	e00c      	b.n	8012408 <CLZ+0x2c>

	numZeros = 0;
 80123ee:	2300      	movs	r3, #0
 80123f0:	60fb      	str	r3, [r7, #12]
	while (!(x & 0x80000000)) {
 80123f2:	e005      	b.n	8012400 <CLZ+0x24>
		numZeros++;
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	3301      	adds	r3, #1
 80123f8:	60fb      	str	r3, [r7, #12]
		x <<= 1;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	005b      	lsls	r3, r3, #1
 80123fe:	607b      	str	r3, [r7, #4]
	while (!(x & 0x80000000)) {
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2b00      	cmp	r3, #0
 8012404:	daf6      	bge.n	80123f4 <CLZ+0x18>
	} 

	return numZeros;
 8012406:	68fb      	ldr	r3, [r7, #12]
}
 8012408:	4618      	mov	r0, r3
 801240a:	3714      	adds	r7, #20
 801240c:	46bd      	mov	sp, r7
 801240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012412:	4770      	bx	lr

08012414 <xmp3_Dequantize>:
 *                round to PCM (>> by 15 less than we otherwise would have).
 *              Equivalently, we can think of the dequantized coefficients as 
 *                Q(DQ_FRACBITS_OUT - 15) with no implicit bias. 
 **************************************************************************************/
int Dequantize(MP3DecInfo *mp3DecInfo, int gr)
{
 8012414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012416:	b095      	sub	sp, #84	; 0x54
 8012418:	af06      	add	r7, sp, #24
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	6039      	str	r1, [r7, #0]
	HuffmanInfo *hi;
	DequantInfo *di;
	CriticalBandInfo *cbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d013      	beq.n	801244c <xmp3_Dequantize+0x38>
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d00f      	beq.n	801244c <xmp3_Dequantize+0x38>
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	685b      	ldr	r3, [r3, #4]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d00b      	beq.n	801244c <xmp3_Dequantize+0x38>
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	689b      	ldr	r3, [r3, #8]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d007      	beq.n	801244c <xmp3_Dequantize+0x38>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	68db      	ldr	r3, [r3, #12]
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 8012440:	2b00      	cmp	r3, #0
 8012442:	d003      	beq.n	801244c <xmp3_Dequantize+0x38>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	691b      	ldr	r3, [r3, #16]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d102      	bne.n	8012452 <xmp3_Dequantize+0x3e>
		return -1;
 801244c:	f04f 33ff 	mov.w	r3, #4294967295
 8012450:	e1a2      	b.n	8012798 <xmp3_Dequantize+0x384>

	fh = (FrameHeader *)(mp3DecInfo->FrameHeaderPS);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	62bb      	str	r3, [r7, #40]	; 0x28

	/* si is an array of up to 4 structs, stored as gr0ch0, gr0ch1, gr1ch0, gr1ch1 */
	si = (SideInfo *)(mp3DecInfo->SideInfoPS);
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	685b      	ldr	r3, [r3, #4]
 801245c:	627b      	str	r3, [r7, #36]	; 0x24
	sfi = (ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	689b      	ldr	r3, [r3, #8]
 8012462:	623b      	str	r3, [r7, #32]
	hi = (HuffmanInfo *)mp3DecInfo->HuffmanInfoPS;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	68db      	ldr	r3, [r3, #12]
 8012468:	61fb      	str	r3, [r7, #28]
	di = (DequantInfo *)mp3DecInfo->DequantInfoPS;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	691b      	ldr	r3, [r3, #16]
 801246e:	61bb      	str	r3, [r7, #24]
	cbi = di->cbi;
 8012470:	69bb      	ldr	r3, [r7, #24]
 8012472:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8012476:	617b      	str	r3, [r7, #20]
	mOut[0] = mOut[1] = 0;
 8012478:	2300      	movs	r3, #0
 801247a:	613b      	str	r3, [r7, #16]
 801247c:	693b      	ldr	r3, [r7, #16]
 801247e:	60fb      	str	r3, [r7, #12]

	/* dequantize all the samples in each channel */
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 8012480:	2300      	movs	r3, #0
 8012482:	633b      	str	r3, [r7, #48]	; 0x30
 8012484:	e045      	b.n	8012512 <xmp3_Dequantize+0xfe>
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 8012486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012488:	4613      	mov	r3, r2
 801248a:	00db      	lsls	r3, r3, #3
 801248c:	4413      	add	r3, r2
 801248e:	021b      	lsls	r3, r3, #8
 8012490:	69fa      	ldr	r2, [r7, #28]
 8012492:	18d4      	adds	r4, r2, r3
 8012494:	69bd      	ldr	r5, [r7, #24]
 8012496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012498:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801249c:	009b      	lsls	r3, r3, #2
 801249e:	69fa      	ldr	r2, [r7, #28]
 80124a0:	18d6      	adds	r6, r2, r3
 80124a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a4:	461a      	mov	r2, r3
 80124a6:	00d2      	lsls	r2, r2, #3
 80124a8:	441a      	add	r2, r3
 80124aa:	00d3      	lsls	r3, r2, #3
 80124ac:	461a      	mov	r2, r3
 80124ae:	6839      	ldr	r1, [r7, #0]
 80124b0:	460b      	mov	r3, r1
 80124b2:	00db      	lsls	r3, r3, #3
 80124b4:	440b      	add	r3, r1
 80124b6:	011b      	lsls	r3, r3, #4
 80124b8:	4413      	add	r3, r2
 80124ba:	3328      	adds	r3, #40	; 0x28
 80124bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124be:	18d0      	adds	r0, r2, r3
 80124c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c2:	461a      	mov	r2, r3
 80124c4:	0152      	lsls	r2, r2, #5
 80124c6:	1ad2      	subs	r2, r2, r3
 80124c8:	0053      	lsls	r3, r2, #1
 80124ca:	461a      	mov	r2, r3
 80124cc:	6839      	ldr	r1, [r7, #0]
 80124ce:	460b      	mov	r3, r1
 80124d0:	015b      	lsls	r3, r3, #5
 80124d2:	1a5b      	subs	r3, r3, r1
 80124d4:	009b      	lsls	r3, r3, #2
 80124d6:	4413      	add	r3, r2
 80124d8:	6a3a      	ldr	r2, [r7, #32]
 80124da:	18d1      	adds	r1, r2, r3
			&si->sis[gr][ch], &sfi->sfis[gr][ch], &cbi[ch]);
 80124dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124de:	4613      	mov	r3, r2
 80124e0:	005b      	lsls	r3, r3, #1
 80124e2:	4413      	add	r3, r2
 80124e4:	00db      	lsls	r3, r3, #3
 80124e6:	461a      	mov	r2, r3
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 80124e8:	697b      	ldr	r3, [r7, #20]
 80124ea:	4413      	add	r3, r2
 80124ec:	9302      	str	r3, [sp, #8]
 80124ee:	9101      	str	r1, [sp, #4]
 80124f0:	9000      	str	r0, [sp, #0]
 80124f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f4:	4632      	mov	r2, r6
 80124f6:	4629      	mov	r1, r5
 80124f8:	4620      	mov	r0, r4
 80124fa:	f000 fab3 	bl	8012a64 <xmp3_DequantChannel>
 80124fe:	4601      	mov	r1, r0
 8012500:	69fb      	ldr	r3, [r7, #28]
 8012502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012504:	f202 4282 	addw	r2, r2, #1154	; 0x482
 8012508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 801250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801250e:	3301      	adds	r3, #1
 8012510:	633b      	str	r3, [r7, #48]	; 0x30
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 8012518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801251a:	429a      	cmp	r2, r3
 801251c:	dbb3      	blt.n	8012486 <xmp3_Dequantize+0x72>
	/* joint stereo processing assumes one guard bit in input samples
	 * it's extremely rare not to have at least one gb, so if this is the case
	 *   just make a pass over the data and clip to [-2^30+1, 2^30-1]
	 * in practice this may never happen
	 */
	if (fh->modeExt && (hi->gb[0] < 1 || hi->gb[1] < 1)) {
 801251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012520:	6a1b      	ldr	r3, [r3, #32]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d063      	beq.n	80125ee <xmp3_Dequantize+0x1da>
 8012526:	69fb      	ldr	r3, [r7, #28]
 8012528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801252c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8012530:	2b00      	cmp	r3, #0
 8012532:	dd06      	ble.n	8012542 <xmp3_Dequantize+0x12e>
 8012534:	69fb      	ldr	r3, [r7, #28]
 8012536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801253a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801253e:	2b00      	cmp	r3, #0
 8012540:	dc55      	bgt.n	80125ee <xmp3_Dequantize+0x1da>
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 8012542:	2300      	movs	r3, #0
 8012544:	637b      	str	r3, [r7, #52]	; 0x34
 8012546:	e01b      	b.n	8012580 <xmp3_Dequantize+0x16c>
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
 8012548:	69fb      	ldr	r3, [r7, #28]
 801254a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801254c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012550:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8012554:	dc04      	bgt.n	8012560 <xmp3_Dequantize+0x14c>
 8012556:	69fb      	ldr	r3, [r7, #28]
 8012558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801255a:	4991      	ldr	r1, [pc, #580]	; (80127a0 <xmp3_Dequantize+0x38c>)
 801255c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if (hi->huffDecBuf[0][i] >  0x3fffffff)	 hi->huffDecBuf[0][i] =  0x3fffffff;
 8012560:	69fb      	ldr	r3, [r7, #28]
 8012562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801256c:	db05      	blt.n	801257a <xmp3_Dequantize+0x166>
 801256e:	69fb      	ldr	r3, [r7, #28]
 8012570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012572:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8012576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 801257a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801257c:	3301      	adds	r3, #1
 801257e:	637b      	str	r3, [r7, #52]	; 0x34
 8012580:	69fb      	ldr	r3, [r7, #28]
 8012582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012586:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801258a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801258c:	429a      	cmp	r2, r3
 801258e:	dbdb      	blt.n	8012548 <xmp3_Dequantize+0x134>
		}
		for (i = 0; i < hi->nonZeroBound[1]; i++) {
 8012590:	2300      	movs	r3, #0
 8012592:	637b      	str	r3, [r7, #52]	; 0x34
 8012594:	e023      	b.n	80125de <xmp3_Dequantize+0x1ca>
			if (hi->huffDecBuf[1][i] < -0x3fffffff)	 hi->huffDecBuf[1][i] = -0x3fffffff;
 8012596:	69fb      	ldr	r3, [r7, #28]
 8012598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801259a:	f502 7210 	add.w	r2, r2, #576	; 0x240
 801259e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125a2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80125a6:	dc06      	bgt.n	80125b6 <xmp3_Dequantize+0x1a2>
 80125a8:	69fb      	ldr	r3, [r7, #28]
 80125aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125ac:	f502 7210 	add.w	r2, r2, #576	; 0x240
 80125b0:	497b      	ldr	r1, [pc, #492]	; (80127a0 <xmp3_Dequantize+0x38c>)
 80125b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
 80125b6:	69fb      	ldr	r3, [r7, #28]
 80125b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125ba:	f502 7210 	add.w	r2, r2, #576	; 0x240
 80125be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80125c6:	db07      	blt.n	80125d8 <xmp3_Dequantize+0x1c4>
 80125c8:	69fb      	ldr	r3, [r7, #28]
 80125ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125cc:	f502 7210 	add.w	r2, r2, #576	; 0x240
 80125d0:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 80125d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0; i < hi->nonZeroBound[1]; i++) {
 80125d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125da:	3301      	adds	r3, #1
 80125dc:	637b      	str	r3, [r7, #52]	; 0x34
 80125de:	69fb      	ldr	r3, [r7, #28]
 80125e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80125e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80125e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125ea:	429a      	cmp	r2, r3
 80125ec:	dbd3      	blt.n	8012596 <xmp3_Dequantize+0x182>
		}
	}

	/* do mid-side stereo processing, if enabled */
	if (fh->modeExt >> 1) {
 80125ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125f0:	6a1b      	ldr	r3, [r3, #32]
 80125f2:	105b      	asrs	r3, r3, #1
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d03a      	beq.n	801266e <xmp3_Dequantize+0x25a>
		if (fh->modeExt & 0x01) {
 80125f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125fa:	6a1b      	ldr	r3, [r3, #32]
 80125fc:	f003 0301 	and.w	r3, r3, #1
 8012600:	2b00      	cmp	r3, #0
 8012602:	d01f      	beq.n	8012644 <xmp3_Dequantize+0x230>
			/* intensity stereo enabled - run mid-side up to start of right zero region */
			if (cbi[1].cbType == 0)
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	3318      	adds	r3, #24
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d109      	bne.n	8012622 <xmp3_Dequantize+0x20e>
				nSamps = fh->sfBand->l[cbi[1].cbEndL + 1];
 801260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012612:	697a      	ldr	r2, [r7, #20]
 8012614:	3218      	adds	r2, #24
 8012616:	6952      	ldr	r2, [r2, #20]
 8012618:	3201      	adds	r2, #1
 801261a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801261e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012620:	e01e      	b.n	8012660 <xmp3_Dequantize+0x24c>
			else 
				nSamps = 3 * fh->sfBand->s[cbi[1].cbEndSMax + 1];
 8012622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	3318      	adds	r3, #24
 801262a:	691b      	ldr	r3, [r3, #16]
 801262c:	3301      	adds	r3, #1
 801262e:	3314      	adds	r3, #20
 8012630:	005b      	lsls	r3, r3, #1
 8012632:	4413      	add	r3, r2
 8012634:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012638:	461a      	mov	r2, r3
 801263a:	4613      	mov	r3, r2
 801263c:	005b      	lsls	r3, r3, #1
 801263e:	4413      	add	r3, r2
 8012640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012642:	e00d      	b.n	8012660 <xmp3_Dequantize+0x24c>
		} else {
			/* intensity stereo disabled - run mid-side on whole spectrum */
			nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 8012644:	69fb      	ldr	r3, [r7, #28]
 8012646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801264a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801264e:	69fb      	ldr	r3, [r7, #28]
 8012650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012654:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012658:	4293      	cmp	r3, r2
 801265a:	bfb8      	it	lt
 801265c:	4613      	movlt	r3, r2
 801265e:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		MidSideProc(hi->huffDecBuf, nSamps, mOut);
 8012660:	69fb      	ldr	r3, [r7, #28]
 8012662:	f107 020c 	add.w	r2, r7, #12
 8012666:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012668:	4618      	mov	r0, r3
 801266a:	f003 fbcb 	bl	8015e04 <xmp3_MidSideProc>
	}

	/* do intensity stereo processing, if enabled */
	if (fh->modeExt & 0x01) {
 801266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012670:	6a1b      	ldr	r3, [r3, #32]
 8012672:	f003 0301 	and.w	r3, r3, #1
 8012676:	2b00      	cmp	r3, #0
 8012678:	d057      	beq.n	801272a <xmp3_Dequantize+0x316>
		nSamps = hi->nonZeroBound[0];
 801267a:	69fb      	ldr	r3, [r7, #28]
 801267c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012680:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012684:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (fh->ver == MPEG1) {
 8012686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012688:	781b      	ldrb	r3, [r3, #0]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d124      	bne.n	80126d8 <xmp3_Dequantize+0x2c4>
			IntensityProcMPEG1(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, 
 801268e:	69fd      	ldr	r5, [r7, #28]
 8012690:	683a      	ldr	r2, [r7, #0]
 8012692:	4613      	mov	r3, r2
 8012694:	015b      	lsls	r3, r3, #5
 8012696:	1a9b      	subs	r3, r3, r2
 8012698:	009b      	lsls	r3, r3, #2
 801269a:	333e      	adds	r3, #62	; 0x3e
 801269c:	6a3a      	ldr	r2, [r7, #32]
 801269e:	18d6      	adds	r6, r2, r3
 80126a0:	69bb      	ldr	r3, [r7, #24]
 80126a2:	f503 7146 	add.w	r1, r3, #792	; 0x318
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
 80126a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a8:	6a1b      	ldr	r3, [r3, #32]
			IntensityProcMPEG1(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, 
 80126aa:	1058      	asrs	r0, r3, #1
 80126ac:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80126ae:	683a      	ldr	r2, [r7, #0]
 80126b0:	4613      	mov	r3, r2
 80126b2:	00db      	lsls	r3, r3, #3
 80126b4:	4413      	add	r3, r2
 80126b6:	011b      	lsls	r3, r3, #4
 80126b8:	4423      	add	r3, r4
 80126ba:	3388      	adds	r3, #136	; 0x88
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	f107 020c 	add.w	r2, r7, #12
 80126c2:	9203      	str	r2, [sp, #12]
 80126c4:	9302      	str	r3, [sp, #8]
 80126c6:	9001      	str	r0, [sp, #4]
 80126c8:	9100      	str	r1, [sp, #0]
 80126ca:	4633      	mov	r3, r6
 80126cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80126ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80126d0:	4628      	mov	r0, r5
 80126d2:	f003 fbf1 	bl	8015eb8 <xmp3_IntensityProcMPEG1>
 80126d6:	e028      	b.n	801272a <xmp3_Dequantize+0x316>
		} else {
			IntensityProcMPEG2(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, &sfi->sfjs,
 80126d8:	69fe      	ldr	r6, [r7, #28]
 80126da:	683a      	ldr	r2, [r7, #0]
 80126dc:	4613      	mov	r3, r2
 80126de:	015b      	lsls	r3, r3, #5
 80126e0:	1a9b      	subs	r3, r3, r2
 80126e2:	009b      	lsls	r3, r3, #2
 80126e4:	333e      	adds	r3, #62	; 0x3e
 80126e6:	6a3a      	ldr	r2, [r7, #32]
 80126e8:	eb02 0c03 	add.w	ip, r2, r3
 80126ec:	69bb      	ldr	r3, [r7, #24]
 80126ee:	f503 7146 	add.w	r1, r3, #792	; 0x318
 80126f2:	6a3b      	ldr	r3, [r7, #32]
 80126f4:	f103 00f8 	add.w	r0, r3, #248	; 0xf8
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
 80126f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126fa:	6a1b      	ldr	r3, [r3, #32]
			IntensityProcMPEG2(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, &sfi->sfjs,
 80126fc:	105c      	asrs	r4, r3, #1
 80126fe:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8012700:	683a      	ldr	r2, [r7, #0]
 8012702:	4613      	mov	r3, r2
 8012704:	00db      	lsls	r3, r3, #3
 8012706:	4413      	add	r3, r2
 8012708:	011b      	lsls	r3, r3, #4
 801270a:	442b      	add	r3, r5
 801270c:	3388      	adds	r3, #136	; 0x88
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	f107 020c 	add.w	r2, r7, #12
 8012714:	9204      	str	r2, [sp, #16]
 8012716:	9303      	str	r3, [sp, #12]
 8012718:	9402      	str	r4, [sp, #8]
 801271a:	9001      	str	r0, [sp, #4]
 801271c:	9100      	str	r1, [sp, #0]
 801271e:	4663      	mov	r3, ip
 8012720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012724:	4630      	mov	r0, r6
 8012726:	f003 fdc5 	bl	80162b4 <xmp3_IntensityProcMPEG2>
		}
	}

	/* adjust guard bit count and nonZeroBound if we did any stereo processing */
	if (fh->modeExt) {
 801272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801272c:	6a1b      	ldr	r3, [r3, #32]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d031      	beq.n	8012796 <xmp3_Dequantize+0x382>
		hi->gb[0] = CLZ(mOut[0]) - 1;
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	4618      	mov	r0, r3
 8012736:	f7ff fe51 	bl	80123dc <CLZ>
 801273a:	4603      	mov	r3, r0
 801273c:	3b01      	subs	r3, #1
 801273e:	69fa      	ldr	r2, [r7, #28]
 8012740:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8012744:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
		hi->gb[1] = CLZ(mOut[1]) - 1;
 8012748:	693b      	ldr	r3, [r7, #16]
 801274a:	4618      	mov	r0, r3
 801274c:	f7ff fe46 	bl	80123dc <CLZ>
 8012750:	4603      	mov	r3, r0
 8012752:	3b01      	subs	r3, #1
 8012754:	69fa      	ldr	r2, [r7, #28]
 8012756:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801275a:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 801275e:	69fb      	ldr	r3, [r7, #28]
 8012760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012764:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012768:	69fb      	ldr	r3, [r7, #28]
 801276a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801276e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012772:	4293      	cmp	r3, r2
 8012774:	bfb8      	it	lt
 8012776:	4613      	movlt	r3, r2
 8012778:	62fb      	str	r3, [r7, #44]	; 0x2c
		hi->nonZeroBound[0] = nSamps;
 801277a:	69fb      	ldr	r3, [r7, #28]
 801277c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012780:	461a      	mov	r2, r3
 8012782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012784:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
		hi->nonZeroBound[1] = nSamps;
 8012788:	69fb      	ldr	r3, [r7, #28]
 801278a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801278e:	461a      	mov	r2, r3
 8012790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012792:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	}

	/* output format Q(DQ_FRACBITS_OUT) */
	return 0;
 8012796:	2300      	movs	r3, #0
}
 8012798:	4618      	mov	r0, r3
 801279a:	373c      	adds	r7, #60	; 0x3c
 801279c:	46bd      	mov	sp, r7
 801279e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127a0:	c0000001 	.word	0xc0000001

080127a4 <MULSHIFT32>:
{
 80127a4:	b480      	push	{r7}
 80127a6:	b085      	sub	sp, #20
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
 80127ac:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80127ae:	6879      	ldr	r1, [r7, #4]
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	fb81 2303 	smull	r2, r3, r1, r3
 80127b6:	60fa      	str	r2, [r7, #12]
 80127b8:	603b      	str	r3, [r7, #0]
    return y;
 80127ba:	683b      	ldr	r3, [r7, #0]
}
 80127bc:	4618      	mov	r0, r3
 80127be:	3714      	adds	r7, #20
 80127c0:	46bd      	mov	sp, r7
 80127c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c6:	4770      	bx	lr

080127c8 <CLZ>:
{
 80127c8:	b480      	push	{r7}
 80127ca:	b085      	sub	sp, #20
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
	if (!x)
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d101      	bne.n	80127da <CLZ+0x12>
		return (sizeof(int) * 8);
 80127d6:	2320      	movs	r3, #32
 80127d8:	e00c      	b.n	80127f4 <CLZ+0x2c>
	numZeros = 0;
 80127da:	2300      	movs	r3, #0
 80127dc:	60fb      	str	r3, [r7, #12]
	while (!(x & 0x80000000)) {
 80127de:	e005      	b.n	80127ec <CLZ+0x24>
		numZeros++;
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	3301      	adds	r3, #1
 80127e4:	60fb      	str	r3, [r7, #12]
		x <<= 1;
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	005b      	lsls	r3, r3, #1
 80127ea:	607b      	str	r3, [r7, #4]
	while (!(x & 0x80000000)) {
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	daf6      	bge.n	80127e0 <CLZ+0x18>
	return numZeros;
 80127f2:	68fb      	ldr	r3, [r7, #12]
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	3714      	adds	r7, #20
 80127f8:	46bd      	mov	sp, r7
 80127fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fe:	4770      	bx	lr

08012800 <DequantBlock>:
 * Outputs:     dequantized samples in Q25 format
 *
 * Return:      bitwise-OR of the unsigned outputs (for guard bit calculations)
 **************************************************************************************/
static int DequantBlock(int *inbuf, int *outbuf, int num, int scale)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b092      	sub	sp, #72	; 0x48
 8012804:	af00      	add	r7, sp, #0
 8012806:	60f8      	str	r0, [r7, #12]
 8012808:	60b9      	str	r1, [r7, #8]
 801280a:	607a      	str	r2, [r7, #4]
 801280c:	603b      	str	r3, [r7, #0]
	int tab4[4];
	int scalef, scalei, shift;
	int sx, x, y;
	int mask = 0;
 801280e:	2300      	movs	r3, #0
 8012810:	63bb      	str	r3, [r7, #56]	; 0x38
	const int *tab16, *coef;

	tab16 = pow43_14[scale & 0x3];
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	f003 0303 	and.w	r3, r3, #3
 8012818:	019b      	lsls	r3, r3, #6
 801281a:	4a8a      	ldr	r2, [pc, #552]	; (8012a44 <DequantBlock+0x244>)
 801281c:	4413      	add	r3, r2
 801281e:	637b      	str	r3, [r7, #52]	; 0x34
	scalef = pow14[scale & 0x3];
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	f003 0303 	and.w	r3, r3, #3
 8012826:	4a88      	ldr	r2, [pc, #544]	; (8012a48 <DequantBlock+0x248>)
 8012828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801282c:	633b      	str	r3, [r7, #48]	; 0x30
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	109b      	asrs	r3, r3, #2
 8012832:	2b1f      	cmp	r3, #31
 8012834:	bfa8      	it	ge
 8012836:	231f      	movge	r3, #31
 8012838:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* cache first 4 values */
	shift = MIN(scalei + 3, 31);
 801283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801283c:	2b1c      	cmp	r3, #28
 801283e:	bfa8      	it	ge
 8012840:	231c      	movge	r3, #28
 8012842:	3303      	adds	r3, #3
 8012844:	647b      	str	r3, [r7, #68]	; 0x44
	shift = MAX(shift, 0);
 8012846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012848:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801284c:	647b      	str	r3, [r7, #68]	; 0x44
	tab4[0] = 0;
 801284e:	2300      	movs	r3, #0
 8012850:	617b      	str	r3, [r7, #20]
	tab4[1] = tab16[1] >> shift;
 8012852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012854:	3304      	adds	r3, #4
 8012856:	681a      	ldr	r2, [r3, #0]
 8012858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801285a:	fa42 f303 	asr.w	r3, r2, r3
 801285e:	61bb      	str	r3, [r7, #24]
	tab4[2] = tab16[2] >> shift;
 8012860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012862:	3308      	adds	r3, #8
 8012864:	681a      	ldr	r2, [r3, #0]
 8012866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012868:	fa42 f303 	asr.w	r3, r2, r3
 801286c:	61fb      	str	r3, [r7, #28]
	tab4[3] = tab16[3] >> shift;
 801286e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012870:	330c      	adds	r3, #12
 8012872:	681a      	ldr	r2, [r3, #0]
 8012874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012876:	fa42 f303 	asr.w	r3, r2, r3
 801287a:	623b      	str	r3, [r7, #32]

	do {

		sx = *inbuf++;
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	1d1a      	adds	r2, r3, #4
 8012880:	60fa      	str	r2, [r7, #12]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	62bb      	str	r3, [r7, #40]	; 0x28
		x = sx & 0x7fffffff;	/* sx = sign|mag */
 8012886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801288c:	643b      	str	r3, [r7, #64]	; 0x40

		if (x < 4) {
 801288e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012890:	2b03      	cmp	r3, #3
 8012892:	dc07      	bgt.n	80128a4 <DequantBlock+0xa4>

			y = tab4[x];
 8012894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012896:	009b      	lsls	r3, r3, #2
 8012898:	3348      	adds	r3, #72	; 0x48
 801289a:	443b      	add	r3, r7
 801289c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80128a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80128a2:	e0b3      	b.n	8012a0c <DequantBlock+0x20c>

		} else if (x < 16) {
 80128a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128a6:	2b0f      	cmp	r3, #15
 80128a8:	dc14      	bgt.n	80128d4 <DequantBlock+0xd4>

			y = tab16[x];
 80128aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128ac:	009b      	lsls	r3, r3, #2
 80128ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80128b0:	4413      	add	r3, r2
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	63fb      	str	r3, [r7, #60]	; 0x3c
			y = (scalei < 0) ? y << -scalei : y >> scalei;
 80128b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	da05      	bge.n	80128c8 <DequantBlock+0xc8>
 80128bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128be:	425b      	negs	r3, r3
 80128c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80128c2:	fa02 f303 	lsl.w	r3, r2, r3
 80128c6:	e003      	b.n	80128d0 <DequantBlock+0xd0>
 80128c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80128ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128cc:	fa42 f303 	asr.w	r3, r2, r3
 80128d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80128d2:	e09b      	b.n	8012a0c <DequantBlock+0x20c>

		} else {

			if (x < 64) {
 80128d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128d6:	2b3f      	cmp	r3, #63	; 0x3f
 80128d8:	dc0e      	bgt.n	80128f8 <DequantBlock+0xf8>

				y = pow43[x-16];
 80128da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128dc:	3b10      	subs	r3, #16
 80128de:	4a5b      	ldr	r2, [pc, #364]	; (8012a4c <DequantBlock+0x24c>)
 80128e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80128e4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* fractional scale */
				y = MULSHIFT32(y, scalef);
 80128e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80128e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80128ea:	f7ff ff5b 	bl	80127a4 <MULSHIFT32>
 80128ee:	63f8      	str	r0, [r7, #60]	; 0x3c
				shift = scalei - 3;
 80128f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f2:	3b03      	subs	r3, #3
 80128f4:	647b      	str	r3, [r7, #68]	; 0x44
 80128f6:	e06c      	b.n	80129d2 <DequantBlock+0x1d2>

			} else {

				/* normalize to [0x40000000, 0x7fffffff] */
				x <<= 17;
 80128f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128fa:	045b      	lsls	r3, r3, #17
 80128fc:	643b      	str	r3, [r7, #64]	; 0x40
				shift = 0;
 80128fe:	2300      	movs	r3, #0
 8012900:	647b      	str	r3, [r7, #68]	; 0x44
				if (x < 0x08000000)
 8012902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012908:	da05      	bge.n	8012916 <DequantBlock+0x116>
					x <<= 4, shift += 4;
 801290a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801290c:	011b      	lsls	r3, r3, #4
 801290e:	643b      	str	r3, [r7, #64]	; 0x40
 8012910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012912:	3304      	adds	r3, #4
 8012914:	647b      	str	r3, [r7, #68]	; 0x44
				if (x < 0x20000000)
 8012916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801291c:	da05      	bge.n	801292a <DequantBlock+0x12a>
					x <<= 2, shift += 2;
 801291e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012920:	009b      	lsls	r3, r3, #2
 8012922:	643b      	str	r3, [r7, #64]	; 0x40
 8012924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012926:	3302      	adds	r3, #2
 8012928:	647b      	str	r3, [r7, #68]	; 0x44
				if (x < 0x40000000)
 801292a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801292c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012930:	da05      	bge.n	801293e <DequantBlock+0x13e>
					x <<= 1, shift += 1;
 8012932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012934:	005b      	lsls	r3, r3, #1
 8012936:	643b      	str	r3, [r7, #64]	; 0x40
 8012938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801293a:	3301      	adds	r3, #1
 801293c:	647b      	str	r3, [r7, #68]	; 0x44

				coef = (x < SQRTHALF) ? poly43lo : poly43hi;
 801293e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012940:	4a43      	ldr	r2, [pc, #268]	; (8012a50 <DequantBlock+0x250>)
 8012942:	4293      	cmp	r3, r2
 8012944:	dc01      	bgt.n	801294a <DequantBlock+0x14a>
 8012946:	4b43      	ldr	r3, [pc, #268]	; (8012a54 <DequantBlock+0x254>)
 8012948:	e000      	b.n	801294c <DequantBlock+0x14c>
 801294a:	4b43      	ldr	r3, [pc, #268]	; (8012a58 <DequantBlock+0x258>)
 801294c:	627b      	str	r3, [r7, #36]	; 0x24

				/* polynomial */
				y = coef[0];
 801294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	63fb      	str	r3, [r7, #60]	; 0x3c
				y = MULSHIFT32(y, x) + coef[1];
 8012954:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012956:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012958:	f7ff ff24 	bl	80127a4 <MULSHIFT32>
 801295c:	4602      	mov	r2, r0
 801295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012960:	3304      	adds	r3, #4
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	4413      	add	r3, r2
 8012966:	63fb      	str	r3, [r7, #60]	; 0x3c
				y = MULSHIFT32(y, x) + coef[2];
 8012968:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801296a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801296c:	f7ff ff1a 	bl	80127a4 <MULSHIFT32>
 8012970:	4602      	mov	r2, r0
 8012972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012974:	3308      	adds	r3, #8
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	4413      	add	r3, r2
 801297a:	63fb      	str	r3, [r7, #60]	; 0x3c
				y = MULSHIFT32(y, x) + coef[3];
 801297c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801297e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012980:	f7ff ff10 	bl	80127a4 <MULSHIFT32>
 8012984:	4602      	mov	r2, r0
 8012986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012988:	330c      	adds	r3, #12
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	4413      	add	r3, r2
 801298e:	63fb      	str	r3, [r7, #60]	; 0x3c
				y = MULSHIFT32(y, x) + coef[4];
 8012990:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012992:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012994:	f7ff ff06 	bl	80127a4 <MULSHIFT32>
 8012998:	4602      	mov	r2, r0
 801299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801299c:	3310      	adds	r3, #16
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	4413      	add	r3, r2
 80129a2:	63fb      	str	r3, [r7, #60]	; 0x3c
				y = MULSHIFT32(y, pow2frac[shift]) << 3;
 80129a4:	4a2d      	ldr	r2, [pc, #180]	; (8012a5c <DequantBlock+0x25c>)
 80129a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129ac:	4619      	mov	r1, r3
 80129ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80129b0:	f7ff fef8 	bl	80127a4 <MULSHIFT32>
 80129b4:	4603      	mov	r3, r0
 80129b6:	00db      	lsls	r3, r3, #3
 80129b8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* fractional scale */
				y = MULSHIFT32(y, scalef);
 80129ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80129bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80129be:	f7ff fef1 	bl	80127a4 <MULSHIFT32>
 80129c2:	63f8      	str	r0, [r7, #60]	; 0x3c
				shift = scalei - pow2exp[shift];
 80129c4:	4a26      	ldr	r2, [pc, #152]	; (8012a60 <DequantBlock+0x260>)
 80129c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129ce:	1ad3      	subs	r3, r2, r3
 80129d0:	647b      	str	r3, [r7, #68]	; 0x44
			}

			/* integer scale */
			if (shift < 0) {
 80129d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	da14      	bge.n	8012a02 <DequantBlock+0x202>
				shift = -shift;
 80129d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129da:	425b      	negs	r3, r3
 80129dc:	647b      	str	r3, [r7, #68]	; 0x44
				if (y > (0x7fffffff >> shift))
 80129de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80129e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129e4:	fa42 f303 	asr.w	r3, r2, r3
 80129e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80129ea:	429a      	cmp	r2, r3
 80129ec:	dd03      	ble.n	80129f6 <DequantBlock+0x1f6>
					y = 0x7fffffff;		/* clip */
 80129ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80129f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80129f4:	e00a      	b.n	8012a0c <DequantBlock+0x20c>
				else
					y <<= shift;
 80129f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80129f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129fa:	fa02 f303 	lsl.w	r3, r2, r3
 80129fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012a00:	e004      	b.n	8012a0c <DequantBlock+0x20c>
			} else {
				y >>= shift;
 8012a02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a06:	fa42 f303 	asr.w	r3, r2, r3
 8012a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}

		/* sign and store */
		mask |= y;
 8012a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a10:	4313      	orrs	r3, r2
 8012a12:	63bb      	str	r3, [r7, #56]	; 0x38
		*outbuf++ = (sx < 0) ? -y : y;
 8012a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	da02      	bge.n	8012a20 <DequantBlock+0x220>
 8012a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a1c:	425a      	negs	r2, r3
 8012a1e:	e000      	b.n	8012a22 <DequantBlock+0x222>
 8012a20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	1d19      	adds	r1, r3, #4
 8012a26:	60b9      	str	r1, [r7, #8]
 8012a28:	601a      	str	r2, [r3, #0]

	} while (--num);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	3b01      	subs	r3, #1
 8012a2e:	607b      	str	r3, [r7, #4]
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	f47f af22 	bne.w	801287c <DequantBlock+0x7c>

	return mask;
 8012a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3748      	adds	r7, #72	; 0x48
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}
 8012a42:	bf00      	nop
 8012a44:	08017dd4 	.word	0x08017dd4
 8012a48:	08017dc4 	.word	0x08017dc4
 8012a4c:	08017ed4 	.word	0x08017ed4
 8012a50:	5a827999 	.word	0x5a827999
 8012a54:	08017f94 	.word	0x08017f94
 8012a58:	08017fa8 	.word	0x08017fa8
 8012a5c:	08017fdc 	.word	0x08017fdc
 8012a60:	08017fbc 	.word	0x08017fbc

08012a64 <xmp3_DequantChannel>:
 *
 * Notes:       dequantized samples in Q(DQ_FRACBITS_OUT) format 
 **************************************************************************************/
int DequantChannel(int *sampleBuf, int *workBuf, int *nonZeroBound, FrameHeader *fh, SideInfoSub *sis, 
					ScaleFactorInfoSub *sfis, CriticalBandInfo *cbi)
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b096      	sub	sp, #88	; 0x58
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	60f8      	str	r0, [r7, #12]
 8012a6c:	60b9      	str	r1, [r7, #8]
 8012a6e:	607a      	str	r2, [r7, #4]
 8012a70:	603b      	str	r3, [r7, #0]
	int globalGain, gainI;
	int cbMax[3];
	ARRAY3 *buf;    /* short block reorder */
	
	/* set default start/end points for short/long blocks - will update with non-zero cb info */
	if (sis->blockType == 2) {
 8012a72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012a74:	695b      	ldr	r3, [r3, #20]
 8012a76:	2b02      	cmp	r3, #2
 8012a78:	d117      	bne.n	8012aaa <xmp3_DequantChannel+0x46>
		cbStartL = 0;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	633b      	str	r3, [r7, #48]	; 0x30
		if (sis->mixedBlock) { 
 8012a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012a80:	699b      	ldr	r3, [r3, #24]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d00a      	beq.n	8012a9c <xmp3_DequantChannel+0x38>
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d101      	bne.n	8012a92 <xmp3_DequantChannel+0x2e>
 8012a8e:	2308      	movs	r3, #8
 8012a90:	e000      	b.n	8012a94 <xmp3_DequantChannel+0x30>
 8012a92:	2306      	movs	r3, #6
 8012a94:	647b      	str	r3, [r7, #68]	; 0x44
			cbStartS = 3; 
 8012a96:	2303      	movs	r3, #3
 8012a98:	643b      	str	r3, [r7, #64]	; 0x40
 8012a9a:	e003      	b.n	8012aa4 <xmp3_DequantChannel+0x40>
		} else {
			cbEndL = 0; 
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	647b      	str	r3, [r7, #68]	; 0x44
			cbStartS = 0;
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	643b      	str	r3, [r7, #64]	; 0x40
		}
		cbEndS = 13;
 8012aa4:	230d      	movs	r3, #13
 8012aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012aa8:	e007      	b.n	8012aba <xmp3_DequantChannel+0x56>
	} else {
		/* long block */
		cbStartL = 0;
 8012aaa:	2300      	movs	r3, #0
 8012aac:	633b      	str	r3, [r7, #48]	; 0x30
		cbEndL =   22;
 8012aae:	2316      	movs	r3, #22
 8012ab0:	647b      	str	r3, [r7, #68]	; 0x44
		cbStartS = 13;
 8012ab2:	230d      	movs	r3, #13
 8012ab4:	643b      	str	r3, [r7, #64]	; 0x40
		cbEndS =   13;
 8012ab6:	230d      	movs	r3, #13
 8012ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	cbMax[2] = cbMax[1] = cbMax[0] = 0;
 8012aba:	2300      	movs	r3, #0
 8012abc:	613b      	str	r3, [r7, #16]
 8012abe:	693b      	ldr	r3, [r7, #16]
 8012ac0:	617b      	str	r3, [r7, #20]
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	61bb      	str	r3, [r7, #24]
	gbMask = 0;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	63bb      	str	r3, [r7, #56]	; 0x38
	i = 0;
 8012aca:	2300      	movs	r3, #0
 8012acc:	657b      	str	r3, [r7, #84]	; 0x54

	/* sfactScale = 0 --> quantizer step size = 2
	 * sfactScale = 1 --> quantizer step size = sqrt(2)
	 *   so sfactMultiplier = 2 or 4 (jump through globalGain by powers of 2 or sqrt(2))
	 */
	sfactMultiplier = 2 * (sis->sfactScale + 1);
 8012ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ad2:	3301      	adds	r3, #1
 8012ad4:	005b      	lsls	r3, r3, #1
 8012ad6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* offset globalGain by -2 if midSide enabled, for 1/sqrt(2) used in MidSideProc()
	 *  (DequantBlock() does 0.25 * gainI so knocking it down by two is the same as 
	 *   dividing every sample by sqrt(2) = multiplying by 2^-.5)
	 */
	globalGain = sis->globalGain;
 8012ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ada:	689b      	ldr	r3, [r3, #8]
 8012adc:	637b      	str	r3, [r7, #52]	; 0x34
	if (fh->modeExt >> 1)
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	6a1b      	ldr	r3, [r3, #32]
 8012ae2:	105b      	asrs	r3, r3, #1
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d002      	beq.n	8012aee <xmp3_DequantChannel+0x8a>
		 globalGain -= 2;
 8012ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aea:	3b02      	subs	r3, #2
 8012aec:	637b      	str	r3, [r7, #52]	; 0x34
	globalGain += IMDCT_SCALE;		/* scale everything by sqrt(2), for fast IMDCT36 */
 8012aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012af0:	3302      	adds	r3, #2
 8012af2:	637b      	str	r3, [r7, #52]	; 0x34

	/* long blocks */
	for (cb = 0; cb < cbEndL; cb++) {
 8012af4:	2300      	movs	r3, #0
 8012af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8012af8:	e04c      	b.n	8012b94 <xmp3_DequantChannel+0x130>

		nonZero = 0;
 8012afa:	2300      	movs	r3, #0
 8012afc:	62bb      	str	r3, [r7, #40]	; 0x28
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012b04:	3201      	adds	r2, #1
 8012b06:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8012b0a:	4619      	mov	r1, r3
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012b12:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8012b16:	1acb      	subs	r3, r1, r3
 8012b18:	627b      	str	r3, [r7, #36]	; 0x24
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 8012b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b1c:	f1c3 02d2 	rsb	r2, r3, #210	; 0xd2
 8012b20:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b24:	440b      	add	r3, r1
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	4618      	mov	r0, r3
 8012b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d004      	beq.n	8012b3c <xmp3_DequantChannel+0xd8>
 8012b32:	498d      	ldr	r1, [pc, #564]	; (8012d68 <xmp3_DequantChannel+0x304>)
 8012b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b36:	440b      	add	r3, r1
 8012b38:	781b      	ldrb	r3, [r3, #0]
 8012b3a:	e000      	b.n	8012b3e <xmp3_DequantChannel+0xda>
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	4403      	add	r3, r0
 8012b40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012b42:	fb01 f303 	mul.w	r3, r1, r3
 8012b46:	4413      	add	r3, r2
 8012b48:	623b      	str	r3, [r7, #32]

		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 8012b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b4c:	009b      	lsls	r3, r3, #2
 8012b4e:	68fa      	ldr	r2, [r7, #12]
 8012b50:	18d0      	adds	r0, r2, r3
 8012b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b54:	009b      	lsls	r3, r3, #2
 8012b56:	68fa      	ldr	r2, [r7, #12]
 8012b58:	18d1      	adds	r1, r2, r3
 8012b5a:	6a3b      	ldr	r3, [r7, #32]
 8012b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b5e:	f7ff fe4f 	bl	8012800 <DequantBlock>
 8012b62:	4602      	mov	r2, r0
 8012b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b66:	4313      	orrs	r3, r2
 8012b68:	62bb      	str	r3, [r7, #40]	; 0x28
		i += nSamps;
 8012b6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b6e:	4413      	add	r3, r2
 8012b70:	657b      	str	r3, [r7, #84]	; 0x54

		/* update highest non-zero critical band */
		if (nonZero) 
 8012b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d001      	beq.n	8012b7c <xmp3_DequantChannel+0x118>
			cbMax[0] = cb;
 8012b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b7a:	613b      	str	r3, [r7, #16]
		gbMask |= nonZero;
 8012b7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b80:	4313      	orrs	r3, r2
 8012b82:	63bb      	str	r3, [r7, #56]	; 0x38

		if (i >= *nonZeroBound) 
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	da07      	bge.n	8012b9e <xmp3_DequantChannel+0x13a>
	for (cb = 0; cb < cbEndL; cb++) {
 8012b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b90:	3301      	adds	r3, #1
 8012b92:	64bb      	str	r3, [r7, #72]	; 0x48
 8012b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	dbae      	blt.n	8012afa <xmp3_DequantChannel+0x96>
 8012b9c:	e000      	b.n	8012ba0 <xmp3_DequantChannel+0x13c>
			break;
 8012b9e:	bf00      	nop
	}

	/* set cbi (Type, EndS[], EndSMax will be overwritten if we proceed to do short blocks) */
	cbi->cbType = 0;			/* long only */
 8012ba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	601a      	str	r2, [r3, #0]
	cbi->cbEndL  = cbMax[0];
 8012ba6:	693a      	ldr	r2, [r7, #16]
 8012ba8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012baa:	615a      	str	r2, [r3, #20]
	cbi->cbEndS[0] = cbi->cbEndS[1] = cbi->cbEndS[2] = 0;
 8012bac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012bae:	2200      	movs	r2, #0
 8012bb0:	60da      	str	r2, [r3, #12]
 8012bb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012bb4:	68da      	ldr	r2, [r3, #12]
 8012bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012bb8:	609a      	str	r2, [r3, #8]
 8012bba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012bbc:	689a      	ldr	r2, [r3, #8]
 8012bbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012bc0:	605a      	str	r2, [r3, #4]
	cbi->cbEndSMax = 0;
 8012bc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	611a      	str	r2, [r3, #16]

	/* early exit if no short blocks */
	if (cbStartS >= 12) 
 8012bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bca:	2b0b      	cmp	r3, #11
 8012bcc:	dd05      	ble.n	8012bda <xmp3_DequantChannel+0x176>
		return CLZ(gbMask) - 1;
 8012bce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012bd0:	f7ff fdfa 	bl	80127c8 <CLZ>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	3b01      	subs	r3, #1
 8012bd8:	e0ec      	b.n	8012db4 <xmp3_DequantChannel+0x350>
	
	/* short blocks */
	cbMax[2] = cbMax[1] = cbMax[0] = cbStartS;
 8012bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012bdc:	613b      	str	r3, [r7, #16]
 8012bde:	693b      	ldr	r3, [r7, #16]
 8012be0:	617b      	str	r3, [r7, #20]
 8012be2:	697b      	ldr	r3, [r7, #20]
 8012be4:	61bb      	str	r3, [r7, #24]
	for (cb = cbStartS; cb < cbEndS; cb++) {
 8012be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012be8:	64bb      	str	r3, [r7, #72]	; 0x48
 8012bea:	e0ac      	b.n	8012d46 <xmp3_DequantChannel+0x2e2>

		nSamps = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bf2:	3301      	adds	r3, #1
 8012bf4:	3314      	adds	r3, #20
 8012bf6:	005b      	lsls	r3, r3, #1
 8012bf8:	4413      	add	r3, r2
 8012bfa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012bfe:	4619      	mov	r1, r3
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c06:	3314      	adds	r3, #20
 8012c08:	005b      	lsls	r3, r3, #1
 8012c0a:	4413      	add	r3, r2
 8012c0c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012c10:	1acb      	subs	r3, r1, r3
 8012c12:	627b      	str	r3, [r7, #36]	; 0x24
		for (w = 0; w < 3; w++) {
 8012c14:	2300      	movs	r3, #0
 8012c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012c18:	e045      	b.n	8012ca6 <xmp3_DequantChannel+0x242>
			nonZero =  0;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	62bb      	str	r3, [r7, #40]	; 0x28
			gainI = 210 - globalGain + 8*sis->subBlockGain[w] + sfactMultiplier*(sfis->s[cb][w]);
 8012c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c20:	f1c3 02d2 	rsb	r2, r3, #210	; 0xd2
 8012c24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c26:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012c28:	310a      	adds	r1, #10
 8012c2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012c2e:	00db      	lsls	r3, r3, #3
 8012c30:	18d1      	adds	r1, r2, r3
 8012c32:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8012c34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c36:	4613      	mov	r3, r2
 8012c38:	005b      	lsls	r3, r3, #1
 8012c3a:	4413      	add	r3, r2
 8012c3c:	18c2      	adds	r2, r0, r3
 8012c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c40:	4413      	add	r3, r2
 8012c42:	3317      	adds	r3, #23
 8012c44:	781b      	ldrb	r3, [r3, #0]
 8012c46:	461a      	mov	r2, r3
 8012c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c4a:	fb02 f303 	mul.w	r3, r2, r3
 8012c4e:	440b      	add	r3, r1
 8012c50:	623b      	str	r3, [r7, #32]

			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 8012c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c56:	fb02 f303 	mul.w	r3, r2, r3
 8012c5a:	461a      	mov	r2, r3
 8012c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c5e:	4413      	add	r3, r2
 8012c60:	009b      	lsls	r3, r3, #2
 8012c62:	68fa      	ldr	r2, [r7, #12]
 8012c64:	18d0      	adds	r0, r2, r3
 8012c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012c6a:	fb02 f303 	mul.w	r3, r2, r3
 8012c6e:	009b      	lsls	r3, r3, #2
 8012c70:	68ba      	ldr	r2, [r7, #8]
 8012c72:	18d1      	adds	r1, r2, r3
 8012c74:	6a3b      	ldr	r3, [r7, #32]
 8012c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c78:	f7ff fdc2 	bl	8012800 <DequantBlock>
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c80:	4313      	orrs	r3, r2
 8012c82:	62bb      	str	r3, [r7, #40]	; 0x28

			/* update highest non-zero critical band */
			if (nonZero)
 8012c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d006      	beq.n	8012c98 <xmp3_DequantChannel+0x234>
				cbMax[w] = cb;
 8012c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c8c:	009b      	lsls	r3, r3, #2
 8012c8e:	3358      	adds	r3, #88	; 0x58
 8012c90:	443b      	add	r3, r7
 8012c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c94:	f843 2c48 	str.w	r2, [r3, #-72]
			gbMask |= nonZero;
 8012c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c9c:	4313      	orrs	r3, r2
 8012c9e:	63bb      	str	r3, [r7, #56]	; 0x38
		for (w = 0; w < 3; w++) {
 8012ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ca2:	3301      	adds	r3, #1
 8012ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ca8:	2b02      	cmp	r3, #2
 8012caa:	ddb6      	ble.n	8012c1a <xmp3_DequantChannel+0x1b6>
		}

		/* reorder blocks */
		buf = (ARRAY3 *)(sampleBuf + i);
 8012cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cae:	009b      	lsls	r3, r3, #2
 8012cb0:	68fa      	ldr	r2, [r7, #12]
 8012cb2:	4413      	add	r3, r2
 8012cb4:	61fb      	str	r3, [r7, #28]
		i += 3*nSamps;
 8012cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cb8:	4613      	mov	r3, r2
 8012cba:	005b      	lsls	r3, r3, #1
 8012cbc:	4413      	add	r3, r2
 8012cbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012cc0:	4413      	add	r3, r2
 8012cc2:	657b      	str	r3, [r7, #84]	; 0x54
		for (j = 0; j < nSamps; j++) {
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	653b      	str	r3, [r7, #80]	; 0x50
 8012cc8:	e031      	b.n	8012d2e <xmp3_DequantChannel+0x2ca>
			buf[j][0] = workBuf[0*nSamps + j];
 8012cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ccc:	009b      	lsls	r3, r3, #2
 8012cce:	68ba      	ldr	r2, [r7, #8]
 8012cd0:	18d1      	adds	r1, r2, r3
 8012cd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012cd4:	4613      	mov	r3, r2
 8012cd6:	005b      	lsls	r3, r3, #1
 8012cd8:	4413      	add	r3, r2
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	461a      	mov	r2, r3
 8012cde:	69fb      	ldr	r3, [r7, #28]
 8012ce0:	4413      	add	r3, r2
 8012ce2:	680a      	ldr	r2, [r1, #0]
 8012ce4:	601a      	str	r2, [r3, #0]
			buf[j][1] = workBuf[1*nSamps + j];
 8012ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cea:	4413      	add	r3, r2
 8012cec:	009b      	lsls	r3, r3, #2
 8012cee:	68ba      	ldr	r2, [r7, #8]
 8012cf0:	18d1      	adds	r1, r2, r3
 8012cf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012cf4:	4613      	mov	r3, r2
 8012cf6:	005b      	lsls	r3, r3, #1
 8012cf8:	4413      	add	r3, r2
 8012cfa:	009b      	lsls	r3, r3, #2
 8012cfc:	461a      	mov	r2, r3
 8012cfe:	69fb      	ldr	r3, [r7, #28]
 8012d00:	4413      	add	r3, r2
 8012d02:	680a      	ldr	r2, [r1, #0]
 8012d04:	605a      	str	r2, [r3, #4]
			buf[j][2] = workBuf[2*nSamps + j];
 8012d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d08:	005a      	lsls	r2, r3, #1
 8012d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d0c:	4413      	add	r3, r2
 8012d0e:	009b      	lsls	r3, r3, #2
 8012d10:	68ba      	ldr	r2, [r7, #8]
 8012d12:	18d1      	adds	r1, r2, r3
 8012d14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012d16:	4613      	mov	r3, r2
 8012d18:	005b      	lsls	r3, r3, #1
 8012d1a:	4413      	add	r3, r2
 8012d1c:	009b      	lsls	r3, r3, #2
 8012d1e:	461a      	mov	r2, r3
 8012d20:	69fb      	ldr	r3, [r7, #28]
 8012d22:	4413      	add	r3, r2
 8012d24:	680a      	ldr	r2, [r1, #0]
 8012d26:	609a      	str	r2, [r3, #8]
		for (j = 0; j < nSamps; j++) {
 8012d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d2a:	3301      	adds	r3, #1
 8012d2c:	653b      	str	r3, [r7, #80]	; 0x50
 8012d2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d32:	429a      	cmp	r2, r3
 8012d34:	dbc9      	blt.n	8012cca <xmp3_DequantChannel+0x266>
		}

		ASSERT(3*nSamps <= MAX_REORDER_SAMPS);

		if (i >= *nonZeroBound) 
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d3c:	429a      	cmp	r2, r3
 8012d3e:	da08      	bge.n	8012d52 <xmp3_DequantChannel+0x2ee>
	for (cb = cbStartS; cb < cbEndS; cb++) {
 8012d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d42:	3301      	adds	r3, #1
 8012d44:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	f6ff af4e 	blt.w	8012bec <xmp3_DequantChannel+0x188>
 8012d50:	e000      	b.n	8012d54 <xmp3_DequantChannel+0x2f0>
			break;
 8012d52:	bf00      	nop
	 * however, the original nzb is no longer necessarily true
	 *   for each cb, buf[][] is updated with 3*nSamps samples (i increases 3*nSamps each time)
	 *   (buf[j + 1][0] = 3 (input) samples ahead of buf[j][0])
     * so update nonZeroBound to i
	 */
	*nonZeroBound = i;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d58:	601a      	str	r2, [r3, #0]

	ASSERT(*nonZeroBound <= MAX_NSAMP);

	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 8012d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d5c:	699b      	ldr	r3, [r3, #24]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d004      	beq.n	8012d6c <xmp3_DequantChannel+0x308>
 8012d62:	2202      	movs	r2, #2
 8012d64:	e003      	b.n	8012d6e <xmp3_DequantChannel+0x30a>
 8012d66:	bf00      	nop
 8012d68:	08017dac 	.word	0x08017dac
 8012d6c:	2201      	movs	r2, #1
 8012d6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d70:	601a      	str	r2, [r3, #0]

	cbi->cbEndS[0] = cbMax[0];
 8012d72:	693a      	ldr	r2, [r7, #16]
 8012d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d76:	605a      	str	r2, [r3, #4]
	cbi->cbEndS[1] = cbMax[1];
 8012d78:	697a      	ldr	r2, [r7, #20]
 8012d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d7c:	609a      	str	r2, [r3, #8]
	cbi->cbEndS[2] = cbMax[2];
 8012d7e:	69ba      	ldr	r2, [r7, #24]
 8012d80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d82:	60da      	str	r2, [r3, #12]

	cbi->cbEndSMax = cbMax[0];
 8012d84:	693a      	ldr	r2, [r7, #16]
 8012d86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d88:	611a      	str	r2, [r3, #16]
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[1]);
 8012d8a:	697a      	ldr	r2, [r7, #20]
 8012d8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d8e:	691b      	ldr	r3, [r3, #16]
 8012d90:	429a      	cmp	r2, r3
 8012d92:	bfb8      	it	lt
 8012d94:	461a      	movlt	r2, r3
 8012d96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d98:	611a      	str	r2, [r3, #16]
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[2]);
 8012d9a:	69ba      	ldr	r2, [r7, #24]
 8012d9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d9e:	691b      	ldr	r3, [r3, #16]
 8012da0:	429a      	cmp	r2, r3
 8012da2:	bfb8      	it	lt
 8012da4:	461a      	movlt	r2, r3
 8012da6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012da8:	611a      	str	r2, [r3, #16]

	return CLZ(gbMask) - 1;
 8012daa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012dac:	f7ff fd0c 	bl	80127c8 <CLZ>
 8012db0:	4603      	mov	r3, r0
 8012db2:	3b01      	subs	r3, #1
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	3758      	adds	r7, #88	; 0x58
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}

08012dbc <DecodeHuffmanPairs>:
 * Notes:       assumes that nVals is an even number
 *              si_huff.bit tests every Huffman codeword in every table (though not
 *                necessarily all linBits outputs for x,y > 15)
 **************************************************************************************/
static int DecodeHuffmanPairs(int *xy, int nVals, int tabIdx, int bitsLeft, unsigned char *buf, int bitOffset)
{
 8012dbc:	b480      	push	{r7}
 8012dbe:	b095      	sub	sp, #84	; 0x54
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	60f8      	str	r0, [r7, #12]
 8012dc4:	60b9      	str	r1, [r7, #8]
 8012dc6:	607a      	str	r2, [r7, #4]
 8012dc8:	603b      	str	r3, [r7, #0]
	int cachedBits, padBits, len, startBits, linBits, maxBits, minBits;
	HuffTabType tabType;
	unsigned short cw, *tBase, *tCurr;
	unsigned int cache;

	if(nVals <= 0) 
 8012dca:	68bb      	ldr	r3, [r7, #8]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	dc01      	bgt.n	8012dd4 <DecodeHuffmanPairs+0x18>
		return 0;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	e2d8      	b.n	8013386 <DecodeHuffmanPairs+0x5ca>

	if (bitsLeft < 0)
 8012dd4:	683b      	ldr	r3, [r7, #0]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	da02      	bge.n	8012de0 <DecodeHuffmanPairs+0x24>
		return -1;
 8012dda:	f04f 33ff 	mov.w	r3, #4294967295
 8012dde:	e2d2      	b.n	8013386 <DecodeHuffmanPairs+0x5ca>
	startBits = bitsLeft;
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	633b      	str	r3, [r7, #48]	; 0x30

	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 8012de4:	4a9b      	ldr	r2, [pc, #620]	; (8013054 <DecodeHuffmanPairs+0x298>)
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012dec:	005b      	lsls	r3, r3, #1
 8012dee:	4a9a      	ldr	r2, [pc, #616]	; (8013058 <DecodeHuffmanPairs+0x29c>)
 8012df0:	4413      	add	r3, r2
 8012df2:	62fb      	str	r3, [r7, #44]	; 0x2c
	linBits = huffTabLookup[tabIdx].linBits;
 8012df4:	4a99      	ldr	r2, [pc, #612]	; (801305c <DecodeHuffmanPairs+0x2a0>)
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012dfc:	62bb      	str	r3, [r7, #40]	; 0x28
	tabType = huffTabLookup[tabIdx].tabType;
 8012dfe:	4a97      	ldr	r2, [pc, #604]	; (801305c <DecodeHuffmanPairs+0x2a0>)
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	00db      	lsls	r3, r3, #3
 8012e04:	4413      	add	r3, r2
 8012e06:	791b      	ldrb	r3, [r3, #4]
 8012e08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ASSERT(tabIdx < HUFF_PAIRTABS);
	ASSERT(tabIdx >= 0);
	ASSERT(tabType != invalidTab);

	/* initially fill cache with any partial byte */
	cache = 0;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	637b      	str	r3, [r7, #52]	; 0x34
	cachedBits = (8 - bitOffset) & 0x07;
 8012e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012e12:	425b      	negs	r3, r3
 8012e14:	f003 0307 	and.w	r3, r3, #7
 8012e18:	643b      	str	r3, [r7, #64]	; 0x40
	if (cachedBits)
 8012e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d00a      	beq.n	8012e36 <DecodeHuffmanPairs+0x7a>
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 8012e20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012e22:	1c5a      	adds	r2, r3, #1
 8012e24:	65ba      	str	r2, [r7, #88]	; 0x58
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	461a      	mov	r2, r3
 8012e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e2c:	f1c3 0320 	rsb	r3, r3, #32
 8012e30:	fa02 f303 	lsl.w	r3, r2, r3
 8012e34:	637b      	str	r3, [r7, #52]	; 0x34
	bitsLeft -= cachedBits;
 8012e36:	683a      	ldr	r2, [r7, #0]
 8012e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e3a:	1ad3      	subs	r3, r2, r3
 8012e3c:	603b      	str	r3, [r7, #0]

	if (tabType == noBits) {
 8012e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d118      	bne.n	8012e78 <DecodeHuffmanPairs+0xbc>
		/* table 0, no data, x = y = 0 */
		for (i = 0; i < nVals; i+=2) {
 8012e46:	2300      	movs	r3, #0
 8012e48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e4a:	e00f      	b.n	8012e6c <DecodeHuffmanPairs+0xb0>
			xy[i+0] = 0;
 8012e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e4e:	009b      	lsls	r3, r3, #2
 8012e50:	68fa      	ldr	r2, [r7, #12]
 8012e52:	4413      	add	r3, r2
 8012e54:	2200      	movs	r2, #0
 8012e56:	601a      	str	r2, [r3, #0]
			xy[i+1] = 0;
 8012e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e5a:	3301      	adds	r3, #1
 8012e5c:	009b      	lsls	r3, r3, #2
 8012e5e:	68fa      	ldr	r2, [r7, #12]
 8012e60:	4413      	add	r3, r2
 8012e62:	2200      	movs	r2, #0
 8012e64:	601a      	str	r2, [r3, #0]
		for (i = 0; i < nVals; i+=2) {
 8012e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e68:	3302      	adds	r3, #2
 8012e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	429a      	cmp	r2, r3
 8012e72:	dbeb      	blt.n	8012e4c <DecodeHuffmanPairs+0x90>
		}
		return 0;
 8012e74:	2300      	movs	r3, #0
 8012e76:	e286      	b.n	8013386 <DecodeHuffmanPairs+0x5ca>
	} else if (tabType == oneShot) {
 8012e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e7c:	2b01      	cmp	r3, #1
 8012e7e:	f040 80da 	bne.w	8013036 <DecodeHuffmanPairs+0x27a>
		/* single lookup, no escapes */
		maxBits = GetMaxbits(tBase[0]);
 8012e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e84:	881b      	ldrh	r3, [r3, #0]
 8012e86:	f003 030f 	and.w	r3, r3, #15
 8012e8a:	623b      	str	r3, [r7, #32]
		tBase++;
 8012e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e8e:	3302      	adds	r3, #2
 8012e90:	62fb      	str	r3, [r7, #44]	; 0x2c
		padBits = 0;
 8012e92:	2300      	movs	r3, #0
 8012e94:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (nVals > 0) {
 8012e96:	e0c0      	b.n	801301a <DecodeHuffmanPairs+0x25e>
			/* refill cache - assumes cachedBits <= 16 */
			if (bitsLeft >= 16) {
 8012e98:	683b      	ldr	r3, [r7, #0]
 8012e9a:	2b0f      	cmp	r3, #15
 8012e9c:	dd20      	ble.n	8012ee0 <DecodeHuffmanPairs+0x124>
				/* load 2 new bytes into left-justified cache */
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 8012e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012ea0:	1c5a      	adds	r2, r3, #1
 8012ea2:	65ba      	str	r2, [r7, #88]	; 0x58
 8012ea4:	781b      	ldrb	r3, [r3, #0]
 8012ea6:	461a      	mov	r2, r3
 8012ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eaa:	f1c3 0318 	rsb	r3, r3, #24
 8012eae:	fa02 f303 	lsl.w	r3, r2, r3
 8012eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012eb4:	4313      	orrs	r3, r2
 8012eb6:	637b      	str	r3, [r7, #52]	; 0x34
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 8012eb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012eba:	1c5a      	adds	r2, r3, #1
 8012ebc:	65ba      	str	r2, [r7, #88]	; 0x58
 8012ebe:	781b      	ldrb	r3, [r3, #0]
 8012ec0:	461a      	mov	r2, r3
 8012ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ec4:	f1c3 0310 	rsb	r3, r3, #16
 8012ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8012ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ece:	4313      	orrs	r3, r2
 8012ed0:	637b      	str	r3, [r7, #52]	; 0x34
				cachedBits += 16;
 8012ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ed4:	3310      	adds	r3, #16
 8012ed6:	643b      	str	r3, [r7, #64]	; 0x40
				bitsLeft -= 16;
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	3b10      	subs	r3, #16
 8012edc:	603b      	str	r3, [r7, #0]
 8012ede:	e096      	b.n	801300e <DecodeHuffmanPairs+0x252>
			} else {
				/* last time through, pad cache with zeros and drain cache */
				if (cachedBits + bitsLeft <= 0)	return -1;
 8012ee0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	4413      	add	r3, r2
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	dc02      	bgt.n	8012ef0 <DecodeHuffmanPairs+0x134>
 8012eea:	f04f 33ff 	mov.w	r3, #4294967295
 8012eee:	e24a      	b.n	8013386 <DecodeHuffmanPairs+0x5ca>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	dd0c      	ble.n	8012f10 <DecodeHuffmanPairs+0x154>
 8012ef6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012ef8:	1c5a      	adds	r2, r3, #1
 8012efa:	65ba      	str	r2, [r7, #88]	; 0x58
 8012efc:	781b      	ldrb	r3, [r3, #0]
 8012efe:	461a      	mov	r2, r3
 8012f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f02:	f1c3 0318 	rsb	r3, r3, #24
 8012f06:	fa02 f303 	lsl.w	r3, r2, r3
 8012f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f0c:	4313      	orrs	r3, r2
 8012f0e:	637b      	str	r3, [r7, #52]	; 0x34
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	2b08      	cmp	r3, #8
 8012f14:	dd0c      	ble.n	8012f30 <DecodeHuffmanPairs+0x174>
 8012f16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f18:	1c5a      	adds	r2, r3, #1
 8012f1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	461a      	mov	r2, r3
 8012f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f22:	f1c3 0310 	rsb	r3, r3, #16
 8012f26:	fa02 f303 	lsl.w	r3, r2, r3
 8012f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f2c:	4313      	orrs	r3, r2
 8012f2e:	637b      	str	r3, [r7, #52]	; 0x34
				cachedBits += bitsLeft;
 8012f30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	4413      	add	r3, r2
 8012f36:	643b      	str	r3, [r7, #64]	; 0x40
				bitsLeft = 0;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	603b      	str	r3, [r7, #0]

				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 8012f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f3e:	3b01      	subs	r3, #1
 8012f40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012f44:	fa42 f303 	asr.w	r3, r2, r3
 8012f48:	461a      	mov	r2, r3
 8012f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f4c:	4013      	ands	r3, r2
 8012f4e:	637b      	str	r3, [r7, #52]	; 0x34
				padBits = 11;
 8012f50:	230b      	movs	r3, #11
 8012f52:	63fb      	str	r3, [r7, #60]	; 0x3c
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 8012f54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f58:	4413      	add	r3, r2
 8012f5a:	643b      	str	r3, [r7, #64]	; 0x40
			}

			/* largest maxBits = 9, plus 2 for sign bits, so make sure cache has at least 11 bits */
			while (nVals > 0 && cachedBits >= 11 ) {
 8012f5c:	e057      	b.n	801300e <DecodeHuffmanPairs+0x252>
				cw = tBase[cache >> (32 - maxBits)];
 8012f5e:	6a3b      	ldr	r3, [r7, #32]
 8012f60:	f1c3 0320 	rsb	r3, r3, #32
 8012f64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f66:	fa22 f303 	lsr.w	r3, r2, r3
 8012f6a:	005b      	lsls	r3, r3, #1
 8012f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f6e:	4413      	add	r3, r2
 8012f70:	881b      	ldrh	r3, [r3, #0]
 8012f72:	83fb      	strh	r3, [r7, #30]
				len = GetHLen(cw);
 8012f74:	8bfb      	ldrh	r3, [r7, #30]
 8012f76:	0b1b      	lsrs	r3, r3, #12
 8012f78:	b29b      	uxth	r3, r3
 8012f7a:	f003 030f 	and.w	r3, r3, #15
 8012f7e:	61bb      	str	r3, [r7, #24]
				cachedBits -= len;
 8012f80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012f82:	69bb      	ldr	r3, [r7, #24]
 8012f84:	1ad3      	subs	r3, r2, r3
 8012f86:	643b      	str	r3, [r7, #64]	; 0x40
				cache <<= len;
 8012f88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f8a:	69bb      	ldr	r3, [r7, #24]
 8012f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8012f90:	637b      	str	r3, [r7, #52]	; 0x34

				x = GetCWX(cw);		if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 8012f92:	8bfb      	ldrh	r3, [r7, #30]
 8012f94:	091b      	lsrs	r3, r3, #4
 8012f96:	b29b      	uxth	r3, r3
 8012f98:	f003 030f 	and.w	r3, r3, #15
 8012f9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8012f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d00b      	beq.n	8012fbc <DecodeHuffmanPairs+0x200>
 8012fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fa6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8012faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fac:	4313      	orrs	r3, r2
 8012fae:	64bb      	str	r3, [r7, #72]	; 0x48
 8012fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fb2:	005b      	lsls	r3, r3, #1
 8012fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8012fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fb8:	3b01      	subs	r3, #1
 8012fba:	643b      	str	r3, [r7, #64]	; 0x40
				y = GetCWY(cw);		if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 8012fbc:	8bfb      	ldrh	r3, [r7, #30]
 8012fbe:	0a1b      	lsrs	r3, r3, #8
 8012fc0:	b29b      	uxth	r3, r3
 8012fc2:	f003 030f 	and.w	r3, r3, #15
 8012fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8012fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d00b      	beq.n	8012fe6 <DecodeHuffmanPairs+0x22a>
 8012fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fd0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8012fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fd6:	4313      	orrs	r3, r2
 8012fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8012fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fdc:	005b      	lsls	r3, r3, #1
 8012fde:	637b      	str	r3, [r7, #52]	; 0x34
 8012fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fe2:	3b01      	subs	r3, #1
 8012fe4:	643b      	str	r3, [r7, #64]	; 0x40

				/* ran out of bits - should never have consumed padBits */
				if (cachedBits < padBits)
 8012fe6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fea:	429a      	cmp	r2, r3
 8012fec:	da02      	bge.n	8012ff4 <DecodeHuffmanPairs+0x238>
					return -1;
 8012fee:	f04f 33ff 	mov.w	r3, #4294967295
 8012ff2:	e1c8      	b.n	8013386 <DecodeHuffmanPairs+0x5ca>

				*xy++ = x;
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	1d1a      	adds	r2, r3, #4
 8012ff8:	60fa      	str	r2, [r7, #12]
 8012ffa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012ffc:	601a      	str	r2, [r3, #0]
				*xy++ = y;
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	1d1a      	adds	r2, r3, #4
 8013002:	60fa      	str	r2, [r7, #12]
 8013004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013006:	601a      	str	r2, [r3, #0]
				nVals -= 2;
 8013008:	68bb      	ldr	r3, [r7, #8]
 801300a:	3b02      	subs	r3, #2
 801300c:	60bb      	str	r3, [r7, #8]
			while (nVals > 0 && cachedBits >= 11 ) {
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	2b00      	cmp	r3, #0
 8013012:	dd02      	ble.n	801301a <DecodeHuffmanPairs+0x25e>
 8013014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013016:	2b0a      	cmp	r3, #10
 8013018:	dca1      	bgt.n	8012f5e <DecodeHuffmanPairs+0x1a2>
		while (nVals > 0) {
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	2b00      	cmp	r3, #0
 801301e:	f73f af3b 	bgt.w	8012e98 <DecodeHuffmanPairs+0xdc>
			}
		}
		bitsLeft += (cachedBits - padBits);
 8013022:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013026:	1ad3      	subs	r3, r2, r3
 8013028:	683a      	ldr	r2, [r7, #0]
 801302a:	4413      	add	r3, r2
 801302c:	603b      	str	r3, [r7, #0]
		return (startBits - bitsLeft);
 801302e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	1ad3      	subs	r3, r2, r3
 8013034:	e1a7      	b.n	8013386 <DecodeHuffmanPairs+0x5ca>
	} else if (tabType == loopLinbits || tabType == loopNoLinbits) {
 8013036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801303a:	2b03      	cmp	r3, #3
 801303c:	d004      	beq.n	8013048 <DecodeHuffmanPairs+0x28c>
 801303e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013042:	2b02      	cmp	r3, #2
 8013044:	f040 819d 	bne.w	8013382 <DecodeHuffmanPairs+0x5c6>
		tCurr = tBase;
 8013048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801304a:	63bb      	str	r3, [r7, #56]	; 0x38
		padBits = 0;
 801304c:	2300      	movs	r3, #0
 801304e:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (nVals > 0) {
 8013050:	e189      	b.n	8013366 <DecodeHuffmanPairs+0x5aa>
 8013052:	bf00      	nop
 8013054:	0801a120 	.word	0x0801a120
 8013058:	08017ffc 	.word	0x08017ffc
 801305c:	0801a1a0 	.word	0x0801a1a0
			/* refill cache - assumes cachedBits <= 16 */
			if (bitsLeft >= 16) {
 8013060:	683b      	ldr	r3, [r7, #0]
 8013062:	2b0f      	cmp	r3, #15
 8013064:	dd20      	ble.n	80130a8 <DecodeHuffmanPairs+0x2ec>
				/* load 2 new bytes into left-justified cache */
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 8013066:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013068:	1c5a      	adds	r2, r3, #1
 801306a:	65ba      	str	r2, [r7, #88]	; 0x58
 801306c:	781b      	ldrb	r3, [r3, #0]
 801306e:	461a      	mov	r2, r3
 8013070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013072:	f1c3 0318 	rsb	r3, r3, #24
 8013076:	fa02 f303 	lsl.w	r3, r2, r3
 801307a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801307c:	4313      	orrs	r3, r2
 801307e:	637b      	str	r3, [r7, #52]	; 0x34
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 8013080:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013082:	1c5a      	adds	r2, r3, #1
 8013084:	65ba      	str	r2, [r7, #88]	; 0x58
 8013086:	781b      	ldrb	r3, [r3, #0]
 8013088:	461a      	mov	r2, r3
 801308a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801308c:	f1c3 0310 	rsb	r3, r3, #16
 8013090:	fa02 f303 	lsl.w	r3, r2, r3
 8013094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013096:	4313      	orrs	r3, r2
 8013098:	637b      	str	r3, [r7, #52]	; 0x34
				cachedBits += 16;
 801309a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801309c:	3310      	adds	r3, #16
 801309e:	643b      	str	r3, [r7, #64]	; 0x40
				bitsLeft -= 16;
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	3b10      	subs	r3, #16
 80130a4:	603b      	str	r3, [r7, #0]
 80130a6:	e157      	b.n	8013358 <DecodeHuffmanPairs+0x59c>
			} else {
				/* last time through, pad cache with zeros and drain cache */
				if (cachedBits + bitsLeft <= 0)	return -1;
 80130a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80130aa:	683b      	ldr	r3, [r7, #0]
 80130ac:	4413      	add	r3, r2
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	dc02      	bgt.n	80130b8 <DecodeHuffmanPairs+0x2fc>
 80130b2:	f04f 33ff 	mov.w	r3, #4294967295
 80130b6:	e166      	b.n	8013386 <DecodeHuffmanPairs+0x5ca>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	dd0c      	ble.n	80130d8 <DecodeHuffmanPairs+0x31c>
 80130be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80130c0:	1c5a      	adds	r2, r3, #1
 80130c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80130c4:	781b      	ldrb	r3, [r3, #0]
 80130c6:	461a      	mov	r2, r3
 80130c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130ca:	f1c3 0318 	rsb	r3, r3, #24
 80130ce:	fa02 f303 	lsl.w	r3, r2, r3
 80130d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80130d4:	4313      	orrs	r3, r2
 80130d6:	637b      	str	r3, [r7, #52]	; 0x34
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 80130d8:	683b      	ldr	r3, [r7, #0]
 80130da:	2b08      	cmp	r3, #8
 80130dc:	dd0c      	ble.n	80130f8 <DecodeHuffmanPairs+0x33c>
 80130de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80130e0:	1c5a      	adds	r2, r3, #1
 80130e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80130e4:	781b      	ldrb	r3, [r3, #0]
 80130e6:	461a      	mov	r2, r3
 80130e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130ea:	f1c3 0310 	rsb	r3, r3, #16
 80130ee:	fa02 f303 	lsl.w	r3, r2, r3
 80130f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80130f4:	4313      	orrs	r3, r2
 80130f6:	637b      	str	r3, [r7, #52]	; 0x34
				cachedBits += bitsLeft;
 80130f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80130fa:	683b      	ldr	r3, [r7, #0]
 80130fc:	4413      	add	r3, r2
 80130fe:	643b      	str	r3, [r7, #64]	; 0x40
				bitsLeft = 0;
 8013100:	2300      	movs	r3, #0
 8013102:	603b      	str	r3, [r7, #0]

				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 8013104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013106:	3b01      	subs	r3, #1
 8013108:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801310c:	fa42 f303 	asr.w	r3, r2, r3
 8013110:	461a      	mov	r2, r3
 8013112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013114:	4013      	ands	r3, r2
 8013116:	637b      	str	r3, [r7, #52]	; 0x34
				padBits = 11;
 8013118:	230b      	movs	r3, #11
 801311a:	63fb      	str	r3, [r7, #60]	; 0x3c
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 801311c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801311e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013120:	4413      	add	r3, r2
 8013122:	643b      	str	r3, [r7, #64]	; 0x40
			}

			/* largest maxBits = 9, plus 2 for sign bits, so make sure cache has at least 11 bits */
			while (nVals > 0 && cachedBits >= 11 ) {
 8013124:	e118      	b.n	8013358 <DecodeHuffmanPairs+0x59c>
				maxBits = GetMaxbits(tCurr[0]);
 8013126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013128:	881b      	ldrh	r3, [r3, #0]
 801312a:	f003 030f 	and.w	r3, r3, #15
 801312e:	623b      	str	r3, [r7, #32]
				cw = tCurr[(cache >> (32 - maxBits)) + 1];
 8013130:	6a3b      	ldr	r3, [r7, #32]
 8013132:	f1c3 0320 	rsb	r3, r3, #32
 8013136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013138:	fa22 f303 	lsr.w	r3, r2, r3
 801313c:	3301      	adds	r3, #1
 801313e:	005b      	lsls	r3, r3, #1
 8013140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013142:	4413      	add	r3, r2
 8013144:	881b      	ldrh	r3, [r3, #0]
 8013146:	83fb      	strh	r3, [r7, #30]
				len = GetHLen(cw);
 8013148:	8bfb      	ldrh	r3, [r7, #30]
 801314a:	0b1b      	lsrs	r3, r3, #12
 801314c:	b29b      	uxth	r3, r3
 801314e:	f003 030f 	and.w	r3, r3, #15
 8013152:	61bb      	str	r3, [r7, #24]
				if (!len) {
 8013154:	69bb      	ldr	r3, [r7, #24]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d10e      	bne.n	8013178 <DecodeHuffmanPairs+0x3bc>
					cachedBits -= maxBits;
 801315a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801315c:	6a3b      	ldr	r3, [r7, #32]
 801315e:	1ad3      	subs	r3, r2, r3
 8013160:	643b      	str	r3, [r7, #64]	; 0x40
					cache <<= maxBits;
 8013162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013164:	6a3b      	ldr	r3, [r7, #32]
 8013166:	fa02 f303 	lsl.w	r3, r2, r3
 801316a:	637b      	str	r3, [r7, #52]	; 0x34
					tCurr += cw;
 801316c:	8bfb      	ldrh	r3, [r7, #30]
 801316e:	005b      	lsls	r3, r3, #1
 8013170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013172:	4413      	add	r3, r2
 8013174:	63bb      	str	r3, [r7, #56]	; 0x38
					continue;
 8013176:	e0ef      	b.n	8013358 <DecodeHuffmanPairs+0x59c>
				}
				cachedBits -= len;
 8013178:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801317a:	69bb      	ldr	r3, [r7, #24]
 801317c:	1ad3      	subs	r3, r2, r3
 801317e:	643b      	str	r3, [r7, #64]	; 0x40
				cache <<= len;
 8013180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013182:	69bb      	ldr	r3, [r7, #24]
 8013184:	fa02 f303 	lsl.w	r3, r2, r3
 8013188:	637b      	str	r3, [r7, #52]	; 0x34
			
				x = GetCWX(cw);
 801318a:	8bfb      	ldrh	r3, [r7, #30]
 801318c:	091b      	lsrs	r3, r3, #4
 801318e:	b29b      	uxth	r3, r3
 8013190:	f003 030f 	and.w	r3, r3, #15
 8013194:	64bb      	str	r3, [r7, #72]	; 0x48
				y = GetCWY(cw);
 8013196:	8bfb      	ldrh	r3, [r7, #30]
 8013198:	0a1b      	lsrs	r3, r3, #8
 801319a:	b29b      	uxth	r3, r3
 801319c:	f003 030f 	and.w	r3, r3, #15
 80131a0:	647b      	str	r3, [r7, #68]	; 0x44

				if (x == 15 && tabType == loopLinbits) {
 80131a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80131a4:	2b0f      	cmp	r3, #15
 80131a6:	d153      	bne.n	8013250 <DecodeHuffmanPairs+0x494>
 80131a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131ac:	2b03      	cmp	r3, #3
 80131ae:	d14f      	bne.n	8013250 <DecodeHuffmanPairs+0x494>
					minBits = linBits + 1 + (y ? 1 : 0);
 80131b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b2:	3301      	adds	r3, #1
 80131b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80131b6:	2a00      	cmp	r2, #0
 80131b8:	bf14      	ite	ne
 80131ba:	2201      	movne	r2, #1
 80131bc:	2200      	moveq	r2, #0
 80131be:	b2d2      	uxtb	r2, r2
 80131c0:	4413      	add	r3, r2
 80131c2:	617b      	str	r3, [r7, #20]
					if (cachedBits + bitsLeft < minBits)
 80131c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80131c6:	683b      	ldr	r3, [r7, #0]
 80131c8:	4413      	add	r3, r2
 80131ca:	697a      	ldr	r2, [r7, #20]
 80131cc:	429a      	cmp	r2, r3
 80131ce:	dd15      	ble.n	80131fc <DecodeHuffmanPairs+0x440>
						return -1;
 80131d0:	f04f 33ff 	mov.w	r3, #4294967295
 80131d4:	e0d7      	b.n	8013386 <DecodeHuffmanPairs+0x5ca>
					while (cachedBits < minBits) {
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 80131d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131d8:	1c5a      	adds	r2, r3, #1
 80131da:	65ba      	str	r2, [r7, #88]	; 0x58
 80131dc:	781b      	ldrb	r3, [r3, #0]
 80131de:	461a      	mov	r2, r3
 80131e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131e2:	f1c3 0318 	rsb	r3, r3, #24
 80131e6:	fa02 f303 	lsl.w	r3, r2, r3
 80131ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131ec:	4313      	orrs	r3, r2
 80131ee:	637b      	str	r3, [r7, #52]	; 0x34
						cachedBits += 8;
 80131f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131f2:	3308      	adds	r3, #8
 80131f4:	643b      	str	r3, [r7, #64]	; 0x40
						bitsLeft -= 8;
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	3b08      	subs	r3, #8
 80131fa:	603b      	str	r3, [r7, #0]
					while (cachedBits < minBits) {
 80131fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80131fe:	697b      	ldr	r3, [r7, #20]
 8013200:	429a      	cmp	r2, r3
 8013202:	dbe8      	blt.n	80131d6 <DecodeHuffmanPairs+0x41a>
					}
					if (bitsLeft < 0) {
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	2b00      	cmp	r3, #0
 8013208:	da0f      	bge.n	801322a <DecodeHuffmanPairs+0x46e>
						cachedBits += bitsLeft;
 801320a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	4413      	add	r3, r2
 8013210:	643b      	str	r3, [r7, #64]	; 0x40
						bitsLeft = 0;
 8013212:	2300      	movs	r3, #0
 8013214:	603b      	str	r3, [r7, #0]
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 8013216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013218:	3b01      	subs	r3, #1
 801321a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801321e:	fa42 f303 	asr.w	r3, r2, r3
 8013222:	461a      	mov	r2, r3
 8013224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013226:	4013      	ands	r3, r2
 8013228:	637b      	str	r3, [r7, #52]	; 0x34
					}
					x += (int)(cache >> (32 - linBits));
 801322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801322c:	f1c3 0320 	rsb	r3, r3, #32
 8013230:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013232:	fa22 f303 	lsr.w	r3, r2, r3
 8013236:	461a      	mov	r2, r3
 8013238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801323a:	4413      	add	r3, r2
 801323c:	64bb      	str	r3, [r7, #72]	; 0x48
					cachedBits -= linBits;
 801323e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013242:	1ad3      	subs	r3, r2, r3
 8013244:	643b      	str	r3, [r7, #64]	; 0x40
					cache <<= linBits;
 8013246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801324a:	fa02 f303 	lsl.w	r3, r2, r3
 801324e:	637b      	str	r3, [r7, #52]	; 0x34
				}
				if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 8013250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013252:	2b00      	cmp	r3, #0
 8013254:	d00b      	beq.n	801326e <DecodeHuffmanPairs+0x4b2>
 8013256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013258:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 801325c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801325e:	4313      	orrs	r3, r2
 8013260:	64bb      	str	r3, [r7, #72]	; 0x48
 8013262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013264:	005b      	lsls	r3, r3, #1
 8013266:	637b      	str	r3, [r7, #52]	; 0x34
 8013268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801326a:	3b01      	subs	r3, #1
 801326c:	643b      	str	r3, [r7, #64]	; 0x40

				if (y == 15 && tabType == loopLinbits) {
 801326e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013270:	2b0f      	cmp	r3, #15
 8013272:	d14c      	bne.n	801330e <DecodeHuffmanPairs+0x552>
 8013274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013278:	2b03      	cmp	r3, #3
 801327a:	d148      	bne.n	801330e <DecodeHuffmanPairs+0x552>
					minBits = linBits + 1;
 801327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801327e:	3301      	adds	r3, #1
 8013280:	617b      	str	r3, [r7, #20]
					if (cachedBits + bitsLeft < minBits)
 8013282:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	4413      	add	r3, r2
 8013288:	697a      	ldr	r2, [r7, #20]
 801328a:	429a      	cmp	r2, r3
 801328c:	dd15      	ble.n	80132ba <DecodeHuffmanPairs+0x4fe>
						return -1;
 801328e:	f04f 33ff 	mov.w	r3, #4294967295
 8013292:	e078      	b.n	8013386 <DecodeHuffmanPairs+0x5ca>
					while (cachedBits < minBits) {
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 8013294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013296:	1c5a      	adds	r2, r3, #1
 8013298:	65ba      	str	r2, [r7, #88]	; 0x58
 801329a:	781b      	ldrb	r3, [r3, #0]
 801329c:	461a      	mov	r2, r3
 801329e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132a0:	f1c3 0318 	rsb	r3, r3, #24
 80132a4:	fa02 f303 	lsl.w	r3, r2, r3
 80132a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80132aa:	4313      	orrs	r3, r2
 80132ac:	637b      	str	r3, [r7, #52]	; 0x34
						cachedBits += 8;
 80132ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132b0:	3308      	adds	r3, #8
 80132b2:	643b      	str	r3, [r7, #64]	; 0x40
						bitsLeft -= 8;
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	3b08      	subs	r3, #8
 80132b8:	603b      	str	r3, [r7, #0]
					while (cachedBits < minBits) {
 80132ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	429a      	cmp	r2, r3
 80132c0:	dbe8      	blt.n	8013294 <DecodeHuffmanPairs+0x4d8>
					}
					if (bitsLeft < 0) {
 80132c2:	683b      	ldr	r3, [r7, #0]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	da0f      	bge.n	80132e8 <DecodeHuffmanPairs+0x52c>
						cachedBits += bitsLeft;
 80132c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	4413      	add	r3, r2
 80132ce:	643b      	str	r3, [r7, #64]	; 0x40
						bitsLeft = 0;
 80132d0:	2300      	movs	r3, #0
 80132d2:	603b      	str	r3, [r7, #0]
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 80132d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132d6:	3b01      	subs	r3, #1
 80132d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80132dc:	fa42 f303 	asr.w	r3, r2, r3
 80132e0:	461a      	mov	r2, r3
 80132e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132e4:	4013      	ands	r3, r2
 80132e6:	637b      	str	r3, [r7, #52]	; 0x34
					}
					y += (int)(cache >> (32 - linBits));
 80132e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ea:	f1c3 0320 	rsb	r3, r3, #32
 80132ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80132f0:	fa22 f303 	lsr.w	r3, r2, r3
 80132f4:	461a      	mov	r2, r3
 80132f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132f8:	4413      	add	r3, r2
 80132fa:	647b      	str	r3, [r7, #68]	; 0x44
					cachedBits -= linBits;
 80132fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80132fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013300:	1ad3      	subs	r3, r2, r3
 8013302:	643b      	str	r3, [r7, #64]	; 0x40
					cache <<= linBits;
 8013304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013308:	fa02 f303 	lsl.w	r3, r2, r3
 801330c:	637b      	str	r3, [r7, #52]	; 0x34
				}
				if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 801330e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013310:	2b00      	cmp	r3, #0
 8013312:	d00b      	beq.n	801332c <DecodeHuffmanPairs+0x570>
 8013314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013316:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 801331a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801331c:	4313      	orrs	r3, r2
 801331e:	647b      	str	r3, [r7, #68]	; 0x44
 8013320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013322:	005b      	lsls	r3, r3, #1
 8013324:	637b      	str	r3, [r7, #52]	; 0x34
 8013326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013328:	3b01      	subs	r3, #1
 801332a:	643b      	str	r3, [r7, #64]	; 0x40

				/* ran out of bits - should never have consumed padBits */
				if (cachedBits < padBits)
 801332c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801332e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013330:	429a      	cmp	r2, r3
 8013332:	da02      	bge.n	801333a <DecodeHuffmanPairs+0x57e>
					return -1;
 8013334:	f04f 33ff 	mov.w	r3, #4294967295
 8013338:	e025      	b.n	8013386 <DecodeHuffmanPairs+0x5ca>

				*xy++ = x;
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	1d1a      	adds	r2, r3, #4
 801333e:	60fa      	str	r2, [r7, #12]
 8013340:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013342:	601a      	str	r2, [r3, #0]
				*xy++ = y;
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	1d1a      	adds	r2, r3, #4
 8013348:	60fa      	str	r2, [r7, #12]
 801334a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801334c:	601a      	str	r2, [r3, #0]
				nVals -= 2;
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	3b02      	subs	r3, #2
 8013352:	60bb      	str	r3, [r7, #8]
				tCurr = tBase;
 8013354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013356:	63bb      	str	r3, [r7, #56]	; 0x38
			while (nVals > 0 && cachedBits >= 11 ) {
 8013358:	68bb      	ldr	r3, [r7, #8]
 801335a:	2b00      	cmp	r3, #0
 801335c:	dd03      	ble.n	8013366 <DecodeHuffmanPairs+0x5aa>
 801335e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013360:	2b0a      	cmp	r3, #10
 8013362:	f73f aee0 	bgt.w	8013126 <DecodeHuffmanPairs+0x36a>
		while (nVals > 0) {
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	2b00      	cmp	r3, #0
 801336a:	f73f ae79 	bgt.w	8013060 <DecodeHuffmanPairs+0x2a4>
			}
		}
		bitsLeft += (cachedBits - padBits);
 801336e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013372:	1ad3      	subs	r3, r2, r3
 8013374:	683a      	ldr	r2, [r7, #0]
 8013376:	4413      	add	r3, r2
 8013378:	603b      	str	r3, [r7, #0]
		return (startBits - bitsLeft);
 801337a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	1ad3      	subs	r3, r2, r3
 8013380:	e001      	b.n	8013386 <DecodeHuffmanPairs+0x5ca>
	}

	/* error in bitstream - trying to access unused Huffman table */
	return -1;
 8013382:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013386:	4618      	mov	r0, r3
 8013388:	3754      	adds	r7, #84	; 0x54
 801338a:	46bd      	mov	sp, r7
 801338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013390:	4770      	bx	lr
 8013392:	bf00      	nop

08013394 <DecodeHuffmanQuads>:
 *                of the quad word after which all samples are 0)
 * 
 * Notes:        si_huff.bit tests every vwxy output in both quad tables
 **************************************************************************************/
static int DecodeHuffmanQuads(int *vwxy, int nVals, int tabIdx, int bitsLeft, unsigned char *buf, int bitOffset)
{
 8013394:	b480      	push	{r7}
 8013396:	b091      	sub	sp, #68	; 0x44
 8013398:	af00      	add	r7, sp, #0
 801339a:	60f8      	str	r0, [r7, #12]
 801339c:	60b9      	str	r1, [r7, #8]
 801339e:	607a      	str	r2, [r7, #4]
 80133a0:	603b      	str	r3, [r7, #0]
	int i, v, w, x, y;
	int len, maxBits, cachedBits, padBits;
	unsigned int cache;
	unsigned char cw, *tBase;

	if (bitsLeft <= 0)
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	dc01      	bgt.n	80133ac <DecodeHuffmanQuads+0x18>
		return 0;
 80133a8:	2300      	movs	r3, #0
 80133aa:	e124      	b.n	80135f6 <DecodeHuffmanQuads+0x262>

	tBase = (unsigned char *)quadTable + quadTabOffset[tabIdx];
 80133ac:	4a95      	ldr	r2, [pc, #596]	; (8013604 <DecodeHuffmanQuads+0x270>)
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133b4:	461a      	mov	r2, r3
 80133b6:	4b94      	ldr	r3, [pc, #592]	; (8013608 <DecodeHuffmanQuads+0x274>)
 80133b8:	4413      	add	r3, r2
 80133ba:	61fb      	str	r3, [r7, #28]
	maxBits = quadTabMaxBits[tabIdx];
 80133bc:	4a93      	ldr	r2, [pc, #588]	; (801360c <DecodeHuffmanQuads+0x278>)
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133c4:	61bb      	str	r3, [r7, #24]

	/* initially fill cache with any partial byte */
	cache = 0;
 80133c6:	2300      	movs	r3, #0
 80133c8:	623b      	str	r3, [r7, #32]
	cachedBits = (8 - bitOffset) & 0x07;
 80133ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133cc:	425b      	negs	r3, r3
 80133ce:	f003 0307 	and.w	r3, r3, #7
 80133d2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (cachedBits)
 80133d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d00a      	beq.n	80133f0 <DecodeHuffmanQuads+0x5c>
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 80133da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133dc:	1c5a      	adds	r2, r3, #1
 80133de:	64ba      	str	r2, [r7, #72]	; 0x48
 80133e0:	781b      	ldrb	r3, [r3, #0]
 80133e2:	461a      	mov	r2, r3
 80133e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e6:	f1c3 0320 	rsb	r3, r3, #32
 80133ea:	fa02 f303 	lsl.w	r3, r2, r3
 80133ee:	623b      	str	r3, [r7, #32]
	bitsLeft -= cachedBits;
 80133f0:	683a      	ldr	r2, [r7, #0]
 80133f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133f4:	1ad3      	subs	r3, r2, r3
 80133f6:	603b      	str	r3, [r7, #0]

	i = padBits = 0;
 80133f8:	2300      	movs	r3, #0
 80133fa:	627b      	str	r3, [r7, #36]	; 0x24
 80133fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (i < (nVals - 3)) {
 8013400:	e0f2      	b.n	80135e8 <DecodeHuffmanQuads+0x254>
		/* refill cache - assumes cachedBits <= 16 */
		if (bitsLeft >= 16) {
 8013402:	683b      	ldr	r3, [r7, #0]
 8013404:	2b0f      	cmp	r3, #15
 8013406:	dd20      	ble.n	801344a <DecodeHuffmanQuads+0xb6>
			/* load 2 new bytes into left-justified cache */
			cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 8013408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801340a:	1c5a      	adds	r2, r3, #1
 801340c:	64ba      	str	r2, [r7, #72]	; 0x48
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	461a      	mov	r2, r3
 8013412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013414:	f1c3 0318 	rsb	r3, r3, #24
 8013418:	fa02 f303 	lsl.w	r3, r2, r3
 801341c:	6a3a      	ldr	r2, [r7, #32]
 801341e:	4313      	orrs	r3, r2
 8013420:	623b      	str	r3, [r7, #32]
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 8013422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013424:	1c5a      	adds	r2, r3, #1
 8013426:	64ba      	str	r2, [r7, #72]	; 0x48
 8013428:	781b      	ldrb	r3, [r3, #0]
 801342a:	461a      	mov	r2, r3
 801342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801342e:	f1c3 0310 	rsb	r3, r3, #16
 8013432:	fa02 f303 	lsl.w	r3, r2, r3
 8013436:	6a3a      	ldr	r2, [r7, #32]
 8013438:	4313      	orrs	r3, r2
 801343a:	623b      	str	r3, [r7, #32]
			cachedBits += 16;
 801343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801343e:	3310      	adds	r3, #16
 8013440:	62bb      	str	r3, [r7, #40]	; 0x28
			bitsLeft -= 16;
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	3b10      	subs	r3, #16
 8013446:	603b      	str	r3, [r7, #0]
 8013448:	e0c5      	b.n	80135d6 <DecodeHuffmanQuads+0x242>
		} else {
			/* last time through, pad cache with zeros and drain cache */
			if (cachedBits + bitsLeft <= 0) return i;
 801344a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801344c:	683b      	ldr	r3, [r7, #0]
 801344e:	4413      	add	r3, r2
 8013450:	2b00      	cmp	r3, #0
 8013452:	dc01      	bgt.n	8013458 <DecodeHuffmanQuads+0xc4>
 8013454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013456:	e0ce      	b.n	80135f6 <DecodeHuffmanQuads+0x262>
			if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	2b00      	cmp	r3, #0
 801345c:	dd0c      	ble.n	8013478 <DecodeHuffmanQuads+0xe4>
 801345e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013460:	1c5a      	adds	r2, r3, #1
 8013462:	64ba      	str	r2, [r7, #72]	; 0x48
 8013464:	781b      	ldrb	r3, [r3, #0]
 8013466:	461a      	mov	r2, r3
 8013468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801346a:	f1c3 0318 	rsb	r3, r3, #24
 801346e:	fa02 f303 	lsl.w	r3, r2, r3
 8013472:	6a3a      	ldr	r2, [r7, #32]
 8013474:	4313      	orrs	r3, r2
 8013476:	623b      	str	r3, [r7, #32]
			if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	2b08      	cmp	r3, #8
 801347c:	dd0c      	ble.n	8013498 <DecodeHuffmanQuads+0x104>
 801347e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013480:	1c5a      	adds	r2, r3, #1
 8013482:	64ba      	str	r2, [r7, #72]	; 0x48
 8013484:	781b      	ldrb	r3, [r3, #0]
 8013486:	461a      	mov	r2, r3
 8013488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801348a:	f1c3 0310 	rsb	r3, r3, #16
 801348e:	fa02 f303 	lsl.w	r3, r2, r3
 8013492:	6a3a      	ldr	r2, [r7, #32]
 8013494:	4313      	orrs	r3, r2
 8013496:	623b      	str	r3, [r7, #32]
			cachedBits += bitsLeft;
 8013498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	4413      	add	r3, r2
 801349e:	62bb      	str	r3, [r7, #40]	; 0x28
			bitsLeft = 0;
 80134a0:	2300      	movs	r3, #0
 80134a2:	603b      	str	r3, [r7, #0]

			cache &= (signed int)0x80000000 >> (cachedBits - 1);
 80134a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134a6:	3b01      	subs	r3, #1
 80134a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80134ac:	fa42 f303 	asr.w	r3, r2, r3
 80134b0:	461a      	mov	r2, r3
 80134b2:	6a3b      	ldr	r3, [r7, #32]
 80134b4:	4013      	ands	r3, r2
 80134b6:	623b      	str	r3, [r7, #32]
			padBits = 10;
 80134b8:	230a      	movs	r3, #10
 80134ba:	627b      	str	r3, [r7, #36]	; 0x24
			cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 80134bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c0:	4413      	add	r3, r2
 80134c2:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		/* largest maxBits = 6, plus 4 for sign bits, so make sure cache has at least 10 bits */
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 80134c4:	e087      	b.n	80135d6 <DecodeHuffmanQuads+0x242>
			cw = tBase[cache >> (32 - maxBits)];
 80134c6:	69bb      	ldr	r3, [r7, #24]
 80134c8:	f1c3 0320 	rsb	r3, r3, #32
 80134cc:	6a3a      	ldr	r2, [r7, #32]
 80134ce:	fa22 f303 	lsr.w	r3, r2, r3
 80134d2:	69fa      	ldr	r2, [r7, #28]
 80134d4:	4413      	add	r3, r2
 80134d6:	781b      	ldrb	r3, [r3, #0]
 80134d8:	75fb      	strb	r3, [r7, #23]
			len = GetHLenQ(cw);
 80134da:	7dfb      	ldrb	r3, [r7, #23]
 80134dc:	091b      	lsrs	r3, r3, #4
 80134de:	b2db      	uxtb	r3, r3
 80134e0:	f003 030f 	and.w	r3, r3, #15
 80134e4:	613b      	str	r3, [r7, #16]
			cachedBits -= len;
 80134e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134e8:	693b      	ldr	r3, [r7, #16]
 80134ea:	1ad3      	subs	r3, r2, r3
 80134ec:	62bb      	str	r3, [r7, #40]	; 0x28
			cache <<= len;
 80134ee:	6a3a      	ldr	r2, [r7, #32]
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	fa02 f303 	lsl.w	r3, r2, r3
 80134f6:	623b      	str	r3, [r7, #32]

			v = GetCWVQ(cw);	if(v) {ApplySign(v, cache); cache <<= 1; cachedBits--;}
 80134f8:	7dfb      	ldrb	r3, [r7, #23]
 80134fa:	08db      	lsrs	r3, r3, #3
 80134fc:	b2db      	uxtb	r3, r3
 80134fe:	f003 0301 	and.w	r3, r3, #1
 8013502:	63bb      	str	r3, [r7, #56]	; 0x38
 8013504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013506:	2b00      	cmp	r3, #0
 8013508:	d00b      	beq.n	8013522 <DecodeHuffmanQuads+0x18e>
 801350a:	6a3b      	ldr	r3, [r7, #32]
 801350c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8013510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013512:	4313      	orrs	r3, r2
 8013514:	63bb      	str	r3, [r7, #56]	; 0x38
 8013516:	6a3b      	ldr	r3, [r7, #32]
 8013518:	005b      	lsls	r3, r3, #1
 801351a:	623b      	str	r3, [r7, #32]
 801351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801351e:	3b01      	subs	r3, #1
 8013520:	62bb      	str	r3, [r7, #40]	; 0x28
			w = GetCWWQ(cw);	if(w) {ApplySign(w, cache); cache <<= 1; cachedBits--;}
 8013522:	7dfb      	ldrb	r3, [r7, #23]
 8013524:	089b      	lsrs	r3, r3, #2
 8013526:	b2db      	uxtb	r3, r3
 8013528:	f003 0301 	and.w	r3, r3, #1
 801352c:	637b      	str	r3, [r7, #52]	; 0x34
 801352e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013530:	2b00      	cmp	r3, #0
 8013532:	d00b      	beq.n	801354c <DecodeHuffmanQuads+0x1b8>
 8013534:	6a3b      	ldr	r3, [r7, #32]
 8013536:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 801353a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801353c:	4313      	orrs	r3, r2
 801353e:	637b      	str	r3, [r7, #52]	; 0x34
 8013540:	6a3b      	ldr	r3, [r7, #32]
 8013542:	005b      	lsls	r3, r3, #1
 8013544:	623b      	str	r3, [r7, #32]
 8013546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013548:	3b01      	subs	r3, #1
 801354a:	62bb      	str	r3, [r7, #40]	; 0x28
			x = GetCWXQ(cw);	if(x) {ApplySign(x, cache); cache <<= 1; cachedBits--;}
 801354c:	7dfb      	ldrb	r3, [r7, #23]
 801354e:	085b      	lsrs	r3, r3, #1
 8013550:	b2db      	uxtb	r3, r3
 8013552:	f003 0301 	and.w	r3, r3, #1
 8013556:	633b      	str	r3, [r7, #48]	; 0x30
 8013558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801355a:	2b00      	cmp	r3, #0
 801355c:	d00b      	beq.n	8013576 <DecodeHuffmanQuads+0x1e2>
 801355e:	6a3b      	ldr	r3, [r7, #32]
 8013560:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8013564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013566:	4313      	orrs	r3, r2
 8013568:	633b      	str	r3, [r7, #48]	; 0x30
 801356a:	6a3b      	ldr	r3, [r7, #32]
 801356c:	005b      	lsls	r3, r3, #1
 801356e:	623b      	str	r3, [r7, #32]
 8013570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013572:	3b01      	subs	r3, #1
 8013574:	62bb      	str	r3, [r7, #40]	; 0x28
			y = GetCWYQ(cw);	if(y) {ApplySign(y, cache); cache <<= 1; cachedBits--;}
 8013576:	7dfb      	ldrb	r3, [r7, #23]
 8013578:	f003 0301 	and.w	r3, r3, #1
 801357c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013580:	2b00      	cmp	r3, #0
 8013582:	d00b      	beq.n	801359c <DecodeHuffmanQuads+0x208>
 8013584:	6a3b      	ldr	r3, [r7, #32]
 8013586:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 801358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801358c:	4313      	orrs	r3, r2
 801358e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013590:	6a3b      	ldr	r3, [r7, #32]
 8013592:	005b      	lsls	r3, r3, #1
 8013594:	623b      	str	r3, [r7, #32]
 8013596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013598:	3b01      	subs	r3, #1
 801359a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* ran out of bits - okay (means we're done) */
			if (cachedBits < padBits)
 801359c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135a0:	429a      	cmp	r2, r3
 80135a2:	da01      	bge.n	80135a8 <DecodeHuffmanQuads+0x214>
				return i;
 80135a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135a6:	e026      	b.n	80135f6 <DecodeHuffmanQuads+0x262>

			*vwxy++ = v;
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	1d1a      	adds	r2, r3, #4
 80135ac:	60fa      	str	r2, [r7, #12]
 80135ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80135b0:	601a      	str	r2, [r3, #0]
			*vwxy++ = w;
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	1d1a      	adds	r2, r3, #4
 80135b6:	60fa      	str	r2, [r7, #12]
 80135b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80135ba:	601a      	str	r2, [r3, #0]
			*vwxy++ = x;
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	1d1a      	adds	r2, r3, #4
 80135c0:	60fa      	str	r2, [r7, #12]
 80135c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80135c4:	601a      	str	r2, [r3, #0]
			*vwxy++ = y;
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	1d1a      	adds	r2, r3, #4
 80135ca:	60fa      	str	r2, [r7, #12]
 80135cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135ce:	601a      	str	r2, [r3, #0]
			i += 4;
 80135d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135d2:	3304      	adds	r3, #4
 80135d4:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	3b03      	subs	r3, #3
 80135da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80135dc:	429a      	cmp	r2, r3
 80135de:	da03      	bge.n	80135e8 <DecodeHuffmanQuads+0x254>
 80135e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135e2:	2b09      	cmp	r3, #9
 80135e4:	f73f af6f 	bgt.w	80134c6 <DecodeHuffmanQuads+0x132>
	while (i < (nVals - 3)) {
 80135e8:	68bb      	ldr	r3, [r7, #8]
 80135ea:	3b03      	subs	r3, #3
 80135ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80135ee:	429a      	cmp	r2, r3
 80135f0:	f6ff af07 	blt.w	8013402 <DecodeHuffmanQuads+0x6e>
		}
	}

	/* decoded max number of quad values */
	return i;
 80135f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3744      	adds	r7, #68	; 0x44
 80135fa:	46bd      	mov	sp, r7
 80135fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013600:	4770      	bx	lr
 8013602:	bf00      	nop
 8013604:	0801a2f0 	.word	0x0801a2f0
 8013608:	0801a2a0 	.word	0x0801a2a0
 801360c:	0801a2f8 	.word	0x0801a2f8

08013610 <xmp3_DecodeHuffman>:
 *                byte located at buf + offset)
 *              -1 if null input pointers, huffBlockBits < 0, or decoder runs 
 *                out of bits prematurely (invalid bitstream)
 **************************************************************************************/
int DecodeHuffman(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int huffBlockBits, int gr, int ch)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b096      	sub	sp, #88	; 0x58
 8013614:	af02      	add	r7, sp, #8
 8013616:	60f8      	str	r0, [r7, #12]
 8013618:	60b9      	str	r1, [r7, #8]
 801361a:	607a      	str	r2, [r7, #4]
 801361c:	603b      	str	r3, [r7, #0]
	int r1Start, r2Start, rEnd[4];	/* region boundaries */
	int i, w, bitsUsed, bitsLeft;
	unsigned char *startBuf = buf;
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	63fb      	str	r3, [r7, #60]	; 0x3c
	SideInfoSub *sis;
	ScaleFactorInfo *sfi;
	HuffmanInfo *hi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || !mp3DecInfo->HuffmanInfoPS)
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d00f      	beq.n	8013648 <xmp3_DecodeHuffman+0x38>
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d00b      	beq.n	8013648 <xmp3_DecodeHuffman+0x38>
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	685b      	ldr	r3, [r3, #4]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d007      	beq.n	8013648 <xmp3_DecodeHuffman+0x38>
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	689b      	ldr	r3, [r3, #8]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d003      	beq.n	8013648 <xmp3_DecodeHuffman+0x38>
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	68db      	ldr	r3, [r3, #12]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d102      	bne.n	801364e <xmp3_DecodeHuffman+0x3e>
		return -1;
 8013648:	f04f 33ff 	mov.w	r3, #4294967295
 801364c:	e142      	b.n	80138d4 <xmp3_DecodeHuffman+0x2c4>

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	63bb      	str	r3, [r7, #56]	; 0x38
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	685b      	ldr	r3, [r3, #4]
 8013658:	637b      	str	r3, [r7, #52]	; 0x34
	sis = &si->sis[gr][ch];
 801365a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801365c:	461a      	mov	r2, r3
 801365e:	00d2      	lsls	r2, r2, #3
 8013660:	441a      	add	r2, r3
 8013662:	00d3      	lsls	r3, r2, #3
 8013664:	461a      	mov	r2, r3
 8013666:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013668:	460b      	mov	r3, r1
 801366a:	00db      	lsls	r3, r3, #3
 801366c:	440b      	add	r3, r1
 801366e:	011b      	lsls	r3, r3, #4
 8013670:	4413      	add	r3, r2
 8013672:	3328      	adds	r3, #40	; 0x28
 8013674:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013676:	4413      	add	r3, r2
 8013678:	633b      	str	r3, [r7, #48]	; 0x30
	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	689b      	ldr	r3, [r3, #8]
 801367e:	62fb      	str	r3, [r7, #44]	; 0x2c
	hi = (HuffmanInfo*)(mp3DecInfo->HuffmanInfoPS);
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	68db      	ldr	r3, [r3, #12]
 8013684:	62bb      	str	r3, [r7, #40]	; 0x28

	if (huffBlockBits < 0)
 8013686:	683b      	ldr	r3, [r7, #0]
 8013688:	2b00      	cmp	r3, #0
 801368a:	da02      	bge.n	8013692 <xmp3_DecodeHuffman+0x82>
		return -1;
 801368c:	f04f 33ff 	mov.w	r3, #4294967295
 8013690:	e120      	b.n	80138d4 <xmp3_DecodeHuffman+0x2c4>

	/* figure out region boundaries (the first 2*bigVals coefficients divided into 3 regions) */
	if (sis->winSwitchFlag && sis->blockType == 2) {
 8013692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013694:	691b      	ldr	r3, [r3, #16]
 8013696:	2b00      	cmp	r3, #0
 8013698:	d041      	beq.n	801371e <xmp3_DecodeHuffman+0x10e>
 801369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801369c:	695b      	ldr	r3, [r3, #20]
 801369e:	2b02      	cmp	r3, #2
 80136a0:	d13d      	bne.n	801371e <xmp3_DecodeHuffman+0x10e>
		if (sis->mixedBlock == 0) {
 80136a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a4:	699b      	ldr	r3, [r3, #24]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d114      	bne.n	80136d4 <xmp3_DecodeHuffman+0xc4>
			r1Start = fh->sfBand->s[(sis->region0Count + 1)/3] * 3;
 80136aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80136ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136b2:	3301      	adds	r3, #1
 80136b4:	4989      	ldr	r1, [pc, #548]	; (80138dc <xmp3_DecodeHuffman+0x2cc>)
 80136b6:	fb81 0103 	smull	r0, r1, r1, r3
 80136ba:	17db      	asrs	r3, r3, #31
 80136bc:	1acb      	subs	r3, r1, r3
 80136be:	3314      	adds	r3, #20
 80136c0:	005b      	lsls	r3, r3, #1
 80136c2:	4413      	add	r3, r2
 80136c4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80136c8:	461a      	mov	r2, r3
 80136ca:	4613      	mov	r3, r2
 80136cc:	005b      	lsls	r3, r3, #1
 80136ce:	4413      	add	r3, r2
 80136d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80136d2:	e020      	b.n	8013716 <xmp3_DecodeHuffman+0x106>
		} else {
			if (fh->ver == MPEG1) {
 80136d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136d6:	781b      	ldrb	r3, [r3, #0]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d108      	bne.n	80136ee <xmp3_DecodeHuffman+0xde>
				r1Start = fh->sfBand->l[sis->region0Count + 1];
 80136dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80136e4:	3201      	adds	r2, #1
 80136e6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80136ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80136ec:	e013      	b.n	8013716 <xmp3_DecodeHuffman+0x106>
			} else {
				/* see MPEG2 spec for explanation */
				w = fh->sfBand->s[4] - fh->sfBand->s[3];
 80136ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136f2:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80136f6:	461a      	mov	r2, r3
 80136f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136fc:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8013700:	1ad3      	subs	r3, r2, r3
 8013702:	627b      	str	r3, [r7, #36]	; 0x24
				r1Start = fh->sfBand->l[6] + 2*w;
 8013704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013708:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801370c:	461a      	mov	r2, r3
 801370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013710:	005b      	lsls	r3, r3, #1
 8013712:	4413      	add	r3, r2
 8013714:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
		}
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 8013716:	f44f 7310 	mov.w	r3, #576	; 0x240
 801371a:	64bb      	str	r3, [r7, #72]	; 0x48
 801371c:	e013      	b.n	8013746 <xmp3_DecodeHuffman+0x136>
	} else {
		r1Start = fh->sfBand->l[sis->region0Count + 1];
 801371e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013724:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013726:	3201      	adds	r2, #1
 8013728:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801372c:	64fb      	str	r3, [r7, #76]	; 0x4c
		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 801372e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013734:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8013736:	1c51      	adds	r1, r2, #1
 8013738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801373a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801373c:	440a      	add	r2, r1
 801373e:	3201      	adds	r2, #1
 8013740:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8013744:	64bb      	str	r3, [r7, #72]	; 0x48
	}

	/* offset rEnd index by 1 so first region = rEnd[1] - rEnd[0], etc. */
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 8013746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013748:	685b      	ldr	r3, [r3, #4]
 801374a:	005b      	lsls	r3, r3, #1
 801374c:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8013750:	bfa8      	it	ge
 8013752:	f44f 7310 	movge.w	r3, #576	; 0x240
 8013756:	61fb      	str	r3, [r7, #28]
	rEnd[2] = MIN(r2Start, rEnd[3]);
 8013758:	69fa      	ldr	r2, [r7, #28]
 801375a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801375c:	4293      	cmp	r3, r2
 801375e:	bfa8      	it	ge
 8013760:	4613      	movge	r3, r2
 8013762:	61bb      	str	r3, [r7, #24]
	rEnd[1] = MIN(r1Start, rEnd[3]);
 8013764:	69fa      	ldr	r2, [r7, #28]
 8013766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013768:	4293      	cmp	r3, r2
 801376a:	bfa8      	it	ge
 801376c:	4613      	movge	r3, r2
 801376e:	617b      	str	r3, [r7, #20]
	rEnd[0] = 0;
 8013770:	2300      	movs	r3, #0
 8013772:	613b      	str	r3, [r7, #16]

	/* rounds up to first all-zero pair (we don't check last pair for (x,y) == (non-zero, zero)) */
	hi->nonZeroBound[ch] = rEnd[3];
 8013774:	69f9      	ldr	r1, [r7, #28]
 8013776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013778:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801377a:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 801377e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* decode Huffman pairs (rEnd[i] are always even numbers) */
	bitsLeft = huffBlockBits;
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	643b      	str	r3, [r7, #64]	; 0x40
	for (i = 0; i < 3; i++) {
 8013786:	2300      	movs	r3, #0
 8013788:	647b      	str	r3, [r7, #68]	; 0x44
 801378a:	e04d      	b.n	8013828 <xmp3_DecodeHuffman+0x218>
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 801378c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801378e:	4613      	mov	r3, r2
 8013790:	00db      	lsls	r3, r3, #3
 8013792:	4413      	add	r3, r2
 8013794:	021b      	lsls	r3, r3, #8
 8013796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013798:	441a      	add	r2, r3
 801379a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801379c:	009b      	lsls	r3, r3, #2
 801379e:	3350      	adds	r3, #80	; 0x50
 80137a0:	443b      	add	r3, r7
 80137a2:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80137a6:	009b      	lsls	r3, r3, #2
 80137a8:	18d0      	adds	r0, r2, r3
 80137aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137ac:	3301      	adds	r3, #1
 80137ae:	009b      	lsls	r3, r3, #2
 80137b0:	3350      	adds	r3, #80	; 0x50
 80137b2:	443b      	add	r3, r7
 80137b4:	f853 2c40 	ldr.w	r2, [r3, #-64]
 80137b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137ba:	009b      	lsls	r3, r3, #2
 80137bc:	3350      	adds	r3, #80	; 0x50
 80137be:	443b      	add	r3, r7
 80137c0:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80137c4:	1ad1      	subs	r1, r2, r3
 80137c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137ca:	3306      	adds	r3, #6
 80137cc:	009b      	lsls	r3, r3, #2
 80137ce:	4413      	add	r3, r2
 80137d0:	685a      	ldr	r2, [r3, #4]
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	9301      	str	r3, [sp, #4]
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	9300      	str	r3, [sp, #0]
 80137dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137de:	f7ff faed 	bl	8012dbc <DecodeHuffmanPairs>
 80137e2:	6238      	str	r0, [r7, #32]
		if (bitsUsed < 0 || bitsUsed > bitsLeft)	/* error - overran end of bitstream */
 80137e4:	6a3b      	ldr	r3, [r7, #32]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	db03      	blt.n	80137f2 <xmp3_DecodeHuffman+0x1e2>
 80137ea:	6a3a      	ldr	r2, [r7, #32]
 80137ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137ee:	429a      	cmp	r2, r3
 80137f0:	dd02      	ble.n	80137f8 <xmp3_DecodeHuffman+0x1e8>
			return -1;
 80137f2:	f04f 33ff 	mov.w	r3, #4294967295
 80137f6:	e06d      	b.n	80138d4 <xmp3_DecodeHuffman+0x2c4>

		/* update bitstream position */
		buf += (bitsUsed + *bitOffset) >> 3;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681a      	ldr	r2, [r3, #0]
 80137fc:	6a3b      	ldr	r3, [r7, #32]
 80137fe:	4413      	add	r3, r2
 8013800:	10db      	asrs	r3, r3, #3
 8013802:	461a      	mov	r2, r3
 8013804:	68bb      	ldr	r3, [r7, #8]
 8013806:	4413      	add	r3, r2
 8013808:	60bb      	str	r3, [r7, #8]
		*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681a      	ldr	r2, [r3, #0]
 801380e:	6a3b      	ldr	r3, [r7, #32]
 8013810:	4413      	add	r3, r2
 8013812:	f003 0207 	and.w	r2, r3, #7
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	601a      	str	r2, [r3, #0]
		bitsLeft -= bitsUsed;
 801381a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801381c:	6a3b      	ldr	r3, [r7, #32]
 801381e:	1ad3      	subs	r3, r2, r3
 8013820:	643b      	str	r3, [r7, #64]	; 0x40
	for (i = 0; i < 3; i++) {
 8013822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013824:	3301      	adds	r3, #1
 8013826:	647b      	str	r3, [r7, #68]	; 0x44
 8013828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801382a:	2b02      	cmp	r3, #2
 801382c:	ddae      	ble.n	801378c <xmp3_DecodeHuffman+0x17c>
	}

	/* decode Huffman quads (if any) */
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 801382e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013830:	4613      	mov	r3, r2
 8013832:	00db      	lsls	r3, r3, #3
 8013834:	4413      	add	r3, r2
 8013836:	021b      	lsls	r3, r3, #8
 8013838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801383a:	441a      	add	r2, r3
 801383c:	69fb      	ldr	r3, [r7, #28]
 801383e:	009b      	lsls	r3, r3, #2
 8013840:	18d0      	adds	r0, r2, r3
 8013842:	69fb      	ldr	r3, [r7, #28]
 8013844:	f5c3 7110 	rsb	r1, r3, #576	; 0x240
 8013848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801384a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	9301      	str	r3, [sp, #4]
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	9300      	str	r3, [sp, #0]
 8013856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013858:	f7ff fd9c 	bl	8013394 <DecodeHuffmanQuads>
 801385c:	4601      	mov	r1, r0
 801385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013860:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013862:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 8013866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801386a:	4419      	add	r1, r3
 801386c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801386e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013870:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 8013874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	ASSERT(hi->nonZeroBound[ch] <= MAX_NSAMP);
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++)
 8013878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801387a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801387c:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 8013880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013884:	647b      	str	r3, [r7, #68]	; 0x44
 8013886:	e00d      	b.n	80138a4 <xmp3_DecodeHuffman+0x294>
		hi->huffDecBuf[ch][i] = 0;
 8013888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801388a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801388c:	4613      	mov	r3, r2
 801388e:	00db      	lsls	r3, r3, #3
 8013890:	4413      	add	r3, r2
 8013892:	019b      	lsls	r3, r3, #6
 8013894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013896:	4413      	add	r3, r2
 8013898:	2200      	movs	r2, #0
 801389a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++)
 801389e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138a0:	3301      	adds	r3, #1
 80138a2:	647b      	str	r3, [r7, #68]	; 0x44
 80138a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138a6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80138aa:	dbed      	blt.n	8013888 <xmp3_DecodeHuffman+0x278>
	
	/* If bits used for 576 samples < huffBlockBits, then the extras are considered
	 *  to be stuffing bits (throw away, but need to return correct bitstream position) 
	 */
	buf += (bitsLeft + *bitOffset) >> 3;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	681a      	ldr	r2, [r3, #0]
 80138b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138b2:	4413      	add	r3, r2
 80138b4:	10db      	asrs	r3, r3, #3
 80138b6:	461a      	mov	r2, r3
 80138b8:	68bb      	ldr	r3, [r7, #8]
 80138ba:	4413      	add	r3, r2
 80138bc:	60bb      	str	r3, [r7, #8]
	*bitOffset = (bitsLeft + *bitOffset) & 0x07;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	681a      	ldr	r2, [r3, #0]
 80138c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138c4:	4413      	add	r3, r2
 80138c6:	f003 0207 	and.w	r2, r3, #7
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	601a      	str	r2, [r3, #0]
	
	return (buf - startBuf);
 80138ce:	68ba      	ldr	r2, [r7, #8]
 80138d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138d2:	1ad3      	subs	r3, r2, r3
}
 80138d4:	4618      	mov	r0, r3
 80138d6:	3750      	adds	r7, #80	; 0x50
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd80      	pop	{r7, pc}
 80138dc:	55555556 	.word	0x55555556

080138e0 <MULSHIFT32>:
{
 80138e0:	b480      	push	{r7}
 80138e2:	b085      	sub	sp, #20
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
 80138e8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80138ea:	6879      	ldr	r1, [r7, #4]
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	fb81 2303 	smull	r2, r3, r1, r3
 80138f2:	60fa      	str	r2, [r7, #12]
 80138f4:	603b      	str	r3, [r7, #0]
    return y;
 80138f6:	683b      	ldr	r3, [r7, #0]
}
 80138f8:	4618      	mov	r0, r3
 80138fa:	3714      	adds	r7, #20
 80138fc:	46bd      	mov	sp, r7
 80138fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013902:	4770      	bx	lr

08013904 <FASTABS>:
{
 8013904:	b480      	push	{r7}
 8013906:	b085      	sub	sp, #20
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
	__asm__ volatile (
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	687a      	ldr	r2, [r7, #4]
 8013910:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8013914:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8013918:	60fb      	str	r3, [r7, #12]
	return t;
 801391a:	68fb      	ldr	r3, [r7, #12]
}
 801391c:	4618      	mov	r0, r3
 801391e:	3714      	adds	r7, #20
 8013920:	46bd      	mov	sp, r7
 8013922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013926:	4770      	bx	lr

08013928 <CLZ>:
{
 8013928:	b480      	push	{r7}
 801392a:	b085      	sub	sp, #20
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
	if (!x)
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d101      	bne.n	801393a <CLZ+0x12>
		return (sizeof(int) * 8);
 8013936:	2320      	movs	r3, #32
 8013938:	e00c      	b.n	8013954 <CLZ+0x2c>
	numZeros = 0;
 801393a:	2300      	movs	r3, #0
 801393c:	60fb      	str	r3, [r7, #12]
	while (!(x & 0x80000000)) {
 801393e:	e005      	b.n	801394c <CLZ+0x24>
		numZeros++;
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	3301      	adds	r3, #1
 8013944:	60fb      	str	r3, [r7, #12]
		x <<= 1;
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	005b      	lsls	r3, r3, #1
 801394a:	607b      	str	r3, [r7, #4]
	while (!(x & 0x80000000)) {
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2b00      	cmp	r3, #0
 8013950:	daf6      	bge.n	8013940 <CLZ+0x18>
	return numZeros;
 8013952:	68fb      	ldr	r3, [r7, #12]
}
 8013954:	4618      	mov	r0, r3
 8013956:	3714      	adds	r7, #20
 8013958:	46bd      	mov	sp, r7
 801395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395e:	4770      	bx	lr

08013960 <AntiAlias>:
 *              assume at least 1 guard bit in x[] to avoid overflow
 *                (should be guaranteed from dequant, and max gain from stproc * max 
 *                 gain from AntiAlias < 2.0)
 **************************************************************************************/
static void AntiAlias(int *x, int nBfly)
{
 8013960:	b590      	push	{r4, r7, lr}
 8013962:	b089      	sub	sp, #36	; 0x24
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
 8013968:	6039      	str	r1, [r7, #0]
	int k, a0, b0, c0, c1;
	const int *c;

	/* csa = Q31 */
	for (k = nBfly; k > 0; k--) {
 801396a:	683b      	ldr	r3, [r7, #0]
 801396c:	61fb      	str	r3, [r7, #28]
 801396e:	e191      	b.n	8013c94 <AntiAlias+0x334>
		c = csa[0];
 8013970:	4ba1      	ldr	r3, [pc, #644]	; (8013bf8 <AntiAlias+0x298>)
 8013972:	61bb      	str	r3, [r7, #24]
		x += 18;
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	3348      	adds	r3, #72	; 0x48
 8013978:	607b      	str	r3, [r7, #4]

		a0 = x[-1];			c0 = *c;	c++;	b0 = x[0];		c1 = *c;	c++;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8013980:	617b      	str	r3, [r7, #20]
 8013982:	69bb      	ldr	r3, [r7, #24]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	613b      	str	r3, [r7, #16]
 8013988:	69bb      	ldr	r3, [r7, #24]
 801398a:	3304      	adds	r3, #4
 801398c:	61bb      	str	r3, [r7, #24]
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	60fb      	str	r3, [r7, #12]
 8013994:	69bb      	ldr	r3, [r7, #24]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	60bb      	str	r3, [r7, #8]
 801399a:	69bb      	ldr	r3, [r7, #24]
 801399c:	3304      	adds	r3, #4
 801399e:	61bb      	str	r3, [r7, #24]
		x[-1] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 80139a0:	6979      	ldr	r1, [r7, #20]
 80139a2:	6938      	ldr	r0, [r7, #16]
 80139a4:	f7ff ff9c 	bl	80138e0 <MULSHIFT32>
 80139a8:	4604      	mov	r4, r0
 80139aa:	68f9      	ldr	r1, [r7, #12]
 80139ac:	68b8      	ldr	r0, [r7, #8]
 80139ae:	f7ff ff97 	bl	80138e0 <MULSHIFT32>
 80139b2:	4603      	mov	r3, r0
 80139b4:	1ae2      	subs	r2, r4, r3
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	3b04      	subs	r3, #4
 80139ba:	0052      	lsls	r2, r2, #1
 80139bc:	601a      	str	r2, [r3, #0]
		x[0] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 80139be:	68f9      	ldr	r1, [r7, #12]
 80139c0:	6938      	ldr	r0, [r7, #16]
 80139c2:	f7ff ff8d 	bl	80138e0 <MULSHIFT32>
 80139c6:	4604      	mov	r4, r0
 80139c8:	6979      	ldr	r1, [r7, #20]
 80139ca:	68b8      	ldr	r0, [r7, #8]
 80139cc:	f7ff ff88 	bl	80138e0 <MULSHIFT32>
 80139d0:	4603      	mov	r3, r0
 80139d2:	4423      	add	r3, r4
 80139d4:	005a      	lsls	r2, r3, #1
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	601a      	str	r2, [r3, #0]

		a0 = x[-2];			c0 = *c;	c++;	b0 = x[1];		c1 = *c;	c++;
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	f853 3c08 	ldr.w	r3, [r3, #-8]
 80139e0:	617b      	str	r3, [r7, #20]
 80139e2:	69bb      	ldr	r3, [r7, #24]
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	613b      	str	r3, [r7, #16]
 80139e8:	69bb      	ldr	r3, [r7, #24]
 80139ea:	3304      	adds	r3, #4
 80139ec:	61bb      	str	r3, [r7, #24]
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	685b      	ldr	r3, [r3, #4]
 80139f2:	60fb      	str	r3, [r7, #12]
 80139f4:	69bb      	ldr	r3, [r7, #24]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	60bb      	str	r3, [r7, #8]
 80139fa:	69bb      	ldr	r3, [r7, #24]
 80139fc:	3304      	adds	r3, #4
 80139fe:	61bb      	str	r3, [r7, #24]
		x[-2] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 8013a00:	6979      	ldr	r1, [r7, #20]
 8013a02:	6938      	ldr	r0, [r7, #16]
 8013a04:	f7ff ff6c 	bl	80138e0 <MULSHIFT32>
 8013a08:	4604      	mov	r4, r0
 8013a0a:	68f9      	ldr	r1, [r7, #12]
 8013a0c:	68b8      	ldr	r0, [r7, #8]
 8013a0e:	f7ff ff67 	bl	80138e0 <MULSHIFT32>
 8013a12:	4603      	mov	r3, r0
 8013a14:	1ae2      	subs	r2, r4, r3
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	3b08      	subs	r3, #8
 8013a1a:	0052      	lsls	r2, r2, #1
 8013a1c:	601a      	str	r2, [r3, #0]
		x[1] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8013a1e:	68f9      	ldr	r1, [r7, #12]
 8013a20:	6938      	ldr	r0, [r7, #16]
 8013a22:	f7ff ff5d 	bl	80138e0 <MULSHIFT32>
 8013a26:	4604      	mov	r4, r0
 8013a28:	6979      	ldr	r1, [r7, #20]
 8013a2a:	68b8      	ldr	r0, [r7, #8]
 8013a2c:	f7ff ff58 	bl	80138e0 <MULSHIFT32>
 8013a30:	4603      	mov	r3, r0
 8013a32:	18e2      	adds	r2, r4, r3
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	3304      	adds	r3, #4
 8013a38:	0052      	lsls	r2, r2, #1
 8013a3a:	601a      	str	r2, [r3, #0]
		
		a0 = x[-3];			c0 = *c;	c++;	b0 = x[2];		c1 = *c;	c++;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8013a42:	617b      	str	r3, [r7, #20]
 8013a44:	69bb      	ldr	r3, [r7, #24]
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	613b      	str	r3, [r7, #16]
 8013a4a:	69bb      	ldr	r3, [r7, #24]
 8013a4c:	3304      	adds	r3, #4
 8013a4e:	61bb      	str	r3, [r7, #24]
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	689b      	ldr	r3, [r3, #8]
 8013a54:	60fb      	str	r3, [r7, #12]
 8013a56:	69bb      	ldr	r3, [r7, #24]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	60bb      	str	r3, [r7, #8]
 8013a5c:	69bb      	ldr	r3, [r7, #24]
 8013a5e:	3304      	adds	r3, #4
 8013a60:	61bb      	str	r3, [r7, #24]
		x[-3] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 8013a62:	6979      	ldr	r1, [r7, #20]
 8013a64:	6938      	ldr	r0, [r7, #16]
 8013a66:	f7ff ff3b 	bl	80138e0 <MULSHIFT32>
 8013a6a:	4604      	mov	r4, r0
 8013a6c:	68f9      	ldr	r1, [r7, #12]
 8013a6e:	68b8      	ldr	r0, [r7, #8]
 8013a70:	f7ff ff36 	bl	80138e0 <MULSHIFT32>
 8013a74:	4603      	mov	r3, r0
 8013a76:	1ae2      	subs	r2, r4, r3
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	3b0c      	subs	r3, #12
 8013a7c:	0052      	lsls	r2, r2, #1
 8013a7e:	601a      	str	r2, [r3, #0]
		x[2] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8013a80:	68f9      	ldr	r1, [r7, #12]
 8013a82:	6938      	ldr	r0, [r7, #16]
 8013a84:	f7ff ff2c 	bl	80138e0 <MULSHIFT32>
 8013a88:	4604      	mov	r4, r0
 8013a8a:	6979      	ldr	r1, [r7, #20]
 8013a8c:	68b8      	ldr	r0, [r7, #8]
 8013a8e:	f7ff ff27 	bl	80138e0 <MULSHIFT32>
 8013a92:	4603      	mov	r3, r0
 8013a94:	18e2      	adds	r2, r4, r3
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	3308      	adds	r3, #8
 8013a9a:	0052      	lsls	r2, r2, #1
 8013a9c:	601a      	str	r2, [r3, #0]

		a0 = x[-4];			c0 = *c;	c++;	b0 = x[3];		c1 = *c;	c++;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8013aa4:	617b      	str	r3, [r7, #20]
 8013aa6:	69bb      	ldr	r3, [r7, #24]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	613b      	str	r3, [r7, #16]
 8013aac:	69bb      	ldr	r3, [r7, #24]
 8013aae:	3304      	adds	r3, #4
 8013ab0:	61bb      	str	r3, [r7, #24]
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	68db      	ldr	r3, [r3, #12]
 8013ab6:	60fb      	str	r3, [r7, #12]
 8013ab8:	69bb      	ldr	r3, [r7, #24]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	60bb      	str	r3, [r7, #8]
 8013abe:	69bb      	ldr	r3, [r7, #24]
 8013ac0:	3304      	adds	r3, #4
 8013ac2:	61bb      	str	r3, [r7, #24]
		x[-4] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 8013ac4:	6979      	ldr	r1, [r7, #20]
 8013ac6:	6938      	ldr	r0, [r7, #16]
 8013ac8:	f7ff ff0a 	bl	80138e0 <MULSHIFT32>
 8013acc:	4604      	mov	r4, r0
 8013ace:	68f9      	ldr	r1, [r7, #12]
 8013ad0:	68b8      	ldr	r0, [r7, #8]
 8013ad2:	f7ff ff05 	bl	80138e0 <MULSHIFT32>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	1ae2      	subs	r2, r4, r3
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	3b10      	subs	r3, #16
 8013ade:	0052      	lsls	r2, r2, #1
 8013ae0:	601a      	str	r2, [r3, #0]
		x[3] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8013ae2:	68f9      	ldr	r1, [r7, #12]
 8013ae4:	6938      	ldr	r0, [r7, #16]
 8013ae6:	f7ff fefb 	bl	80138e0 <MULSHIFT32>
 8013aea:	4604      	mov	r4, r0
 8013aec:	6979      	ldr	r1, [r7, #20]
 8013aee:	68b8      	ldr	r0, [r7, #8]
 8013af0:	f7ff fef6 	bl	80138e0 <MULSHIFT32>
 8013af4:	4603      	mov	r3, r0
 8013af6:	18e2      	adds	r2, r4, r3
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	330c      	adds	r3, #12
 8013afc:	0052      	lsls	r2, r2, #1
 8013afe:	601a      	str	r2, [r3, #0]

		a0 = x[-5];			c0 = *c;	c++;	b0 = x[4];		c1 = *c;	c++;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8013b06:	617b      	str	r3, [r7, #20]
 8013b08:	69bb      	ldr	r3, [r7, #24]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	613b      	str	r3, [r7, #16]
 8013b0e:	69bb      	ldr	r3, [r7, #24]
 8013b10:	3304      	adds	r3, #4
 8013b12:	61bb      	str	r3, [r7, #24]
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	691b      	ldr	r3, [r3, #16]
 8013b18:	60fb      	str	r3, [r7, #12]
 8013b1a:	69bb      	ldr	r3, [r7, #24]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	60bb      	str	r3, [r7, #8]
 8013b20:	69bb      	ldr	r3, [r7, #24]
 8013b22:	3304      	adds	r3, #4
 8013b24:	61bb      	str	r3, [r7, #24]
		x[-5] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 8013b26:	6979      	ldr	r1, [r7, #20]
 8013b28:	6938      	ldr	r0, [r7, #16]
 8013b2a:	f7ff fed9 	bl	80138e0 <MULSHIFT32>
 8013b2e:	4604      	mov	r4, r0
 8013b30:	68f9      	ldr	r1, [r7, #12]
 8013b32:	68b8      	ldr	r0, [r7, #8]
 8013b34:	f7ff fed4 	bl	80138e0 <MULSHIFT32>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	1ae2      	subs	r2, r4, r3
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	3b14      	subs	r3, #20
 8013b40:	0052      	lsls	r2, r2, #1
 8013b42:	601a      	str	r2, [r3, #0]
		x[4] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8013b44:	68f9      	ldr	r1, [r7, #12]
 8013b46:	6938      	ldr	r0, [r7, #16]
 8013b48:	f7ff feca 	bl	80138e0 <MULSHIFT32>
 8013b4c:	4604      	mov	r4, r0
 8013b4e:	6979      	ldr	r1, [r7, #20]
 8013b50:	68b8      	ldr	r0, [r7, #8]
 8013b52:	f7ff fec5 	bl	80138e0 <MULSHIFT32>
 8013b56:	4603      	mov	r3, r0
 8013b58:	18e2      	adds	r2, r4, r3
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	3310      	adds	r3, #16
 8013b5e:	0052      	lsls	r2, r2, #1
 8013b60:	601a      	str	r2, [r3, #0]

		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8013b68:	617b      	str	r3, [r7, #20]
 8013b6a:	69bb      	ldr	r3, [r7, #24]
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	613b      	str	r3, [r7, #16]
 8013b70:	69bb      	ldr	r3, [r7, #24]
 8013b72:	3304      	adds	r3, #4
 8013b74:	61bb      	str	r3, [r7, #24]
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	695b      	ldr	r3, [r3, #20]
 8013b7a:	60fb      	str	r3, [r7, #12]
 8013b7c:	69bb      	ldr	r3, [r7, #24]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	60bb      	str	r3, [r7, #8]
 8013b82:	69bb      	ldr	r3, [r7, #24]
 8013b84:	3304      	adds	r3, #4
 8013b86:	61bb      	str	r3, [r7, #24]
		x[-6] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 8013b88:	6979      	ldr	r1, [r7, #20]
 8013b8a:	6938      	ldr	r0, [r7, #16]
 8013b8c:	f7ff fea8 	bl	80138e0 <MULSHIFT32>
 8013b90:	4604      	mov	r4, r0
 8013b92:	68f9      	ldr	r1, [r7, #12]
 8013b94:	68b8      	ldr	r0, [r7, #8]
 8013b96:	f7ff fea3 	bl	80138e0 <MULSHIFT32>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	1ae2      	subs	r2, r4, r3
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	3b18      	subs	r3, #24
 8013ba2:	0052      	lsls	r2, r2, #1
 8013ba4:	601a      	str	r2, [r3, #0]
		x[5] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8013ba6:	68f9      	ldr	r1, [r7, #12]
 8013ba8:	6938      	ldr	r0, [r7, #16]
 8013baa:	f7ff fe99 	bl	80138e0 <MULSHIFT32>
 8013bae:	4604      	mov	r4, r0
 8013bb0:	6979      	ldr	r1, [r7, #20]
 8013bb2:	68b8      	ldr	r0, [r7, #8]
 8013bb4:	f7ff fe94 	bl	80138e0 <MULSHIFT32>
 8013bb8:	4603      	mov	r3, r0
 8013bba:	18e2      	adds	r2, r4, r3
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	3314      	adds	r3, #20
 8013bc0:	0052      	lsls	r2, r2, #1
 8013bc2:	601a      	str	r2, [r3, #0]

		a0 = x[-7];			c0 = *c;	c++;	b0 = x[6];		c1 = *c;	c++;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8013bca:	617b      	str	r3, [r7, #20]
 8013bcc:	69bb      	ldr	r3, [r7, #24]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	613b      	str	r3, [r7, #16]
 8013bd2:	69bb      	ldr	r3, [r7, #24]
 8013bd4:	3304      	adds	r3, #4
 8013bd6:	61bb      	str	r3, [r7, #24]
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	699b      	ldr	r3, [r3, #24]
 8013bdc:	60fb      	str	r3, [r7, #12]
 8013bde:	69bb      	ldr	r3, [r7, #24]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	60bb      	str	r3, [r7, #8]
 8013be4:	69bb      	ldr	r3, [r7, #24]
 8013be6:	3304      	adds	r3, #4
 8013be8:	61bb      	str	r3, [r7, #24]
		x[-7] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 8013bea:	6979      	ldr	r1, [r7, #20]
 8013bec:	6938      	ldr	r0, [r7, #16]
 8013bee:	f7ff fe77 	bl	80138e0 <MULSHIFT32>
 8013bf2:	4604      	mov	r4, r0
 8013bf4:	68f9      	ldr	r1, [r7, #12]
 8013bf6:	e001      	b.n	8013bfc <AntiAlias+0x29c>
 8013bf8:	0801a75c 	.word	0x0801a75c
 8013bfc:	68b8      	ldr	r0, [r7, #8]
 8013bfe:	f7ff fe6f 	bl	80138e0 <MULSHIFT32>
 8013c02:	4603      	mov	r3, r0
 8013c04:	1ae2      	subs	r2, r4, r3
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	3b1c      	subs	r3, #28
 8013c0a:	0052      	lsls	r2, r2, #1
 8013c0c:	601a      	str	r2, [r3, #0]
		x[6] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8013c0e:	68f9      	ldr	r1, [r7, #12]
 8013c10:	6938      	ldr	r0, [r7, #16]
 8013c12:	f7ff fe65 	bl	80138e0 <MULSHIFT32>
 8013c16:	4604      	mov	r4, r0
 8013c18:	6979      	ldr	r1, [r7, #20]
 8013c1a:	68b8      	ldr	r0, [r7, #8]
 8013c1c:	f7ff fe60 	bl	80138e0 <MULSHIFT32>
 8013c20:	4603      	mov	r3, r0
 8013c22:	18e2      	adds	r2, r4, r3
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	3318      	adds	r3, #24
 8013c28:	0052      	lsls	r2, r2, #1
 8013c2a:	601a      	str	r2, [r3, #0]

		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8013c32:	617b      	str	r3, [r7, #20]
 8013c34:	69bb      	ldr	r3, [r7, #24]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	613b      	str	r3, [r7, #16]
 8013c3a:	69bb      	ldr	r3, [r7, #24]
 8013c3c:	3304      	adds	r3, #4
 8013c3e:	61bb      	str	r3, [r7, #24]
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	69db      	ldr	r3, [r3, #28]
 8013c44:	60fb      	str	r3, [r7, #12]
 8013c46:	69bb      	ldr	r3, [r7, #24]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	60bb      	str	r3, [r7, #8]
 8013c4c:	69bb      	ldr	r3, [r7, #24]
 8013c4e:	3304      	adds	r3, #4
 8013c50:	61bb      	str	r3, [r7, #24]
		x[-8] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 8013c52:	6979      	ldr	r1, [r7, #20]
 8013c54:	6938      	ldr	r0, [r7, #16]
 8013c56:	f7ff fe43 	bl	80138e0 <MULSHIFT32>
 8013c5a:	4604      	mov	r4, r0
 8013c5c:	68f9      	ldr	r1, [r7, #12]
 8013c5e:	68b8      	ldr	r0, [r7, #8]
 8013c60:	f7ff fe3e 	bl	80138e0 <MULSHIFT32>
 8013c64:	4603      	mov	r3, r0
 8013c66:	1ae2      	subs	r2, r4, r3
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	3b20      	subs	r3, #32
 8013c6c:	0052      	lsls	r2, r2, #1
 8013c6e:	601a      	str	r2, [r3, #0]
		x[7] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 8013c70:	68f9      	ldr	r1, [r7, #12]
 8013c72:	6938      	ldr	r0, [r7, #16]
 8013c74:	f7ff fe34 	bl	80138e0 <MULSHIFT32>
 8013c78:	4604      	mov	r4, r0
 8013c7a:	6979      	ldr	r1, [r7, #20]
 8013c7c:	68b8      	ldr	r0, [r7, #8]
 8013c7e:	f7ff fe2f 	bl	80138e0 <MULSHIFT32>
 8013c82:	4603      	mov	r3, r0
 8013c84:	18e2      	adds	r2, r4, r3
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	331c      	adds	r3, #28
 8013c8a:	0052      	lsls	r2, r2, #1
 8013c8c:	601a      	str	r2, [r3, #0]
	for (k = nBfly; k > 0; k--) {
 8013c8e:	69fb      	ldr	r3, [r7, #28]
 8013c90:	3b01      	subs	r3, #1
 8013c92:	61fb      	str	r3, [r7, #28]
 8013c94:	69fb      	ldr	r3, [r7, #28]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	f73f ae6a 	bgt.w	8013970 <AntiAlias+0x10>
	}
}
 8013c9c:	bf00      	nop
 8013c9e:	bf00      	nop
 8013ca0:	3724      	adds	r7, #36	; 0x24
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd90      	pop	{r4, r7, pc}
 8013ca6:	bf00      	nop

08013ca8 <WinPrevious>:
 * Notes:       produces 9 output samples from 18 input samples via symmetry
 *              all blocks gain at least 1 guard bit via window (long blocks get extra
 *                sign bit, short blocks can have one addition but max gain < 1.0)
 **************************************************************************************/
static void WinPrevious(int *xPrev, int *xPrevWin, int btPrev)
{
 8013ca8:	b590      	push	{r4, r7, lr}
 8013caa:	b08f      	sub	sp, #60	; 0x3c
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	60f8      	str	r0, [r7, #12]
 8013cb0:	60b9      	str	r1, [r7, #8]
 8013cb2:	607a      	str	r2, [r7, #4]
	int i, x, *xp, *xpwLo, *xpwHi, wLo, wHi;
	const int *wpLo, *wpHi;

	xp = xPrev;
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	633b      	str	r3, [r7, #48]	; 0x30
	/* mapping (see IMDCT12x3): xPrev[0-2] = sum[6-8], xPrev[3-8] = sum[12-17] */
	if (btPrev == 2) {
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	2b02      	cmp	r3, #2
 8013cbc:	f040 810d 	bne.w	8013eda <WinPrevious+0x232>
		/* this could be reordered for minimum loads/stores */
		wpLo = imdctWin[btPrev];
 8013cc0:	687a      	ldr	r2, [r7, #4]
 8013cc2:	4613      	mov	r3, r2
 8013cc4:	00db      	lsls	r3, r3, #3
 8013cc6:	4413      	add	r3, r2
 8013cc8:	011b      	lsls	r3, r3, #4
 8013cca:	4aa3      	ldr	r2, [pc, #652]	; (8013f58 <WinPrevious+0x2b0>)
 8013ccc:	4413      	add	r3, r2
 8013cce:	627b      	str	r3, [r7, #36]	; 0x24
		xPrevWin[ 0] = MULSHIFT32(wpLo[ 6], xPrev[2]) + MULSHIFT32(wpLo[0], xPrev[6]);
 8013cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cd2:	3318      	adds	r3, #24
 8013cd4:	681a      	ldr	r2, [r3, #0]
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	3308      	adds	r3, #8
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	4619      	mov	r1, r3
 8013cde:	4610      	mov	r0, r2
 8013ce0:	f7ff fdfe 	bl	80138e0 <MULSHIFT32>
 8013ce4:	4604      	mov	r4, r0
 8013ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce8:	681a      	ldr	r2, [r3, #0]
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	3318      	adds	r3, #24
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	4619      	mov	r1, r3
 8013cf2:	4610      	mov	r0, r2
 8013cf4:	f7ff fdf4 	bl	80138e0 <MULSHIFT32>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	18e2      	adds	r2, r4, r3
 8013cfc:	68bb      	ldr	r3, [r7, #8]
 8013cfe:	601a      	str	r2, [r3, #0]
		xPrevWin[ 1] = MULSHIFT32(wpLo[ 7], xPrev[1]) + MULSHIFT32(wpLo[1], xPrev[7]);
 8013d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d02:	331c      	adds	r3, #28
 8013d04:	681a      	ldr	r2, [r3, #0]
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	3304      	adds	r3, #4
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	4619      	mov	r1, r3
 8013d0e:	4610      	mov	r0, r2
 8013d10:	f7ff fde6 	bl	80138e0 <MULSHIFT32>
 8013d14:	4604      	mov	r4, r0
 8013d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d18:	3304      	adds	r3, #4
 8013d1a:	681a      	ldr	r2, [r3, #0]
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	331c      	adds	r3, #28
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	4619      	mov	r1, r3
 8013d24:	4610      	mov	r0, r2
 8013d26:	f7ff fddb 	bl	80138e0 <MULSHIFT32>
 8013d2a:	4602      	mov	r2, r0
 8013d2c:	68bb      	ldr	r3, [r7, #8]
 8013d2e:	3304      	adds	r3, #4
 8013d30:	4422      	add	r2, r4
 8013d32:	601a      	str	r2, [r3, #0]
		xPrevWin[ 2] = MULSHIFT32(wpLo[ 8], xPrev[0]) + MULSHIFT32(wpLo[2], xPrev[8]);
 8013d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d36:	3320      	adds	r3, #32
 8013d38:	681a      	ldr	r2, [r3, #0]
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	4619      	mov	r1, r3
 8013d40:	4610      	mov	r0, r2
 8013d42:	f7ff fdcd 	bl	80138e0 <MULSHIFT32>
 8013d46:	4604      	mov	r4, r0
 8013d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d4a:	3308      	adds	r3, #8
 8013d4c:	681a      	ldr	r2, [r3, #0]
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	3320      	adds	r3, #32
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	4619      	mov	r1, r3
 8013d56:	4610      	mov	r0, r2
 8013d58:	f7ff fdc2 	bl	80138e0 <MULSHIFT32>
 8013d5c:	4602      	mov	r2, r0
 8013d5e:	68bb      	ldr	r3, [r7, #8]
 8013d60:	3308      	adds	r3, #8
 8013d62:	4422      	add	r2, r4
 8013d64:	601a      	str	r2, [r3, #0]
		xPrevWin[ 3] = MULSHIFT32(wpLo[ 9], xPrev[0]) + MULSHIFT32(wpLo[3], xPrev[8]);
 8013d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d68:	3324      	adds	r3, #36	; 0x24
 8013d6a:	681a      	ldr	r2, [r3, #0]
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	4619      	mov	r1, r3
 8013d72:	4610      	mov	r0, r2
 8013d74:	f7ff fdb4 	bl	80138e0 <MULSHIFT32>
 8013d78:	4604      	mov	r4, r0
 8013d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d7c:	330c      	adds	r3, #12
 8013d7e:	681a      	ldr	r2, [r3, #0]
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	3320      	adds	r3, #32
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	4619      	mov	r1, r3
 8013d88:	4610      	mov	r0, r2
 8013d8a:	f7ff fda9 	bl	80138e0 <MULSHIFT32>
 8013d8e:	4602      	mov	r2, r0
 8013d90:	68bb      	ldr	r3, [r7, #8]
 8013d92:	330c      	adds	r3, #12
 8013d94:	4422      	add	r2, r4
 8013d96:	601a      	str	r2, [r3, #0]
		xPrevWin[ 4] = MULSHIFT32(wpLo[10], xPrev[1]) + MULSHIFT32(wpLo[4], xPrev[7]);
 8013d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d9a:	3328      	adds	r3, #40	; 0x28
 8013d9c:	681a      	ldr	r2, [r3, #0]
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	3304      	adds	r3, #4
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	4619      	mov	r1, r3
 8013da6:	4610      	mov	r0, r2
 8013da8:	f7ff fd9a 	bl	80138e0 <MULSHIFT32>
 8013dac:	4604      	mov	r4, r0
 8013dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db0:	3310      	adds	r3, #16
 8013db2:	681a      	ldr	r2, [r3, #0]
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	331c      	adds	r3, #28
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	4619      	mov	r1, r3
 8013dbc:	4610      	mov	r0, r2
 8013dbe:	f7ff fd8f 	bl	80138e0 <MULSHIFT32>
 8013dc2:	4602      	mov	r2, r0
 8013dc4:	68bb      	ldr	r3, [r7, #8]
 8013dc6:	3310      	adds	r3, #16
 8013dc8:	4422      	add	r2, r4
 8013dca:	601a      	str	r2, [r3, #0]
		xPrevWin[ 5] = MULSHIFT32(wpLo[11], xPrev[2]) + MULSHIFT32(wpLo[5], xPrev[6]);
 8013dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dce:	332c      	adds	r3, #44	; 0x2c
 8013dd0:	681a      	ldr	r2, [r3, #0]
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	3308      	adds	r3, #8
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	4619      	mov	r1, r3
 8013dda:	4610      	mov	r0, r2
 8013ddc:	f7ff fd80 	bl	80138e0 <MULSHIFT32>
 8013de0:	4604      	mov	r4, r0
 8013de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de4:	3314      	adds	r3, #20
 8013de6:	681a      	ldr	r2, [r3, #0]
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	3318      	adds	r3, #24
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	4619      	mov	r1, r3
 8013df0:	4610      	mov	r0, r2
 8013df2:	f7ff fd75 	bl	80138e0 <MULSHIFT32>
 8013df6:	4602      	mov	r2, r0
 8013df8:	68bb      	ldr	r3, [r7, #8]
 8013dfa:	3314      	adds	r3, #20
 8013dfc:	4422      	add	r2, r4
 8013dfe:	601a      	str	r2, [r3, #0]
		xPrevWin[ 6] = MULSHIFT32(wpLo[ 6], xPrev[5]);
 8013e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e02:	3318      	adds	r3, #24
 8013e04:	681a      	ldr	r2, [r3, #0]
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	3314      	adds	r3, #20
 8013e0a:	6819      	ldr	r1, [r3, #0]
 8013e0c:	68bb      	ldr	r3, [r7, #8]
 8013e0e:	f103 0418 	add.w	r4, r3, #24
 8013e12:	4610      	mov	r0, r2
 8013e14:	f7ff fd64 	bl	80138e0 <MULSHIFT32>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	6023      	str	r3, [r4, #0]
		xPrevWin[ 7] = MULSHIFT32(wpLo[ 7], xPrev[4]);
 8013e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e1e:	331c      	adds	r3, #28
 8013e20:	681a      	ldr	r2, [r3, #0]
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	3310      	adds	r3, #16
 8013e26:	6819      	ldr	r1, [r3, #0]
 8013e28:	68bb      	ldr	r3, [r7, #8]
 8013e2a:	f103 041c 	add.w	r4, r3, #28
 8013e2e:	4610      	mov	r0, r2
 8013e30:	f7ff fd56 	bl	80138e0 <MULSHIFT32>
 8013e34:	4603      	mov	r3, r0
 8013e36:	6023      	str	r3, [r4, #0]
		xPrevWin[ 8] = MULSHIFT32(wpLo[ 8], xPrev[3]);
 8013e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3a:	3320      	adds	r3, #32
 8013e3c:	681a      	ldr	r2, [r3, #0]
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	330c      	adds	r3, #12
 8013e42:	6819      	ldr	r1, [r3, #0]
 8013e44:	68bb      	ldr	r3, [r7, #8]
 8013e46:	f103 0420 	add.w	r4, r3, #32
 8013e4a:	4610      	mov	r0, r2
 8013e4c:	f7ff fd48 	bl	80138e0 <MULSHIFT32>
 8013e50:	4603      	mov	r3, r0
 8013e52:	6023      	str	r3, [r4, #0]
		xPrevWin[ 9] = MULSHIFT32(wpLo[ 9], xPrev[3]);
 8013e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e56:	3324      	adds	r3, #36	; 0x24
 8013e58:	681a      	ldr	r2, [r3, #0]
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	330c      	adds	r3, #12
 8013e5e:	6819      	ldr	r1, [r3, #0]
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8013e66:	4610      	mov	r0, r2
 8013e68:	f7ff fd3a 	bl	80138e0 <MULSHIFT32>
 8013e6c:	4603      	mov	r3, r0
 8013e6e:	6023      	str	r3, [r4, #0]
		xPrevWin[10] = MULSHIFT32(wpLo[10], xPrev[4]);
 8013e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e72:	3328      	adds	r3, #40	; 0x28
 8013e74:	681a      	ldr	r2, [r3, #0]
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	3310      	adds	r3, #16
 8013e7a:	6819      	ldr	r1, [r3, #0]
 8013e7c:	68bb      	ldr	r3, [r7, #8]
 8013e7e:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8013e82:	4610      	mov	r0, r2
 8013e84:	f7ff fd2c 	bl	80138e0 <MULSHIFT32>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	6023      	str	r3, [r4, #0]
		xPrevWin[11] = MULSHIFT32(wpLo[11], xPrev[5]);
 8013e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e8e:	332c      	adds	r3, #44	; 0x2c
 8013e90:	681a      	ldr	r2, [r3, #0]
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	3314      	adds	r3, #20
 8013e96:	6819      	ldr	r1, [r3, #0]
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8013e9e:	4610      	mov	r0, r2
 8013ea0:	f7ff fd1e 	bl	80138e0 <MULSHIFT32>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	6023      	str	r3, [r4, #0]
		xPrevWin[12] = xPrevWin[13] = xPrevWin[14] = xPrevWin[15] = xPrevWin[16] = xPrevWin[17] = 0;
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	3344      	adds	r3, #68	; 0x44
 8013eac:	2200      	movs	r2, #0
 8013eae:	601a      	str	r2, [r3, #0]
 8013eb0:	68ba      	ldr	r2, [r7, #8]
 8013eb2:	3240      	adds	r2, #64	; 0x40
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	6013      	str	r3, [r2, #0]
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	333c      	adds	r3, #60	; 0x3c
 8013ebc:	6812      	ldr	r2, [r2, #0]
 8013ebe:	601a      	str	r2, [r3, #0]
 8013ec0:	68ba      	ldr	r2, [r7, #8]
 8013ec2:	3238      	adds	r2, #56	; 0x38
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	6013      	str	r3, [r2, #0]
 8013ec8:	68bb      	ldr	r3, [r7, #8]
 8013eca:	3334      	adds	r3, #52	; 0x34
 8013ecc:	6812      	ldr	r2, [r2, #0]
 8013ece:	601a      	str	r2, [r3, #0]
 8013ed0:	68ba      	ldr	r2, [r7, #8]
 8013ed2:	3230      	adds	r2, #48	; 0x30
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	6013      	str	r3, [r2, #0]
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
			*xpwLo++ = MULSHIFT32(wLo, x);
			*xpwHi-- = MULSHIFT32(wHi, x);
		}
	}
}
 8013ed8:	e03a      	b.n	8013f50 <WinPrevious+0x2a8>
		wpLo = imdctWin[btPrev] + 18;
 8013eda:	687a      	ldr	r2, [r7, #4]
 8013edc:	4613      	mov	r3, r2
 8013ede:	00db      	lsls	r3, r3, #3
 8013ee0:	4413      	add	r3, r2
 8013ee2:	011b      	lsls	r3, r3, #4
 8013ee4:	4a1c      	ldr	r2, [pc, #112]	; (8013f58 <WinPrevious+0x2b0>)
 8013ee6:	4413      	add	r3, r2
 8013ee8:	3348      	adds	r3, #72	; 0x48
 8013eea:	627b      	str	r3, [r7, #36]	; 0x24
		wpHi = wpLo + 17;
 8013eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eee:	3344      	adds	r3, #68	; 0x44
 8013ef0:	623b      	str	r3, [r7, #32]
		xpwLo = xPrevWin;
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
		xpwHi = xPrevWin + 17;
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	3344      	adds	r3, #68	; 0x44
 8013efa:	62bb      	str	r3, [r7, #40]	; 0x28
		for (i = 9; i > 0; i--) {
 8013efc:	2309      	movs	r3, #9
 8013efe:	637b      	str	r3, [r7, #52]	; 0x34
 8013f00:	e023      	b.n	8013f4a <WinPrevious+0x2a2>
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 8013f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f04:	1d1a      	adds	r2, r3, #4
 8013f06:	633a      	str	r2, [r7, #48]	; 0x30
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	61fb      	str	r3, [r7, #28]
 8013f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f0e:	1d1a      	adds	r2, r3, #4
 8013f10:	627a      	str	r2, [r7, #36]	; 0x24
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	61bb      	str	r3, [r7, #24]
 8013f16:	6a3b      	ldr	r3, [r7, #32]
 8013f18:	1f1a      	subs	r2, r3, #4
 8013f1a:	623a      	str	r2, [r7, #32]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	617b      	str	r3, [r7, #20]
			*xpwLo++ = MULSHIFT32(wLo, x);
 8013f20:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8013f22:	1d23      	adds	r3, r4, #4
 8013f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013f26:	69f9      	ldr	r1, [r7, #28]
 8013f28:	69b8      	ldr	r0, [r7, #24]
 8013f2a:	f7ff fcd9 	bl	80138e0 <MULSHIFT32>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	6023      	str	r3, [r4, #0]
			*xpwHi-- = MULSHIFT32(wHi, x);
 8013f32:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8013f34:	1f23      	subs	r3, r4, #4
 8013f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8013f38:	69f9      	ldr	r1, [r7, #28]
 8013f3a:	6978      	ldr	r0, [r7, #20]
 8013f3c:	f7ff fcd0 	bl	80138e0 <MULSHIFT32>
 8013f40:	4603      	mov	r3, r0
 8013f42:	6023      	str	r3, [r4, #0]
		for (i = 9; i > 0; i--) {
 8013f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f46:	3b01      	subs	r3, #1
 8013f48:	637b      	str	r3, [r7, #52]	; 0x34
 8013f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	dcd8      	bgt.n	8013f02 <WinPrevious+0x25a>
}
 8013f50:	bf00      	nop
 8013f52:	373c      	adds	r7, #60	; 0x3c
 8013f54:	46bd      	mov	sp, r7
 8013f56:	bd90      	pop	{r4, r7, pc}
 8013f58:	0801a3d4 	.word	0x0801a3d4

08013f5c <FreqInvertRescale>:
 *              rescaled (as necessary) previous samples
 *
 * Return:      updated mOut (from new outputs y)
 **************************************************************************************/
static int FreqInvertRescale(int *y, int *xPrev, int blockIdx, int es)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b096      	sub	sp, #88	; 0x58
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	60f8      	str	r0, [r7, #12]
 8013f64:	60b9      	str	r1, [r7, #8]
 8013f66:	607a      	str	r2, [r7, #4]
 8013f68:	603b      	str	r3, [r7, #0]
	int i, d, mOut;
	int y0, y1, y2, y3, y4, y5, y6, y7, y8;

	if (es == 0) {
 8013f6a:	683b      	ldr	r3, [r7, #0]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	f040 8096 	bne.w	801409e <FreqInvertRescale+0x142>
		/* fast case - frequency invert only (no rescaling) - can fuse into overlap-add for speed, if desired */
		if (blockIdx & 0x01) {
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	f003 0301 	and.w	r3, r3, #1
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	f000 808e 	beq.w	801409a <FreqInvertRescale+0x13e>
			y += NBANDS;
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	3380      	adds	r3, #128	; 0x80
 8013f82:	60fb      	str	r3, [r7, #12]
			y0 = *y;	y += 2*NBANDS;
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	633b      	str	r3, [r7, #48]	; 0x30
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013f90:	60fb      	str	r3, [r7, #12]
			y1 = *y;	y += 2*NBANDS;
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013f9e:	60fb      	str	r3, [r7, #12]
			y2 = *y;	y += 2*NBANDS;
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013fac:	60fb      	str	r3, [r7, #12]
			y3 = *y;	y += 2*NBANDS;
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013fba:	60fb      	str	r3, [r7, #12]
			y4 = *y;	y += 2*NBANDS;
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	623b      	str	r3, [r7, #32]
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013fc8:	60fb      	str	r3, [r7, #12]
			y5 = *y;	y += 2*NBANDS;
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	61fb      	str	r3, [r7, #28]
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013fd6:	60fb      	str	r3, [r7, #12]
			y6 = *y;	y += 2*NBANDS;
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	61bb      	str	r3, [r7, #24]
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013fe4:	60fb      	str	r3, [r7, #12]
			y7 = *y;	y += 2*NBANDS;
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	617b      	str	r3, [r7, #20]
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013ff2:	60fb      	str	r3, [r7, #12]
			y8 = *y;	y += 2*NBANDS;
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	613b      	str	r3, [r7, #16]
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014000:	60fb      	str	r3, [r7, #12]

			y -= 18*NBANDS;
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 8014008:	60fb      	str	r3, [r7, #12]
			*y = -y0;	y += 2*NBANDS;
 801400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801400c:	425a      	negs	r2, r3
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	601a      	str	r2, [r3, #0]
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014018:	60fb      	str	r3, [r7, #12]
			*y = -y1;	y += 2*NBANDS;
 801401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801401c:	425a      	negs	r2, r3
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	601a      	str	r2, [r3, #0]
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014028:	60fb      	str	r3, [r7, #12]
			*y = -y2;	y += 2*NBANDS;
 801402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801402c:	425a      	negs	r2, r3
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	601a      	str	r2, [r3, #0]
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014038:	60fb      	str	r3, [r7, #12]
			*y = -y3;	y += 2*NBANDS;
 801403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801403c:	425a      	negs	r2, r3
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	601a      	str	r2, [r3, #0]
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014048:	60fb      	str	r3, [r7, #12]
			*y = -y4;	y += 2*NBANDS;
 801404a:	6a3b      	ldr	r3, [r7, #32]
 801404c:	425a      	negs	r2, r3
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	601a      	str	r2, [r3, #0]
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014058:	60fb      	str	r3, [r7, #12]
			*y = -y5;	y += 2*NBANDS;
 801405a:	69fb      	ldr	r3, [r7, #28]
 801405c:	425a      	negs	r2, r3
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	601a      	str	r2, [r3, #0]
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014068:	60fb      	str	r3, [r7, #12]
			*y = -y6;	y += 2*NBANDS;
 801406a:	69bb      	ldr	r3, [r7, #24]
 801406c:	425a      	negs	r2, r3
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	601a      	str	r2, [r3, #0]
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014078:	60fb      	str	r3, [r7, #12]
			*y = -y7;	y += 2*NBANDS;
 801407a:	697b      	ldr	r3, [r7, #20]
 801407c:	425a      	negs	r2, r3
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	601a      	str	r2, [r3, #0]
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014088:	60fb      	str	r3, [r7, #12]
			*y = -y8;	y += 2*NBANDS;
 801408a:	693b      	ldr	r3, [r7, #16]
 801408c:	425a      	negs	r2, r3
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	601a      	str	r2, [r3, #0]
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014098:	60fb      	str	r3, [r7, #12]
		}
		return 0;
 801409a:	2300      	movs	r3, #0
 801409c:	e0ff      	b.n	801429e <FreqInvertRescale+0x342>
	} else {
		/* undo pre-IMDCT scaling, clipping if necessary */
		mOut = 0;
 801409e:	2300      	movs	r3, #0
 80140a0:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (blockIdx & 0x01) {
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	f003 0301 	and.w	r3, r3, #1
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d07c      	beq.n	80141a6 <FreqInvertRescale+0x24a>
			/* frequency invert */
			for (i = 0; i < 18; i+=2) {
 80140ac:	2300      	movs	r3, #0
 80140ae:	657b      	str	r3, [r7, #84]	; 0x54
 80140b0:	e075      	b.n	801419e <FreqInvertRescale+0x242>
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	653b      	str	r3, [r7, #80]	; 0x50
 80140b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80140ba:	17db      	asrs	r3, r3, #31
 80140bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	f1c3 031f 	rsb	r3, r3, #31
 80140c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80140c6:	fa42 f303 	asr.w	r3, r2, r3
 80140ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80140cc:	429a      	cmp	r2, r3
 80140ce:	d008      	beq.n	80140e2 <FreqInvertRescale+0x186>
 80140d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	fa22 f303 	lsr.w	r3, r2, r3
 80140da:	3b01      	subs	r3, #1
 80140dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80140de:	4053      	eors	r3, r2
 80140e0:	653b      	str	r3, [r7, #80]	; 0x50
 80140e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	409a      	lsls	r2, r3
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	601a      	str	r2, [r3, #0]
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	4618      	mov	r0, r3
 80140f2:	f7ff fc07 	bl	8013904 <FASTABS>
 80140f6:	4602      	mov	r2, r0
 80140f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140fa:	4313      	orrs	r3, r2
 80140fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	3380      	adds	r3, #128	; 0x80
 8014102:	60fb      	str	r3, [r7, #12]
				d = -*y;	CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	425b      	negs	r3, r3
 801410a:	653b      	str	r3, [r7, #80]	; 0x50
 801410c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801410e:	17db      	asrs	r3, r3, #31
 8014110:	63bb      	str	r3, [r7, #56]	; 0x38
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	f1c3 031f 	rsb	r3, r3, #31
 8014118:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801411a:	fa42 f303 	asr.w	r3, r2, r3
 801411e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014120:	429a      	cmp	r2, r3
 8014122:	d008      	beq.n	8014136 <FreqInvertRescale+0x1da>
 8014124:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014128:	683b      	ldr	r3, [r7, #0]
 801412a:	fa22 f303 	lsr.w	r3, r2, r3
 801412e:	3b01      	subs	r3, #1
 8014130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014132:	4053      	eors	r3, r2
 8014134:	653b      	str	r3, [r7, #80]	; 0x50
 8014136:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	409a      	lsls	r2, r3
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	601a      	str	r2, [r3, #0]
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	4618      	mov	r0, r3
 8014146:	f7ff fbdd 	bl	8013904 <FASTABS>
 801414a:	4602      	mov	r2, r0
 801414c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801414e:	4313      	orrs	r3, r2
 8014150:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	3380      	adds	r3, #128	; 0x80
 8014156:	60fb      	str	r3, [r7, #12]
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	653b      	str	r3, [r7, #80]	; 0x50
 801415e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014160:	17db      	asrs	r3, r3, #31
 8014162:	637b      	str	r3, [r7, #52]	; 0x34
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	f1c3 031f 	rsb	r3, r3, #31
 801416a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801416c:	fa42 f303 	asr.w	r3, r2, r3
 8014170:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014172:	429a      	cmp	r2, r3
 8014174:	d008      	beq.n	8014188 <FreqInvertRescale+0x22c>
 8014176:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801417a:	683b      	ldr	r3, [r7, #0]
 801417c:	fa22 f303 	lsr.w	r3, r2, r3
 8014180:	3b01      	subs	r3, #1
 8014182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014184:	4053      	eors	r3, r2
 8014186:	653b      	str	r3, [r7, #80]	; 0x50
 8014188:	68bb      	ldr	r3, [r7, #8]
 801418a:	1d1a      	adds	r2, r3, #4
 801418c:	60ba      	str	r2, [r7, #8]
 801418e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014190:	683a      	ldr	r2, [r7, #0]
 8014192:	fa01 f202 	lsl.w	r2, r1, r2
 8014196:	601a      	str	r2, [r3, #0]
			for (i = 0; i < 18; i+=2) {
 8014198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801419a:	3302      	adds	r3, #2
 801419c:	657b      	str	r3, [r7, #84]	; 0x54
 801419e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80141a0:	2b11      	cmp	r3, #17
 80141a2:	dd86      	ble.n	80140b2 <FreqInvertRescale+0x156>
 80141a4:	e07a      	b.n	801429c <FreqInvertRescale+0x340>
			}
		} else {
			for (i = 0; i < 18; i+=2) {
 80141a6:	2300      	movs	r3, #0
 80141a8:	657b      	str	r3, [r7, #84]	; 0x54
 80141aa:	e074      	b.n	8014296 <FreqInvertRescale+0x33a>
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	653b      	str	r3, [r7, #80]	; 0x50
 80141b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141b4:	17db      	asrs	r3, r3, #31
 80141b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80141b8:	683b      	ldr	r3, [r7, #0]
 80141ba:	f1c3 031f 	rsb	r3, r3, #31
 80141be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80141c0:	fa42 f303 	asr.w	r3, r2, r3
 80141c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80141c6:	429a      	cmp	r2, r3
 80141c8:	d008      	beq.n	80141dc <FreqInvertRescale+0x280>
 80141ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80141ce:	683b      	ldr	r3, [r7, #0]
 80141d0:	fa22 f303 	lsr.w	r3, r2, r3
 80141d4:	3b01      	subs	r3, #1
 80141d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80141d8:	4053      	eors	r3, r2
 80141da:	653b      	str	r3, [r7, #80]	; 0x50
 80141dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	409a      	lsls	r2, r3
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	601a      	str	r2, [r3, #0]
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	4618      	mov	r0, r3
 80141ec:	f7ff fb8a 	bl	8013904 <FASTABS>
 80141f0:	4602      	mov	r2, r0
 80141f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141f4:	4313      	orrs	r3, r2
 80141f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	3380      	adds	r3, #128	; 0x80
 80141fc:	60fb      	str	r3, [r7, #12]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	653b      	str	r3, [r7, #80]	; 0x50
 8014204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014206:	17db      	asrs	r3, r3, #31
 8014208:	647b      	str	r3, [r7, #68]	; 0x44
 801420a:	683b      	ldr	r3, [r7, #0]
 801420c:	f1c3 031f 	rsb	r3, r3, #31
 8014210:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014212:	fa42 f303 	asr.w	r3, r2, r3
 8014216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014218:	429a      	cmp	r2, r3
 801421a:	d008      	beq.n	801422e <FreqInvertRescale+0x2d2>
 801421c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014220:	683b      	ldr	r3, [r7, #0]
 8014222:	fa22 f303 	lsr.w	r3, r2, r3
 8014226:	3b01      	subs	r3, #1
 8014228:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801422a:	4053      	eors	r3, r2
 801422c:	653b      	str	r3, [r7, #80]	; 0x50
 801422e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	409a      	lsls	r2, r3
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	601a      	str	r2, [r3, #0]
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	4618      	mov	r0, r3
 801423e:	f7ff fb61 	bl	8013904 <FASTABS>
 8014242:	4602      	mov	r2, r0
 8014244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014246:	4313      	orrs	r3, r2
 8014248:	64fb      	str	r3, [r7, #76]	; 0x4c
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	3380      	adds	r3, #128	; 0x80
 801424e:	60fb      	str	r3, [r7, #12]
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	653b      	str	r3, [r7, #80]	; 0x50
 8014256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014258:	17db      	asrs	r3, r3, #31
 801425a:	643b      	str	r3, [r7, #64]	; 0x40
 801425c:	683b      	ldr	r3, [r7, #0]
 801425e:	f1c3 031f 	rsb	r3, r3, #31
 8014262:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014264:	fa42 f303 	asr.w	r3, r2, r3
 8014268:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801426a:	429a      	cmp	r2, r3
 801426c:	d008      	beq.n	8014280 <FreqInvertRescale+0x324>
 801426e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014272:	683b      	ldr	r3, [r7, #0]
 8014274:	fa22 f303 	lsr.w	r3, r2, r3
 8014278:	3b01      	subs	r3, #1
 801427a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801427c:	4053      	eors	r3, r2
 801427e:	653b      	str	r3, [r7, #80]	; 0x50
 8014280:	68bb      	ldr	r3, [r7, #8]
 8014282:	1d1a      	adds	r2, r3, #4
 8014284:	60ba      	str	r2, [r7, #8]
 8014286:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014288:	683a      	ldr	r2, [r7, #0]
 801428a:	fa01 f202 	lsl.w	r2, r1, r2
 801428e:	601a      	str	r2, [r3, #0]
			for (i = 0; i < 18; i+=2) {
 8014290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014292:	3302      	adds	r3, #2
 8014294:	657b      	str	r3, [r7, #84]	; 0x54
 8014296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014298:	2b11      	cmp	r3, #17
 801429a:	dd87      	ble.n	80141ac <FreqInvertRescale+0x250>
			}
		}
		return mOut;
 801429c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
	}
}
 801429e:	4618      	mov	r0, r3
 80142a0:	3758      	adds	r7, #88	; 0x58
 80142a2:	46bd      	mov	sp, r7
 80142a4:	bd80      	pop	{r7, pc}
	...

080142a8 <idct9>:
	0x7f834ed0, 0x7ba3751d, 0x7401e4c1, 0x68d9f964, 0x5a82799a, 0x496af3e2, 0x36185aee, 0x2120fb83, 0x0b27eb5c, 
};

/* require at least 3 guard bits in x[] to ensure no overflow */
static __inline void idct9(int *x)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b0b0      	sub	sp, #192	; 0xc0
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
	int a10, a11, a12, a13, a14, a15, a16, a17, a18;
	int a19, a20, a21, a22, a23, a24, a25, a26, a27;
	int m1, m3, m5, m6, m7, m8, m9, m10, m11, m12;
	int x0, x1, x2, x3, x4, x5, x6, x7, x8;

	x0 = x[0]; x1 = x[1]; x2 = x[2]; x3 = x[3]; x4 = x[4];
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	685b      	ldr	r3, [r3, #4]
 80142bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	689b      	ldr	r3, [r3, #8]
 80142c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	68db      	ldr	r3, [r3, #12]
 80142cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	691b      	ldr	r3, [r3, #16]
 80142d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	x5 = x[5]; x6 = x[6]; x7 = x[7]; x8 = x[8];
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	695b      	ldr	r3, [r3, #20]
 80142dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	699b      	ldr	r3, [r3, #24]
 80142e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	69db      	ldr	r3, [r3, #28]
 80142ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	6a1b      	ldr	r3, [r3, #32]
 80142f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	a1 = x0 - x6;
 80142f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80142fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014300:	1ad3      	subs	r3, r2, r3
 8014302:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	a2 = x1 - x5;
 8014306:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801430a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801430e:	1ad3      	subs	r3, r2, r3
 8014310:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	a3 = x1 + x5;
 8014314:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8014318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801431c:	4413      	add	r3, r2
 801431e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	a4 = x2 - x4;
 8014322:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801432a:	1ad3      	subs	r3, r2, r3
 801432c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	a5 = x2 + x4;
 8014330:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014338:	4413      	add	r3, r2
 801433a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	a6 = x2 + x8;
 801433e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014342:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014346:	4413      	add	r3, r2
 8014348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	a7 = x1 + x7;
 801434c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8014350:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014354:	4413      	add	r3, r2
 8014356:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	a8 = a6 - a5;		/* ie x[8] - x[4] */
 801435a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801435e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014362:	1ad3      	subs	r3, r2, r3
 8014364:	67fb      	str	r3, [r7, #124]	; 0x7c
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 8014366:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801436a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801436e:	1ad3      	subs	r3, r2, r3
 8014370:	67bb      	str	r3, [r7, #120]	; 0x78
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 8014372:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801437a:	1ad3      	subs	r3, r2, r3
 801437c:	677b      	str	r3, [r7, #116]	; 0x74
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 801437e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8014382:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014386:	1ad3      	subs	r3, r2, r3
 8014388:	673b      	str	r3, [r7, #112]	; 0x70

	/* do the << 1 as constant shifts where mX is actually used (free, no stall or extra inst.) */
	m1 =  MULSHIFT32(c9_0, x3);
 801438a:	4b79      	ldr	r3, [pc, #484]	; (8014570 <idct9+0x2c8>)
 801438c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8014390:	4618      	mov	r0, r3
 8014392:	f7ff faa5 	bl	80138e0 <MULSHIFT32>
 8014396:	66f8      	str	r0, [r7, #108]	; 0x6c
	m3 =  MULSHIFT32(c9_0, a10);
 8014398:	4b75      	ldr	r3, [pc, #468]	; (8014570 <idct9+0x2c8>)
 801439a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801439c:	4618      	mov	r0, r3
 801439e:	f7ff fa9f 	bl	80138e0 <MULSHIFT32>
 80143a2:	66b8      	str	r0, [r7, #104]	; 0x68
	m5 =  MULSHIFT32(c9_1, a5);
 80143a4:	4b73      	ldr	r3, [pc, #460]	; (8014574 <idct9+0x2cc>)
 80143a6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80143aa:	4618      	mov	r0, r3
 80143ac:	f7ff fa98 	bl	80138e0 <MULSHIFT32>
 80143b0:	6678      	str	r0, [r7, #100]	; 0x64
	m6 =  MULSHIFT32(c9_2, a6);
 80143b2:	4b71      	ldr	r3, [pc, #452]	; (8014578 <idct9+0x2d0>)
 80143b4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7ff fa91 	bl	80138e0 <MULSHIFT32>
 80143be:	6638      	str	r0, [r7, #96]	; 0x60
	m7 =  MULSHIFT32(c9_1, a8);
 80143c0:	4b6c      	ldr	r3, [pc, #432]	; (8014574 <idct9+0x2cc>)
 80143c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7ff fa8b 	bl	80138e0 <MULSHIFT32>
 80143ca:	65f8      	str	r0, [r7, #92]	; 0x5c
	m8 =  MULSHIFT32(c9_2, a5);
 80143cc:	4b6a      	ldr	r3, [pc, #424]	; (8014578 <idct9+0x2d0>)
 80143ce:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80143d2:	4618      	mov	r0, r3
 80143d4:	f7ff fa84 	bl	80138e0 <MULSHIFT32>
 80143d8:	65b8      	str	r0, [r7, #88]	; 0x58
	m9 =  MULSHIFT32(c9_3, a9);
 80143da:	4b68      	ldr	r3, [pc, #416]	; (801457c <idct9+0x2d4>)
 80143dc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80143de:	4618      	mov	r0, r3
 80143e0:	f7ff fa7e 	bl	80138e0 <MULSHIFT32>
 80143e4:	6578      	str	r0, [r7, #84]	; 0x54
	m10 = MULSHIFT32(c9_4, a7);
 80143e6:	4b66      	ldr	r3, [pc, #408]	; (8014580 <idct9+0x2d8>)
 80143e8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80143ec:	4618      	mov	r0, r3
 80143ee:	f7ff fa77 	bl	80138e0 <MULSHIFT32>
 80143f2:	6538      	str	r0, [r7, #80]	; 0x50
	m11 = MULSHIFT32(c9_3, a3);
 80143f4:	4b61      	ldr	r3, [pc, #388]	; (801457c <idct9+0x2d4>)
 80143f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80143fa:	4618      	mov	r0, r3
 80143fc:	f7ff fa70 	bl	80138e0 <MULSHIFT32>
 8014400:	64f8      	str	r0, [r7, #76]	; 0x4c
	m12 = MULSHIFT32(c9_4, a9);
 8014402:	4b5f      	ldr	r3, [pc, #380]	; (8014580 <idct9+0x2d8>)
 8014404:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8014406:	4618      	mov	r0, r3
 8014408:	f7ff fa6a 	bl	80138e0 <MULSHIFT32>
 801440c:	64b8      	str	r0, [r7, #72]	; 0x48

	a12 = x[0] +  (x[6] >> 1);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	681a      	ldr	r2, [r3, #0]
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	3318      	adds	r3, #24
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	105b      	asrs	r3, r3, #1
 801441a:	4413      	add	r3, r2
 801441c:	647b      	str	r3, [r7, #68]	; 0x44
	a13 = a12  +  (  m1 << 1);
 801441e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014420:	005b      	lsls	r3, r3, #1
 8014422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014424:	4413      	add	r3, r2
 8014426:	643b      	str	r3, [r7, #64]	; 0x40
	a14 = a12  -  (  m1 << 1);
 8014428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801442a:	005b      	lsls	r3, r3, #1
 801442c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801442e:	1ad3      	subs	r3, r2, r3
 8014430:	63fb      	str	r3, [r7, #60]	; 0x3c
	a15 = a1   +  ( a11 >> 1);
 8014432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014434:	105b      	asrs	r3, r3, #1
 8014436:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801443a:	4413      	add	r3, r2
 801443c:	63bb      	str	r3, [r7, #56]	; 0x38
	a16 = ( m5 << 1) + (m6 << 1);
 801443e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014440:	005a      	lsls	r2, r3, #1
 8014442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014444:	005b      	lsls	r3, r3, #1
 8014446:	4413      	add	r3, r2
 8014448:	637b      	str	r3, [r7, #52]	; 0x34
	a17 = ( m7 << 1) - (m8 << 1);
 801444a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801444c:	005a      	lsls	r2, r3, #1
 801444e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014450:	005b      	lsls	r3, r3, #1
 8014452:	1ad3      	subs	r3, r2, r3
 8014454:	633b      	str	r3, [r7, #48]	; 0x30
	a18 = a16 + a17;
 8014456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801445a:	4413      	add	r3, r2
 801445c:	62fb      	str	r3, [r7, #44]	; 0x2c
	a19 = ( m9 << 1) + (m10 << 1);
 801445e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014460:	005a      	lsls	r2, r3, #1
 8014462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014464:	005b      	lsls	r3, r3, #1
 8014466:	4413      	add	r3, r2
 8014468:	62bb      	str	r3, [r7, #40]	; 0x28
	a20 = (m11 << 1) - (m12 << 1);
 801446a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801446c:	005a      	lsls	r2, r3, #1
 801446e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014470:	005b      	lsls	r3, r3, #1
 8014472:	1ad3      	subs	r3, r2, r3
 8014474:	627b      	str	r3, [r7, #36]	; 0x24

	a21 = a20 - a19;
 8014476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801447a:	1ad3      	subs	r3, r2, r3
 801447c:	623b      	str	r3, [r7, #32]
	a22 = a13 + a16;
 801447e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014482:	4413      	add	r3, r2
 8014484:	61fb      	str	r3, [r7, #28]
	a23 = a14 + a16;
 8014486:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801448a:	4413      	add	r3, r2
 801448c:	61bb      	str	r3, [r7, #24]
	a24 = a14 + a17;
 801448e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014492:	4413      	add	r3, r2
 8014494:	617b      	str	r3, [r7, #20]
	a25 = a13 + a17;
 8014496:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801449a:	4413      	add	r3, r2
 801449c:	613b      	str	r3, [r7, #16]
	a26 = a14 - a18;
 801449e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80144a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144a2:	1ad3      	subs	r3, r2, r3
 80144a4:	60fb      	str	r3, [r7, #12]
	a27 = a13 - a18;
 80144a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80144a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144aa:	1ad3      	subs	r3, r2, r3
 80144ac:	60bb      	str	r3, [r7, #8]

	x0 = a22 + a19;			x[0] = x0;
 80144ae:	69fa      	ldr	r2, [r7, #28]
 80144b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144b2:	4413      	add	r3, r2
 80144b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80144be:	601a      	str	r2, [r3, #0]
	x1 = a15 + (m3 << 1);	x[1] = x1;
 80144c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80144c2:	005b      	lsls	r3, r3, #1
 80144c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80144c6:	4413      	add	r3, r2
 80144c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	3304      	adds	r3, #4
 80144d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80144d4:	601a      	str	r2, [r3, #0]
	x2 = a24 + a20;			x[2] = x2;
 80144d6:	697a      	ldr	r2, [r7, #20]
 80144d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144da:	4413      	add	r3, r2
 80144dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	3308      	adds	r3, #8
 80144e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80144e8:	601a      	str	r2, [r3, #0]
	x3 = a26 - a21;			x[3] = x3;
 80144ea:	68fa      	ldr	r2, [r7, #12]
 80144ec:	6a3b      	ldr	r3, [r7, #32]
 80144ee:	1ad3      	subs	r3, r2, r3
 80144f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	330c      	adds	r3, #12
 80144f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80144fc:	601a      	str	r2, [r3, #0]
	x4 = a1 - a11;			x[4] = x4;
 80144fe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8014502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014504:	1ad3      	subs	r3, r2, r3
 8014506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	3310      	adds	r3, #16
 801450e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8014512:	601a      	str	r2, [r3, #0]
	x5 = a27 + a21;			x[5] = x5;
 8014514:	68ba      	ldr	r2, [r7, #8]
 8014516:	6a3b      	ldr	r3, [r7, #32]
 8014518:	4413      	add	r3, r2
 801451a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	3314      	adds	r3, #20
 8014522:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014526:	601a      	str	r2, [r3, #0]
	x6 = a25 - a20;			x[6] = x6;
 8014528:	693a      	ldr	r2, [r7, #16]
 801452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801452c:	1ad3      	subs	r3, r2, r3
 801452e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	3318      	adds	r3, #24
 8014536:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801453a:	601a      	str	r2, [r3, #0]
	x7 = a15 - (m3 << 1);	x[7] = x7;
 801453c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801453e:	005b      	lsls	r3, r3, #1
 8014540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014542:	1ad3      	subs	r3, r2, r3
 8014544:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	331c      	adds	r3, #28
 801454c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8014550:	601a      	str	r2, [r3, #0]
	x8 = a23 - a19;			x[8] = x8;
 8014552:	69ba      	ldr	r2, [r7, #24]
 8014554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014556:	1ad3      	subs	r3, r2, r3
 8014558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	3320      	adds	r3, #32
 8014560:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8014564:	601a      	str	r2, [r3, #0]
}
 8014566:	bf00      	nop
 8014568:	37c0      	adds	r7, #192	; 0xc0
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}
 801456e:	bf00      	nop
 8014570:	6ed9eba1 	.word	0x6ed9eba1
 8014574:	620dbe8b 	.word	0x620dbe8b
 8014578:	163a1a7e 	.word	0x163a1a7e
 801457c:	5246dd49 	.word	0x5246dd49
 8014580:	7e0e2e32 	.word	0x7e0e2e32

08014584 <IMDCT36>:
 *
 * TODO:        optimize for ARM (reorder window coefs, ARM-style pointers in C, 
 *                inline asm may or may not be helpful)
 **************************************************************************************/
static int IMDCT36(int *xCurr, int *xPrev, int *y, int btCurr, int btPrev, int blockIdx, int gb)
{
 8014584:	b590      	push	{r4, r7, lr}
 8014586:	b0b9      	sub	sp, #228	; 0xe4
 8014588:	af00      	add	r7, sp, #0
 801458a:	60f8      	str	r0, [r7, #12]
 801458c:	60b9      	str	r1, [r7, #8]
 801458e:	607a      	str	r2, [r7, #4]
 8014590:	603b      	str	r3, [r7, #0]
	int i, es, xBuf[18], xPrevWin[18];
	int acc1, acc2, s, d, t, mOut;
	int xo, xe, c, *xp, yLo, yHi;
	const int *cp, *wp;

	acc1 = acc2 = 0;
 8014592:	2300      	movs	r3, #0
 8014594:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014598:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801459c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	xCurr += 17;
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	3344      	adds	r3, #68	; 0x44
 80145a4:	60fb      	str	r3, [r7, #12]

	/* 7 gb is always adequate for antialias + accumulator loop + idct9 */
	if (gb < 7) {
 80145a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80145aa:	2b06      	cmp	r3, #6
 80145ac:	dc55      	bgt.n	801465a <IMDCT36+0xd6>
		/* rarely triggered - 5% to 10% of the time on normal clips (with Q25 input) */
		es = 7 - gb;
 80145ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80145b2:	f1c3 0307 	rsb	r3, r3, #7
 80145b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		for (i = 8; i >= 0; i--) {	
 80145ba:	2308      	movs	r3, #8
 80145bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80145c0:	e046      	b.n	8014650 <IMDCT36+0xcc>
			acc1 = ((*xCurr--) >> es) - acc1;
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	1f1a      	subs	r2, r3, #4
 80145c6:	60fa      	str	r2, [r7, #12]
 80145c8:	681a      	ldr	r2, [r3, #0]
 80145ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80145ce:	411a      	asrs	r2, r3
 80145d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80145d4:	1ad3      	subs	r3, r2, r3
 80145d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			acc2 = acc1 - acc2;
 80145da:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80145de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80145e2:	1ad3      	subs	r3, r2, r3
 80145e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			acc1 = ((*xCurr--) >> es) - acc1;
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	1f1a      	subs	r2, r3, #4
 80145ec:	60fa      	str	r2, [r7, #12]
 80145ee:	681a      	ldr	r2, [r3, #0]
 80145f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80145f4:	411a      	asrs	r2, r3
 80145f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80145fa:	1ad3      	subs	r3, r2, r3
 80145fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			xBuf[i+9] = acc2;	/* odd */
 8014600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014604:	3309      	adds	r3, #9
 8014606:	009b      	lsls	r3, r3, #2
 8014608:	33e0      	adds	r3, #224	; 0xe0
 801460a:	443b      	add	r3, r7
 801460c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014610:	f843 2c88 	str.w	r2, [r3, #-136]
			xBuf[i+0] = acc1;	/* even */
 8014614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014618:	009b      	lsls	r3, r3, #2
 801461a:	33e0      	adds	r3, #224	; 0xe0
 801461c:	443b      	add	r3, r7
 801461e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8014622:	f843 2c88 	str.w	r2, [r3, #-136]
			xPrev[i] >>= es;
 8014626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801462a:	009b      	lsls	r3, r3, #2
 801462c:	68ba      	ldr	r2, [r7, #8]
 801462e:	4413      	add	r3, r2
 8014630:	6819      	ldr	r1, [r3, #0]
 8014632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014636:	009b      	lsls	r3, r3, #2
 8014638:	68ba      	ldr	r2, [r7, #8]
 801463a:	4413      	add	r3, r2
 801463c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8014640:	fa41 f202 	asr.w	r2, r1, r2
 8014644:	601a      	str	r2, [r3, #0]
		for (i = 8; i >= 0; i--) {	
 8014646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801464a:	3b01      	subs	r3, #1
 801464c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014654:	2b00      	cmp	r3, #0
 8014656:	dab4      	bge.n	80145c2 <IMDCT36+0x3e>
 8014658:	e03b      	b.n	80146d2 <IMDCT36+0x14e>
		}
	} else {
		es = 0;
 801465a:	2300      	movs	r3, #0
 801465c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		/* max gain = 18, assume adequate guard bits */
		for (i = 8; i >= 0; i--) {	
 8014660:	2308      	movs	r3, #8
 8014662:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014666:	e030      	b.n	80146ca <IMDCT36+0x146>
			acc1 = (*xCurr--) - acc1;
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	1f1a      	subs	r2, r3, #4
 801466c:	60fa      	str	r2, [r7, #12]
 801466e:	681a      	ldr	r2, [r3, #0]
 8014670:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014674:	1ad3      	subs	r3, r2, r3
 8014676:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			acc2 = acc1 - acc2;
 801467a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801467e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014682:	1ad3      	subs	r3, r2, r3
 8014684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			acc1 = (*xCurr--) - acc1;
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	1f1a      	subs	r2, r3, #4
 801468c:	60fa      	str	r2, [r7, #12]
 801468e:	681a      	ldr	r2, [r3, #0]
 8014690:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014694:	1ad3      	subs	r3, r2, r3
 8014696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			xBuf[i+9] = acc2;	/* odd */
 801469a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801469e:	3309      	adds	r3, #9
 80146a0:	009b      	lsls	r3, r3, #2
 80146a2:	33e0      	adds	r3, #224	; 0xe0
 80146a4:	443b      	add	r3, r7
 80146a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80146aa:	f843 2c88 	str.w	r2, [r3, #-136]
			xBuf[i+0] = acc1;	/* even */
 80146ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80146b2:	009b      	lsls	r3, r3, #2
 80146b4:	33e0      	adds	r3, #224	; 0xe0
 80146b6:	443b      	add	r3, r7
 80146b8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80146bc:	f843 2c88 	str.w	r2, [r3, #-136]
		for (i = 8; i >= 0; i--) {	
 80146c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80146c4:	3b01      	subs	r3, #1
 80146c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80146ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	daca      	bge.n	8014668 <IMDCT36+0xe4>
		}
	}
	/* xEven[0] and xOdd[0] scaled by 0.5 */
	xBuf[9] >>= 1;
 80146d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80146d4:	105b      	asrs	r3, r3, #1
 80146d6:	67fb      	str	r3, [r7, #124]	; 0x7c
	xBuf[0] >>= 1;
 80146d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80146da:	105b      	asrs	r3, r3, #1
 80146dc:	65bb      	str	r3, [r7, #88]	; 0x58

	/* do 9-point IDCT on even and odd */
	idct9(xBuf+0);	/* even */
 80146de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80146e2:	4618      	mov	r0, r3
 80146e4:	f7ff fde0 	bl	80142a8 <idct9>
	idct9(xBuf+9);	/* odd */
 80146e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80146ec:	3324      	adds	r3, #36	; 0x24
 80146ee:	4618      	mov	r0, r3
 80146f0:	f7ff fdda 	bl	80142a8 <idct9>

	xp = xBuf + 8;
 80146f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80146f8:	3320      	adds	r3, #32
 80146fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	cp = c18 + 8;
 80146fe:	4bb5      	ldr	r3, [pc, #724]	; (80149d4 <IMDCT36+0x450>)
 8014700:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	mOut = 0;
 8014704:	2300      	movs	r3, #0
 8014706:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (btPrev == 0 && btCurr == 0) {
 801470a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801470e:	2b00      	cmp	r3, #0
 8014710:	f040 809e 	bne.w	8014850 <IMDCT36+0x2cc>
 8014714:	683b      	ldr	r3, [r7, #0]
 8014716:	2b00      	cmp	r3, #0
 8014718:	f040 809a 	bne.w	8014850 <IMDCT36+0x2cc>
		/* fast path - use symmetry of sin window to reduce windowing multiplies to 18 (N/2) */
		wp = fastWin36;
 801471c:	4bae      	ldr	r3, [pc, #696]	; (80149d8 <IMDCT36+0x454>)
 801471e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		for (i = 0; i < 9; i++) {
 8014722:	2300      	movs	r3, #0
 8014724:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014728:	e08c      	b.n	8014844 <IMDCT36+0x2c0>
			/* do ARM-style pointer arithmetic (i still needed for y[] indexing - compiler spills if 2 y pointers) */
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 801472a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801472e:	1f1a      	subs	r2, r3, #4
 8014730:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801473a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014740:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014744:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014748:	1f1a      	subs	r2, r3, #4
 801474a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			/* gain 2 int bits here */
			xo = MULSHIFT32(c, xo);			/* 2*c18*xOdd (mul by 2 implicit in scaling)  */
 8014754:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8014758:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801475c:	f7ff f8c0 	bl	80138e0 <MULSHIFT32>
 8014760:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
			xe >>= 2;
 8014764:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014768:	109b      	asrs	r3, r3, #2
 801476a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 801476e:	68bb      	ldr	r3, [r7, #8]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	425b      	negs	r3, r3
 8014774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 8014778:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801477c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014780:	1ad3      	subs	r3, r2, r3
 8014782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 8014786:	68bb      	ldr	r3, [r7, #8]
 8014788:	1d1a      	adds	r2, r3, #4
 801478a:	60ba      	str	r2, [r7, #8]
 801478c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8014790:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8014794:	440a      	add	r2, r1
 8014796:	601a      	str	r2, [r3, #0]
			t = s - d;
 8014798:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801479c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80147a0:	1ad3      	subs	r3, r2, r3
 80147a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 80147a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80147aa:	1d1a      	adds	r2, r3, #4
 80147ac:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	4619      	mov	r1, r3
 80147b4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80147b8:	f7ff f892 	bl	80138e0 <MULSHIFT32>
 80147bc:	4603      	mov	r3, r0
 80147be:	009b      	lsls	r3, r3, #2
 80147c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80147c4:	4413      	add	r3, r2
 80147c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			yHi = (s + (MULSHIFT32(t, *wp++) << 2));
 80147ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80147ce:	1d1a      	adds	r2, r3, #4
 80147d0:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	4619      	mov	r1, r3
 80147d8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80147dc:	f7ff f880 	bl	80138e0 <MULSHIFT32>
 80147e0:	4603      	mov	r3, r0
 80147e2:	009b      	lsls	r3, r3, #2
 80147e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80147e8:	4413      	add	r3, r2
 80147ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			y[(i)*NBANDS]    = 	yLo;
 80147ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80147f2:	01db      	lsls	r3, r3, #7
 80147f4:	687a      	ldr	r2, [r7, #4]
 80147f6:	4413      	add	r3, r2
 80147f8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80147fc:	601a      	str	r2, [r3, #0]
			y[(17-i)*NBANDS] =  yHi;
 80147fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014802:	f1c3 0311 	rsb	r3, r3, #17
 8014806:	01db      	lsls	r3, r3, #7
 8014808:	687a      	ldr	r2, [r7, #4]
 801480a:	4413      	add	r3, r2
 801480c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8014810:	601a      	str	r2, [r3, #0]
			mOut |= FASTABS(yLo);
 8014812:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8014816:	f7ff f875 	bl	8013904 <FASTABS>
 801481a:	4602      	mov	r2, r0
 801481c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014820:	4313      	orrs	r3, r2
 8014822:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			mOut |= FASTABS(yHi);
 8014826:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 801482a:	f7ff f86b 	bl	8013904 <FASTABS>
 801482e:	4602      	mov	r2, r0
 8014830:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014834:	4313      	orrs	r3, r2
 8014836:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		for (i = 0; i < 9; i++) {
 801483a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801483e:	3301      	adds	r3, #1
 8014840:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014848:	2b08      	cmp	r3, #8
 801484a:	f77f af6e 	ble.w	801472a <IMDCT36+0x1a6>
	if (btPrev == 0 && btCurr == 0) {
 801484e:	e0aa      	b.n	80149a6 <IMDCT36+0x422>
		}
	} else {
		/* slower method - either prev or curr is using window type != 0 so do full 36-point window 
		 * output xPrevWin has at least 3 guard bits (xPrev has 2, gain 1 in WinPrevious)
		 */
		WinPrevious(xPrev, xPrevWin, btPrev);
 8014850:	f107 0310 	add.w	r3, r7, #16
 8014854:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8014858:	4619      	mov	r1, r3
 801485a:	68b8      	ldr	r0, [r7, #8]
 801485c:	f7ff fa24 	bl	8013ca8 <WinPrevious>

		wp = imdctWin[btCurr];
 8014860:	683a      	ldr	r2, [r7, #0]
 8014862:	4613      	mov	r3, r2
 8014864:	00db      	lsls	r3, r3, #3
 8014866:	4413      	add	r3, r2
 8014868:	011b      	lsls	r3, r3, #4
 801486a:	4a5c      	ldr	r2, [pc, #368]	; (80149dc <IMDCT36+0x458>)
 801486c:	4413      	add	r3, r2
 801486e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		for (i = 0; i < 9; i++) {
 8014872:	2300      	movs	r3, #0
 8014874:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014878:	e090      	b.n	801499c <IMDCT36+0x418>
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 801487a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801487e:	1f1a      	subs	r2, r3, #4
 8014880:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801488a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014890:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014894:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014898:	1f1a      	subs	r2, r3, #4
 801489a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			/* gain 2 int bits here */
			xo = MULSHIFT32(c, xo);			/* 2*c18*xOdd (mul by 2 implicit in scaling)  */
 80148a4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80148a8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80148ac:	f7ff f818 	bl	80138e0 <MULSHIFT32>
 80148b0:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
			xe >>= 2;
 80148b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80148b8:	109b      	asrs	r3, r3, #2
 80148ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

			d = xe - xo;
 80148be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80148c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80148c6:	1ad3      	subs	r3, r2, r3
 80148c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 80148cc:	68bb      	ldr	r3, [r7, #8]
 80148ce:	1d1a      	adds	r2, r3, #4
 80148d0:	60ba      	str	r2, [r7, #8]
 80148d2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80148d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80148da:	440a      	add	r2, r1
 80148dc:	601a      	str	r2, [r3, #0]
			
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 80148de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80148e2:	009b      	lsls	r3, r3, #2
 80148e4:	33e0      	adds	r3, #224	; 0xe0
 80148e6:	443b      	add	r3, r7
 80148e8:	f853 4cd0 	ldr.w	r4, [r3, #-208]
 80148ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80148f0:	009b      	lsls	r3, r3, #2
 80148f2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80148f6:	4413      	add	r3, r2
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	4619      	mov	r1, r3
 80148fc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014900:	f7fe ffee 	bl	80138e0 <MULSHIFT32>
 8014904:	4603      	mov	r3, r0
 8014906:	4423      	add	r3, r4
 8014908:	009b      	lsls	r3, r3, #2
 801490a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 801490e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014912:	f1c3 0311 	rsb	r3, r3, #17
 8014916:	009b      	lsls	r3, r3, #2
 8014918:	33e0      	adds	r3, #224	; 0xe0
 801491a:	443b      	add	r3, r7
 801491c:	f853 4cd0 	ldr.w	r4, [r3, #-208]
 8014920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014924:	f1c3 0311 	rsb	r3, r3, #17
 8014928:	009b      	lsls	r3, r3, #2
 801492a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801492e:	4413      	add	r3, r2
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	4619      	mov	r1, r3
 8014934:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8014938:	f7fe ffd2 	bl	80138e0 <MULSHIFT32>
 801493c:	4603      	mov	r3, r0
 801493e:	4423      	add	r3, r4
 8014940:	009b      	lsls	r3, r3, #2
 8014942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			y[(i)*NBANDS]    = yLo;
 8014946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801494a:	01db      	lsls	r3, r3, #7
 801494c:	687a      	ldr	r2, [r7, #4]
 801494e:	4413      	add	r3, r2
 8014950:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014954:	601a      	str	r2, [r3, #0]
			y[(17-i)*NBANDS] = yHi;
 8014956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801495a:	f1c3 0311 	rsb	r3, r3, #17
 801495e:	01db      	lsls	r3, r3, #7
 8014960:	687a      	ldr	r2, [r7, #4]
 8014962:	4413      	add	r3, r2
 8014964:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8014968:	601a      	str	r2, [r3, #0]
			mOut |= FASTABS(yLo);
 801496a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 801496e:	f7fe ffc9 	bl	8013904 <FASTABS>
 8014972:	4602      	mov	r2, r0
 8014974:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014978:	4313      	orrs	r3, r2
 801497a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
			mOut |= FASTABS(yHi);
 801497e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8014982:	f7fe ffbf 	bl	8013904 <FASTABS>
 8014986:	4602      	mov	r2, r0
 8014988:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801498c:	4313      	orrs	r3, r2
 801498e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		for (i = 0; i < 9; i++) {
 8014992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014996:	3301      	adds	r3, #1
 8014998:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801499c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80149a0:	2b08      	cmp	r3, #8
 80149a2:	f77f af6a 	ble.w	801487a <IMDCT36+0x2f6>
		}
	}

	xPrev -= 9;
 80149a6:	68bb      	ldr	r3, [r7, #8]
 80149a8:	3b24      	subs	r3, #36	; 0x24
 80149aa:	60bb      	str	r3, [r7, #8]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 80149ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80149b0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80149b4:	68b9      	ldr	r1, [r7, #8]
 80149b6:	6878      	ldr	r0, [r7, #4]
 80149b8:	f7ff fad0 	bl	8013f5c <FreqInvertRescale>
 80149bc:	4602      	mov	r2, r0
 80149be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80149c2:	4313      	orrs	r3, r2
 80149c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	return mOut;
 80149c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
}
 80149cc:	4618      	mov	r0, r3
 80149ce:	37e4      	adds	r7, #228	; 0xe4
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bd90      	pop	{r4, r7, pc}
 80149d4:	0801a320 	.word	0x0801a320
 80149d8:	0801a324 	.word	0x0801a324
 80149dc:	0801a3d4 	.word	0x0801a3d4

080149e0 <imdct12>:

/* 12-point inverse DCT, used in IMDCT12x3() 
 * 4 input guard bits will ensure no overflow
 */
static __inline void imdct12 (int *x, int *out)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b08c      	sub	sp, #48	; 0x30
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
 80149e8:	6039      	str	r1, [r7, #0]
	int a0, a1, a2;
	int x0, x1, x2, x3, x4, x5;

	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	330c      	adds	r3, #12
 80149f4:	607b      	str	r3, [r7, #4]
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	330c      	adds	r3, #12
 8014a00:	607b      	str	r3, [r7, #4]
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	627b      	str	r3, [r7, #36]	; 0x24
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	330c      	adds	r3, #12
 8014a0c:	607b      	str	r3, [r7, #4]
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	623b      	str	r3, [r7, #32]
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	330c      	adds	r3, #12
 8014a18:	607b      	str	r3, [r7, #4]
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	61fb      	str	r3, [r7, #28]
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	330c      	adds	r3, #12
 8014a24:	607b      	str	r3, [r7, #4]
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	61bb      	str	r3, [r7, #24]
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	330c      	adds	r3, #12
 8014a30:	607b      	str	r3, [r7, #4]

	x4 -= x5;
 8014a32:	69fa      	ldr	r2, [r7, #28]
 8014a34:	69bb      	ldr	r3, [r7, #24]
 8014a36:	1ad3      	subs	r3, r2, r3
 8014a38:	61fb      	str	r3, [r7, #28]
	x3 -= x4;
 8014a3a:	6a3a      	ldr	r2, [r7, #32]
 8014a3c:	69fb      	ldr	r3, [r7, #28]
 8014a3e:	1ad3      	subs	r3, r2, r3
 8014a40:	623b      	str	r3, [r7, #32]
	x2 -= x3;
 8014a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a44:	6a3b      	ldr	r3, [r7, #32]
 8014a46:	1ad3      	subs	r3, r2, r3
 8014a48:	627b      	str	r3, [r7, #36]	; 0x24
	x3 -= x5;
 8014a4a:	6a3a      	ldr	r2, [r7, #32]
 8014a4c:	69bb      	ldr	r3, [r7, #24]
 8014a4e:	1ad3      	subs	r3, r2, r3
 8014a50:	623b      	str	r3, [r7, #32]
	x1 -= x2;
 8014a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a56:	1ad3      	subs	r3, r2, r3
 8014a58:	62bb      	str	r3, [r7, #40]	; 0x28
	x0 -= x1;
 8014a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a5e:	1ad3      	subs	r3, r2, r3
 8014a60:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 -= x3;
 8014a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a64:	6a3b      	ldr	r3, [r7, #32]
 8014a66:	1ad3      	subs	r3, r2, r3
 8014a68:	62bb      	str	r3, [r7, #40]	; 0x28

	x0 >>= 1;
 8014a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a6c:	105b      	asrs	r3, r3, #1
 8014a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 >>= 1;
 8014a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a72:	105b      	asrs	r3, r3, #1
 8014a74:	62bb      	str	r3, [r7, #40]	; 0x28

	a0 = MULSHIFT32(c3_0, x2) << 1;
 8014a76:	4b3c      	ldr	r3, [pc, #240]	; (8014b68 <imdct12+0x188>)
 8014a78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	f7fe ff30 	bl	80138e0 <MULSHIFT32>
 8014a80:	4603      	mov	r3, r0
 8014a82:	005b      	lsls	r3, r3, #1
 8014a84:	617b      	str	r3, [r7, #20]
	a1 = x0 + (x4 >> 1);
 8014a86:	69fb      	ldr	r3, [r7, #28]
 8014a88:	105b      	asrs	r3, r3, #1
 8014a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a8c:	4413      	add	r3, r2
 8014a8e:	613b      	str	r3, [r7, #16]
	a2 = x0 - x4;
 8014a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a92:	69fb      	ldr	r3, [r7, #28]
 8014a94:	1ad3      	subs	r3, r2, r3
 8014a96:	60fb      	str	r3, [r7, #12]
	x0 = a1 + a0;
 8014a98:	693a      	ldr	r2, [r7, #16]
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	4413      	add	r3, r2
 8014a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	x2 = a2;
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	627b      	str	r3, [r7, #36]	; 0x24
	x4 = a1 - a0;
 8014aa4:	693a      	ldr	r2, [r7, #16]
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	1ad3      	subs	r3, r2, r3
 8014aaa:	61fb      	str	r3, [r7, #28]

	a0 = MULSHIFT32(c3_0, x3) << 1;
 8014aac:	4b2e      	ldr	r3, [pc, #184]	; (8014b68 <imdct12+0x188>)
 8014aae:	6a39      	ldr	r1, [r7, #32]
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7fe ff15 	bl	80138e0 <MULSHIFT32>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	005b      	lsls	r3, r3, #1
 8014aba:	617b      	str	r3, [r7, #20]
	a1 = x1 + (x5 >> 1);
 8014abc:	69bb      	ldr	r3, [r7, #24]
 8014abe:	105b      	asrs	r3, r3, #1
 8014ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ac2:	4413      	add	r3, r2
 8014ac4:	613b      	str	r3, [r7, #16]
	a2 = x1 - x5;
 8014ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ac8:	69bb      	ldr	r3, [r7, #24]
 8014aca:	1ad3      	subs	r3, r2, r3
 8014acc:	60fb      	str	r3, [r7, #12]

	/* cos window odd samples, mul by 2, eat sign bit */
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 8014ace:	4827      	ldr	r0, [pc, #156]	; (8014b6c <imdct12+0x18c>)
 8014ad0:	693a      	ldr	r2, [r7, #16]
 8014ad2:	697b      	ldr	r3, [r7, #20]
 8014ad4:	4413      	add	r3, r2
 8014ad6:	4619      	mov	r1, r3
 8014ad8:	f7fe ff02 	bl	80138e0 <MULSHIFT32>
 8014adc:	4603      	mov	r3, r0
 8014ade:	009b      	lsls	r3, r3, #2
 8014ae0:	62bb      	str	r3, [r7, #40]	; 0x28
	x3 = MULSHIFT32(c6[1], a2) << 2;
 8014ae2:	4b23      	ldr	r3, [pc, #140]	; (8014b70 <imdct12+0x190>)
 8014ae4:	68f9      	ldr	r1, [r7, #12]
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f7fe fefa 	bl	80138e0 <MULSHIFT32>
 8014aec:	4603      	mov	r3, r0
 8014aee:	009b      	lsls	r3, r3, #2
 8014af0:	623b      	str	r3, [r7, #32]
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 8014af2:	4820      	ldr	r0, [pc, #128]	; (8014b74 <imdct12+0x194>)
 8014af4:	693a      	ldr	r2, [r7, #16]
 8014af6:	697b      	ldr	r3, [r7, #20]
 8014af8:	1ad3      	subs	r3, r2, r3
 8014afa:	4619      	mov	r1, r3
 8014afc:	f7fe fef0 	bl	80138e0 <MULSHIFT32>
 8014b00:	4603      	mov	r3, r0
 8014b02:	009b      	lsls	r3, r3, #2
 8014b04:	61bb      	str	r3, [r7, #24]

	*out = x0 + x1;	out++;
 8014b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b0a:	441a      	add	r2, r3
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	601a      	str	r2, [r3, #0]
 8014b10:	683b      	ldr	r3, [r7, #0]
 8014b12:	3304      	adds	r3, #4
 8014b14:	603b      	str	r3, [r7, #0]
	*out = x2 + x3;	out++;
 8014b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b18:	6a3b      	ldr	r3, [r7, #32]
 8014b1a:	441a      	add	r2, r3
 8014b1c:	683b      	ldr	r3, [r7, #0]
 8014b1e:	601a      	str	r2, [r3, #0]
 8014b20:	683b      	ldr	r3, [r7, #0]
 8014b22:	3304      	adds	r3, #4
 8014b24:	603b      	str	r3, [r7, #0]
	*out = x4 + x5;	out++;
 8014b26:	69fa      	ldr	r2, [r7, #28]
 8014b28:	69bb      	ldr	r3, [r7, #24]
 8014b2a:	441a      	add	r2, r3
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	601a      	str	r2, [r3, #0]
 8014b30:	683b      	ldr	r3, [r7, #0]
 8014b32:	3304      	adds	r3, #4
 8014b34:	603b      	str	r3, [r7, #0]
	*out = x4 - x5;	out++;
 8014b36:	69fa      	ldr	r2, [r7, #28]
 8014b38:	69bb      	ldr	r3, [r7, #24]
 8014b3a:	1ad2      	subs	r2, r2, r3
 8014b3c:	683b      	ldr	r3, [r7, #0]
 8014b3e:	601a      	str	r2, [r3, #0]
 8014b40:	683b      	ldr	r3, [r7, #0]
 8014b42:	3304      	adds	r3, #4
 8014b44:	603b      	str	r3, [r7, #0]
	*out = x2 - x3;	out++;
 8014b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b48:	6a3b      	ldr	r3, [r7, #32]
 8014b4a:	1ad2      	subs	r2, r2, r3
 8014b4c:	683b      	ldr	r3, [r7, #0]
 8014b4e:	601a      	str	r2, [r3, #0]
 8014b50:	683b      	ldr	r3, [r7, #0]
 8014b52:	3304      	adds	r3, #4
 8014b54:	603b      	str	r3, [r7, #0]
	*out = x0 - x1;
 8014b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b5a:	1ad2      	subs	r2, r2, r3
 8014b5c:	683b      	ldr	r3, [r7, #0]
 8014b5e:	601a      	str	r2, [r3, #0]
}
 8014b60:	bf00      	nop
 8014b62:	3730      	adds	r7, #48	; 0x30
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}
 8014b68:	6ed9eba1 	.word	0x6ed9eba1
 8014b6c:	7ba3751d 	.word	0x7ba3751d
 8014b70:	5a82799a 	.word	0x5a82799a
 8014b74:	2120fb83 	.word	0x2120fb83

08014b78 <IMDCT12x3>:
 * Return:      mOut (OR of abs(y) for all y calculated here)
 *
 * TODO:        optimize for ARM
 **************************************************************************************/
static int IMDCT12x3(int *xCurr, int *xPrev, int *y, int btPrev, int blockIdx, int gb)
{
 8014b78:	b5b0      	push	{r4, r5, r7, lr}
 8014b7a:	b0ae      	sub	sp, #184	; 0xb8
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	60f8      	str	r0, [r7, #12]
 8014b80:	60b9      	str	r1, [r7, #8]
 8014b82:	607a      	str	r2, [r7, #4]
 8014b84:	603b      	str	r3, [r7, #0]
	int i, es, mOut, yLo, xBuf[18], xPrevWin[18];	/* need temp buffer for reordering short blocks */
	const int *wp;

	es = 0;
 8014b86:	2300      	movs	r3, #0
 8014b88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	/* 7 gb is always adequate for accumulator loop + idct12 + window + overlap */
	if (gb < 7) {
 8014b8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014b90:	2b06      	cmp	r3, #6
 8014b92:	dc40      	bgt.n	8014c16 <IMDCT12x3+0x9e>
		es = 7 - gb;
 8014b94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014b98:	f1c3 0307 	rsb	r3, r3, #7
 8014b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		for (i = 0; i < 18; i+=2) {
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014ba6:	e02f      	b.n	8014c08 <IMDCT12x3+0x90>
			xCurr[i+0] >>= es;
 8014ba8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014bac:	009b      	lsls	r3, r3, #2
 8014bae:	68fa      	ldr	r2, [r7, #12]
 8014bb0:	4413      	add	r3, r2
 8014bb2:	6819      	ldr	r1, [r3, #0]
 8014bb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014bb8:	009b      	lsls	r3, r3, #2
 8014bba:	68fa      	ldr	r2, [r7, #12]
 8014bbc:	4413      	add	r3, r2
 8014bbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014bc2:	fa41 f202 	asr.w	r2, r1, r2
 8014bc6:	601a      	str	r2, [r3, #0]
			xCurr[i+1] >>= es;
 8014bc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014bcc:	3301      	adds	r3, #1
 8014bce:	009b      	lsls	r3, r3, #2
 8014bd0:	68fa      	ldr	r2, [r7, #12]
 8014bd2:	4413      	add	r3, r2
 8014bd4:	6819      	ldr	r1, [r3, #0]
 8014bd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014bda:	3301      	adds	r3, #1
 8014bdc:	009b      	lsls	r3, r3, #2
 8014bde:	68fa      	ldr	r2, [r7, #12]
 8014be0:	4413      	add	r3, r2
 8014be2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014be6:	fa41 f202 	asr.w	r2, r1, r2
 8014bea:	601a      	str	r2, [r3, #0]
			*xPrev++ >>= es;
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	1d1a      	adds	r2, r3, #4
 8014bf0:	60ba      	str	r2, [r7, #8]
 8014bf2:	6819      	ldr	r1, [r3, #0]
 8014bf4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014bf8:	fa41 f202 	asr.w	r2, r1, r2
 8014bfc:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 18; i+=2) {
 8014bfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014c02:	3302      	adds	r3, #2
 8014c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014c08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014c0c:	2b11      	cmp	r3, #17
 8014c0e:	ddcb      	ble.n	8014ba8 <IMDCT12x3+0x30>
		}
		xPrev -= 9;
 8014c10:	68bb      	ldr	r3, [r7, #8]
 8014c12:	3b24      	subs	r3, #36	; 0x24
 8014c14:	60bb      	str	r3, [r7, #8]
	}

	/* requires 4 input guard bits for each imdct12 */
	imdct12(xCurr + 0, xBuf + 0);
 8014c16:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014c1a:	4619      	mov	r1, r3
 8014c1c:	68f8      	ldr	r0, [r7, #12]
 8014c1e:	f7ff fedf 	bl	80149e0 <imdct12>
	imdct12(xCurr + 1, xBuf + 6);
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	1d1a      	adds	r2, r3, #4
 8014c26:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014c2a:	3318      	adds	r3, #24
 8014c2c:	4619      	mov	r1, r3
 8014c2e:	4610      	mov	r0, r2
 8014c30:	f7ff fed6 	bl	80149e0 <imdct12>
	imdct12(xCurr + 2, xBuf + 12);
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	f103 0208 	add.w	r2, r3, #8
 8014c3a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014c3e:	3330      	adds	r3, #48	; 0x30
 8014c40:	4619      	mov	r1, r3
 8014c42:	4610      	mov	r0, r2
 8014c44:	f7ff fecc 	bl	80149e0 <imdct12>

	/* window previous from last time */
	WinPrevious(xPrev, xPrevWin, btPrev);
 8014c48:	f107 0314 	add.w	r3, r7, #20
 8014c4c:	683a      	ldr	r2, [r7, #0]
 8014c4e:	4619      	mov	r1, r3
 8014c50:	68b8      	ldr	r0, [r7, #8]
 8014c52:	f7ff f829 	bl	8013ca8 <WinPrevious>

	/* could unroll this for speed, minimum loads (short blocks usually rare, so doesn't make much overall difference) 
	 * xPrevWin[i] << 2 still has 1 gb always, max gain of windowed xBuf stuff also < 1.0 and gain the sign bit
	 * so y calculations won't overflow
	 */
	wp = imdctWin[2];
 8014c56:	4bc9      	ldr	r3, [pc, #804]	; (8014f7c <IMDCT12x3+0x404>)
 8014c58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	mOut = 0;
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	for (i = 0; i < 3; i++) {
 8014c62:	2300      	movs	r3, #0
 8014c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014c68:	e13a      	b.n	8014ee0 <IMDCT12x3+0x368>
		yLo = (xPrevWin[ 0+i] << 2);
 8014c6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014c6e:	009b      	lsls	r3, r3, #2
 8014c70:	33b8      	adds	r3, #184	; 0xb8
 8014c72:	443b      	add	r3, r7
 8014c74:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8014c78:	009b      	lsls	r3, r3, #2
 8014c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 8014c7e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8014c82:	f7fe fe3f 	bl	8013904 <FASTABS>
 8014c86:	4602      	mov	r2, r0
 8014c88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014c8c:	4313      	orrs	r3, r2
 8014c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014c92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014c96:	01db      	lsls	r3, r3, #7
 8014c98:	687a      	ldr	r2, [r7, #4]
 8014c9a:	4413      	add	r3, r2
 8014c9c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014ca0:	601a      	str	r2, [r3, #0]
		yLo = (xPrevWin[ 3+i] << 2);
 8014ca2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014ca6:	3303      	adds	r3, #3
 8014ca8:	009b      	lsls	r3, r3, #2
 8014caa:	33b8      	adds	r3, #184	; 0xb8
 8014cac:	443b      	add	r3, r7
 8014cae:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8014cb2:	009b      	lsls	r3, r3, #2
 8014cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 8014cb8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8014cbc:	f7fe fe22 	bl	8013904 <FASTABS>
 8014cc0:	4602      	mov	r2, r0
 8014cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014cc6:	4313      	orrs	r3, r2
 8014cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014ccc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014cd0:	3303      	adds	r3, #3
 8014cd2:	01db      	lsls	r3, r3, #7
 8014cd4:	687a      	ldr	r2, [r7, #4]
 8014cd6:	4413      	add	r3, r2
 8014cd8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014cdc:	601a      	str	r2, [r3, #0]
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 8014cde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014ce2:	3306      	adds	r3, #6
 8014ce4:	009b      	lsls	r3, r3, #2
 8014ce6:	33b8      	adds	r3, #184	; 0xb8
 8014ce8:	443b      	add	r3, r7
 8014cea:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8014cee:	009c      	lsls	r4, r3, #2
 8014cf0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014cf4:	009b      	lsls	r3, r3, #2
 8014cf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014cfa:	4413      	add	r3, r2
 8014cfc:	681a      	ldr	r2, [r3, #0]
 8014cfe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014d02:	3303      	adds	r3, #3
 8014d04:	009b      	lsls	r3, r3, #2
 8014d06:	33b8      	adds	r3, #184	; 0xb8
 8014d08:	443b      	add	r3, r7
 8014d0a:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8014d0e:	4619      	mov	r1, r3
 8014d10:	4610      	mov	r0, r2
 8014d12:	f7fe fde5 	bl	80138e0 <MULSHIFT32>
 8014d16:	4603      	mov	r3, r0
 8014d18:	4423      	add	r3, r4
 8014d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 8014d1e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8014d22:	f7fe fdef 	bl	8013904 <FASTABS>
 8014d26:	4602      	mov	r2, r0
 8014d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014d2c:	4313      	orrs	r3, r2
 8014d2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014d32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014d36:	3306      	adds	r3, #6
 8014d38:	01db      	lsls	r3, r3, #7
 8014d3a:	687a      	ldr	r2, [r7, #4]
 8014d3c:	4413      	add	r3, r2
 8014d3e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014d42:	601a      	str	r2, [r3, #0]
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 8014d44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014d48:	3309      	adds	r3, #9
 8014d4a:	009b      	lsls	r3, r3, #2
 8014d4c:	33b8      	adds	r3, #184	; 0xb8
 8014d4e:	443b      	add	r3, r7
 8014d50:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8014d54:	009c      	lsls	r4, r3, #2
 8014d56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014d5a:	3303      	adds	r3, #3
 8014d5c:	009b      	lsls	r3, r3, #2
 8014d5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014d62:	4413      	add	r3, r2
 8014d64:	681a      	ldr	r2, [r3, #0]
 8014d66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014d6a:	f1c3 0305 	rsb	r3, r3, #5
 8014d6e:	009b      	lsls	r3, r3, #2
 8014d70:	33b8      	adds	r3, #184	; 0xb8
 8014d72:	443b      	add	r3, r7
 8014d74:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8014d78:	4619      	mov	r1, r3
 8014d7a:	4610      	mov	r0, r2
 8014d7c:	f7fe fdb0 	bl	80138e0 <MULSHIFT32>
 8014d80:	4603      	mov	r3, r0
 8014d82:	4423      	add	r3, r4
 8014d84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 8014d88:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8014d8c:	f7fe fdba 	bl	8013904 <FASTABS>
 8014d90:	4602      	mov	r2, r0
 8014d92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014d96:	4313      	orrs	r3, r2
 8014d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014d9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014da0:	3309      	adds	r3, #9
 8014da2:	01db      	lsls	r3, r3, #7
 8014da4:	687a      	ldr	r2, [r7, #4]
 8014da6:	4413      	add	r3, r2
 8014da8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014dac:	601a      	str	r2, [r3, #0]
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 8014dae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014db2:	330c      	adds	r3, #12
 8014db4:	009b      	lsls	r3, r3, #2
 8014db6:	33b8      	adds	r3, #184	; 0xb8
 8014db8:	443b      	add	r3, r7
 8014dba:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8014dbe:	009c      	lsls	r4, r3, #2
 8014dc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014dc4:	3306      	adds	r3, #6
 8014dc6:	009b      	lsls	r3, r3, #2
 8014dc8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014dcc:	4413      	add	r3, r2
 8014dce:	681a      	ldr	r2, [r3, #0]
 8014dd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014dd4:	f1c3 0302 	rsb	r3, r3, #2
 8014dd8:	009b      	lsls	r3, r3, #2
 8014dda:	33b8      	adds	r3, #184	; 0xb8
 8014ddc:	443b      	add	r3, r7
 8014dde:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8014de2:	4619      	mov	r1, r3
 8014de4:	4610      	mov	r0, r2
 8014de6:	f7fe fd7b 	bl	80138e0 <MULSHIFT32>
 8014dea:	4605      	mov	r5, r0
 8014dec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014df0:	009b      	lsls	r3, r3, #2
 8014df2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014df6:	4413      	add	r3, r2
 8014df8:	681a      	ldr	r2, [r3, #0]
 8014dfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014dfe:	3309      	adds	r3, #9
 8014e00:	009b      	lsls	r3, r3, #2
 8014e02:	33b8      	adds	r3, #184	; 0xb8
 8014e04:	443b      	add	r3, r7
 8014e06:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8014e0a:	4619      	mov	r1, r3
 8014e0c:	4610      	mov	r0, r2
 8014e0e:	f7fe fd67 	bl	80138e0 <MULSHIFT32>
 8014e12:	4603      	mov	r3, r0
 8014e14:	442b      	add	r3, r5
 8014e16:	4423      	add	r3, r4
 8014e18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 8014e1c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8014e20:	f7fe fd70 	bl	8013904 <FASTABS>
 8014e24:	4602      	mov	r2, r0
 8014e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e2a:	4313      	orrs	r3, r2
 8014e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014e30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014e34:	330c      	adds	r3, #12
 8014e36:	01db      	lsls	r3, r3, #7
 8014e38:	687a      	ldr	r2, [r7, #4]
 8014e3a:	4413      	add	r3, r2
 8014e3c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014e40:	601a      	str	r2, [r3, #0]
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 8014e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014e46:	330f      	adds	r3, #15
 8014e48:	009b      	lsls	r3, r3, #2
 8014e4a:	33b8      	adds	r3, #184	; 0xb8
 8014e4c:	443b      	add	r3, r7
 8014e4e:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8014e52:	009c      	lsls	r4, r3, #2
 8014e54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014e58:	3309      	adds	r3, #9
 8014e5a:	009b      	lsls	r3, r3, #2
 8014e5c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014e60:	4413      	add	r3, r2
 8014e62:	681a      	ldr	r2, [r3, #0]
 8014e64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014e68:	009b      	lsls	r3, r3, #2
 8014e6a:	33b8      	adds	r3, #184	; 0xb8
 8014e6c:	443b      	add	r3, r7
 8014e6e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8014e72:	4619      	mov	r1, r3
 8014e74:	4610      	mov	r0, r2
 8014e76:	f7fe fd33 	bl	80138e0 <MULSHIFT32>
 8014e7a:	4605      	mov	r5, r0
 8014e7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014e80:	3303      	adds	r3, #3
 8014e82:	009b      	lsls	r3, r3, #2
 8014e84:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014e88:	4413      	add	r3, r2
 8014e8a:	681a      	ldr	r2, [r3, #0]
 8014e8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014e90:	f1c3 030b 	rsb	r3, r3, #11
 8014e94:	009b      	lsls	r3, r3, #2
 8014e96:	33b8      	adds	r3, #184	; 0xb8
 8014e98:	443b      	add	r3, r7
 8014e9a:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8014e9e:	4619      	mov	r1, r3
 8014ea0:	4610      	mov	r0, r2
 8014ea2:	f7fe fd1d 	bl	80138e0 <MULSHIFT32>
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	442b      	add	r3, r5
 8014eaa:	4423      	add	r3, r4
 8014eac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 8014eb0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8014eb4:	f7fe fd26 	bl	8013904 <FASTABS>
 8014eb8:	4602      	mov	r2, r0
 8014eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014ebe:	4313      	orrs	r3, r2
 8014ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014ec4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014ec8:	330f      	adds	r3, #15
 8014eca:	01db      	lsls	r3, r3, #7
 8014ecc:	687a      	ldr	r2, [r7, #4]
 8014ece:	4413      	add	r3, r2
 8014ed0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014ed4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++) {
 8014ed6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014eda:	3301      	adds	r3, #1
 8014edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014ee0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014ee4:	2b02      	cmp	r3, #2
 8014ee6:	f77f aec0 	ble.w	8014c6a <IMDCT12x3+0xf2>
	}

	/* save previous (unwindowed) for overlap - only need samples 6-8, 12-17 */
	for (i = 6; i < 9; i++)
 8014eea:	2306      	movs	r3, #6
 8014eec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014ef0:	e010      	b.n	8014f14 <IMDCT12x3+0x39c>
		*xPrev++ = xBuf[i] >> 2;
 8014ef2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014ef6:	009b      	lsls	r3, r3, #2
 8014ef8:	33b8      	adds	r3, #184	; 0xb8
 8014efa:	443b      	add	r3, r7
 8014efc:	f853 2c5c 	ldr.w	r2, [r3, #-92]
 8014f00:	68bb      	ldr	r3, [r7, #8]
 8014f02:	1d19      	adds	r1, r3, #4
 8014f04:	60b9      	str	r1, [r7, #8]
 8014f06:	1092      	asrs	r2, r2, #2
 8014f08:	601a      	str	r2, [r3, #0]
	for (i = 6; i < 9; i++)
 8014f0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014f0e:	3301      	adds	r3, #1
 8014f10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014f14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014f18:	2b08      	cmp	r3, #8
 8014f1a:	ddea      	ble.n	8014ef2 <IMDCT12x3+0x37a>
	for (i = 12; i < 18; i++)
 8014f1c:	230c      	movs	r3, #12
 8014f1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014f22:	e010      	b.n	8014f46 <IMDCT12x3+0x3ce>
		*xPrev++ = xBuf[i] >> 2;
 8014f24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014f28:	009b      	lsls	r3, r3, #2
 8014f2a:	33b8      	adds	r3, #184	; 0xb8
 8014f2c:	443b      	add	r3, r7
 8014f2e:	f853 2c5c 	ldr.w	r2, [r3, #-92]
 8014f32:	68bb      	ldr	r3, [r7, #8]
 8014f34:	1d19      	adds	r1, r3, #4
 8014f36:	60b9      	str	r1, [r7, #8]
 8014f38:	1092      	asrs	r2, r2, #2
 8014f3a:	601a      	str	r2, [r3, #0]
	for (i = 12; i < 18; i++)
 8014f3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014f40:	3301      	adds	r3, #1
 8014f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014f46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014f4a:	2b11      	cmp	r3, #17
 8014f4c:	ddea      	ble.n	8014f24 <IMDCT12x3+0x3ac>

	xPrev -= 9;
 8014f4e:	68bb      	ldr	r3, [r7, #8]
 8014f50:	3b24      	subs	r3, #36	; 0x24
 8014f52:	60bb      	str	r3, [r7, #8]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 8014f54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8014f58:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8014f5c:	68b9      	ldr	r1, [r7, #8]
 8014f5e:	6878      	ldr	r0, [r7, #4]
 8014f60:	f7fe fffc 	bl	8013f5c <FreqInvertRescale>
 8014f64:	4602      	mov	r2, r0
 8014f66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014f6a:	4313      	orrs	r3, r2
 8014f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	return mOut;
 8014f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
}
 8014f74:	4618      	mov	r0, r3
 8014f76:	37b8      	adds	r7, #184	; 0xb8
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8014f7c:	0801a4f4 	.word	0x0801a4f4

08014f80 <HybridTransform>:
 *                (including overlap-add)
 *
 * TODO:        examine mixedBlock/winSwitch logic carefully (test he_mode.bit)
 **************************************************************************************/
static int HybridTransform(int *xCurr, int *xPrev, int y[BLOCK_SIZE][NBANDS], SideInfoSub *sis, BlockCount *bc)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b0a4      	sub	sp, #144	; 0x90
 8014f84:	af04      	add	r7, sp, #16
 8014f86:	60f8      	str	r0, [r7, #12]
 8014f88:	60b9      	str	r1, [r7, #8]
 8014f8a:	607a      	str	r2, [r7, #4]
 8014f8c:	603b      	str	r3, [r7, #0]

	ASSERT(bc->nBlocksLong  <= NBANDS);
	ASSERT(bc->nBlocksTotal <= NBANDS);
	ASSERT(bc->nBlocksPrev  <= NBANDS);

	mOut = 0;
 8014f8e:	2300      	movs	r3, #0
 8014f90:	667b      	str	r3, [r7, #100]	; 0x64

	/* do long blocks, if any */
	for(i = 0; i < bc->nBlocksLong; i++) {
 8014f92:	2300      	movs	r3, #0
 8014f94:	677b      	str	r3, [r7, #116]	; 0x74
 8014f96:	e038      	b.n	801500a <HybridTransform+0x8a>
		/* currWinIdx picks the right window for long blocks (if mixed, long blocks use window type 0) */
		currWinIdx = sis->blockType;
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	695b      	ldr	r3, [r3, #20]
 8014f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
		if (sis->mixedBlock && i < bc->currWinSwitch) 
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	699b      	ldr	r3, [r3, #24]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d007      	beq.n	8014fb6 <HybridTransform+0x36>
 8014fa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014faa:	695b      	ldr	r3, [r3, #20]
 8014fac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014fae:	429a      	cmp	r2, r3
 8014fb0:	da01      	bge.n	8014fb6 <HybridTransform+0x36>
			currWinIdx = 0;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	67fb      	str	r3, [r7, #124]	; 0x7c

		prevWinIdx = bc->prevType;
 8014fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014fba:	68db      	ldr	r3, [r3, #12]
 8014fbc:	67bb      	str	r3, [r7, #120]	; 0x78
		if (i < bc->prevWinSwitch)
 8014fbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014fc2:	691b      	ldr	r3, [r3, #16]
 8014fc4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014fc6:	429a      	cmp	r2, r3
 8014fc8:	da01      	bge.n	8014fce <HybridTransform+0x4e>
			 prevWinIdx = 0;
 8014fca:	2300      	movs	r3, #0
 8014fcc:	67bb      	str	r3, [r7, #120]	; 0x78

		/* do 36-point IMDCT, including windowing and overlap-add */
		mOut |= IMDCT36(xCurr, xPrev, &(y[0][i]), currWinIdx, prevWinIdx, i, bc->gbIn);
 8014fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014fd0:	009b      	lsls	r3, r3, #2
 8014fd2:	687a      	ldr	r2, [r7, #4]
 8014fd4:	441a      	add	r2, r3
 8014fd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014fda:	699b      	ldr	r3, [r3, #24]
 8014fdc:	9302      	str	r3, [sp, #8]
 8014fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014fe0:	9301      	str	r3, [sp, #4]
 8014fe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014fe4:	9300      	str	r3, [sp, #0]
 8014fe6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014fe8:	68b9      	ldr	r1, [r7, #8]
 8014fea:	68f8      	ldr	r0, [r7, #12]
 8014fec:	f7ff faca 	bl	8014584 <IMDCT36>
 8014ff0:	4602      	mov	r2, r0
 8014ff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014ff4:	4313      	orrs	r3, r2
 8014ff6:	667b      	str	r3, [r7, #100]	; 0x64
		xCurr += 18;
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	3348      	adds	r3, #72	; 0x48
 8014ffc:	60fb      	str	r3, [r7, #12]
		xPrev += 9;
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	3324      	adds	r3, #36	; 0x24
 8015002:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < bc->nBlocksLong; i++) {
 8015004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015006:	3301      	adds	r3, #1
 8015008:	677b      	str	r3, [r7, #116]	; 0x74
 801500a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015012:	429a      	cmp	r2, r3
 8015014:	dbc0      	blt.n	8014f98 <HybridTransform+0x18>
	}

	/* do short blocks (if any) */
	for (   ; i < bc->nBlocksTotal; i++) {
 8015016:	e027      	b.n	8015068 <HybridTransform+0xe8>
		ASSERT(sis->blockType == 2);

		prevWinIdx = bc->prevType;
 8015018:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801501c:	68db      	ldr	r3, [r3, #12]
 801501e:	67bb      	str	r3, [r7, #120]	; 0x78
		if (i < bc->prevWinSwitch)
 8015020:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015024:	691b      	ldr	r3, [r3, #16]
 8015026:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015028:	429a      	cmp	r2, r3
 801502a:	da01      	bge.n	8015030 <HybridTransform+0xb0>
			 prevWinIdx = 0;
 801502c:	2300      	movs	r3, #0
 801502e:	67bb      	str	r3, [r7, #120]	; 0x78
		
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 8015030:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015032:	009b      	lsls	r3, r3, #2
 8015034:	687a      	ldr	r2, [r7, #4]
 8015036:	441a      	add	r2, r3
 8015038:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801503c:	699b      	ldr	r3, [r3, #24]
 801503e:	9301      	str	r3, [sp, #4]
 8015040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015042:	9300      	str	r3, [sp, #0]
 8015044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015046:	68b9      	ldr	r1, [r7, #8]
 8015048:	68f8      	ldr	r0, [r7, #12]
 801504a:	f7ff fd95 	bl	8014b78 <IMDCT12x3>
 801504e:	4602      	mov	r2, r0
 8015050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015052:	4313      	orrs	r3, r2
 8015054:	667b      	str	r3, [r7, #100]	; 0x64
		xCurr += 18;
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	3348      	adds	r3, #72	; 0x48
 801505a:	60fb      	str	r3, [r7, #12]
		xPrev += 9;
 801505c:	68bb      	ldr	r3, [r7, #8]
 801505e:	3324      	adds	r3, #36	; 0x24
 8015060:	60bb      	str	r3, [r7, #8]
	for (   ; i < bc->nBlocksTotal; i++) {
 8015062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015064:	3301      	adds	r3, #1
 8015066:	677b      	str	r3, [r7, #116]	; 0x74
 8015068:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801506c:	685b      	ldr	r3, [r3, #4]
 801506e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015070:	429a      	cmp	r2, r3
 8015072:	dbd1      	blt.n	8015018 <HybridTransform+0x98>
	}
	nBlocksOut = i;
 8015074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015076:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	/* window and overlap prev if prev longer that current */
	for (   ; i < bc->nBlocksPrev; i++) {
 8015078:	e074      	b.n	8015164 <HybridTransform+0x1e4>
		prevWinIdx = bc->prevType;
 801507a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801507e:	68db      	ldr	r3, [r3, #12]
 8015080:	67bb      	str	r3, [r7, #120]	; 0x78
		if (i < bc->prevWinSwitch)
 8015082:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015086:	691b      	ldr	r3, [r3, #16]
 8015088:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801508a:	429a      	cmp	r2, r3
 801508c:	da01      	bge.n	8015092 <HybridTransform+0x112>
			 prevWinIdx = 0;
 801508e:	2300      	movs	r3, #0
 8015090:	67bb      	str	r3, [r7, #120]	; 0x78
		WinPrevious(xPrev, xPrevWin, prevWinIdx);
 8015092:	f107 0314 	add.w	r3, r7, #20
 8015096:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015098:	4619      	mov	r1, r3
 801509a:	68b8      	ldr	r0, [r7, #8]
 801509c:	f7fe fe04 	bl	8013ca8 <WinPrevious>

		nonZero = 0;
 80150a0:	2300      	movs	r3, #0
 80150a2:	66bb      	str	r3, [r7, #104]	; 0x68
		fiBit = i << 31;
 80150a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80150a6:	07db      	lsls	r3, r3, #31
 80150a8:	663b      	str	r3, [r7, #96]	; 0x60
		for (j = 0; j < 9; j++) {
 80150aa:	2300      	movs	r3, #0
 80150ac:	673b      	str	r3, [r7, #112]	; 0x70
 80150ae:	e04b      	b.n	8015148 <HybridTransform+0x1c8>
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 80150b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80150b2:	005b      	lsls	r3, r3, #1
 80150b4:	009b      	lsls	r3, r3, #2
 80150b6:	3380      	adds	r3, #128	; 0x80
 80150b8:	443b      	add	r3, r7
 80150ba:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 80150be:	009b      	lsls	r3, r3, #2
 80150c0:	65fb      	str	r3, [r7, #92]	; 0x5c
			nonZero |= xp;
 80150c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80150c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80150c6:	4313      	orrs	r3, r2
 80150c8:	66bb      	str	r3, [r7, #104]	; 0x68
			y[2*j+0][i] = xp;
 80150ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80150cc:	021b      	lsls	r3, r3, #8
 80150ce:	687a      	ldr	r2, [r7, #4]
 80150d0:	4413      	add	r3, r2
 80150d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80150d4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80150d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mOut |= FASTABS(xp);
 80150da:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80150dc:	f7fe fc12 	bl	8013904 <FASTABS>
 80150e0:	4602      	mov	r2, r0
 80150e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80150e4:	4313      	orrs	r3, r2
 80150e6:	667b      	str	r3, [r7, #100]	; 0x64

			/* frequency inversion on odd blocks/odd samples (flip sign if i odd, j odd) */
			xp = xPrevWin[2*j+1] << 2;
 80150e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80150ea:	005b      	lsls	r3, r3, #1
 80150ec:	3301      	adds	r3, #1
 80150ee:	009b      	lsls	r3, r3, #2
 80150f0:	3380      	adds	r3, #128	; 0x80
 80150f2:	443b      	add	r3, r7
 80150f4:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 80150f8:	009b      	lsls	r3, r3, #2
 80150fa:	65fb      	str	r3, [r7, #92]	; 0x5c
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 80150fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80150fe:	17da      	asrs	r2, r3, #31
 8015100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015102:	405a      	eors	r2, r3
 8015104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015106:	f003 0301 	and.w	r3, r3, #1
 801510a:	4413      	add	r3, r2
 801510c:	65fb      	str	r3, [r7, #92]	; 0x5c
			nonZero |= xp;
 801510e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015112:	4313      	orrs	r3, r2
 8015114:	66bb      	str	r3, [r7, #104]	; 0x68
			y[2*j+1][i] = xp;
 8015116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015118:	021b      	lsls	r3, r3, #8
 801511a:	3380      	adds	r3, #128	; 0x80
 801511c:	687a      	ldr	r2, [r7, #4]
 801511e:	4413      	add	r3, r2
 8015120:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015122:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8015124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			mOut |= FASTABS(xp);
 8015128:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801512a:	f7fe fbeb 	bl	8013904 <FASTABS>
 801512e:	4602      	mov	r2, r0
 8015130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015132:	4313      	orrs	r3, r2
 8015134:	667b      	str	r3, [r7, #100]	; 0x64

			xPrev[j] = 0;
 8015136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015138:	009b      	lsls	r3, r3, #2
 801513a:	68ba      	ldr	r2, [r7, #8]
 801513c:	4413      	add	r3, r2
 801513e:	2200      	movs	r2, #0
 8015140:	601a      	str	r2, [r3, #0]
		for (j = 0; j < 9; j++) {
 8015142:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015144:	3301      	adds	r3, #1
 8015146:	673b      	str	r3, [r7, #112]	; 0x70
 8015148:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801514a:	2b08      	cmp	r3, #8
 801514c:	ddb0      	ble.n	80150b0 <HybridTransform+0x130>
		}
		xPrev += 9;
 801514e:	68bb      	ldr	r3, [r7, #8]
 8015150:	3324      	adds	r3, #36	; 0x24
 8015152:	60bb      	str	r3, [r7, #8]
		if (nonZero)
 8015154:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015156:	2b00      	cmp	r3, #0
 8015158:	d001      	beq.n	801515e <HybridTransform+0x1de>
			nBlocksOut = i;
 801515a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801515c:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (   ; i < bc->nBlocksPrev; i++) {
 801515e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015160:	3301      	adds	r3, #1
 8015162:	677b      	str	r3, [r7, #116]	; 0x74
 8015164:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015168:	689b      	ldr	r3, [r3, #8]
 801516a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801516c:	429a      	cmp	r2, r3
 801516e:	db84      	blt.n	801507a <HybridTransform+0xfa>
	}
	
	/* clear rest of blocks */
	for (   ; i < 32; i++) {
 8015170:	e013      	b.n	801519a <HybridTransform+0x21a>
		for (j = 0; j < 18; j++) 
 8015172:	2300      	movs	r3, #0
 8015174:	673b      	str	r3, [r7, #112]	; 0x70
 8015176:	e00a      	b.n	801518e <HybridTransform+0x20e>
			y[j][i] = 0;
 8015178:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801517a:	01db      	lsls	r3, r3, #7
 801517c:	687a      	ldr	r2, [r7, #4]
 801517e:	4413      	add	r3, r2
 8015180:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015182:	2100      	movs	r1, #0
 8015184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (j = 0; j < 18; j++) 
 8015188:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801518a:	3301      	adds	r3, #1
 801518c:	673b      	str	r3, [r7, #112]	; 0x70
 801518e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015190:	2b11      	cmp	r3, #17
 8015192:	ddf1      	ble.n	8015178 <HybridTransform+0x1f8>
	for (   ; i < 32; i++) {
 8015194:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015196:	3301      	adds	r3, #1
 8015198:	677b      	str	r3, [r7, #116]	; 0x74
 801519a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801519c:	2b1f      	cmp	r3, #31
 801519e:	dde8      	ble.n	8015172 <HybridTransform+0x1f2>
	}

	bc->gbOut = CLZ(mOut) - 1;
 80151a0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80151a2:	f7fe fbc1 	bl	8013928 <CLZ>
 80151a6:	4603      	mov	r3, r0
 80151a8:	1e5a      	subs	r2, r3, #1
 80151aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80151ae:	61da      	str	r2, [r3, #28]

	return nBlocksOut;
 80151b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 80151b2:	4618      	mov	r0, r3
 80151b4:	3780      	adds	r7, #128	; 0x80
 80151b6:	46bd      	mov	sp, r7
 80151b8:	bd80      	pop	{r7, pc}
	...

080151bc <xmp3_IMDCT>:
 *              updated hi->nonZeroBound index for this channel
 *
 * Return:      0 on success,  -1 if null input pointers
 **************************************************************************************/
int IMDCT(MP3DecInfo *mp3DecInfo, int gr, int ch)
{
 80151bc:	b5b0      	push	{r4, r5, r7, lr}
 80151be:	b094      	sub	sp, #80	; 0x50
 80151c0:	af02      	add	r7, sp, #8
 80151c2:	60f8      	str	r0, [r7, #12]
 80151c4:	60b9      	str	r1, [r7, #8]
 80151c6:	607a      	str	r2, [r7, #4]
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	BlockCount bc;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d00f      	beq.n	80151ee <xmp3_IMDCT+0x32>
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d00b      	beq.n	80151ee <xmp3_IMDCT+0x32>
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	685b      	ldr	r3, [r3, #4]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d007      	beq.n	80151ee <xmp3_IMDCT+0x32>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	68db      	ldr	r3, [r3, #12]
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d003      	beq.n	80151ee <xmp3_IMDCT+0x32>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	695b      	ldr	r3, [r3, #20]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d102      	bne.n	80151f4 <xmp3_IMDCT+0x38>
		return -1;
 80151ee:	f04f 33ff 	mov.w	r3, #4294967295
 80151f2:	e139      	b.n	8015468 <xmp3_IMDCT+0x2ac>

	/* si is an array of up to 4 structs, stored as gr0ch0, gr0ch1, gr1ch0, gr1ch1 */
	fh = (FrameHeader *)(mp3DecInfo->FrameHeaderPS);
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	643b      	str	r3, [r7, #64]	; 0x40
	si = (SideInfo *)(mp3DecInfo->SideInfoPS);
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	685b      	ldr	r3, [r3, #4]
 80151fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	hi = (HuffmanInfo*)(mp3DecInfo->HuffmanInfoPS);
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	68db      	ldr	r3, [r3, #12]
 8015204:	63bb      	str	r3, [r7, #56]	; 0x38
	mi = (IMDCTInfo *)(mp3DecInfo->IMDCTInfoPS);
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	695b      	ldr	r3, [r3, #20]
 801520a:	637b      	str	r3, [r7, #52]	; 0x34
	/* anti-aliasing done on whole long blocks only
	 * for mixed blocks, nBfly always 1, except 3 for 8 kHz MPEG 2.5 (see sfBandTab) 
     *   nLongBlocks = number of blocks with (possibly) non-zero power 
	 *   nBfly = number of butterflies to do (nLongBlocks - 1, unless no long blocks)
	 */
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 801520c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801520e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015210:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015212:	7812      	ldrb	r2, [r2, #0]
 8015214:	2a00      	cmp	r2, #0
 8015216:	d101      	bne.n	801521c <xmp3_IMDCT+0x60>
 8015218:	2208      	movs	r2, #8
 801521a:	e000      	b.n	801521e <xmp3_IMDCT+0x62>
 801521c:	2206      	movs	r2, #6
 801521e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8015222:	4a93      	ldr	r2, [pc, #588]	; (8015470 <xmp3_IMDCT+0x2b4>)
 8015224:	fb82 1203 	smull	r1, r2, r2, r3
 8015228:	1092      	asrs	r2, r2, #2
 801522a:	17db      	asrs	r3, r3, #31
 801522c:	1ad3      	subs	r3, r2, r3
 801522e:	b21b      	sxth	r3, r3
 8015230:	633b      	str	r3, [r7, #48]	; 0x30
	if (si->sis[gr][ch].blockType != 2) {
 8015232:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	68b9      	ldr	r1, [r7, #8]
 8015238:	461a      	mov	r2, r3
 801523a:	00d2      	lsls	r2, r2, #3
 801523c:	441a      	add	r2, r3
 801523e:	00d3      	lsls	r3, r2, #3
 8015240:	461a      	mov	r2, r3
 8015242:	460b      	mov	r3, r1
 8015244:	00db      	lsls	r3, r3, #3
 8015246:	440b      	add	r3, r1
 8015248:	011b      	lsls	r3, r3, #4
 801524a:	4413      	add	r3, r2
 801524c:	4403      	add	r3, r0
 801524e:	333c      	adds	r3, #60	; 0x3c
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	2b02      	cmp	r3, #2
 8015254:	d01e      	beq.n	8015294 <xmp3_IMDCT+0xd8>
		/* all long transforms */
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 8015256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015258:	687a      	ldr	r2, [r7, #4]
 801525a:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 801525e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015262:	f240 2226 	movw	r2, #550	; 0x226
 8015266:	4293      	cmp	r3, r2
 8015268:	dc0e      	bgt.n	8015288 <xmp3_IMDCT+0xcc>
 801526a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801526c:	687a      	ldr	r2, [r7, #4]
 801526e:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 8015272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015276:	3307      	adds	r3, #7
 8015278:	4a7d      	ldr	r2, [pc, #500]	; (8015470 <xmp3_IMDCT+0x2b4>)
 801527a:	fb82 1203 	smull	r1, r2, r2, r3
 801527e:	1092      	asrs	r2, r2, #2
 8015280:	17db      	asrs	r3, r3, #31
 8015282:	1ad3      	subs	r3, r2, r3
 8015284:	3301      	adds	r3, #1
 8015286:	e000      	b.n	801528a <xmp3_IMDCT+0xce>
 8015288:	2320      	movs	r3, #32
 801528a:	613b      	str	r3, [r7, #16]
		nBfly = bc.nBlocksLong - 1;
 801528c:	693b      	ldr	r3, [r7, #16]
 801528e:	3b01      	subs	r3, #1
 8015290:	647b      	str	r3, [r7, #68]	; 0x44
 8015292:	e02d      	b.n	80152f0 <xmp3_IMDCT+0x134>
	} else if (si->sis[gr][ch].blockType == 2 && si->sis[gr][ch].mixedBlock) {
 8015294:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	68b9      	ldr	r1, [r7, #8]
 801529a:	461a      	mov	r2, r3
 801529c:	00d2      	lsls	r2, r2, #3
 801529e:	441a      	add	r2, r3
 80152a0:	00d3      	lsls	r3, r2, #3
 80152a2:	461a      	mov	r2, r3
 80152a4:	460b      	mov	r3, r1
 80152a6:	00db      	lsls	r3, r3, #3
 80152a8:	440b      	add	r3, r1
 80152aa:	011b      	lsls	r3, r3, #4
 80152ac:	4413      	add	r3, r2
 80152ae:	4403      	add	r3, r0
 80152b0:	333c      	adds	r3, #60	; 0x3c
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	2b02      	cmp	r3, #2
 80152b6:	d117      	bne.n	80152e8 <xmp3_IMDCT+0x12c>
 80152b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	68b9      	ldr	r1, [r7, #8]
 80152be:	461a      	mov	r2, r3
 80152c0:	00d2      	lsls	r2, r2, #3
 80152c2:	441a      	add	r2, r3
 80152c4:	00d3      	lsls	r3, r2, #3
 80152c6:	461a      	mov	r2, r3
 80152c8:	460b      	mov	r3, r1
 80152ca:	00db      	lsls	r3, r3, #3
 80152cc:	440b      	add	r3, r1
 80152ce:	011b      	lsls	r3, r3, #4
 80152d0:	4413      	add	r3, r2
 80152d2:	4403      	add	r3, r0
 80152d4:	3340      	adds	r3, #64	; 0x40
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d005      	beq.n	80152e8 <xmp3_IMDCT+0x12c>
		/* mixed block - long transforms until cutoff, then short transforms */
		bc.nBlocksLong = blockCutoff;	
 80152dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152de:	613b      	str	r3, [r7, #16]
		nBfly = bc.nBlocksLong - 1;
 80152e0:	693b      	ldr	r3, [r7, #16]
 80152e2:	3b01      	subs	r3, #1
 80152e4:	647b      	str	r3, [r7, #68]	; 0x44
 80152e6:	e003      	b.n	80152f0 <xmp3_IMDCT+0x134>
	} else {
		/* all short transforms */
		bc.nBlocksLong = 0;
 80152e8:	2300      	movs	r3, #0
 80152ea:	613b      	str	r3, [r7, #16]
		nBfly = 0;
 80152ec:	2300      	movs	r3, #0
 80152ee:	647b      	str	r3, [r7, #68]	; 0x44
	}
 
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 80152f0:	687a      	ldr	r2, [r7, #4]
 80152f2:	4613      	mov	r3, r2
 80152f4:	00db      	lsls	r3, r3, #3
 80152f6:	4413      	add	r3, r2
 80152f8:	021b      	lsls	r3, r3, #8
 80152fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80152fc:	4413      	add	r3, r2
 80152fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015300:	4618      	mov	r0, r3
 8015302:	f7fe fb2d 	bl	8013960 <AntiAlias>
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 8015306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015308:	4613      	mov	r3, r2
 801530a:	00db      	lsls	r3, r3, #3
 801530c:	4413      	add	r3, r2
 801530e:	005b      	lsls	r3, r3, #1
 8015310:	f103 0208 	add.w	r2, r3, #8
 8015314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015316:	6879      	ldr	r1, [r7, #4]
 8015318:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 801531c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015320:	429a      	cmp	r2, r3
 8015322:	bfb8      	it	lt
 8015324:	461a      	movlt	r2, r3
 8015326:	4611      	mov	r1, r2
 8015328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801532a:	687a      	ldr	r2, [r7, #4]
 801532c:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 8015330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	ASSERT(hi->nonZeroBound[ch] <= MAX_NSAMP);

	/* for readability, use a struct instead of passing a million parameters to HybridTransform() */
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
 8015334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015336:	687a      	ldr	r2, [r7, #4]
 8015338:	f502 6290 	add.w	r2, r2, #1152	; 0x480
 801533c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015340:	3311      	adds	r3, #17
 8015342:	4a4b      	ldr	r2, [pc, #300]	; (8015470 <xmp3_IMDCT+0x2b4>)
 8015344:	fb82 1203 	smull	r1, r2, r2, r3
 8015348:	1092      	asrs	r2, r2, #2
 801534a:	17db      	asrs	r3, r3, #31
 801534c:	1ad3      	subs	r3, r2, r3
 801534e:	617b      	str	r3, [r7, #20]
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 8015350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015352:	687a      	ldr	r2, [r7, #4]
 8015354:	f502 62d8 	add.w	r2, r2, #1728	; 0x6c0
 8015358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801535c:	61bb      	str	r3, [r7, #24]
	bc.prevType = mi->prevType[ch];
 801535e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015360:	687a      	ldr	r2, [r7, #4]
 8015362:	f202 62c2 	addw	r2, r2, #1730	; 0x6c2
 8015366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801536a:	61fb      	str	r3, [r7, #28]
	bc.prevWinSwitch = mi->prevWinSwitch[ch];
 801536c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801536e:	687a      	ldr	r2, [r7, #4]
 8015370:	f202 62c4 	addw	r2, r2, #1732	; 0x6c4
 8015374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015378:	623b      	str	r3, [r7, #32]
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 801537a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	68b9      	ldr	r1, [r7, #8]
 8015380:	461a      	mov	r2, r3
 8015382:	00d2      	lsls	r2, r2, #3
 8015384:	441a      	add	r2, r3
 8015386:	00d3      	lsls	r3, r2, #3
 8015388:	461a      	mov	r2, r3
 801538a:	460b      	mov	r3, r1
 801538c:	00db      	lsls	r3, r3, #3
 801538e:	440b      	add	r3, r1
 8015390:	011b      	lsls	r3, r3, #4
 8015392:	4413      	add	r3, r2
 8015394:	4403      	add	r3, r0
 8015396:	3340      	adds	r3, #64	; 0x40
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d001      	beq.n	80153a2 <xmp3_IMDCT+0x1e6>
 801539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153a0:	e000      	b.n	80153a4 <xmp3_IMDCT+0x1e8>
 80153a2:	2300      	movs	r3, #0
 80153a4:	627b      	str	r3, [r7, #36]	; 0x24
	bc.gbIn = hi->gb[ch];
 80153a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153a8:	687a      	ldr	r2, [r7, #4]
 80153aa:	f202 4282 	addw	r2, r2, #1154	; 0x482
 80153ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153b2:	62bb      	str	r3, [r7, #40]	; 0x28

	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 80153b4:	687a      	ldr	r2, [r7, #4]
 80153b6:	4613      	mov	r3, r2
 80153b8:	00db      	lsls	r3, r3, #3
 80153ba:	4413      	add	r3, r2
 80153bc:	021b      	lsls	r3, r3, #8
 80153be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80153c0:	18d0      	adds	r0, r2, r3
 80153c2:	687a      	ldr	r2, [r7, #4]
 80153c4:	4613      	mov	r3, r2
 80153c6:	00db      	lsls	r3, r3, #3
 80153c8:	4413      	add	r3, r2
 80153ca:	01db      	lsls	r3, r3, #7
 80153cc:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80153d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80153d2:	18d4      	adds	r4, r2, r3
 80153d4:	687a      	ldr	r2, [r7, #4]
 80153d6:	4613      	mov	r3, r2
 80153d8:	00db      	lsls	r3, r3, #3
 80153da:	4413      	add	r3, r2
 80153dc:	021b      	lsls	r3, r3, #8
 80153de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80153e0:	18d5      	adds	r5, r2, r3
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	461a      	mov	r2, r3
 80153e6:	00d2      	lsls	r2, r2, #3
 80153e8:	441a      	add	r2, r3
 80153ea:	00d3      	lsls	r3, r2, #3
 80153ec:	461a      	mov	r2, r3
 80153ee:	68b9      	ldr	r1, [r7, #8]
 80153f0:	460b      	mov	r3, r1
 80153f2:	00db      	lsls	r3, r3, #3
 80153f4:	440b      	add	r3, r1
 80153f6:	011b      	lsls	r3, r3, #4
 80153f8:	4413      	add	r3, r2
 80153fa:	3328      	adds	r3, #40	; 0x28
 80153fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80153fe:	441a      	add	r2, r3
 8015400:	f107 0310 	add.w	r3, r7, #16
 8015404:	9300      	str	r3, [sp, #0]
 8015406:	4613      	mov	r3, r2
 8015408:	462a      	mov	r2, r5
 801540a:	4621      	mov	r1, r4
 801540c:	f7ff fdb8 	bl	8014f80 <HybridTransform>
 8015410:	4601      	mov	r1, r0
 8015412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015414:	687a      	ldr	r2, [r7, #4]
 8015416:	f502 62d8 	add.w	r2, r2, #1728	; 0x6c0
 801541a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 801541e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	68b9      	ldr	r1, [r7, #8]
 8015424:	461a      	mov	r2, r3
 8015426:	00d2      	lsls	r2, r2, #3
 8015428:	441a      	add	r2, r3
 801542a:	00d3      	lsls	r3, r2, #3
 801542c:	461a      	mov	r2, r3
 801542e:	460b      	mov	r3, r1
 8015430:	00db      	lsls	r3, r3, #3
 8015432:	440b      	add	r3, r1
 8015434:	011b      	lsls	r3, r3, #4
 8015436:	4413      	add	r3, r2
 8015438:	4403      	add	r3, r0
 801543a:	333c      	adds	r3, #60	; 0x3c
 801543c:	6819      	ldr	r1, [r3, #0]
 801543e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015440:	687a      	ldr	r2, [r7, #4]
 8015442:	f202 62c2 	addw	r2, r2, #1730	; 0x6c2
 8015446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	mi->prevWinSwitch[ch] = bc.currWinSwitch;		/* 0 means not a mixed block (either all short or all long) */
 801544a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801544c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801544e:	687a      	ldr	r2, [r7, #4]
 8015450:	f202 62c4 	addw	r2, r2, #1732	; 0x6c4
 8015454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	mi->gb[ch] = bc.gbOut;
 8015458:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801545a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801545c:	687a      	ldr	r2, [r7, #4]
 801545e:	f202 62c6 	addw	r2, r2, #1734	; 0x6c6
 8015462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	ASSERT(mi->numPrevIMDCT[ch] <= NBANDS);

	/* output has gained 2 int bits */
	return 0;
 8015466:	2300      	movs	r3, #0
}
 8015468:	4618      	mov	r0, r3
 801546a:	3748      	adds	r7, #72	; 0x48
 801546c:	46bd      	mov	sp, r7
 801546e:	bdb0      	pop	{r4, r5, r7, pc}
 8015470:	38e38e39 	.word	0x38e38e39

08015474 <UnpackSFMPEG1>:
 *                so that we index through consectutive memory locations when unpacking 
 *                (make sure dequantizer follows same convention)
 *              Illegal Intensity Position = 7 (always) for MPEG1 scale factors
 **************************************************************************************/
static void UnpackSFMPEG1(BitStreamInfo *bsi, SideInfoSub *sis, ScaleFactorInfoSub *sfis, int *scfsi, int gr, ScaleFactorInfoSub *sfisGr0)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b088      	sub	sp, #32
 8015478:	af00      	add	r7, sp, #0
 801547a:	60f8      	str	r0, [r7, #12]
 801547c:	60b9      	str	r1, [r7, #8]
 801547e:	607a      	str	r2, [r7, #4]
 8015480:	603b      	str	r3, [r7, #0]
	int sfb;
	int slen0, slen1;
	
	/* these can be 0, so make sure GetBits(bsi, 0) returns 0 (no >> 32 or anything) */
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 8015482:	68bb      	ldr	r3, [r7, #8]
 8015484:	68db      	ldr	r3, [r3, #12]
 8015486:	4a9b      	ldr	r2, [pc, #620]	; (80156f4 <UnpackSFMPEG1+0x280>)
 8015488:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 801548c:	61bb      	str	r3, [r7, #24]
	slen1 = (int)SFLenTab[sis->sfCompress][1];
 801548e:	68bb      	ldr	r3, [r7, #8]
 8015490:	68db      	ldr	r3, [r3, #12]
 8015492:	4a98      	ldr	r2, [pc, #608]	; (80156f4 <UnpackSFMPEG1+0x280>)
 8015494:	005b      	lsls	r3, r3, #1
 8015496:	4413      	add	r3, r2
 8015498:	785b      	ldrb	r3, [r3, #1]
 801549a:	617b      	str	r3, [r7, #20]
	
	if (sis->blockType == 2) {
 801549c:	68bb      	ldr	r3, [r7, #8]
 801549e:	695b      	ldr	r3, [r3, #20]
 80154a0:	2b02      	cmp	r3, #2
 80154a2:	f040 8096 	bne.w	80155d2 <UnpackSFMPEG1+0x15e>
		/* short block, type 2 (implies winSwitchFlag == 1) */
		if (sis->mixedBlock) {          
 80154a6:	68bb      	ldr	r3, [r7, #8]
 80154a8:	699b      	ldr	r3, [r3, #24]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d016      	beq.n	80154dc <UnpackSFMPEG1+0x68>
			/* do long block portion */
			for (sfb = 0; sfb < 8; sfb++)
 80154ae:	2300      	movs	r3, #0
 80154b0:	61fb      	str	r3, [r7, #28]
 80154b2:	e00d      	b.n	80154d0 <UnpackSFMPEG1+0x5c>
				sfis->l[sfb] =    (char)GetBits(bsi, slen0);
 80154b4:	69b9      	ldr	r1, [r7, #24]
 80154b6:	68f8      	ldr	r0, [r7, #12]
 80154b8:	f7fb fba7 	bl	8010c0a <xmp3_GetBits>
 80154bc:	4603      	mov	r3, r0
 80154be:	b2d9      	uxtb	r1, r3
 80154c0:	687a      	ldr	r2, [r7, #4]
 80154c2:	69fb      	ldr	r3, [r7, #28]
 80154c4:	4413      	add	r3, r2
 80154c6:	460a      	mov	r2, r1
 80154c8:	701a      	strb	r2, [r3, #0]
			for (sfb = 0; sfb < 8; sfb++)
 80154ca:	69fb      	ldr	r3, [r7, #28]
 80154cc:	3301      	adds	r3, #1
 80154ce:	61fb      	str	r3, [r7, #28]
 80154d0:	69fb      	ldr	r3, [r7, #28]
 80154d2:	2b07      	cmp	r3, #7
 80154d4:	ddee      	ble.n	80154b4 <UnpackSFMPEG1+0x40>
			sfb = 3;
 80154d6:	2303      	movs	r3, #3
 80154d8:	61fb      	str	r3, [r7, #28]
 80154da:	e032      	b.n	8015542 <UnpackSFMPEG1+0xce>
		} else {
			/* all short blocks */
			sfb = 0;
 80154dc:	2300      	movs	r3, #0
 80154de:	61fb      	str	r3, [r7, #28]
		}

		for (      ; sfb < 6; sfb++) {
 80154e0:	e02f      	b.n	8015542 <UnpackSFMPEG1+0xce>
			sfis->s[sfb][0] = (char)GetBits(bsi, slen0);
 80154e2:	69b9      	ldr	r1, [r7, #24]
 80154e4:	68f8      	ldr	r0, [r7, #12]
 80154e6:	f7fb fb90 	bl	8010c0a <xmp3_GetBits>
 80154ea:	4603      	mov	r3, r0
 80154ec:	b2d8      	uxtb	r0, r3
 80154ee:	6879      	ldr	r1, [r7, #4]
 80154f0:	69fa      	ldr	r2, [r7, #28]
 80154f2:	4613      	mov	r3, r2
 80154f4:	005b      	lsls	r3, r3, #1
 80154f6:	4413      	add	r3, r2
 80154f8:	440b      	add	r3, r1
 80154fa:	3317      	adds	r3, #23
 80154fc:	4602      	mov	r2, r0
 80154fe:	701a      	strb	r2, [r3, #0]
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
 8015500:	69b9      	ldr	r1, [r7, #24]
 8015502:	68f8      	ldr	r0, [r7, #12]
 8015504:	f7fb fb81 	bl	8010c0a <xmp3_GetBits>
 8015508:	4603      	mov	r3, r0
 801550a:	b2d8      	uxtb	r0, r3
 801550c:	6879      	ldr	r1, [r7, #4]
 801550e:	69fa      	ldr	r2, [r7, #28]
 8015510:	4613      	mov	r3, r2
 8015512:	005b      	lsls	r3, r3, #1
 8015514:	4413      	add	r3, r2
 8015516:	440b      	add	r3, r1
 8015518:	3318      	adds	r3, #24
 801551a:	4602      	mov	r2, r0
 801551c:	701a      	strb	r2, [r3, #0]
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
 801551e:	69b9      	ldr	r1, [r7, #24]
 8015520:	68f8      	ldr	r0, [r7, #12]
 8015522:	f7fb fb72 	bl	8010c0a <xmp3_GetBits>
 8015526:	4603      	mov	r3, r0
 8015528:	b2d8      	uxtb	r0, r3
 801552a:	6879      	ldr	r1, [r7, #4]
 801552c:	69fa      	ldr	r2, [r7, #28]
 801552e:	4613      	mov	r3, r2
 8015530:	005b      	lsls	r3, r3, #1
 8015532:	4413      	add	r3, r2
 8015534:	440b      	add	r3, r1
 8015536:	3319      	adds	r3, #25
 8015538:	4602      	mov	r2, r0
 801553a:	701a      	strb	r2, [r3, #0]
		for (      ; sfb < 6; sfb++) {
 801553c:	69fb      	ldr	r3, [r7, #28]
 801553e:	3301      	adds	r3, #1
 8015540:	61fb      	str	r3, [r7, #28]
 8015542:	69fb      	ldr	r3, [r7, #28]
 8015544:	2b05      	cmp	r3, #5
 8015546:	ddcc      	ble.n	80154e2 <UnpackSFMPEG1+0x6e>
		}

		for (      ; sfb < 12; sfb++) {
 8015548:	e02f      	b.n	80155aa <UnpackSFMPEG1+0x136>
			sfis->s[sfb][0] = (char)GetBits(bsi, slen1);
 801554a:	6979      	ldr	r1, [r7, #20]
 801554c:	68f8      	ldr	r0, [r7, #12]
 801554e:	f7fb fb5c 	bl	8010c0a <xmp3_GetBits>
 8015552:	4603      	mov	r3, r0
 8015554:	b2d8      	uxtb	r0, r3
 8015556:	6879      	ldr	r1, [r7, #4]
 8015558:	69fa      	ldr	r2, [r7, #28]
 801555a:	4613      	mov	r3, r2
 801555c:	005b      	lsls	r3, r3, #1
 801555e:	4413      	add	r3, r2
 8015560:	440b      	add	r3, r1
 8015562:	3317      	adds	r3, #23
 8015564:	4602      	mov	r2, r0
 8015566:	701a      	strb	r2, [r3, #0]
			sfis->s[sfb][1] = (char)GetBits(bsi, slen1);
 8015568:	6979      	ldr	r1, [r7, #20]
 801556a:	68f8      	ldr	r0, [r7, #12]
 801556c:	f7fb fb4d 	bl	8010c0a <xmp3_GetBits>
 8015570:	4603      	mov	r3, r0
 8015572:	b2d8      	uxtb	r0, r3
 8015574:	6879      	ldr	r1, [r7, #4]
 8015576:	69fa      	ldr	r2, [r7, #28]
 8015578:	4613      	mov	r3, r2
 801557a:	005b      	lsls	r3, r3, #1
 801557c:	4413      	add	r3, r2
 801557e:	440b      	add	r3, r1
 8015580:	3318      	adds	r3, #24
 8015582:	4602      	mov	r2, r0
 8015584:	701a      	strb	r2, [r3, #0]
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
 8015586:	6979      	ldr	r1, [r7, #20]
 8015588:	68f8      	ldr	r0, [r7, #12]
 801558a:	f7fb fb3e 	bl	8010c0a <xmp3_GetBits>
 801558e:	4603      	mov	r3, r0
 8015590:	b2d8      	uxtb	r0, r3
 8015592:	6879      	ldr	r1, [r7, #4]
 8015594:	69fa      	ldr	r2, [r7, #28]
 8015596:	4613      	mov	r3, r2
 8015598:	005b      	lsls	r3, r3, #1
 801559a:	4413      	add	r3, r2
 801559c:	440b      	add	r3, r1
 801559e:	3319      	adds	r3, #25
 80155a0:	4602      	mov	r2, r0
 80155a2:	701a      	strb	r2, [r3, #0]
		for (      ; sfb < 12; sfb++) {
 80155a4:	69fb      	ldr	r3, [r7, #28]
 80155a6:	3301      	adds	r3, #1
 80155a8:	61fb      	str	r3, [r7, #28]
 80155aa:	69fb      	ldr	r3, [r7, #28]
 80155ac:	2b0b      	cmp	r3, #11
 80155ae:	ddcc      	ble.n	801554a <UnpackSFMPEG1+0xd6>
		}

		/* last sf band not transmitted */
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	2200      	movs	r2, #0
 80155b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80155d0:	e0d0      	b.n	8015774 <UnpackSFMPEG1+0x300>
	} else {
		/* long blocks, type 0, 1, or 3 */
		if(gr == 0) {
 80155d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d128      	bne.n	801562a <UnpackSFMPEG1+0x1b6>
			/* first granule */
			for (sfb = 0;  sfb < 11; sfb++) 
 80155d8:	2300      	movs	r3, #0
 80155da:	61fb      	str	r3, [r7, #28]
 80155dc:	e00d      	b.n	80155fa <UnpackSFMPEG1+0x186>
				sfis->l[sfb] = (char)GetBits(bsi, slen0);
 80155de:	69b9      	ldr	r1, [r7, #24]
 80155e0:	68f8      	ldr	r0, [r7, #12]
 80155e2:	f7fb fb12 	bl	8010c0a <xmp3_GetBits>
 80155e6:	4603      	mov	r3, r0
 80155e8:	b2d9      	uxtb	r1, r3
 80155ea:	687a      	ldr	r2, [r7, #4]
 80155ec:	69fb      	ldr	r3, [r7, #28]
 80155ee:	4413      	add	r3, r2
 80155f0:	460a      	mov	r2, r1
 80155f2:	701a      	strb	r2, [r3, #0]
			for (sfb = 0;  sfb < 11; sfb++) 
 80155f4:	69fb      	ldr	r3, [r7, #28]
 80155f6:	3301      	adds	r3, #1
 80155f8:	61fb      	str	r3, [r7, #28]
 80155fa:	69fb      	ldr	r3, [r7, #28]
 80155fc:	2b0a      	cmp	r3, #10
 80155fe:	ddee      	ble.n	80155de <UnpackSFMPEG1+0x16a>
			for (sfb = 11; sfb < 21; sfb++) 
 8015600:	230b      	movs	r3, #11
 8015602:	61fb      	str	r3, [r7, #28]
 8015604:	e00d      	b.n	8015622 <UnpackSFMPEG1+0x1ae>
				sfis->l[sfb] = (char)GetBits(bsi, slen1);
 8015606:	6979      	ldr	r1, [r7, #20]
 8015608:	68f8      	ldr	r0, [r7, #12]
 801560a:	f7fb fafe 	bl	8010c0a <xmp3_GetBits>
 801560e:	4603      	mov	r3, r0
 8015610:	b2d9      	uxtb	r1, r3
 8015612:	687a      	ldr	r2, [r7, #4]
 8015614:	69fb      	ldr	r3, [r7, #28]
 8015616:	4413      	add	r3, r2
 8015618:	460a      	mov	r2, r1
 801561a:	701a      	strb	r2, [r3, #0]
			for (sfb = 11; sfb < 21; sfb++) 
 801561c:	69fb      	ldr	r3, [r7, #28]
 801561e:	3301      	adds	r3, #1
 8015620:	61fb      	str	r3, [r7, #28]
 8015622:	69fb      	ldr	r3, [r7, #28]
 8015624:	2b14      	cmp	r3, #20
 8015626:	ddee      	ble.n	8015606 <UnpackSFMPEG1+0x192>
			return;
 8015628:	e0a4      	b.n	8015774 <UnpackSFMPEG1+0x300>
		} else {
			/* second granule
			 * scfsi: 0 = different scalefactors for each granule, 1 = copy sf's from granule 0 into granule 1 
			 * for block type == 2, scfsi is always 0
			 */
			sfb = 0;
 801562a:	2300      	movs	r3, #0
 801562c:	61fb      	str	r3, [r7, #28]
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 801562e:	683b      	ldr	r3, [r7, #0]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d01e      	beq.n	8015674 <UnpackSFMPEG1+0x200>
 8015636:	e00b      	b.n	8015650 <UnpackSFMPEG1+0x1dc>
 8015638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801563a:	69fb      	ldr	r3, [r7, #28]
 801563c:	4413      	add	r3, r2
 801563e:	7819      	ldrb	r1, [r3, #0]
 8015640:	687a      	ldr	r2, [r7, #4]
 8015642:	69fb      	ldr	r3, [r7, #28]
 8015644:	4413      	add	r3, r2
 8015646:	460a      	mov	r2, r1
 8015648:	701a      	strb	r2, [r3, #0]
 801564a:	69fb      	ldr	r3, [r7, #28]
 801564c:	3301      	adds	r3, #1
 801564e:	61fb      	str	r3, [r7, #28]
 8015650:	69fb      	ldr	r3, [r7, #28]
 8015652:	2b05      	cmp	r3, #5
 8015654:	ddf0      	ble.n	8015638 <UnpackSFMPEG1+0x1c4>
 8015656:	e010      	b.n	801567a <UnpackSFMPEG1+0x206>
			else          for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 8015658:	69b9      	ldr	r1, [r7, #24]
 801565a:	68f8      	ldr	r0, [r7, #12]
 801565c:	f7fb fad5 	bl	8010c0a <xmp3_GetBits>
 8015660:	4603      	mov	r3, r0
 8015662:	b2d9      	uxtb	r1, r3
 8015664:	687a      	ldr	r2, [r7, #4]
 8015666:	69fb      	ldr	r3, [r7, #28]
 8015668:	4413      	add	r3, r2
 801566a:	460a      	mov	r2, r1
 801566c:	701a      	strb	r2, [r3, #0]
 801566e:	69fb      	ldr	r3, [r7, #28]
 8015670:	3301      	adds	r3, #1
 8015672:	61fb      	str	r3, [r7, #28]
 8015674:	69fb      	ldr	r3, [r7, #28]
 8015676:	2b05      	cmp	r3, #5
 8015678:	ddee      	ble.n	8015658 <UnpackSFMPEG1+0x1e4>
			if(scfsi[1])  for(  ; sfb <11 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	3304      	adds	r3, #4
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d01e      	beq.n	80156c2 <UnpackSFMPEG1+0x24e>
 8015684:	e00b      	b.n	801569e <UnpackSFMPEG1+0x22a>
 8015686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015688:	69fb      	ldr	r3, [r7, #28]
 801568a:	4413      	add	r3, r2
 801568c:	7819      	ldrb	r1, [r3, #0]
 801568e:	687a      	ldr	r2, [r7, #4]
 8015690:	69fb      	ldr	r3, [r7, #28]
 8015692:	4413      	add	r3, r2
 8015694:	460a      	mov	r2, r1
 8015696:	701a      	strb	r2, [r3, #0]
 8015698:	69fb      	ldr	r3, [r7, #28]
 801569a:	3301      	adds	r3, #1
 801569c:	61fb      	str	r3, [r7, #28]
 801569e:	69fb      	ldr	r3, [r7, #28]
 80156a0:	2b0a      	cmp	r3, #10
 80156a2:	ddf0      	ble.n	8015686 <UnpackSFMPEG1+0x212>
 80156a4:	e010      	b.n	80156c8 <UnpackSFMPEG1+0x254>
			else          for(  ; sfb <11 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 80156a6:	69b9      	ldr	r1, [r7, #24]
 80156a8:	68f8      	ldr	r0, [r7, #12]
 80156aa:	f7fb faae 	bl	8010c0a <xmp3_GetBits>
 80156ae:	4603      	mov	r3, r0
 80156b0:	b2d9      	uxtb	r1, r3
 80156b2:	687a      	ldr	r2, [r7, #4]
 80156b4:	69fb      	ldr	r3, [r7, #28]
 80156b6:	4413      	add	r3, r2
 80156b8:	460a      	mov	r2, r1
 80156ba:	701a      	strb	r2, [r3, #0]
 80156bc:	69fb      	ldr	r3, [r7, #28]
 80156be:	3301      	adds	r3, #1
 80156c0:	61fb      	str	r3, [r7, #28]
 80156c2:	69fb      	ldr	r3, [r7, #28]
 80156c4:	2b0a      	cmp	r3, #10
 80156c6:	ddee      	ble.n	80156a6 <UnpackSFMPEG1+0x232>
			if(scfsi[2])  for(  ; sfb <16 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 80156c8:	683b      	ldr	r3, [r7, #0]
 80156ca:	3308      	adds	r3, #8
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d020      	beq.n	8015714 <UnpackSFMPEG1+0x2a0>
 80156d2:	e00b      	b.n	80156ec <UnpackSFMPEG1+0x278>
 80156d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156d6:	69fb      	ldr	r3, [r7, #28]
 80156d8:	4413      	add	r3, r2
 80156da:	7819      	ldrb	r1, [r3, #0]
 80156dc:	687a      	ldr	r2, [r7, #4]
 80156de:	69fb      	ldr	r3, [r7, #28]
 80156e0:	4413      	add	r3, r2
 80156e2:	460a      	mov	r2, r1
 80156e4:	701a      	strb	r2, [r3, #0]
 80156e6:	69fb      	ldr	r3, [r7, #28]
 80156e8:	3301      	adds	r3, #1
 80156ea:	61fb      	str	r3, [r7, #28]
 80156ec:	69fb      	ldr	r3, [r7, #28]
 80156ee:	2b0f      	cmp	r3, #15
 80156f0:	ddf0      	ble.n	80156d4 <UnpackSFMPEG1+0x260>
 80156f2:	e012      	b.n	801571a <UnpackSFMPEG1+0x2a6>
 80156f4:	0801a36c 	.word	0x0801a36c
			else          for(  ; sfb <16 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 80156f8:	6979      	ldr	r1, [r7, #20]
 80156fa:	68f8      	ldr	r0, [r7, #12]
 80156fc:	f7fb fa85 	bl	8010c0a <xmp3_GetBits>
 8015700:	4603      	mov	r3, r0
 8015702:	b2d9      	uxtb	r1, r3
 8015704:	687a      	ldr	r2, [r7, #4]
 8015706:	69fb      	ldr	r3, [r7, #28]
 8015708:	4413      	add	r3, r2
 801570a:	460a      	mov	r2, r1
 801570c:	701a      	strb	r2, [r3, #0]
 801570e:	69fb      	ldr	r3, [r7, #28]
 8015710:	3301      	adds	r3, #1
 8015712:	61fb      	str	r3, [r7, #28]
 8015714:	69fb      	ldr	r3, [r7, #28]
 8015716:	2b0f      	cmp	r3, #15
 8015718:	ddee      	ble.n	80156f8 <UnpackSFMPEG1+0x284>
			if(scfsi[3])  for(  ; sfb <21 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 801571a:	683b      	ldr	r3, [r7, #0]
 801571c:	330c      	adds	r3, #12
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d01e      	beq.n	8015762 <UnpackSFMPEG1+0x2ee>
 8015724:	e00b      	b.n	801573e <UnpackSFMPEG1+0x2ca>
 8015726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015728:	69fb      	ldr	r3, [r7, #28]
 801572a:	4413      	add	r3, r2
 801572c:	7819      	ldrb	r1, [r3, #0]
 801572e:	687a      	ldr	r2, [r7, #4]
 8015730:	69fb      	ldr	r3, [r7, #28]
 8015732:	4413      	add	r3, r2
 8015734:	460a      	mov	r2, r1
 8015736:	701a      	strb	r2, [r3, #0]
 8015738:	69fb      	ldr	r3, [r7, #28]
 801573a:	3301      	adds	r3, #1
 801573c:	61fb      	str	r3, [r7, #28]
 801573e:	69fb      	ldr	r3, [r7, #28]
 8015740:	2b14      	cmp	r3, #20
 8015742:	ddf0      	ble.n	8015726 <UnpackSFMPEG1+0x2b2>
 8015744:	e010      	b.n	8015768 <UnpackSFMPEG1+0x2f4>
			else          for(  ; sfb <21 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 8015746:	6979      	ldr	r1, [r7, #20]
 8015748:	68f8      	ldr	r0, [r7, #12]
 801574a:	f7fb fa5e 	bl	8010c0a <xmp3_GetBits>
 801574e:	4603      	mov	r3, r0
 8015750:	b2d9      	uxtb	r1, r3
 8015752:	687a      	ldr	r2, [r7, #4]
 8015754:	69fb      	ldr	r3, [r7, #28]
 8015756:	4413      	add	r3, r2
 8015758:	460a      	mov	r2, r1
 801575a:	701a      	strb	r2, [r3, #0]
 801575c:	69fb      	ldr	r3, [r7, #28]
 801575e:	3301      	adds	r3, #1
 8015760:	61fb      	str	r3, [r7, #28]
 8015762:	69fb      	ldr	r3, [r7, #28]
 8015764:	2b14      	cmp	r3, #20
 8015766:	ddee      	ble.n	8015746 <UnpackSFMPEG1+0x2d2>
		}
		/* last sf band not transmitted */
		sfis->l[21] = 0;
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	2200      	movs	r2, #0
 801576c:	755a      	strb	r2, [r3, #21]
		sfis->l[22] = 0;
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	2200      	movs	r2, #0
 8015772:	759a      	strb	r2, [r3, #22]
	}
}
 8015774:	3720      	adds	r7, #32
 8015776:	46bd      	mov	sp, r7
 8015778:	bd80      	pop	{r7, pc}
 801577a:	bf00      	nop

0801577c <UnpackSFMPEG2>:
 *
 * TODO:        optimize the / and % stuff (only do one divide, get modulo x 
 *                with (x / m) * m, etc.)
 **************************************************************************************/
static void UnpackSFMPEG2(BitStreamInfo *bsi, SideInfoSub *sis, ScaleFactorInfoSub *sfis, int gr, int ch, int modeExt, ScaleFactorJS *sfjs)
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b096      	sub	sp, #88	; 0x58
 8015780:	af00      	add	r7, sp, #0
 8015782:	60f8      	str	r0, [r7, #12]
 8015784:	60b9      	str	r1, [r7, #8]
 8015786:	607a      	str	r2, [r7, #4]
 8015788:	603b      	str	r3, [r7, #0]

	int i, sfb, sfcIdx, btIdx, nrIdx, iipTest;
	int slen[4], nr[4];
	int sfCompress, preFlag, intensityScale;
	
	sfCompress = sis->sfCompress;
 801578a:	68bb      	ldr	r3, [r7, #8]
 801578c:	68db      	ldr	r3, [r3, #12]
 801578e:	63bb      	str	r3, [r7, #56]	; 0x38
	preFlag = 0;
 8015790:	2300      	movs	r3, #0
 8015792:	643b      	str	r3, [r7, #64]	; 0x40
	intensityScale = 0;
 8015794:	2300      	movs	r3, #0
 8015796:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* stereo mode bits (1 = on): bit 1 = mid-side on/off, bit 0 = intensity on/off */
	if (! ((modeExt & 0x01) && (ch == 1)) ) {
 8015798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801579a:	f003 0301 	and.w	r3, r3, #1
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d002      	beq.n	80157a8 <UnpackSFMPEG2+0x2c>
 80157a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80157a4:	2b01      	cmp	r3, #1
 80157a6:	d073      	beq.n	8015890 <UnpackSFMPEG2+0x114>
		/* in other words: if ((modeExt & 0x01) == 0 || ch == 0) */
		if (sfCompress < 400) {
 80157a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157aa:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80157ae:	da21      	bge.n	80157f4 <UnpackSFMPEG2+0x78>
			/* max slen = floor[(399/16) / 5] = 4 */
			slen[0] = (sfCompress >> 4) / 5;
 80157b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157b2:	111b      	asrs	r3, r3, #4
 80157b4:	4aa5      	ldr	r2, [pc, #660]	; (8015a4c <UnpackSFMPEG2+0x2d0>)
 80157b6:	fb82 1203 	smull	r1, r2, r2, r3
 80157ba:	1052      	asrs	r2, r2, #1
 80157bc:	17db      	asrs	r3, r3, #31
 80157be:	1ad3      	subs	r3, r2, r3
 80157c0:	627b      	str	r3, [r7, #36]	; 0x24
			slen[1]= (sfCompress >> 4) % 5;
 80157c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157c4:	1119      	asrs	r1, r3, #4
 80157c6:	4ba1      	ldr	r3, [pc, #644]	; (8015a4c <UnpackSFMPEG2+0x2d0>)
 80157c8:	fb83 2301 	smull	r2, r3, r3, r1
 80157cc:	105a      	asrs	r2, r3, #1
 80157ce:	17cb      	asrs	r3, r1, #31
 80157d0:	1ad2      	subs	r2, r2, r3
 80157d2:	4613      	mov	r3, r2
 80157d4:	009b      	lsls	r3, r3, #2
 80157d6:	4413      	add	r3, r2
 80157d8:	1aca      	subs	r2, r1, r3
 80157da:	62ba      	str	r2, [r7, #40]	; 0x28
			slen[2]= (sfCompress & 0x0f) >> 2;
 80157dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157de:	109b      	asrs	r3, r3, #2
 80157e0:	f003 0303 	and.w	r3, r3, #3
 80157e4:	62fb      	str	r3, [r7, #44]	; 0x2c
			slen[3]= (sfCompress & 0x03);
 80157e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157e8:	f003 0303 	and.w	r3, r3, #3
 80157ec:	633b      	str	r3, [r7, #48]	; 0x30
			sfcIdx = 0;
 80157ee:	2300      	movs	r3, #0
 80157f0:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (sfCompress < 400) {
 80157f2:	e0c1      	b.n	8015978 <UnpackSFMPEG2+0x1fc>
		} else if (sfCompress < 500) {
 80157f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80157fa:	da22      	bge.n	8015842 <UnpackSFMPEG2+0xc6>
			/* max slen = floor[(99/4) / 5] = 4 */
			sfCompress -= 400;
 80157fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157fe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8015802:	63bb      	str	r3, [r7, #56]	; 0x38
			slen[0] = (sfCompress >> 2) / 5;
 8015804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015806:	109b      	asrs	r3, r3, #2
 8015808:	4a90      	ldr	r2, [pc, #576]	; (8015a4c <UnpackSFMPEG2+0x2d0>)
 801580a:	fb82 1203 	smull	r1, r2, r2, r3
 801580e:	1052      	asrs	r2, r2, #1
 8015810:	17db      	asrs	r3, r3, #31
 8015812:	1ad3      	subs	r3, r2, r3
 8015814:	627b      	str	r3, [r7, #36]	; 0x24
			slen[1]= (sfCompress >> 2) % 5;
 8015816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015818:	1099      	asrs	r1, r3, #2
 801581a:	4b8c      	ldr	r3, [pc, #560]	; (8015a4c <UnpackSFMPEG2+0x2d0>)
 801581c:	fb83 2301 	smull	r2, r3, r3, r1
 8015820:	105a      	asrs	r2, r3, #1
 8015822:	17cb      	asrs	r3, r1, #31
 8015824:	1ad2      	subs	r2, r2, r3
 8015826:	4613      	mov	r3, r2
 8015828:	009b      	lsls	r3, r3, #2
 801582a:	4413      	add	r3, r2
 801582c:	1aca      	subs	r2, r1, r3
 801582e:	62ba      	str	r2, [r7, #40]	; 0x28
			slen[2]= (sfCompress & 0x03);
 8015830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015832:	f003 0303 	and.w	r3, r3, #3
 8015836:	62fb      	str	r3, [r7, #44]	; 0x2c
			slen[3]= 0;
 8015838:	2300      	movs	r3, #0
 801583a:	633b      	str	r3, [r7, #48]	; 0x30
			sfcIdx = 1;
 801583c:	2301      	movs	r3, #1
 801583e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (sfCompress < 400) {
 8015840:	e09a      	b.n	8015978 <UnpackSFMPEG2+0x1fc>
		} else {
			/* max slen = floor[11/3] = 3 (sfCompress = 9 bits in MPEG2) */
			sfCompress -= 500;
 8015842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015844:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8015848:	63bb      	str	r3, [r7, #56]	; 0x38
			slen[0] = sfCompress / 3;
 801584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801584c:	4a80      	ldr	r2, [pc, #512]	; (8015a50 <UnpackSFMPEG2+0x2d4>)
 801584e:	fb82 1203 	smull	r1, r2, r2, r3
 8015852:	17db      	asrs	r3, r3, #31
 8015854:	1ad3      	subs	r3, r2, r3
 8015856:	627b      	str	r3, [r7, #36]	; 0x24
			slen[1] = sfCompress % 3;
 8015858:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801585a:	4b7d      	ldr	r3, [pc, #500]	; (8015a50 <UnpackSFMPEG2+0x2d4>)
 801585c:	fb83 3201 	smull	r3, r2, r3, r1
 8015860:	17cb      	asrs	r3, r1, #31
 8015862:	1ad2      	subs	r2, r2, r3
 8015864:	4613      	mov	r3, r2
 8015866:	005b      	lsls	r3, r3, #1
 8015868:	4413      	add	r3, r2
 801586a:	1aca      	subs	r2, r1, r3
 801586c:	62ba      	str	r2, [r7, #40]	; 0x28
			slen[2] = slen[3] = 0;
 801586e:	2300      	movs	r3, #0
 8015870:	633b      	str	r3, [r7, #48]	; 0x30
 8015872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015874:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (sis->mixedBlock) {
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	699b      	ldr	r3, [r3, #24]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d003      	beq.n	8015886 <UnpackSFMPEG2+0x10a>
				/* adjust for long/short mix logic (see comment above in NRTab[] definition) */
				slen[2] = slen[1];  
 801587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015880:	62fb      	str	r3, [r7, #44]	; 0x2c
				slen[1] = slen[0];
 8015882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015884:	62bb      	str	r3, [r7, #40]	; 0x28
			}  
			preFlag = 1;
 8015886:	2301      	movs	r3, #1
 8015888:	643b      	str	r3, [r7, #64]	; 0x40
			sfcIdx = 2;
 801588a:	2302      	movs	r3, #2
 801588c:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (sfCompress < 400) {
 801588e:	e073      	b.n	8015978 <UnpackSFMPEG2+0x1fc>
		}
	} else {    
		/* intensity stereo ch = 1 (right) */
		intensityScale = sfCompress & 0x01;
 8015890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015892:	f003 0301 	and.w	r3, r3, #1
 8015896:	63fb      	str	r3, [r7, #60]	; 0x3c
		sfCompress >>= 1;
 8015898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801589a:	105b      	asrs	r3, r3, #1
 801589c:	63bb      	str	r3, [r7, #56]	; 0x38
		if (sfCompress < 180) {
 801589e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158a0:	2bb3      	cmp	r3, #179	; 0xb3
 80158a2:	dc35      	bgt.n	8015910 <UnpackSFMPEG2+0x194>
			/* max slen = floor[35/6] = 5 (from mod 36) */
			slen[0] = (sfCompress / 36);
 80158a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158a6:	4a6b      	ldr	r2, [pc, #428]	; (8015a54 <UnpackSFMPEG2+0x2d8>)
 80158a8:	fb82 1203 	smull	r1, r2, r2, r3
 80158ac:	10d2      	asrs	r2, r2, #3
 80158ae:	17db      	asrs	r3, r3, #31
 80158b0:	1ad3      	subs	r3, r2, r3
 80158b2:	627b      	str	r3, [r7, #36]	; 0x24
			slen[1] = (sfCompress % 36) / 6;
 80158b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80158b6:	4b67      	ldr	r3, [pc, #412]	; (8015a54 <UnpackSFMPEG2+0x2d8>)
 80158b8:	fb83 2301 	smull	r2, r3, r3, r1
 80158bc:	10da      	asrs	r2, r3, #3
 80158be:	17cb      	asrs	r3, r1, #31
 80158c0:	1ad2      	subs	r2, r2, r3
 80158c2:	4613      	mov	r3, r2
 80158c4:	00db      	lsls	r3, r3, #3
 80158c6:	4413      	add	r3, r2
 80158c8:	009b      	lsls	r3, r3, #2
 80158ca:	1aca      	subs	r2, r1, r3
 80158cc:	4b62      	ldr	r3, [pc, #392]	; (8015a58 <UnpackSFMPEG2+0x2dc>)
 80158ce:	fb83 3102 	smull	r3, r1, r3, r2
 80158d2:	17d3      	asrs	r3, r2, #31
 80158d4:	1acb      	subs	r3, r1, r3
 80158d6:	62bb      	str	r3, [r7, #40]	; 0x28
			slen[2] = (sfCompress % 36) % 6;
 80158d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80158da:	4b5e      	ldr	r3, [pc, #376]	; (8015a54 <UnpackSFMPEG2+0x2d8>)
 80158dc:	fb83 2301 	smull	r2, r3, r3, r1
 80158e0:	10da      	asrs	r2, r3, #3
 80158e2:	17cb      	asrs	r3, r1, #31
 80158e4:	1ad2      	subs	r2, r2, r3
 80158e6:	4613      	mov	r3, r2
 80158e8:	00db      	lsls	r3, r3, #3
 80158ea:	4413      	add	r3, r2
 80158ec:	009b      	lsls	r3, r3, #2
 80158ee:	1aca      	subs	r2, r1, r3
 80158f0:	4b59      	ldr	r3, [pc, #356]	; (8015a58 <UnpackSFMPEG2+0x2dc>)
 80158f2:	fb83 3102 	smull	r3, r1, r3, r2
 80158f6:	17d3      	asrs	r3, r2, #31
 80158f8:	1ac9      	subs	r1, r1, r3
 80158fa:	460b      	mov	r3, r1
 80158fc:	005b      	lsls	r3, r3, #1
 80158fe:	440b      	add	r3, r1
 8015900:	005b      	lsls	r3, r3, #1
 8015902:	1ad1      	subs	r1, r2, r3
 8015904:	62f9      	str	r1, [r7, #44]	; 0x2c
			slen[3] = 0;
 8015906:	2300      	movs	r3, #0
 8015908:	633b      	str	r3, [r7, #48]	; 0x30
			sfcIdx = 3;
 801590a:	2303      	movs	r3, #3
 801590c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801590e:	e033      	b.n	8015978 <UnpackSFMPEG2+0x1fc>
		} else if (sfCompress < 244) {
 8015910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015912:	2bf3      	cmp	r3, #243	; 0xf3
 8015914:	dc15      	bgt.n	8015942 <UnpackSFMPEG2+0x1c6>
			/* max slen = floor[63/16] = 3 */
			sfCompress -= 180;
 8015916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015918:	3bb4      	subs	r3, #180	; 0xb4
 801591a:	63bb      	str	r3, [r7, #56]	; 0x38
			slen[0] = (sfCompress & 0x3f) >> 4;
 801591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801591e:	111b      	asrs	r3, r3, #4
 8015920:	f003 0303 	and.w	r3, r3, #3
 8015924:	627b      	str	r3, [r7, #36]	; 0x24
			slen[1] = (sfCompress & 0x0f) >> 2;
 8015926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015928:	109b      	asrs	r3, r3, #2
 801592a:	f003 0303 	and.w	r3, r3, #3
 801592e:	62bb      	str	r3, [r7, #40]	; 0x28
			slen[2] = (sfCompress & 0x03);
 8015930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015932:	f003 0303 	and.w	r3, r3, #3
 8015936:	62fb      	str	r3, [r7, #44]	; 0x2c
			slen[3] = 0;
 8015938:	2300      	movs	r3, #0
 801593a:	633b      	str	r3, [r7, #48]	; 0x30
			sfcIdx = 4;
 801593c:	2304      	movs	r3, #4
 801593e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015940:	e01a      	b.n	8015978 <UnpackSFMPEG2+0x1fc>
		} else {
			/* max slen = floor[11/3] = 3 (max sfCompress >> 1 = 511/2 = 255) */
			sfCompress -= 244;
 8015942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015944:	3bf4      	subs	r3, #244	; 0xf4
 8015946:	63bb      	str	r3, [r7, #56]	; 0x38
			slen[0] = (sfCompress / 3);
 8015948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801594a:	4a41      	ldr	r2, [pc, #260]	; (8015a50 <UnpackSFMPEG2+0x2d4>)
 801594c:	fb82 1203 	smull	r1, r2, r2, r3
 8015950:	17db      	asrs	r3, r3, #31
 8015952:	1ad3      	subs	r3, r2, r3
 8015954:	627b      	str	r3, [r7, #36]	; 0x24
			slen[1] = (sfCompress % 3);
 8015956:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015958:	4b3d      	ldr	r3, [pc, #244]	; (8015a50 <UnpackSFMPEG2+0x2d4>)
 801595a:	fb83 3201 	smull	r3, r2, r3, r1
 801595e:	17cb      	asrs	r3, r1, #31
 8015960:	1ad2      	subs	r2, r2, r3
 8015962:	4613      	mov	r3, r2
 8015964:	005b      	lsls	r3, r3, #1
 8015966:	4413      	add	r3, r2
 8015968:	1aca      	subs	r2, r1, r3
 801596a:	62ba      	str	r2, [r7, #40]	; 0x28
			slen[2] = slen[3] = 0;
 801596c:	2300      	movs	r3, #0
 801596e:	633b      	str	r3, [r7, #48]	; 0x30
 8015970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015972:	62fb      	str	r3, [r7, #44]	; 0x2c
			sfcIdx = 5;
 8015974:	2305      	movs	r3, #5
 8015976:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
	}
	
	/* set index based on block type: (0,1,3) --> 0, (2 non-mixed) --> 1, (2 mixed) ---> 2 */
	btIdx = 0;
 8015978:	2300      	movs	r3, #0
 801597a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (sis->blockType == 2) 
 801597c:	68bb      	ldr	r3, [r7, #8]
 801597e:	695b      	ldr	r3, [r3, #20]
 8015980:	2b02      	cmp	r3, #2
 8015982:	d107      	bne.n	8015994 <UnpackSFMPEG2+0x218>
		btIdx = (sis->mixedBlock ? 2 : 1);
 8015984:	68bb      	ldr	r3, [r7, #8]
 8015986:	699b      	ldr	r3, [r3, #24]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d001      	beq.n	8015990 <UnpackSFMPEG2+0x214>
 801598c:	2302      	movs	r3, #2
 801598e:	e000      	b.n	8015992 <UnpackSFMPEG2+0x216>
 8015990:	2301      	movs	r3, #1
 8015992:	64bb      	str	r3, [r7, #72]	; 0x48
	for (i = 0; i < 4; i++)
 8015994:	2300      	movs	r3, #0
 8015996:	657b      	str	r3, [r7, #84]	; 0x54
 8015998:	e015      	b.n	80159c6 <UnpackSFMPEG2+0x24a>
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];
 801599a:	4930      	ldr	r1, [pc, #192]	; (8015a5c <UnpackSFMPEG2+0x2e0>)
 801599c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801599e:	4613      	mov	r3, r2
 80159a0:	005b      	lsls	r3, r3, #1
 80159a2:	4413      	add	r3, r2
 80159a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80159a6:	4413      	add	r3, r2
 80159a8:	009b      	lsls	r3, r3, #2
 80159aa:	18ca      	adds	r2, r1, r3
 80159ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159ae:	4413      	add	r3, r2
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	461a      	mov	r2, r3
 80159b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159b6:	009b      	lsls	r3, r3, #2
 80159b8:	3358      	adds	r3, #88	; 0x58
 80159ba:	443b      	add	r3, r7
 80159bc:	f843 2c44 	str.w	r2, [r3, #-68]
	for (i = 0; i < 4; i++)
 80159c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159c2:	3301      	adds	r3, #1
 80159c4:	657b      	str	r3, [r7, #84]	; 0x54
 80159c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159c8:	2b03      	cmp	r3, #3
 80159ca:	dde6      	ble.n	801599a <UnpackSFMPEG2+0x21e>

	/* save intensity stereo scale factor info */
	if( (modeExt & 0x01) && (ch == 1) ) {
 80159cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80159ce:	f003 0301 	and.w	r3, r3, #1
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d025      	beq.n	8015a22 <UnpackSFMPEG2+0x2a6>
 80159d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80159d8:	2b01      	cmp	r3, #1
 80159da:	d122      	bne.n	8015a22 <UnpackSFMPEG2+0x2a6>
		for (i = 0; i < 4; i++) {
 80159dc:	2300      	movs	r3, #0
 80159de:	657b      	str	r3, [r7, #84]	; 0x54
 80159e0:	e019      	b.n	8015a16 <UnpackSFMPEG2+0x29a>
			sfjs->slen[i] = slen[i];
 80159e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159e4:	009b      	lsls	r3, r3, #2
 80159e6:	3358      	adds	r3, #88	; 0x58
 80159e8:	443b      	add	r3, r7
 80159ea:	f853 2c34 	ldr.w	r2, [r3, #-52]
 80159ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80159f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159f2:	009b      	lsls	r3, r3, #2
 80159f4:	440b      	add	r3, r1
 80159f6:	605a      	str	r2, [r3, #4]
			sfjs->nr[i] = nr[i];
 80159f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159fa:	009b      	lsls	r3, r3, #2
 80159fc:	3358      	adds	r3, #88	; 0x58
 80159fe:	443b      	add	r3, r7
 8015a00:	f853 2c44 	ldr.w	r2, [r3, #-68]
 8015a04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a08:	3304      	adds	r3, #4
 8015a0a:	009b      	lsls	r3, r3, #2
 8015a0c:	440b      	add	r3, r1
 8015a0e:	605a      	str	r2, [r3, #4]
		for (i = 0; i < 4; i++) {
 8015a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a12:	3301      	adds	r3, #1
 8015a14:	657b      	str	r3, [r7, #84]	; 0x54
 8015a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a18:	2b03      	cmp	r3, #3
 8015a1a:	dde2      	ble.n	80159e2 <UnpackSFMPEG2+0x266>
		}
		sfjs->intensityScale = intensityScale;
 8015a1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015a1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015a20:	601a      	str	r2, [r3, #0]
	}
	sis->preFlag = preFlag;
 8015a22:	68bb      	ldr	r3, [r7, #8]
 8015a24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015a26:	63da      	str	r2, [r3, #60]	; 0x3c

	/* short blocks */
	if(sis->blockType == 2) {
 8015a28:	68bb      	ldr	r3, [r7, #8]
 8015a2a:	695b      	ldr	r3, [r3, #20]
 8015a2c:	2b02      	cmp	r3, #2
 8015a2e:	f040 80a6 	bne.w	8015b7e <UnpackSFMPEG2+0x402>
		if(sis->mixedBlock) {
 8015a32:	68bb      	ldr	r3, [r7, #8]
 8015a34:	699b      	ldr	r3, [r3, #24]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d029      	beq.n	8015a8e <UnpackSFMPEG2+0x312>
			/* do long block portion */
			iipTest = (1 << slen[0]) - 1;
 8015a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a3c:	2201      	movs	r2, #1
 8015a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8015a42:	3b01      	subs	r3, #1
 8015a44:	637b      	str	r3, [r7, #52]	; 0x34
			for (sfb=0; sfb < 6; sfb++) {
 8015a46:	2300      	movs	r3, #0
 8015a48:	653b      	str	r3, [r7, #80]	; 0x50
 8015a4a:	e018      	b.n	8015a7e <UnpackSFMPEG2+0x302>
 8015a4c:	66666667 	.word	0x66666667
 8015a50:	55555556 	.word	0x55555556
 8015a54:	38e38e39 	.word	0x38e38e39
 8015a58:	2aaaaaab 	.word	0x2aaaaaab
 8015a5c:	0801a38c 	.word	0x0801a38c
				sfis->l[sfb] = (char)GetBits(bsi, slen[0]);
 8015a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a62:	4619      	mov	r1, r3
 8015a64:	68f8      	ldr	r0, [r7, #12]
 8015a66:	f7fb f8d0 	bl	8010c0a <xmp3_GetBits>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	b2d9      	uxtb	r1, r3
 8015a6e:	687a      	ldr	r2, [r7, #4]
 8015a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a72:	4413      	add	r3, r2
 8015a74:	460a      	mov	r2, r1
 8015a76:	701a      	strb	r2, [r3, #0]
			for (sfb=0; sfb < 6; sfb++) {
 8015a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a7a:	3301      	adds	r3, #1
 8015a7c:	653b      	str	r3, [r7, #80]	; 0x50
 8015a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a80:	2b05      	cmp	r3, #5
 8015a82:	dded      	ble.n	8015a60 <UnpackSFMPEG2+0x2e4>
			}
			sfb = 3;  /* start sfb for short */
 8015a84:	2303      	movs	r3, #3
 8015a86:	653b      	str	r3, [r7, #80]	; 0x50
			nrIdx = 1;
 8015a88:	2301      	movs	r3, #1
 8015a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8015a8c:	e063      	b.n	8015b56 <UnpackSFMPEG2+0x3da>
		} else {      
			/* all short blocks, so start nr, sfb at 0 */
			sfb = 0;
 8015a8e:	2300      	movs	r3, #0
 8015a90:	653b      	str	r3, [r7, #80]	; 0x50
			nrIdx = 0;
 8015a92:	2300      	movs	r3, #0
 8015a94:	647b      	str	r3, [r7, #68]	; 0x44
		}

		/* remaining short blocks, sfb just keeps incrementing */
		for (    ; nrIdx <= 3; nrIdx++) {
 8015a96:	e05e      	b.n	8015b56 <UnpackSFMPEG2+0x3da>
			iipTest = (1 << slen[nrIdx]) - 1;
 8015a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a9a:	009b      	lsls	r3, r3, #2
 8015a9c:	3358      	adds	r3, #88	; 0x58
 8015a9e:	443b      	add	r3, r7
 8015aa0:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8015aa4:	2201      	movs	r2, #1
 8015aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8015aaa:	3b01      	subs	r3, #1
 8015aac:	637b      	str	r3, [r7, #52]	; 0x34
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 8015aae:	2300      	movs	r3, #0
 8015ab0:	657b      	str	r3, [r7, #84]	; 0x54
 8015ab2:	e044      	b.n	8015b3e <UnpackSFMPEG2+0x3c2>
				sfis->s[sfb][0] = (char)GetBits(bsi, slen[nrIdx]);
 8015ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ab6:	009b      	lsls	r3, r3, #2
 8015ab8:	3358      	adds	r3, #88	; 0x58
 8015aba:	443b      	add	r3, r7
 8015abc:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8015ac0:	4619      	mov	r1, r3
 8015ac2:	68f8      	ldr	r0, [r7, #12]
 8015ac4:	f7fb f8a1 	bl	8010c0a <xmp3_GetBits>
 8015ac8:	4603      	mov	r3, r0
 8015aca:	b2d8      	uxtb	r0, r3
 8015acc:	6879      	ldr	r1, [r7, #4]
 8015ace:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015ad0:	4613      	mov	r3, r2
 8015ad2:	005b      	lsls	r3, r3, #1
 8015ad4:	4413      	add	r3, r2
 8015ad6:	440b      	add	r3, r1
 8015ad8:	3317      	adds	r3, #23
 8015ada:	4602      	mov	r2, r0
 8015adc:	701a      	strb	r2, [r3, #0]
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
 8015ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ae0:	009b      	lsls	r3, r3, #2
 8015ae2:	3358      	adds	r3, #88	; 0x58
 8015ae4:	443b      	add	r3, r7
 8015ae6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8015aea:	4619      	mov	r1, r3
 8015aec:	68f8      	ldr	r0, [r7, #12]
 8015aee:	f7fb f88c 	bl	8010c0a <xmp3_GetBits>
 8015af2:	4603      	mov	r3, r0
 8015af4:	b2d8      	uxtb	r0, r3
 8015af6:	6879      	ldr	r1, [r7, #4]
 8015af8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015afa:	4613      	mov	r3, r2
 8015afc:	005b      	lsls	r3, r3, #1
 8015afe:	4413      	add	r3, r2
 8015b00:	440b      	add	r3, r1
 8015b02:	3318      	adds	r3, #24
 8015b04:	4602      	mov	r2, r0
 8015b06:	701a      	strb	r2, [r3, #0]
				sfis->s[sfb][2] = (char)GetBits(bsi, slen[nrIdx]);
 8015b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b0a:	009b      	lsls	r3, r3, #2
 8015b0c:	3358      	adds	r3, #88	; 0x58
 8015b0e:	443b      	add	r3, r7
 8015b10:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8015b14:	4619      	mov	r1, r3
 8015b16:	68f8      	ldr	r0, [r7, #12]
 8015b18:	f7fb f877 	bl	8010c0a <xmp3_GetBits>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	b2d8      	uxtb	r0, r3
 8015b20:	6879      	ldr	r1, [r7, #4]
 8015b22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015b24:	4613      	mov	r3, r2
 8015b26:	005b      	lsls	r3, r3, #1
 8015b28:	4413      	add	r3, r2
 8015b2a:	440b      	add	r3, r1
 8015b2c:	3319      	adds	r3, #25
 8015b2e:	4602      	mov	r2, r0
 8015b30:	701a      	strb	r2, [r3, #0]
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 8015b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b34:	3301      	adds	r3, #1
 8015b36:	657b      	str	r3, [r7, #84]	; 0x54
 8015b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b3a:	3301      	adds	r3, #1
 8015b3c:	653b      	str	r3, [r7, #80]	; 0x50
 8015b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b40:	009b      	lsls	r3, r3, #2
 8015b42:	3358      	adds	r3, #88	; 0x58
 8015b44:	443b      	add	r3, r7
 8015b46:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8015b4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015b4c:	429a      	cmp	r2, r3
 8015b4e:	dbb1      	blt.n	8015ab4 <UnpackSFMPEG2+0x338>
		for (    ; nrIdx <= 3; nrIdx++) {
 8015b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b52:	3301      	adds	r3, #1
 8015b54:	647b      	str	r3, [r7, #68]	; 0x44
 8015b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b58:	2b03      	cmp	r3, #3
 8015b5a:	dd9d      	ble.n	8015a98 <UnpackSFMPEG2+0x31c>
			}
		}
		/* last sf band not transmitted */
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	2200      	movs	r2, #0
 8015b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		}
		/* last sf band not transmitted */
		sfis->l[21] = sfis->l[22] = 0;

	}
}
 8015b7c:	e03f      	b.n	8015bfe <UnpackSFMPEG2+0x482>
		sfb = 0;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	653b      	str	r3, [r7, #80]	; 0x50
		for (nrIdx = 0; nrIdx <= 3; nrIdx++) {
 8015b82:	2300      	movs	r3, #0
 8015b84:	647b      	str	r3, [r7, #68]	; 0x44
 8015b86:	e030      	b.n	8015bea <UnpackSFMPEG2+0x46e>
			iipTest = (1 << slen[nrIdx]) - 1;
 8015b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b8a:	009b      	lsls	r3, r3, #2
 8015b8c:	3358      	adds	r3, #88	; 0x58
 8015b8e:	443b      	add	r3, r7
 8015b90:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8015b94:	2201      	movs	r2, #1
 8015b96:	fa02 f303 	lsl.w	r3, r2, r3
 8015b9a:	3b01      	subs	r3, #1
 8015b9c:	637b      	str	r3, [r7, #52]	; 0x34
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	657b      	str	r3, [r7, #84]	; 0x54
 8015ba2:	e016      	b.n	8015bd2 <UnpackSFMPEG2+0x456>
				sfis->l[sfb] = (char)GetBits(bsi, slen[nrIdx]);
 8015ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ba6:	009b      	lsls	r3, r3, #2
 8015ba8:	3358      	adds	r3, #88	; 0x58
 8015baa:	443b      	add	r3, r7
 8015bac:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8015bb0:	4619      	mov	r1, r3
 8015bb2:	68f8      	ldr	r0, [r7, #12]
 8015bb4:	f7fb f829 	bl	8010c0a <xmp3_GetBits>
 8015bb8:	4603      	mov	r3, r0
 8015bba:	b2d9      	uxtb	r1, r3
 8015bbc:	687a      	ldr	r2, [r7, #4]
 8015bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bc0:	4413      	add	r3, r2
 8015bc2:	460a      	mov	r2, r1
 8015bc4:	701a      	strb	r2, [r3, #0]
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 8015bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015bc8:	3301      	adds	r3, #1
 8015bca:	657b      	str	r3, [r7, #84]	; 0x54
 8015bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bce:	3301      	adds	r3, #1
 8015bd0:	653b      	str	r3, [r7, #80]	; 0x50
 8015bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015bd4:	009b      	lsls	r3, r3, #2
 8015bd6:	3358      	adds	r3, #88	; 0x58
 8015bd8:	443b      	add	r3, r7
 8015bda:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8015bde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015be0:	429a      	cmp	r2, r3
 8015be2:	dbdf      	blt.n	8015ba4 <UnpackSFMPEG2+0x428>
		for (nrIdx = 0; nrIdx <= 3; nrIdx++) {
 8015be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015be6:	3301      	adds	r3, #1
 8015be8:	647b      	str	r3, [r7, #68]	; 0x44
 8015bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015bec:	2b03      	cmp	r3, #3
 8015bee:	ddcb      	ble.n	8015b88 <UnpackSFMPEG2+0x40c>
		sfis->l[21] = sfis->l[22] = 0;
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	759a      	strb	r2, [r3, #22]
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	7d9a      	ldrb	r2, [r3, #22]
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	755a      	strb	r2, [r3, #21]
}
 8015bfe:	bf00      	nop
 8015c00:	3758      	adds	r7, #88	; 0x58
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}
 8015c06:	bf00      	nop

08015c08 <xmp3_UnpackScaleFactors>:
 *              updated bitOffset
 *
 * Return:      length (in bytes) of scale factor data, -1 if null input pointers
 **************************************************************************************/
int UnpackScaleFactors(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int bitsAvail, int gr, int ch)
{
 8015c08:	b590      	push	{r4, r7, lr}
 8015c0a:	b093      	sub	sp, #76	; 0x4c
 8015c0c:	af04      	add	r7, sp, #16
 8015c0e:	60f8      	str	r0, [r7, #12]
 8015c10:	60b9      	str	r1, [r7, #8]
 8015c12:	607a      	str	r2, [r7, #4]
 8015c14:	603b      	str	r3, [r7, #0]
	FrameHeader *fh;
	SideInfo *si;
	ScaleFactorInfo *sfi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS)
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d00b      	beq.n	8015c34 <xmp3_UnpackScaleFactors+0x2c>
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d007      	beq.n	8015c34 <xmp3_UnpackScaleFactors+0x2c>
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	685b      	ldr	r3, [r3, #4]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d003      	beq.n	8015c34 <xmp3_UnpackScaleFactors+0x2c>
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	689b      	ldr	r3, [r3, #8]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d102      	bne.n	8015c3a <xmp3_UnpackScaleFactors+0x32>
		return -1;
 8015c34:	f04f 33ff 	mov.w	r3, #4294967295
 8015c38:	e0bc      	b.n	8015db4 <xmp3_UnpackScaleFactors+0x1ac>
	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	637b      	str	r3, [r7, #52]	; 0x34
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	685b      	ldr	r3, [r3, #4]
 8015c44:	633b      	str	r3, [r7, #48]	; 0x30
	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	689b      	ldr	r3, [r3, #8]
 8015c4a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* init GetBits reader */
	startBuf = buf;
 8015c4c:	68bb      	ldr	r3, [r7, #8]
 8015c4e:	62bb      	str	r3, [r7, #40]	; 0x28
	bsi = &bitStreamInfo;
 8015c50:	f107 0310 	add.w	r3, r7, #16
 8015c54:	627b      	str	r3, [r7, #36]	; 0x24
	SetBitstreamPointer(bsi, (bitsAvail + *bitOffset + 7) / 8, buf);
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	681a      	ldr	r2, [r3, #0]
 8015c5a:	683b      	ldr	r3, [r7, #0]
 8015c5c:	4413      	add	r3, r2
 8015c5e:	3307      	adds	r3, #7
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	da00      	bge.n	8015c66 <xmp3_UnpackScaleFactors+0x5e>
 8015c64:	3307      	adds	r3, #7
 8015c66:	10db      	asrs	r3, r3, #3
 8015c68:	68ba      	ldr	r2, [r7, #8]
 8015c6a:	4619      	mov	r1, r3
 8015c6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c6e:	f7fa ff43 	bl	8010af8 <xmp3_SetBitstreamPointer>
	if (*bitOffset)
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d005      	beq.n	8015c86 <xmp3_UnpackScaleFactors+0x7e>
		GetBits(bsi, *bitOffset);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	4619      	mov	r1, r3
 8015c80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c82:	f7fa ffc2 	bl	8010c0a <xmp3_GetBits>

	if (fh->ver == MPEG1) 
 8015c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c88:	781b      	ldrb	r3, [r3, #0]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d132      	bne.n	8015cf4 <xmp3_UnpackScaleFactors+0xec>
		UnpackSFMPEG1(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], si->scfsi[ch], gr, &sfi->sfis[0][ch]);
 8015c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c90:	461a      	mov	r2, r3
 8015c92:	00d2      	lsls	r2, r2, #3
 8015c94:	441a      	add	r2, r3
 8015c96:	00d3      	lsls	r3, r2, #3
 8015c98:	461a      	mov	r2, r3
 8015c9a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015c9c:	460b      	mov	r3, r1
 8015c9e:	00db      	lsls	r3, r3, #3
 8015ca0:	440b      	add	r3, r1
 8015ca2:	011b      	lsls	r3, r3, #4
 8015ca4:	4413      	add	r3, r2
 8015ca6:	3328      	adds	r3, #40	; 0x28
 8015ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015caa:	18d0      	adds	r0, r2, r3
 8015cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015cae:	461a      	mov	r2, r3
 8015cb0:	0152      	lsls	r2, r2, #5
 8015cb2:	1ad2      	subs	r2, r2, r3
 8015cb4:	0053      	lsls	r3, r2, #1
 8015cb6:	461a      	mov	r2, r3
 8015cb8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015cba:	460b      	mov	r3, r1
 8015cbc:	015b      	lsls	r3, r3, #5
 8015cbe:	1a5b      	subs	r3, r3, r1
 8015cc0:	009b      	lsls	r3, r3, #2
 8015cc2:	4413      	add	r3, r2
 8015cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cc6:	18d1      	adds	r1, r2, r3
 8015cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015cca:	011b      	lsls	r3, r3, #4
 8015ccc:	3308      	adds	r3, #8
 8015cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015cd0:	18d4      	adds	r4, r2, r3
 8015cd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015cd4:	4613      	mov	r3, r2
 8015cd6:	015b      	lsls	r3, r3, #5
 8015cd8:	1a9b      	subs	r3, r3, r2
 8015cda:	005b      	lsls	r3, r3, #1
 8015cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cde:	4413      	add	r3, r2
 8015ce0:	9301      	str	r3, [sp, #4]
 8015ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ce4:	9300      	str	r3, [sp, #0]
 8015ce6:	4623      	mov	r3, r4
 8015ce8:	460a      	mov	r2, r1
 8015cea:	4601      	mov	r1, r0
 8015cec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015cee:	f7ff fbc1 	bl	8015474 <UnpackSFMPEG1>
 8015cf2:	e02a      	b.n	8015d4a <xmp3_UnpackScaleFactors+0x142>
	else 
		UnpackSFMPEG2(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], gr, ch, fh->modeExt, &sfi->sfjs);
 8015cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015cf6:	461a      	mov	r2, r3
 8015cf8:	00d2      	lsls	r2, r2, #3
 8015cfa:	441a      	add	r2, r3
 8015cfc:	00d3      	lsls	r3, r2, #3
 8015cfe:	461a      	mov	r2, r3
 8015d00:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015d02:	460b      	mov	r3, r1
 8015d04:	00db      	lsls	r3, r3, #3
 8015d06:	440b      	add	r3, r1
 8015d08:	011b      	lsls	r3, r3, #4
 8015d0a:	4413      	add	r3, r2
 8015d0c:	3328      	adds	r3, #40	; 0x28
 8015d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d10:	18d0      	adds	r0, r2, r3
 8015d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d14:	461a      	mov	r2, r3
 8015d16:	0152      	lsls	r2, r2, #5
 8015d18:	1ad2      	subs	r2, r2, r3
 8015d1a:	0053      	lsls	r3, r2, #1
 8015d1c:	461a      	mov	r2, r3
 8015d1e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015d20:	460b      	mov	r3, r1
 8015d22:	015b      	lsls	r3, r3, #5
 8015d24:	1a5b      	subs	r3, r3, r1
 8015d26:	009b      	lsls	r3, r3, #2
 8015d28:	4413      	add	r3, r2
 8015d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d2c:	18d1      	adds	r1, r2, r3
 8015d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d30:	6a1b      	ldr	r3, [r3, #32]
 8015d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d34:	32f8      	adds	r2, #248	; 0xf8
 8015d36:	9202      	str	r2, [sp, #8]
 8015d38:	9301      	str	r3, [sp, #4]
 8015d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d3c:	9300      	str	r3, [sp, #0]
 8015d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015d40:	460a      	mov	r2, r1
 8015d42:	4601      	mov	r1, r0
 8015d44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d46:	f7ff fd19 	bl	801577c <UnpackSFMPEG2>

	mp3DecInfo->part23Length[gr][ch] = si->sis[gr][ch].part23Length;
 8015d4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015d50:	461a      	mov	r2, r3
 8015d52:	00d2      	lsls	r2, r2, #3
 8015d54:	441a      	add	r2, r3
 8015d56:	00d3      	lsls	r3, r2, #3
 8015d58:	461a      	mov	r2, r3
 8015d5a:	460b      	mov	r3, r1
 8015d5c:	00db      	lsls	r3, r3, #3
 8015d5e:	440b      	add	r3, r1
 8015d60:	011b      	lsls	r3, r3, #4
 8015d62:	4413      	add	r3, r2
 8015d64:	4403      	add	r3, r0
 8015d66:	3328      	adds	r3, #40	; 0x28
 8015d68:	6819      	ldr	r1, [r3, #0]
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015d6e:	0050      	lsls	r0, r2, #1
 8015d70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015d72:	4402      	add	r2, r0
 8015d74:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
 8015d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	bitsUsed = CalcBitsUsed(bsi, buf, *bitOffset);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	461a      	mov	r2, r3
 8015d82:	68b9      	ldr	r1, [r7, #8]
 8015d84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d86:	f7fa ff88 	bl	8010c9a <xmp3_CalcBitsUsed>
 8015d8a:	6238      	str	r0, [r7, #32]
	buf += (bitsUsed + *bitOffset) >> 3;
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	681a      	ldr	r2, [r3, #0]
 8015d90:	6a3b      	ldr	r3, [r7, #32]
 8015d92:	4413      	add	r3, r2
 8015d94:	10db      	asrs	r3, r3, #3
 8015d96:	461a      	mov	r2, r3
 8015d98:	68bb      	ldr	r3, [r7, #8]
 8015d9a:	4413      	add	r3, r2
 8015d9c:	60bb      	str	r3, [r7, #8]
	*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	681a      	ldr	r2, [r3, #0]
 8015da2:	6a3b      	ldr	r3, [r7, #32]
 8015da4:	4413      	add	r3, r2
 8015da6:	f003 0207 	and.w	r2, r3, #7
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	601a      	str	r2, [r3, #0]

	return (buf - startBuf);
 8015dae:	68ba      	ldr	r2, [r7, #8]
 8015db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015db2:	1ad3      	subs	r3, r2, r3
}
 8015db4:	4618      	mov	r0, r3
 8015db6:	373c      	adds	r7, #60	; 0x3c
 8015db8:	46bd      	mov	sp, r7
 8015dba:	bd90      	pop	{r4, r7, pc}

08015dbc <MULSHIFT32>:
{
 8015dbc:	b480      	push	{r7}
 8015dbe:	b085      	sub	sp, #20
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
 8015dc4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8015dc6:	6879      	ldr	r1, [r7, #4]
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	fb81 2303 	smull	r2, r3, r1, r3
 8015dce:	60fa      	str	r2, [r7, #12]
 8015dd0:	603b      	str	r3, [r7, #0]
    return y;
 8015dd2:	683b      	ldr	r3, [r7, #0]
}
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	3714      	adds	r7, #20
 8015dd8:	46bd      	mov	sp, r7
 8015dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dde:	4770      	bx	lr

08015de0 <FASTABS>:
{
 8015de0:	b480      	push	{r7}
 8015de2:	b085      	sub	sp, #20
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
	__asm__ volatile (
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	687a      	ldr	r2, [r7, #4]
 8015dec:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8015df0:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8015df4:	60fb      	str	r3, [r7, #12]
	return t;
 8015df6:	68fb      	ldr	r3, [r7, #12]
}
 8015df8:	4618      	mov	r0, r3
 8015dfa:	3714      	adds	r7, #20
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e02:	4770      	bx	lr

08015e04 <xmp3_MidSideProc>:
 * Return:      none
 *
 * Notes:       assume at least 1 GB in input
 **************************************************************************************/
void MidSideProc(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, int mOut[2])  
{
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b08a      	sub	sp, #40	; 0x28
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	60f8      	str	r0, [r7, #12]
 8015e0c:	60b9      	str	r1, [r7, #8]
 8015e0e:	607a      	str	r2, [r7, #4]
	int i, xr, xl, mOutL, mOutR;
	
	/* L = (M+S)/sqrt(2), R = (M-S)/sqrt(2) 
	 * NOTE: 1/sqrt(2) done in DequantChannel() - see comments there
	 */
	mOutL = mOutR = 0;
 8015e10:	2300      	movs	r3, #0
 8015e12:	61fb      	str	r3, [r7, #28]
 8015e14:	69fb      	ldr	r3, [r7, #28]
 8015e16:	623b      	str	r3, [r7, #32]
	for(i = 0; i < nSamps; i++) {
 8015e18:	2300      	movs	r3, #0
 8015e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8015e1c:	e036      	b.n	8015e8c <xmp3_MidSideProc+0x88>
		xl = x[0][i];
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e26:	61bb      	str	r3, [r7, #24]
		xr = x[1][i];
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e34:	617b      	str	r3, [r7, #20]
		x[0][i] = xl + xr;
 8015e36:	69ba      	ldr	r2, [r7, #24]
 8015e38:	697b      	ldr	r3, [r7, #20]
 8015e3a:	18d1      	adds	r1, r2, r3
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		x[1][i] = xl - xr;
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015e4a:	69b9      	ldr	r1, [r7, #24]
 8015e4c:	697a      	ldr	r2, [r7, #20]
 8015e4e:	1a89      	subs	r1, r1, r2
 8015e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		mOutL |= FASTABS(x[0][i]);
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e5e:	4618      	mov	r0, r3
 8015e60:	f7ff ffbe 	bl	8015de0 <FASTABS>
 8015e64:	4602      	mov	r2, r0
 8015e66:	6a3b      	ldr	r3, [r7, #32]
 8015e68:	4313      	orrs	r3, r2
 8015e6a:	623b      	str	r3, [r7, #32]
		mOutR |= FASTABS(x[1][i]);
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f7ff ffb1 	bl	8015de0 <FASTABS>
 8015e7e:	4602      	mov	r2, r0
 8015e80:	69fb      	ldr	r3, [r7, #28]
 8015e82:	4313      	orrs	r3, r2
 8015e84:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < nSamps; i++) {
 8015e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e88:	3301      	adds	r3, #1
 8015e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8015e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e8e:	68bb      	ldr	r3, [r7, #8]
 8015e90:	429a      	cmp	r2, r3
 8015e92:	dbc4      	blt.n	8015e1e <xmp3_MidSideProc+0x1a>
	}
	mOut[0] |= mOutL;
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	681a      	ldr	r2, [r3, #0]
 8015e98:	6a3b      	ldr	r3, [r7, #32]
 8015e9a:	431a      	orrs	r2, r3
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	601a      	str	r2, [r3, #0]
	mOut[1] |= mOutR;
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	3304      	adds	r3, #4
 8015ea4:	6819      	ldr	r1, [r3, #0]
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	3304      	adds	r3, #4
 8015eaa:	69fa      	ldr	r2, [r7, #28]
 8015eac:	430a      	orrs	r2, r1
 8015eae:	601a      	str	r2, [r3, #0]
}
 8015eb0:	bf00      	nop
 8015eb2:	3728      	adds	r7, #40	; 0x28
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bd80      	pop	{r7, pc}

08015eb8 <xmp3_IntensityProcMPEG1>:
 * TODO:        combine MPEG1/2 into one function (maybe)
 *              make sure all the mixed-block and IIP logic is right
 **************************************************************************************/
void IntensityProcMPEG1(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, int midSideFlag, int mixFlag, int mOut[2])
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b09c      	sub	sp, #112	; 0x70
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	60f8      	str	r0, [r7, #12]
 8015ec0:	60b9      	str	r1, [r7, #8]
 8015ec2:	607a      	str	r2, [r7, #4]
 8015ec4:	603b      	str	r3, [r7, #0]
	 *  short block section (i.e. on or after sample 36 = sfBand->l[8] = 3*sfBand->s[3]
	 * is this a safe assumption?
	 * TODO - intensity + mixed not quite right (diff = 11 on he_mode)
	 *  figure out correct implementation (spec ambiguous about when to do short block reorder)
	 */
	if (cbi[1].cbType == 0) {
 8015ec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015ec8:	3318      	adds	r3, #24
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d113      	bne.n	8015ef8 <xmp3_IntensityProcMPEG1+0x40>
		/* long block */
		cbStartL = cbi[1].cbEndL + 1;
 8015ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015ed2:	3318      	adds	r3, #24
 8015ed4:	695b      	ldr	r3, [r3, #20]
 8015ed6:	3301      	adds	r3, #1
 8015ed8:	64bb      	str	r3, [r7, #72]	; 0x48
		cbEndL =   cbi[0].cbEndL + 1;
 8015eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015edc:	695b      	ldr	r3, [r3, #20]
 8015ede:	3301      	adds	r3, #1
 8015ee0:	643b      	str	r3, [r7, #64]	; 0x40
		cbStartS = cbEndS = 0;
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ee8:	647b      	str	r3, [r7, #68]	; 0x44
		i = fh->sfBand->l[cbStartL];
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015eee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015ef0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8015ef4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015ef6:	e023      	b.n	8015f40 <xmp3_IntensityProcMPEG1+0x88>
	} else if (cbi[1].cbType == 1 || cbi[1].cbType == 2) {
 8015ef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015efa:	3318      	adds	r3, #24
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	2b01      	cmp	r3, #1
 8015f00:	d004      	beq.n	8015f0c <xmp3_IntensityProcMPEG1+0x54>
 8015f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015f04:	3318      	adds	r3, #24
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	2b02      	cmp	r3, #2
 8015f0a:	d119      	bne.n	8015f40 <xmp3_IntensityProcMPEG1+0x88>
		/* short or mixed block */
		cbStartS = cbi[1].cbEndSMax + 1;
 8015f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015f0e:	3318      	adds	r3, #24
 8015f10:	691b      	ldr	r3, [r3, #16]
 8015f12:	3301      	adds	r3, #1
 8015f14:	647b      	str	r3, [r7, #68]	; 0x44
		cbEndS =   cbi[0].cbEndSMax + 1;
 8015f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015f18:	691b      	ldr	r3, [r3, #16]
 8015f1a:	3301      	adds	r3, #1
 8015f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
		cbStartL = cbEndL = 0;
 8015f1e:	2300      	movs	r3, #0
 8015f20:	643b      	str	r3, [r7, #64]	; 0x40
 8015f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f24:	64bb      	str	r3, [r7, #72]	; 0x48
		i = 3 * fh->sfBand->s[cbStartS];
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f2c:	3314      	adds	r3, #20
 8015f2e:	005b      	lsls	r3, r3, #1
 8015f30:	4413      	add	r3, r2
 8015f32:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015f36:	461a      	mov	r2, r3
 8015f38:	4613      	mov	r3, r2
 8015f3a:	005b      	lsls	r3, r3, #1
 8015f3c:	4413      	add	r3, r2
 8015f3e:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	sampsLeft = nSamps - i;		/* process to length of left */
 8015f40:	68ba      	ldr	r2, [r7, #8]
 8015f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015f44:	1ad3      	subs	r3, r2, r3
 8015f46:	65fb      	str	r3, [r7, #92]	; 0x5c
	isfTab = (int *)ISFMpeg1[midSideFlag];
 8015f48:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015f4a:	4613      	mov	r3, r2
 8015f4c:	00db      	lsls	r3, r3, #3
 8015f4e:	1a9b      	subs	r3, r3, r2
 8015f50:	009b      	lsls	r3, r3, #2
 8015f52:	4a75      	ldr	r2, [pc, #468]	; (8016128 <xmp3_IntensityProcMPEG1+0x270>)
 8015f54:	4413      	add	r3, r2
 8015f56:	63bb      	str	r3, [r7, #56]	; 0x38
	mOutL = mOutR = 0;
 8015f58:	2300      	movs	r3, #0
 8015f5a:	657b      	str	r3, [r7, #84]	; 0x54
 8015f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f5e:	65bb      	str	r3, [r7, #88]	; 0x58

	/* long blocks */
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 8015f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f62:	667b      	str	r3, [r7, #100]	; 0x64
 8015f64:	e077      	b.n	8016056 <xmp3_IntensityProcMPEG1+0x19e>
		isf = sfis->l[cb];
 8015f66:	683a      	ldr	r2, [r7, #0]
 8015f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015f6a:	4413      	add	r3, r2
 8015f6c:	781b      	ldrb	r3, [r3, #0]
 8015f6e:	637b      	str	r3, [r7, #52]	; 0x34
		if (isf == 7) {
 8015f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f72:	2b07      	cmp	r3, #7
 8015f74:	d10b      	bne.n	8015f8e <xmp3_IntensityProcMPEG1+0xd6>
			fl = ISFIIP[midSideFlag][0];
 8015f76:	4a6d      	ldr	r2, [pc, #436]	; (801612c <xmp3_IntensityProcMPEG1+0x274>)
 8015f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015f7a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015f7e:	653b      	str	r3, [r7, #80]	; 0x50
			fr = ISFIIP[midSideFlag][1];
 8015f80:	4a6a      	ldr	r2, [pc, #424]	; (801612c <xmp3_IntensityProcMPEG1+0x274>)
 8015f82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015f84:	00db      	lsls	r3, r3, #3
 8015f86:	4413      	add	r3, r2
 8015f88:	685b      	ldr	r3, [r3, #4]
 8015f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015f8c:	e00f      	b.n	8015fae <xmp3_IntensityProcMPEG1+0xf6>
		} else {
			fl = isfTab[isf];	
 8015f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f90:	009b      	lsls	r3, r3, #2
 8015f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015f94:	4413      	add	r3, r2
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	653b      	str	r3, [r7, #80]	; 0x50
			fr = isfTab[6] - isfTab[isf];
 8015f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f9c:	3318      	adds	r3, #24
 8015f9e:	681a      	ldr	r2, [r3, #0]
 8015fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fa2:	009b      	lsls	r3, r3, #2
 8015fa4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015fa6:	440b      	add	r3, r1
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	1ad3      	subs	r3, r2, r3
 8015fac:	64fb      	str	r3, [r7, #76]	; 0x4c
		}

		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015fb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015fb4:	3201      	adds	r2, #1
 8015fb6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8015fba:	4619      	mov	r1, r3
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015fc0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015fc2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8015fc6:	1acb      	subs	r3, r1, r3
 8015fc8:	633b      	str	r3, [r7, #48]	; 0x30
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 8015fca:	2300      	movs	r3, #0
 8015fcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8015fce:	e038      	b.n	8016042 <xmp3_IntensityProcMPEG1+0x18a>
			xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr; mOutR |= FASTABS(xr);
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fd8:	4619      	mov	r1, r3
 8015fda:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015fdc:	f7ff feee 	bl	8015dbc <MULSHIFT32>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	009b      	lsls	r3, r3, #2
 8015fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015fec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015fee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8015ff4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ff6:	f7ff fef3 	bl	8015de0 <FASTABS>
 8015ffa:	4602      	mov	r2, r0
 8015ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ffe:	4313      	orrs	r3, r2
 8016000:	657b      	str	r3, [r7, #84]	; 0x54
			xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl; mOutL |= FASTABS(xl);
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801600a:	4619      	mov	r1, r3
 801600c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801600e:	f7ff fed5 	bl	8015dbc <MULSHIFT32>
 8016012:	4603      	mov	r3, r0
 8016014:	009b      	lsls	r3, r3, #2
 8016016:	62bb      	str	r3, [r7, #40]	; 0x28
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801601c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801601e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8016022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016024:	f7ff fedc 	bl	8015de0 <FASTABS>
 8016028:	4602      	mov	r2, r0
 801602a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801602c:	4313      	orrs	r3, r2
 801602e:	65bb      	str	r3, [r7, #88]	; 0x58
			sampsLeft--;
 8016030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016032:	3b01      	subs	r3, #1
 8016034:	65fb      	str	r3, [r7, #92]	; 0x5c
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 8016036:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016038:	3301      	adds	r3, #1
 801603a:	66bb      	str	r3, [r7, #104]	; 0x68
 801603c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801603e:	3301      	adds	r3, #1
 8016040:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016042:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016046:	429a      	cmp	r2, r3
 8016048:	da02      	bge.n	8016050 <xmp3_IntensityProcMPEG1+0x198>
 801604a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801604c:	2b00      	cmp	r3, #0
 801604e:	dcbf      	bgt.n	8015fd0 <xmp3_IntensityProcMPEG1+0x118>
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 8016050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016052:	3301      	adds	r3, #1
 8016054:	667b      	str	r3, [r7, #100]	; 0x64
 8016056:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801605a:	429a      	cmp	r2, r3
 801605c:	da02      	bge.n	8016064 <xmp3_IntensityProcMPEG1+0x1ac>
 801605e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016060:	2b00      	cmp	r3, #0
 8016062:	dc80      	bgt.n	8015f66 <xmp3_IntensityProcMPEG1+0xae>
		}
	}

	/* short blocks */
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 8016064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016066:	667b      	str	r3, [r7, #100]	; 0x64
 8016068:	e10e      	b.n	8016288 <xmp3_IntensityProcMPEG1+0x3d0>
		for (w = 0; w < 3; w++) {
 801606a:	2300      	movs	r3, #0
 801606c:	663b      	str	r3, [r7, #96]	; 0x60
 801606e:	e040      	b.n	80160f2 <xmp3_IntensityProcMPEG1+0x23a>
			isf = sfis->s[cb][w];
 8016070:	6839      	ldr	r1, [r7, #0]
 8016072:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016074:	4613      	mov	r3, r2
 8016076:	005b      	lsls	r3, r3, #1
 8016078:	4413      	add	r3, r2
 801607a:	18ca      	adds	r2, r1, r3
 801607c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801607e:	4413      	add	r3, r2
 8016080:	3317      	adds	r3, #23
 8016082:	781b      	ldrb	r3, [r3, #0]
 8016084:	637b      	str	r3, [r7, #52]	; 0x34
			if (isf == 7) {
 8016086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016088:	2b07      	cmp	r3, #7
 801608a:	d115      	bne.n	80160b8 <xmp3_IntensityProcMPEG1+0x200>
				fls[w] = ISFIIP[midSideFlag][0];
 801608c:	4a27      	ldr	r2, [pc, #156]	; (801612c <xmp3_IntensityProcMPEG1+0x274>)
 801608e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016090:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8016094:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016096:	009b      	lsls	r3, r3, #2
 8016098:	3370      	adds	r3, #112	; 0x70
 801609a:	443b      	add	r3, r7
 801609c:	f843 2c54 	str.w	r2, [r3, #-84]
				frs[w] = ISFIIP[midSideFlag][1];
 80160a0:	4a22      	ldr	r2, [pc, #136]	; (801612c <xmp3_IntensityProcMPEG1+0x274>)
 80160a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80160a4:	00db      	lsls	r3, r3, #3
 80160a6:	4413      	add	r3, r2
 80160a8:	685a      	ldr	r2, [r3, #4]
 80160aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80160ac:	009b      	lsls	r3, r3, #2
 80160ae:	3370      	adds	r3, #112	; 0x70
 80160b0:	443b      	add	r3, r7
 80160b2:	f843 2c60 	str.w	r2, [r3, #-96]
 80160b6:	e019      	b.n	80160ec <xmp3_IntensityProcMPEG1+0x234>
			} else {
				fls[w] = isfTab[isf];
 80160b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160ba:	009b      	lsls	r3, r3, #2
 80160bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80160be:	4413      	add	r3, r2
 80160c0:	681a      	ldr	r2, [r3, #0]
 80160c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80160c4:	009b      	lsls	r3, r3, #2
 80160c6:	3370      	adds	r3, #112	; 0x70
 80160c8:	443b      	add	r3, r7
 80160ca:	f843 2c54 	str.w	r2, [r3, #-84]
				frs[w] = isfTab[6] - isfTab[isf];
 80160ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160d0:	3318      	adds	r3, #24
 80160d2:	681a      	ldr	r2, [r3, #0]
 80160d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160d6:	009b      	lsls	r3, r3, #2
 80160d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80160da:	440b      	add	r3, r1
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	1ad2      	subs	r2, r2, r3
 80160e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80160e2:	009b      	lsls	r3, r3, #2
 80160e4:	3370      	adds	r3, #112	; 0x70
 80160e6:	443b      	add	r3, r7
 80160e8:	f843 2c60 	str.w	r2, [r3, #-96]
		for (w = 0; w < 3; w++) {
 80160ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80160ee:	3301      	adds	r3, #1
 80160f0:	663b      	str	r3, [r7, #96]	; 0x60
 80160f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80160f4:	2b02      	cmp	r3, #2
 80160f6:	ddbb      	ble.n	8016070 <xmp3_IntensityProcMPEG1+0x1b8>
			}
		}

		n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80160fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80160fe:	3301      	adds	r3, #1
 8016100:	3314      	adds	r3, #20
 8016102:	005b      	lsls	r3, r3, #1
 8016104:	4413      	add	r3, r2
 8016106:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801610a:	4619      	mov	r1, r3
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016110:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016112:	3314      	adds	r3, #20
 8016114:	005b      	lsls	r3, r3, #1
 8016116:	4413      	add	r3, r2
 8016118:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801611c:	1acb      	subs	r3, r1, r3
 801611e:	633b      	str	r3, [r7, #48]	; 0x30
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8016120:	2300      	movs	r3, #0
 8016122:	66bb      	str	r3, [r7, #104]	; 0x68
 8016124:	e0a5      	b.n	8016272 <xmp3_IntensityProcMPEG1+0x3ba>
 8016126:	bf00      	nop
 8016128:	0801a614 	.word	0x0801a614
 801612c:	0801a74c 	.word	0x0801a74c
			xr = MULSHIFT32(frs[0], x[0][i+0]) << 2;	x[1][i+0] = xr;	mOutR |= FASTABS(xr);
 8016130:	6938      	ldr	r0, [r7, #16]
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801613a:	4619      	mov	r1, r3
 801613c:	f7ff fe3e 	bl	8015dbc <MULSHIFT32>
 8016140:	4603      	mov	r3, r0
 8016142:	009b      	lsls	r3, r3, #2
 8016144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801614c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801614e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8016154:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016156:	f7ff fe43 	bl	8015de0 <FASTABS>
 801615a:	4602      	mov	r2, r0
 801615c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801615e:	4313      	orrs	r3, r2
 8016160:	657b      	str	r3, [r7, #84]	; 0x54
			xl = MULSHIFT32(fls[0], x[0][i+0]) << 2;	x[0][i+0] = xl;	mOutL |= FASTABS(xl);
 8016162:	69f8      	ldr	r0, [r7, #28]
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801616c:	4619      	mov	r1, r3
 801616e:	f7ff fe25 	bl	8015dbc <MULSHIFT32>
 8016172:	4603      	mov	r3, r0
 8016174:	009b      	lsls	r3, r3, #2
 8016176:	62bb      	str	r3, [r7, #40]	; 0x28
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801617c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801617e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8016182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016184:	f7ff fe2c 	bl	8015de0 <FASTABS>
 8016188:	4602      	mov	r2, r0
 801618a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801618c:	4313      	orrs	r3, r2
 801618e:	65bb      	str	r3, [r7, #88]	; 0x58
			xr = MULSHIFT32(frs[1], x[0][i+1]) << 2;	x[1][i+1] = xr;	mOutR |= FASTABS(xr);
 8016190:	6978      	ldr	r0, [r7, #20]
 8016192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016194:	1c5a      	adds	r2, r3, #1
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801619c:	4619      	mov	r1, r3
 801619e:	f7ff fe0d 	bl	8015dbc <MULSHIFT32>
 80161a2:	4603      	mov	r3, r0
 80161a4:	009b      	lsls	r3, r3, #2
 80161a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80161ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80161b0:	3201      	adds	r2, #1
 80161b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80161b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80161b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80161ba:	f7ff fe11 	bl	8015de0 <FASTABS>
 80161be:	4602      	mov	r2, r0
 80161c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80161c2:	4313      	orrs	r3, r2
 80161c4:	657b      	str	r3, [r7, #84]	; 0x54
			xl = MULSHIFT32(fls[1], x[0][i+1]) << 2;	x[0][i+1] = xl;	mOutL |= FASTABS(xl);
 80161c6:	6a38      	ldr	r0, [r7, #32]
 80161c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80161ca:	1c5a      	adds	r2, r3, #1
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161d2:	4619      	mov	r1, r3
 80161d4:	f7ff fdf2 	bl	8015dbc <MULSHIFT32>
 80161d8:	4603      	mov	r3, r0
 80161da:	009b      	lsls	r3, r3, #2
 80161dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80161de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80161e0:	1c5a      	adds	r2, r3, #1
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80161e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80161ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161ec:	f7ff fdf8 	bl	8015de0 <FASTABS>
 80161f0:	4602      	mov	r2, r0
 80161f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80161f4:	4313      	orrs	r3, r2
 80161f6:	65bb      	str	r3, [r7, #88]	; 0x58
			xr = MULSHIFT32(frs[2], x[0][i+2]) << 2;	x[1][i+2] = xr;	mOutR |= FASTABS(xr);
 80161f8:	69b8      	ldr	r0, [r7, #24]
 80161fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80161fc:	1c9a      	adds	r2, r3, #2
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016204:	4619      	mov	r1, r3
 8016206:	f7ff fdd9 	bl	8015dbc <MULSHIFT32>
 801620a:	4603      	mov	r3, r0
 801620c:	009b      	lsls	r3, r3, #2
 801620e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016216:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016218:	3202      	adds	r2, #2
 801621a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801621c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8016220:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016222:	f7ff fddd 	bl	8015de0 <FASTABS>
 8016226:	4602      	mov	r2, r0
 8016228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801622a:	4313      	orrs	r3, r2
 801622c:	657b      	str	r3, [r7, #84]	; 0x54
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 801622e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016232:	1c9a      	adds	r2, r3, #2
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801623a:	4619      	mov	r1, r3
 801623c:	f7ff fdbe 	bl	8015dbc <MULSHIFT32>
 8016240:	4603      	mov	r3, r0
 8016242:	009b      	lsls	r3, r3, #2
 8016244:	62bb      	str	r3, [r7, #40]	; 0x28
 8016246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016248:	1c9a      	adds	r2, r3, #2
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801624e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8016252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016254:	f7ff fdc4 	bl	8015de0 <FASTABS>
 8016258:	4602      	mov	r2, r0
 801625a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801625c:	4313      	orrs	r3, r2
 801625e:	65bb      	str	r3, [r7, #88]	; 0x58
			sampsLeft -= 3;
 8016260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016262:	3b03      	subs	r3, #3
 8016264:	65fb      	str	r3, [r7, #92]	; 0x5c
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8016266:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016268:	3301      	adds	r3, #1
 801626a:	66bb      	str	r3, [r7, #104]	; 0x68
 801626c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801626e:	3303      	adds	r3, #3
 8016270:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016272:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016276:	429a      	cmp	r2, r3
 8016278:	da03      	bge.n	8016282 <xmp3_IntensityProcMPEG1+0x3ca>
 801627a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801627c:	2b02      	cmp	r3, #2
 801627e:	f73f af57 	bgt.w	8016130 <xmp3_IntensityProcMPEG1+0x278>
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 8016282:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016284:	3301      	adds	r3, #1
 8016286:	667b      	str	r3, [r7, #100]	; 0x64
 8016288:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801628a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801628c:	429a      	cmp	r2, r3
 801628e:	da03      	bge.n	8016298 <xmp3_IntensityProcMPEG1+0x3e0>
 8016290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016292:	2b02      	cmp	r3, #2
 8016294:	f73f aee9 	bgt.w	801606a <xmp3_IntensityProcMPEG1+0x1b2>
		}
	}
	mOut[0] = mOutL;
 8016298:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801629c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801629e:	601a      	str	r2, [r3, #0]
	mOut[1] = mOutR;
 80162a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80162a4:	3304      	adds	r3, #4
 80162a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80162a8:	601a      	str	r2, [r3, #0]
	
	return;
 80162aa:	bf00      	nop
}
 80162ac:	3770      	adds	r7, #112	; 0x70
 80162ae:	46bd      	mov	sp, r7
 80162b0:	bd80      	pop	{r7, pc}
 80162b2:	bf00      	nop

080162b4 <xmp3_IntensityProcMPEG2>:
 *              make sure all the mixed-block and IIP logic is right
 *                probably redo IIP logic to be simpler
 **************************************************************************************/
void IntensityProcMPEG2(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, ScaleFactorJS *sfjs, int midSideFlag, int mixFlag, int mOut[2])
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b0b2      	sub	sp, #200	; 0xc8
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	60f8      	str	r0, [r7, #12]
 80162bc:	60b9      	str	r1, [r7, #8]
 80162be:	607a      	str	r2, [r7, #4]
 80162c0:	603b      	str	r3, [r7, #0]
	int sampsLeft;
	int isf, sfIdx, tmp, il[23];
	int *isfTab;
	int cbStartL, cbStartS, cbEndL, cbEndS;
	
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 80162c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	005a      	lsls	r2, r3, #1
 80162ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80162ce:	4413      	add	r3, r2
 80162d0:	019b      	lsls	r3, r3, #6
 80162d2:	4acc      	ldr	r2, [pc, #816]	; (8016604 <xmp3_IntensityProcMPEG2+0x350>)
 80162d4:	4413      	add	r3, r2
 80162d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mOutL = mOutR = 0;
 80162da:	2300      	movs	r3, #0
 80162dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80162e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80162e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	/* fill buffer with illegal intensity positions (depending on slen) */
	for (k = r = 0; r < 4; r++) {
 80162e8:	2300      	movs	r3, #0
 80162ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80162ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80162f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80162f6:	e032      	b.n	801635e <xmp3_IntensityProcMPEG2+0xaa>
		tmp = (1 << sfjs->slen[r]) - 1;
 80162f8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80162fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016300:	009b      	lsls	r3, r3, #2
 8016302:	4413      	add	r3, r2
 8016304:	685b      	ldr	r3, [r3, #4]
 8016306:	2201      	movs	r2, #1
 8016308:	fa02 f303 	lsl.w	r3, r2, r3
 801630c:	3b01      	subs	r3, #1
 801630e:	673b      	str	r3, [r7, #112]	; 0x70
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 8016310:	2300      	movs	r3, #0
 8016312:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016316:	e011      	b.n	801633c <xmp3_IntensityProcMPEG2+0x88>
			il[k] = tmp;
 8016318:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801631c:	009b      	lsls	r3, r3, #2
 801631e:	33c8      	adds	r3, #200	; 0xc8
 8016320:	443b      	add	r3, r7
 8016322:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016324:	f843 2cb4 	str.w	r2, [r3, #-180]
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 8016328:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801632c:	3301      	adds	r3, #1
 801632e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016332:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016336:	3301      	adds	r3, #1
 8016338:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801633c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8016340:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016344:	3304      	adds	r3, #4
 8016346:	009b      	lsls	r3, r3, #2
 8016348:	4413      	add	r3, r2
 801634a:	685b      	ldr	r3, [r3, #4]
 801634c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8016350:	429a      	cmp	r2, r3
 8016352:	dbe1      	blt.n	8016318 <xmp3_IntensityProcMPEG2+0x64>
	for (k = r = 0; r < 4; r++) {
 8016354:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016358:	3301      	adds	r3, #1
 801635a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801635e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016362:	2b03      	cmp	r3, #3
 8016364:	ddc8      	ble.n	80162f8 <xmp3_IntensityProcMPEG2+0x44>
	}

	if (cbi[1].cbType == 0) {
 8016366:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801636a:	3318      	adds	r3, #24
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	2b00      	cmp	r3, #0
 8016370:	f040 80ec 	bne.w	801654c <xmp3_IntensityProcMPEG2+0x298>
		/* long blocks */
		il[21] = il[22] = 1;
 8016374:	2301      	movs	r3, #1
 8016376:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801637a:	66bb      	str	r3, [r7, #104]	; 0x68
		cbStartL = cbi[1].cbEndL + 1;	/* start at end of right */
 801637c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016380:	3318      	adds	r3, #24
 8016382:	695b      	ldr	r3, [r3, #20]
 8016384:	3301      	adds	r3, #1
 8016386:	67bb      	str	r3, [r7, #120]	; 0x78
		cbEndL =   cbi[0].cbEndL + 1;	/* process to end of left */
 8016388:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801638c:	695b      	ldr	r3, [r3, #20]
 801638e:	3301      	adds	r3, #1
 8016390:	677b      	str	r3, [r7, #116]	; 0x74
		i = fh->sfBand->l[cbStartL];
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016396:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016398:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801639c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		sampsLeft = nSamps - i;
 80163a0:	68ba      	ldr	r2, [r7, #8]
 80163a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80163a6:	1ad3      	subs	r3, r2, r3
 80163a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

		for(cb = cbStartL; cb < cbEndL; cb++) {
 80163ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80163ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80163b2:	e0c4      	b.n	801653e <xmp3_IntensityProcMPEG2+0x28a>
			sfIdx = sfis->l[cb];
 80163b4:	683a      	ldr	r2, [r7, #0]
 80163b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80163ba:	4413      	add	r3, r2
 80163bc:	781b      	ldrb	r3, [r3, #0]
 80163be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			if (sfIdx == il[cb]) {
 80163c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80163c6:	009b      	lsls	r3, r3, #2
 80163c8:	33c8      	adds	r3, #200	; 0xc8
 80163ca:	443b      	add	r3, r7
 80163cc:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 80163d0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80163d4:	429a      	cmp	r2, r3
 80163d6:	d10f      	bne.n	80163f8 <xmp3_IntensityProcMPEG2+0x144>
				fl = ISFIIP[midSideFlag][0];
 80163d8:	4a8b      	ldr	r2, [pc, #556]	; (8016608 <xmp3_IntensityProcMPEG2+0x354>)
 80163da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80163de:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80163e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				fr = ISFIIP[midSideFlag][1];
 80163e6:	4a88      	ldr	r2, [pc, #544]	; (8016608 <xmp3_IntensityProcMPEG2+0x354>)
 80163e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80163ec:	00db      	lsls	r3, r3, #3
 80163ee:	4413      	add	r3, r2
 80163f0:	685b      	ldr	r3, [r3, #4]
 80163f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80163f6:	e02a      	b.n	801644e <xmp3_IntensityProcMPEG2+0x19a>
			} else {
				isf = (sfis->l[cb] + 1) >> 1;
 80163f8:	683a      	ldr	r2, [r7, #0]
 80163fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80163fe:	4413      	add	r3, r2
 8016400:	781b      	ldrb	r3, [r3, #0]
 8016402:	3301      	adds	r3, #1
 8016404:	105b      	asrs	r3, r3, #1
 8016406:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 801640a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801640e:	f003 0301 	and.w	r3, r3, #1
 8016412:	2b00      	cmp	r3, #0
 8016414:	d003      	beq.n	801641e <xmp3_IntensityProcMPEG2+0x16a>
 8016416:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801641a:	009b      	lsls	r3, r3, #2
 801641c:	e000      	b.n	8016420 <xmp3_IntensityProcMPEG2+0x16c>
 801641e:	2300      	movs	r3, #0
 8016420:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016424:	4413      	add	r3, r2
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 801642c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016430:	f003 0301 	and.w	r3, r3, #1
 8016434:	2b00      	cmp	r3, #0
 8016436:	d103      	bne.n	8016440 <xmp3_IntensityProcMPEG2+0x18c>
 8016438:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801643c:	009b      	lsls	r3, r3, #2
 801643e:	e000      	b.n	8016442 <xmp3_IntensityProcMPEG2+0x18e>
 8016440:	2300      	movs	r3, #0
 8016442:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016446:	4413      	add	r3, r2
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			}
			n = MIN(fh->sfBand->l[cb + 1] - fh->sfBand->l[cb], sampsLeft);
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016452:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8016456:	3201      	adds	r2, #1
 8016458:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801645c:	4619      	mov	r1, r3
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016462:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8016466:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 801646a:	1acb      	subs	r3, r1, r3
 801646c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8016470:	4293      	cmp	r3, r2
 8016472:	bfa8      	it	ge
 8016474:	4613      	movge	r3, r2
 8016476:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

			for(j = 0; j < n; j++, i++) {
 801647a:	2300      	movs	r3, #0
 801647c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016480:	e046      	b.n	8016510 <xmp3_IntensityProcMPEG2+0x25c>
				xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801648c:	4619      	mov	r1, r3
 801648e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8016492:	f7ff fc93 	bl	8015dbc <MULSHIFT32>
 8016496:	4603      	mov	r3, r0
 8016498:	009b      	lsls	r3, r3, #2
 801649a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80164a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80164a8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80164ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80164b0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80164b4:	f7ff fc94 	bl	8015de0 <FASTABS>
 80164b8:	4602      	mov	r2, r0
 80164ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80164be:	4313      	orrs	r3, r2
 80164c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80164ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164ce:	4619      	mov	r1, r3
 80164d0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80164d4:	f7ff fc72 	bl	8015dbc <MULSHIFT32>
 80164d8:	4603      	mov	r3, r0
 80164da:	009b      	lsls	r3, r3, #2
 80164dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80164e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80164e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80164ea:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80164ec:	f7ff fc78 	bl	8015de0 <FASTABS>
 80164f0:	4602      	mov	r2, r0
 80164f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80164f6:	4313      	orrs	r3, r2
 80164f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			for(j = 0; j < n; j++, i++) {
 80164fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016500:	3301      	adds	r3, #1
 8016502:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016506:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801650a:	3301      	adds	r3, #1
 801650c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016510:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8016514:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016518:	429a      	cmp	r2, r3
 801651a:	dbb2      	blt.n	8016482 <xmp3_IntensityProcMPEG2+0x1ce>
			}

			/* early exit once we've used all the non-zero samples */
			sampsLeft -= n;
 801651c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8016520:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016524:	1ad3      	subs	r3, r2, r3
 8016526:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			if (sampsLeft == 0)		
 801652a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801652e:	2b00      	cmp	r3, #0
 8016530:	f000 811d 	beq.w	801676e <xmp3_IntensityProcMPEG2+0x4ba>
		for(cb = cbStartL; cb < cbEndL; cb++) {
 8016534:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016538:	3301      	adds	r3, #1
 801653a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801653e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8016542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016544:	429a      	cmp	r2, r3
 8016546:	f6ff af35 	blt.w	80163b4 <xmp3_IntensityProcMPEG2+0x100>
 801654a:	e111      	b.n	8016770 <xmp3_IntensityProcMPEG2+0x4bc>
				break;
		}
	} else {
		/* short or mixed blocks */
		il[12] = 1;
 801654c:	2301      	movs	r3, #1
 801654e:	647b      	str	r3, [r7, #68]	; 0x44

		for(w = 0; w < 3; w++) {
 8016550:	2300      	movs	r3, #0
 8016552:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016556:	e104      	b.n	8016762 <xmp3_IntensityProcMPEG2+0x4ae>
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
 8016558:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801655c:	f103 0218 	add.w	r2, r3, #24
 8016560:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016564:	009b      	lsls	r3, r3, #2
 8016566:	4413      	add	r3, r2
 8016568:	685b      	ldr	r3, [r3, #4]
 801656a:	3301      	adds	r3, #1
 801656c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			cbEndS =   cbi[0].cbEndS[w] + 1;		/* process to end of left */
 8016570:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8016574:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016578:	009b      	lsls	r3, r3, #2
 801657a:	4413      	add	r3, r2
 801657c:	685b      	ldr	r3, [r3, #4]
 801657e:	3301      	adds	r3, #1
 8016580:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016588:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801658c:	3314      	adds	r3, #20
 801658e:	005b      	lsls	r3, r3, #1
 8016590:	4413      	add	r3, r2
 8016592:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016596:	461a      	mov	r2, r3
 8016598:	4613      	mov	r3, r2
 801659a:	005b      	lsls	r3, r3, #1
 801659c:	4413      	add	r3, r2
 801659e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80165a2:	4413      	add	r3, r2
 80165a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

			/* skip through sample array by 3, so early-exit logic would be more tricky */
			for(cb = cbStartS; cb < cbEndS; cb++) {
 80165a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80165ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80165b0:	e0cb      	b.n	801674a <xmp3_IntensityProcMPEG2+0x496>
				sfIdx = sfis->s[cb][w];
 80165b2:	6839      	ldr	r1, [r7, #0]
 80165b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80165b8:	4613      	mov	r3, r2
 80165ba:	005b      	lsls	r3, r3, #1
 80165bc:	4413      	add	r3, r2
 80165be:	18ca      	adds	r2, r1, r3
 80165c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80165c4:	4413      	add	r3, r2
 80165c6:	3317      	adds	r3, #23
 80165c8:	781b      	ldrb	r3, [r3, #0]
 80165ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				if (sfIdx == il[cb]) {
 80165ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80165d2:	009b      	lsls	r3, r3, #2
 80165d4:	33c8      	adds	r3, #200	; 0xc8
 80165d6:	443b      	add	r3, r7
 80165d8:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 80165dc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80165e0:	429a      	cmp	r2, r3
 80165e2:	d113      	bne.n	801660c <xmp3_IntensityProcMPEG2+0x358>
					fl = ISFIIP[midSideFlag][0];
 80165e4:	4a08      	ldr	r2, [pc, #32]	; (8016608 <xmp3_IntensityProcMPEG2+0x354>)
 80165e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80165ea:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80165ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					fr = ISFIIP[midSideFlag][1];
 80165f2:	4a05      	ldr	r2, [pc, #20]	; (8016608 <xmp3_IntensityProcMPEG2+0x354>)
 80165f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80165f8:	00db      	lsls	r3, r3, #3
 80165fa:	4413      	add	r3, r2
 80165fc:	685b      	ldr	r3, [r3, #4]
 80165fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8016602:	e035      	b.n	8016670 <xmp3_IntensityProcMPEG2+0x3bc>
 8016604:	0801a64c 	.word	0x0801a64c
 8016608:	0801a74c 	.word	0x0801a74c
				} else {
					isf = (sfis->s[cb][w] + 1) >> 1;
 801660c:	6839      	ldr	r1, [r7, #0]
 801660e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8016612:	4613      	mov	r3, r2
 8016614:	005b      	lsls	r3, r3, #1
 8016616:	4413      	add	r3, r2
 8016618:	18ca      	adds	r2, r1, r3
 801661a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801661e:	4413      	add	r3, r2
 8016620:	3317      	adds	r3, #23
 8016622:	781b      	ldrb	r3, [r3, #0]
 8016624:	3301      	adds	r3, #1
 8016626:	105b      	asrs	r3, r3, #1
 8016628:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 801662c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016630:	f003 0301 	and.w	r3, r3, #1
 8016634:	2b00      	cmp	r3, #0
 8016636:	d003      	beq.n	8016640 <xmp3_IntensityProcMPEG2+0x38c>
 8016638:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801663c:	009b      	lsls	r3, r3, #2
 801663e:	e000      	b.n	8016642 <xmp3_IntensityProcMPEG2+0x38e>
 8016640:	2300      	movs	r3, #0
 8016642:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016646:	4413      	add	r3, r2
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 801664e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016652:	f003 0301 	and.w	r3, r3, #1
 8016656:	2b00      	cmp	r3, #0
 8016658:	d103      	bne.n	8016662 <xmp3_IntensityProcMPEG2+0x3ae>
 801665a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801665e:	009b      	lsls	r3, r3, #2
 8016660:	e000      	b.n	8016664 <xmp3_IntensityProcMPEG2+0x3b0>
 8016662:	2300      	movs	r3, #0
 8016664:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016668:	4413      	add	r3, r2
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				}
				n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016674:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016678:	3301      	adds	r3, #1
 801667a:	3314      	adds	r3, #20
 801667c:	005b      	lsls	r3, r3, #1
 801667e:	4413      	add	r3, r2
 8016680:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016684:	4619      	mov	r1, r3
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801668a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801668e:	3314      	adds	r3, #20
 8016690:	005b      	lsls	r3, r3, #1
 8016692:	4413      	add	r3, r2
 8016694:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8016698:	1acb      	subs	r3, r1, r3
 801669a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

				for(j = 0; j < n; j++, i+=3) {
 801669e:	2300      	movs	r3, #0
 80166a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80166a4:	e046      	b.n	8016734 <xmp3_IntensityProcMPEG2+0x480>
					xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80166ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166b0:	4619      	mov	r1, r3
 80166b2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80166b6:	f7ff fb81 	bl	8015dbc <MULSHIFT32>
 80166ba:	4603      	mov	r3, r0
 80166bc:	009b      	lsls	r3, r3, #2
 80166be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80166c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80166cc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80166d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80166d4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80166d8:	f7ff fb82 	bl	8015de0 <FASTABS>
 80166dc:	4602      	mov	r2, r0
 80166de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80166e2:	4313      	orrs	r3, r2
 80166e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80166ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80166f2:	4619      	mov	r1, r3
 80166f4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80166f8:	f7ff fb60 	bl	8015dbc <MULSHIFT32>
 80166fc:	4603      	mov	r3, r0
 80166fe:	009b      	lsls	r3, r3, #2
 8016700:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016708:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801670a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801670e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8016710:	f7ff fb66 	bl	8015de0 <FASTABS>
 8016714:	4602      	mov	r2, r0
 8016716:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801671a:	4313      	orrs	r3, r2
 801671c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
				for(j = 0; j < n; j++, i+=3) {
 8016720:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016724:	3301      	adds	r3, #1
 8016726:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801672a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801672e:	3303      	adds	r3, #3
 8016730:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016734:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8016738:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801673c:	429a      	cmp	r2, r3
 801673e:	dbb2      	blt.n	80166a6 <xmp3_IntensityProcMPEG2+0x3f2>
			for(cb = cbStartS; cb < cbEndS; cb++) {
 8016740:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016744:	3301      	adds	r3, #1
 8016746:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801674a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801674e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016752:	429a      	cmp	r2, r3
 8016754:	f6ff af2d 	blt.w	80165b2 <xmp3_IntensityProcMPEG2+0x2fe>
		for(w = 0; w < 3; w++) {
 8016758:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801675c:	3301      	adds	r3, #1
 801675e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016762:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016766:	2b02      	cmp	r3, #2
 8016768:	f77f aef6 	ble.w	8016558 <xmp3_IntensityProcMPEG2+0x2a4>
 801676c:	e000      	b.n	8016770 <xmp3_IntensityProcMPEG2+0x4bc>
				break;
 801676e:	bf00      	nop
				}
			}
		}
	}
	mOut[0] = mOutL;
 8016770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016774:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8016778:	601a      	str	r2, [r3, #0]
	mOut[1] = mOutR;
 801677a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801677e:	3304      	adds	r3, #4
 8016780:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8016784:	601a      	str	r2, [r3, #0]

	return;
 8016786:	bf00      	nop
}
 8016788:	37c8      	adds	r7, #200	; 0xc8
 801678a:	46bd      	mov	sp, r7
 801678c:	bd80      	pop	{r7, pc}
 801678e:	bf00      	nop

08016790 <xmp3_Subband>:
 * Outputs:     decoded PCM data, interleaved LRLRLR... if stereo
 *
 * Return:      0 on success,  -1 if null input pointers
 **************************************************************************************/
int Subband(MP3DecInfo *mp3DecInfo, short *pcmBuf)
{
 8016790:	b590      	push	{r4, r7, lr}
 8016792:	b089      	sub	sp, #36	; 0x24
 8016794:	af02      	add	r7, sp, #8
 8016796:	6078      	str	r0, [r7, #4]
 8016798:	6039      	str	r1, [r7, #0]
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	SubbandInfo *sbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d00b      	beq.n	80167b8 <xmp3_Subband+0x28>
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	68db      	ldr	r3, [r3, #12]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d007      	beq.n	80167b8 <xmp3_Subband+0x28>
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	695b      	ldr	r3, [r3, #20]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d003      	beq.n	80167b8 <xmp3_Subband+0x28>
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	699b      	ldr	r3, [r3, #24]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d102      	bne.n	80167be <xmp3_Subband+0x2e>
		return -1;
 80167b8:	f04f 33ff 	mov.w	r3, #4294967295
 80167bc:	e0b8      	b.n	8016930 <xmp3_Subband+0x1a0>

	hi = (HuffmanInfo *)mp3DecInfo->HuffmanInfoPS;
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	68db      	ldr	r3, [r3, #12]
 80167c2:	613b      	str	r3, [r7, #16]
	mi = (IMDCTInfo *)(mp3DecInfo->IMDCTInfoPS);
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	695b      	ldr	r3, [r3, #20]
 80167c8:	60fb      	str	r3, [r7, #12]
	sbi = (SubbandInfo*)(mp3DecInfo->SubbandInfoPS);
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	699b      	ldr	r3, [r3, #24]
 80167ce:	60bb      	str	r3, [r7, #8]

	if (mp3DecInfo->nChans == 2) {
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	f8d3 37bc 	ldr.w	r3, [r3, #1980]	; 0x7bc
 80167d6:	2b02      	cmp	r3, #2
 80167d8:	d161      	bne.n	801689e <xmp3_Subband+0x10e>
		/* stereo */
		for (b = 0; b < BLOCK_SIZE; b++) {
 80167da:	2300      	movs	r3, #0
 80167dc:	617b      	str	r3, [r7, #20]
 80167de:	e05a      	b.n	8016896 <xmp3_Subband+0x106>
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 80167e0:	697b      	ldr	r3, [r7, #20]
 80167e2:	01db      	lsls	r3, r3, #7
 80167e4:	68fa      	ldr	r2, [r7, #12]
 80167e6:	18d0      	adds	r0, r2, r3
 80167e8:	68b9      	ldr	r1, [r7, #8]
 80167ea:	68bb      	ldr	r3, [r7, #8]
 80167ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80167f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80167f4:	697b      	ldr	r3, [r7, #20]
 80167f6:	f003 0401 	and.w	r4, r3, #1
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016800:	f8d3 3b18 	ldr.w	r3, [r3, #2840]	; 0xb18
 8016804:	9300      	str	r3, [sp, #0]
 8016806:	4623      	mov	r3, r4
 8016808:	f7fa fec2 	bl	8011590 <xmp3_FDCT32>
			FDCT32(mi->outBuf[1][b], sbi->vbuf + 1*32, sbi->vindex, (b & 0x01), mi->gb[1]);
 801680c:	697b      	ldr	r3, [r7, #20]
 801680e:	3312      	adds	r3, #18
 8016810:	01db      	lsls	r3, r3, #7
 8016812:	68fa      	ldr	r2, [r7, #12]
 8016814:	18d0      	adds	r0, r2, r3
 8016816:	68bb      	ldr	r3, [r7, #8]
 8016818:	f103 0180 	add.w	r1, r3, #128	; 0x80
 801681c:	68bb      	ldr	r3, [r7, #8]
 801681e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016822:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8016826:	697b      	ldr	r3, [r7, #20]
 8016828:	f003 0401 	and.w	r4, r3, #1
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016832:	f8d3 3b1c 	ldr.w	r3, [r3, #2844]	; 0xb1c
 8016836:	9300      	str	r3, [sp, #0]
 8016838:	4623      	mov	r3, r4
 801683a:	f7fa fea9 	bl	8011590 <xmp3_FDCT32>
			PolyphaseStereo(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 801683e:	68b9      	ldr	r1, [r7, #8]
 8016840:	68bb      	ldr	r3, [r7, #8]
 8016842:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016846:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801684a:	4618      	mov	r0, r3
 801684c:	697b      	ldr	r3, [r7, #20]
 801684e:	f003 0201 	and.w	r2, r3, #1
 8016852:	4613      	mov	r3, r2
 8016854:	011b      	lsls	r3, r3, #4
 8016856:	4413      	add	r3, r2
 8016858:	019b      	lsls	r3, r3, #6
 801685a:	4403      	add	r3, r0
 801685c:	009b      	lsls	r3, r3, #2
 801685e:	440b      	add	r3, r1
 8016860:	4a35      	ldr	r2, [pc, #212]	; (8016938 <xmp3_Subband+0x1a8>)
 8016862:	4619      	mov	r1, r3
 8016864:	6838      	ldr	r0, [r7, #0]
 8016866:	f7e9 fcd3 	bl	8000210 <xmp3_PolyphaseStereo>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 801686a:	68bb      	ldr	r3, [r7, #8]
 801686c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016870:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8016874:	697b      	ldr	r3, [r7, #20]
 8016876:	f003 0301 	and.w	r3, r3, #1
 801687a:	1ad3      	subs	r3, r2, r3
 801687c:	f003 0307 	and.w	r3, r3, #7
 8016880:	68ba      	ldr	r2, [r7, #8]
 8016882:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8016886:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
			pcmBuf += (2 * NBANDS);
 801688a:	683b      	ldr	r3, [r7, #0]
 801688c:	3380      	adds	r3, #128	; 0x80
 801688e:	603b      	str	r3, [r7, #0]
		for (b = 0; b < BLOCK_SIZE; b++) {
 8016890:	697b      	ldr	r3, [r7, #20]
 8016892:	3301      	adds	r3, #1
 8016894:	617b      	str	r3, [r7, #20]
 8016896:	697b      	ldr	r3, [r7, #20]
 8016898:	2b11      	cmp	r3, #17
 801689a:	dda1      	ble.n	80167e0 <xmp3_Subband+0x50>
 801689c:	e047      	b.n	801692e <xmp3_Subband+0x19e>
		}
	} else {
		/* mono */
		for (b = 0; b < BLOCK_SIZE; b++) {
 801689e:	2300      	movs	r3, #0
 80168a0:	617b      	str	r3, [r7, #20]
 80168a2:	e041      	b.n	8016928 <xmp3_Subband+0x198>
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 80168a4:	697b      	ldr	r3, [r7, #20]
 80168a6:	01db      	lsls	r3, r3, #7
 80168a8:	68fa      	ldr	r2, [r7, #12]
 80168aa:	18d0      	adds	r0, r2, r3
 80168ac:	68b9      	ldr	r1, [r7, #8]
 80168ae:	68bb      	ldr	r3, [r7, #8]
 80168b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80168b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80168b8:	697b      	ldr	r3, [r7, #20]
 80168ba:	f003 0401 	and.w	r4, r3, #1
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80168c4:	f8d3 3b18 	ldr.w	r3, [r3, #2840]	; 0xb18
 80168c8:	9300      	str	r3, [sp, #0]
 80168ca:	4623      	mov	r3, r4
 80168cc:	f7fa fe60 	bl	8011590 <xmp3_FDCT32>
			PolyphaseMono(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 80168d0:	68b9      	ldr	r1, [r7, #8]
 80168d2:	68bb      	ldr	r3, [r7, #8]
 80168d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80168d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80168dc:	4618      	mov	r0, r3
 80168de:	697b      	ldr	r3, [r7, #20]
 80168e0:	f003 0201 	and.w	r2, r3, #1
 80168e4:	4613      	mov	r3, r2
 80168e6:	011b      	lsls	r3, r3, #4
 80168e8:	4413      	add	r3, r2
 80168ea:	019b      	lsls	r3, r3, #6
 80168ec:	4403      	add	r3, r0
 80168ee:	009b      	lsls	r3, r3, #2
 80168f0:	440b      	add	r3, r1
 80168f2:	4a11      	ldr	r2, [pc, #68]	; (8016938 <xmp3_Subband+0x1a8>)
 80168f4:	4619      	mov	r1, r3
 80168f6:	6838      	ldr	r0, [r7, #0]
 80168f8:	f7e9 fef0 	bl	80006dc <xmp3_PolyphaseMono>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 80168fc:	68bb      	ldr	r3, [r7, #8]
 80168fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8016902:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8016906:	697b      	ldr	r3, [r7, #20]
 8016908:	f003 0301 	and.w	r3, r3, #1
 801690c:	1ad3      	subs	r3, r2, r3
 801690e:	f003 0307 	and.w	r3, r3, #7
 8016912:	68ba      	ldr	r2, [r7, #8]
 8016914:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8016918:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
			pcmBuf += NBANDS;
 801691c:	683b      	ldr	r3, [r7, #0]
 801691e:	3340      	adds	r3, #64	; 0x40
 8016920:	603b      	str	r3, [r7, #0]
		for (b = 0; b < BLOCK_SIZE; b++) {
 8016922:	697b      	ldr	r3, [r7, #20]
 8016924:	3301      	adds	r3, #1
 8016926:	617b      	str	r3, [r7, #20]
 8016928:	697b      	ldr	r3, [r7, #20]
 801692a:	2b11      	cmp	r3, #17
 801692c:	ddba      	ble.n	80168a4 <xmp3_Subband+0x114>
		}
	}

	return 0;
 801692e:	2300      	movs	r3, #0
}
 8016930:	4618      	mov	r0, r3
 8016932:	371c      	adds	r7, #28
 8016934:	46bd      	mov	sp, r7
 8016936:	bd90      	pop	{r4, r7, pc}
 8016938:	0801a79c 	.word	0x0801a79c

0801693c <__errno>:
 801693c:	4b01      	ldr	r3, [pc, #4]	; (8016944 <__errno+0x8>)
 801693e:	6818      	ldr	r0, [r3, #0]
 8016940:	4770      	bx	lr
 8016942:	bf00      	nop
 8016944:	200005c8 	.word	0x200005c8

08016948 <__libc_init_array>:
 8016948:	b570      	push	{r4, r5, r6, lr}
 801694a:	4d0d      	ldr	r5, [pc, #52]	; (8016980 <__libc_init_array+0x38>)
 801694c:	4c0d      	ldr	r4, [pc, #52]	; (8016984 <__libc_init_array+0x3c>)
 801694e:	1b64      	subs	r4, r4, r5
 8016950:	10a4      	asrs	r4, r4, #2
 8016952:	2600      	movs	r6, #0
 8016954:	42a6      	cmp	r6, r4
 8016956:	d109      	bne.n	801696c <__libc_init_array+0x24>
 8016958:	4d0b      	ldr	r5, [pc, #44]	; (8016988 <__libc_init_array+0x40>)
 801695a:	4c0c      	ldr	r4, [pc, #48]	; (801698c <__libc_init_array+0x44>)
 801695c:	f000 fc8e 	bl	801727c <_init>
 8016960:	1b64      	subs	r4, r4, r5
 8016962:	10a4      	asrs	r4, r4, #2
 8016964:	2600      	movs	r6, #0
 8016966:	42a6      	cmp	r6, r4
 8016968:	d105      	bne.n	8016976 <__libc_init_array+0x2e>
 801696a:	bd70      	pop	{r4, r5, r6, pc}
 801696c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016970:	4798      	blx	r3
 8016972:	3601      	adds	r6, #1
 8016974:	e7ee      	b.n	8016954 <__libc_init_array+0xc>
 8016976:	f855 3b04 	ldr.w	r3, [r5], #4
 801697a:	4798      	blx	r3
 801697c:	3601      	adds	r6, #1
 801697e:	e7f2      	b.n	8016966 <__libc_init_array+0x1e>
 8016980:	0801abf8 	.word	0x0801abf8
 8016984:	0801abf8 	.word	0x0801abf8
 8016988:	0801abf8 	.word	0x0801abf8
 801698c:	0801abfc 	.word	0x0801abfc

08016990 <memcpy>:
 8016990:	440a      	add	r2, r1
 8016992:	4291      	cmp	r1, r2
 8016994:	f100 33ff 	add.w	r3, r0, #4294967295
 8016998:	d100      	bne.n	801699c <memcpy+0xc>
 801699a:	4770      	bx	lr
 801699c:	b510      	push	{r4, lr}
 801699e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80169a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80169a6:	4291      	cmp	r1, r2
 80169a8:	d1f9      	bne.n	801699e <memcpy+0xe>
 80169aa:	bd10      	pop	{r4, pc}

080169ac <memmove>:
 80169ac:	4288      	cmp	r0, r1
 80169ae:	b510      	push	{r4, lr}
 80169b0:	eb01 0402 	add.w	r4, r1, r2
 80169b4:	d902      	bls.n	80169bc <memmove+0x10>
 80169b6:	4284      	cmp	r4, r0
 80169b8:	4623      	mov	r3, r4
 80169ba:	d807      	bhi.n	80169cc <memmove+0x20>
 80169bc:	1e43      	subs	r3, r0, #1
 80169be:	42a1      	cmp	r1, r4
 80169c0:	d008      	beq.n	80169d4 <memmove+0x28>
 80169c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80169c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80169ca:	e7f8      	b.n	80169be <memmove+0x12>
 80169cc:	4402      	add	r2, r0
 80169ce:	4601      	mov	r1, r0
 80169d0:	428a      	cmp	r2, r1
 80169d2:	d100      	bne.n	80169d6 <memmove+0x2a>
 80169d4:	bd10      	pop	{r4, pc}
 80169d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80169da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80169de:	e7f7      	b.n	80169d0 <memmove+0x24>

080169e0 <memset>:
 80169e0:	4402      	add	r2, r0
 80169e2:	4603      	mov	r3, r0
 80169e4:	4293      	cmp	r3, r2
 80169e6:	d100      	bne.n	80169ea <memset+0xa>
 80169e8:	4770      	bx	lr
 80169ea:	f803 1b01 	strb.w	r1, [r3], #1
 80169ee:	e7f9      	b.n	80169e4 <memset+0x4>

080169f0 <siprintf>:
 80169f0:	b40e      	push	{r1, r2, r3}
 80169f2:	b500      	push	{lr}
 80169f4:	b09c      	sub	sp, #112	; 0x70
 80169f6:	ab1d      	add	r3, sp, #116	; 0x74
 80169f8:	9002      	str	r0, [sp, #8]
 80169fa:	9006      	str	r0, [sp, #24]
 80169fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016a00:	4809      	ldr	r0, [pc, #36]	; (8016a28 <siprintf+0x38>)
 8016a02:	9107      	str	r1, [sp, #28]
 8016a04:	9104      	str	r1, [sp, #16]
 8016a06:	4909      	ldr	r1, [pc, #36]	; (8016a2c <siprintf+0x3c>)
 8016a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a0c:	9105      	str	r1, [sp, #20]
 8016a0e:	6800      	ldr	r0, [r0, #0]
 8016a10:	9301      	str	r3, [sp, #4]
 8016a12:	a902      	add	r1, sp, #8
 8016a14:	f000 f868 	bl	8016ae8 <_svfiprintf_r>
 8016a18:	9b02      	ldr	r3, [sp, #8]
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	701a      	strb	r2, [r3, #0]
 8016a1e:	b01c      	add	sp, #112	; 0x70
 8016a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a24:	b003      	add	sp, #12
 8016a26:	4770      	bx	lr
 8016a28:	200005c8 	.word	0x200005c8
 8016a2c:	ffff0208 	.word	0xffff0208

08016a30 <__ssputs_r>:
 8016a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a34:	688e      	ldr	r6, [r1, #8]
 8016a36:	429e      	cmp	r6, r3
 8016a38:	4682      	mov	sl, r0
 8016a3a:	460c      	mov	r4, r1
 8016a3c:	4690      	mov	r8, r2
 8016a3e:	461f      	mov	r7, r3
 8016a40:	d838      	bhi.n	8016ab4 <__ssputs_r+0x84>
 8016a42:	898a      	ldrh	r2, [r1, #12]
 8016a44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016a48:	d032      	beq.n	8016ab0 <__ssputs_r+0x80>
 8016a4a:	6825      	ldr	r5, [r4, #0]
 8016a4c:	6909      	ldr	r1, [r1, #16]
 8016a4e:	eba5 0901 	sub.w	r9, r5, r1
 8016a52:	6965      	ldr	r5, [r4, #20]
 8016a54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016a58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016a5c:	3301      	adds	r3, #1
 8016a5e:	444b      	add	r3, r9
 8016a60:	106d      	asrs	r5, r5, #1
 8016a62:	429d      	cmp	r5, r3
 8016a64:	bf38      	it	cc
 8016a66:	461d      	movcc	r5, r3
 8016a68:	0553      	lsls	r3, r2, #21
 8016a6a:	d531      	bpl.n	8016ad0 <__ssputs_r+0xa0>
 8016a6c:	4629      	mov	r1, r5
 8016a6e:	f000 fb3b 	bl	80170e8 <_malloc_r>
 8016a72:	4606      	mov	r6, r0
 8016a74:	b950      	cbnz	r0, 8016a8c <__ssputs_r+0x5c>
 8016a76:	230c      	movs	r3, #12
 8016a78:	f8ca 3000 	str.w	r3, [sl]
 8016a7c:	89a3      	ldrh	r3, [r4, #12]
 8016a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a82:	81a3      	strh	r3, [r4, #12]
 8016a84:	f04f 30ff 	mov.w	r0, #4294967295
 8016a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a8c:	6921      	ldr	r1, [r4, #16]
 8016a8e:	464a      	mov	r2, r9
 8016a90:	f7ff ff7e 	bl	8016990 <memcpy>
 8016a94:	89a3      	ldrh	r3, [r4, #12]
 8016a96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a9e:	81a3      	strh	r3, [r4, #12]
 8016aa0:	6126      	str	r6, [r4, #16]
 8016aa2:	6165      	str	r5, [r4, #20]
 8016aa4:	444e      	add	r6, r9
 8016aa6:	eba5 0509 	sub.w	r5, r5, r9
 8016aaa:	6026      	str	r6, [r4, #0]
 8016aac:	60a5      	str	r5, [r4, #8]
 8016aae:	463e      	mov	r6, r7
 8016ab0:	42be      	cmp	r6, r7
 8016ab2:	d900      	bls.n	8016ab6 <__ssputs_r+0x86>
 8016ab4:	463e      	mov	r6, r7
 8016ab6:	6820      	ldr	r0, [r4, #0]
 8016ab8:	4632      	mov	r2, r6
 8016aba:	4641      	mov	r1, r8
 8016abc:	f7ff ff76 	bl	80169ac <memmove>
 8016ac0:	68a3      	ldr	r3, [r4, #8]
 8016ac2:	1b9b      	subs	r3, r3, r6
 8016ac4:	60a3      	str	r3, [r4, #8]
 8016ac6:	6823      	ldr	r3, [r4, #0]
 8016ac8:	4433      	add	r3, r6
 8016aca:	6023      	str	r3, [r4, #0]
 8016acc:	2000      	movs	r0, #0
 8016ace:	e7db      	b.n	8016a88 <__ssputs_r+0x58>
 8016ad0:	462a      	mov	r2, r5
 8016ad2:	f000 fb7d 	bl	80171d0 <_realloc_r>
 8016ad6:	4606      	mov	r6, r0
 8016ad8:	2800      	cmp	r0, #0
 8016ada:	d1e1      	bne.n	8016aa0 <__ssputs_r+0x70>
 8016adc:	6921      	ldr	r1, [r4, #16]
 8016ade:	4650      	mov	r0, sl
 8016ae0:	f000 fa96 	bl	8017010 <_free_r>
 8016ae4:	e7c7      	b.n	8016a76 <__ssputs_r+0x46>
	...

08016ae8 <_svfiprintf_r>:
 8016ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aec:	4698      	mov	r8, r3
 8016aee:	898b      	ldrh	r3, [r1, #12]
 8016af0:	061b      	lsls	r3, r3, #24
 8016af2:	b09d      	sub	sp, #116	; 0x74
 8016af4:	4607      	mov	r7, r0
 8016af6:	460d      	mov	r5, r1
 8016af8:	4614      	mov	r4, r2
 8016afa:	d50e      	bpl.n	8016b1a <_svfiprintf_r+0x32>
 8016afc:	690b      	ldr	r3, [r1, #16]
 8016afe:	b963      	cbnz	r3, 8016b1a <_svfiprintf_r+0x32>
 8016b00:	2140      	movs	r1, #64	; 0x40
 8016b02:	f000 faf1 	bl	80170e8 <_malloc_r>
 8016b06:	6028      	str	r0, [r5, #0]
 8016b08:	6128      	str	r0, [r5, #16]
 8016b0a:	b920      	cbnz	r0, 8016b16 <_svfiprintf_r+0x2e>
 8016b0c:	230c      	movs	r3, #12
 8016b0e:	603b      	str	r3, [r7, #0]
 8016b10:	f04f 30ff 	mov.w	r0, #4294967295
 8016b14:	e0d1      	b.n	8016cba <_svfiprintf_r+0x1d2>
 8016b16:	2340      	movs	r3, #64	; 0x40
 8016b18:	616b      	str	r3, [r5, #20]
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8016b1e:	2320      	movs	r3, #32
 8016b20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016b24:	f8cd 800c 	str.w	r8, [sp, #12]
 8016b28:	2330      	movs	r3, #48	; 0x30
 8016b2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016cd4 <_svfiprintf_r+0x1ec>
 8016b2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016b32:	f04f 0901 	mov.w	r9, #1
 8016b36:	4623      	mov	r3, r4
 8016b38:	469a      	mov	sl, r3
 8016b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b3e:	b10a      	cbz	r2, 8016b44 <_svfiprintf_r+0x5c>
 8016b40:	2a25      	cmp	r2, #37	; 0x25
 8016b42:	d1f9      	bne.n	8016b38 <_svfiprintf_r+0x50>
 8016b44:	ebba 0b04 	subs.w	fp, sl, r4
 8016b48:	d00b      	beq.n	8016b62 <_svfiprintf_r+0x7a>
 8016b4a:	465b      	mov	r3, fp
 8016b4c:	4622      	mov	r2, r4
 8016b4e:	4629      	mov	r1, r5
 8016b50:	4638      	mov	r0, r7
 8016b52:	f7ff ff6d 	bl	8016a30 <__ssputs_r>
 8016b56:	3001      	adds	r0, #1
 8016b58:	f000 80aa 	beq.w	8016cb0 <_svfiprintf_r+0x1c8>
 8016b5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b5e:	445a      	add	r2, fp
 8016b60:	9209      	str	r2, [sp, #36]	; 0x24
 8016b62:	f89a 3000 	ldrb.w	r3, [sl]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	f000 80a2 	beq.w	8016cb0 <_svfiprintf_r+0x1c8>
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8016b72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016b76:	f10a 0a01 	add.w	sl, sl, #1
 8016b7a:	9304      	str	r3, [sp, #16]
 8016b7c:	9307      	str	r3, [sp, #28]
 8016b7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016b82:	931a      	str	r3, [sp, #104]	; 0x68
 8016b84:	4654      	mov	r4, sl
 8016b86:	2205      	movs	r2, #5
 8016b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b8c:	4851      	ldr	r0, [pc, #324]	; (8016cd4 <_svfiprintf_r+0x1ec>)
 8016b8e:	f7e9 ff0f 	bl	80009b0 <memchr>
 8016b92:	9a04      	ldr	r2, [sp, #16]
 8016b94:	b9d8      	cbnz	r0, 8016bce <_svfiprintf_r+0xe6>
 8016b96:	06d0      	lsls	r0, r2, #27
 8016b98:	bf44      	itt	mi
 8016b9a:	2320      	movmi	r3, #32
 8016b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ba0:	0711      	lsls	r1, r2, #28
 8016ba2:	bf44      	itt	mi
 8016ba4:	232b      	movmi	r3, #43	; 0x2b
 8016ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016baa:	f89a 3000 	ldrb.w	r3, [sl]
 8016bae:	2b2a      	cmp	r3, #42	; 0x2a
 8016bb0:	d015      	beq.n	8016bde <_svfiprintf_r+0xf6>
 8016bb2:	9a07      	ldr	r2, [sp, #28]
 8016bb4:	4654      	mov	r4, sl
 8016bb6:	2000      	movs	r0, #0
 8016bb8:	f04f 0c0a 	mov.w	ip, #10
 8016bbc:	4621      	mov	r1, r4
 8016bbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016bc2:	3b30      	subs	r3, #48	; 0x30
 8016bc4:	2b09      	cmp	r3, #9
 8016bc6:	d94e      	bls.n	8016c66 <_svfiprintf_r+0x17e>
 8016bc8:	b1b0      	cbz	r0, 8016bf8 <_svfiprintf_r+0x110>
 8016bca:	9207      	str	r2, [sp, #28]
 8016bcc:	e014      	b.n	8016bf8 <_svfiprintf_r+0x110>
 8016bce:	eba0 0308 	sub.w	r3, r0, r8
 8016bd2:	fa09 f303 	lsl.w	r3, r9, r3
 8016bd6:	4313      	orrs	r3, r2
 8016bd8:	9304      	str	r3, [sp, #16]
 8016bda:	46a2      	mov	sl, r4
 8016bdc:	e7d2      	b.n	8016b84 <_svfiprintf_r+0x9c>
 8016bde:	9b03      	ldr	r3, [sp, #12]
 8016be0:	1d19      	adds	r1, r3, #4
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	9103      	str	r1, [sp, #12]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	bfbb      	ittet	lt
 8016bea:	425b      	neglt	r3, r3
 8016bec:	f042 0202 	orrlt.w	r2, r2, #2
 8016bf0:	9307      	strge	r3, [sp, #28]
 8016bf2:	9307      	strlt	r3, [sp, #28]
 8016bf4:	bfb8      	it	lt
 8016bf6:	9204      	strlt	r2, [sp, #16]
 8016bf8:	7823      	ldrb	r3, [r4, #0]
 8016bfa:	2b2e      	cmp	r3, #46	; 0x2e
 8016bfc:	d10c      	bne.n	8016c18 <_svfiprintf_r+0x130>
 8016bfe:	7863      	ldrb	r3, [r4, #1]
 8016c00:	2b2a      	cmp	r3, #42	; 0x2a
 8016c02:	d135      	bne.n	8016c70 <_svfiprintf_r+0x188>
 8016c04:	9b03      	ldr	r3, [sp, #12]
 8016c06:	1d1a      	adds	r2, r3, #4
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	9203      	str	r2, [sp, #12]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	bfb8      	it	lt
 8016c10:	f04f 33ff 	movlt.w	r3, #4294967295
 8016c14:	3402      	adds	r4, #2
 8016c16:	9305      	str	r3, [sp, #20]
 8016c18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016ce4 <_svfiprintf_r+0x1fc>
 8016c1c:	7821      	ldrb	r1, [r4, #0]
 8016c1e:	2203      	movs	r2, #3
 8016c20:	4650      	mov	r0, sl
 8016c22:	f7e9 fec5 	bl	80009b0 <memchr>
 8016c26:	b140      	cbz	r0, 8016c3a <_svfiprintf_r+0x152>
 8016c28:	2340      	movs	r3, #64	; 0x40
 8016c2a:	eba0 000a 	sub.w	r0, r0, sl
 8016c2e:	fa03 f000 	lsl.w	r0, r3, r0
 8016c32:	9b04      	ldr	r3, [sp, #16]
 8016c34:	4303      	orrs	r3, r0
 8016c36:	3401      	adds	r4, #1
 8016c38:	9304      	str	r3, [sp, #16]
 8016c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c3e:	4826      	ldr	r0, [pc, #152]	; (8016cd8 <_svfiprintf_r+0x1f0>)
 8016c40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016c44:	2206      	movs	r2, #6
 8016c46:	f7e9 feb3 	bl	80009b0 <memchr>
 8016c4a:	2800      	cmp	r0, #0
 8016c4c:	d038      	beq.n	8016cc0 <_svfiprintf_r+0x1d8>
 8016c4e:	4b23      	ldr	r3, [pc, #140]	; (8016cdc <_svfiprintf_r+0x1f4>)
 8016c50:	bb1b      	cbnz	r3, 8016c9a <_svfiprintf_r+0x1b2>
 8016c52:	9b03      	ldr	r3, [sp, #12]
 8016c54:	3307      	adds	r3, #7
 8016c56:	f023 0307 	bic.w	r3, r3, #7
 8016c5a:	3308      	adds	r3, #8
 8016c5c:	9303      	str	r3, [sp, #12]
 8016c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c60:	4433      	add	r3, r6
 8016c62:	9309      	str	r3, [sp, #36]	; 0x24
 8016c64:	e767      	b.n	8016b36 <_svfiprintf_r+0x4e>
 8016c66:	fb0c 3202 	mla	r2, ip, r2, r3
 8016c6a:	460c      	mov	r4, r1
 8016c6c:	2001      	movs	r0, #1
 8016c6e:	e7a5      	b.n	8016bbc <_svfiprintf_r+0xd4>
 8016c70:	2300      	movs	r3, #0
 8016c72:	3401      	adds	r4, #1
 8016c74:	9305      	str	r3, [sp, #20]
 8016c76:	4619      	mov	r1, r3
 8016c78:	f04f 0c0a 	mov.w	ip, #10
 8016c7c:	4620      	mov	r0, r4
 8016c7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016c82:	3a30      	subs	r2, #48	; 0x30
 8016c84:	2a09      	cmp	r2, #9
 8016c86:	d903      	bls.n	8016c90 <_svfiprintf_r+0x1a8>
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d0c5      	beq.n	8016c18 <_svfiprintf_r+0x130>
 8016c8c:	9105      	str	r1, [sp, #20]
 8016c8e:	e7c3      	b.n	8016c18 <_svfiprintf_r+0x130>
 8016c90:	fb0c 2101 	mla	r1, ip, r1, r2
 8016c94:	4604      	mov	r4, r0
 8016c96:	2301      	movs	r3, #1
 8016c98:	e7f0      	b.n	8016c7c <_svfiprintf_r+0x194>
 8016c9a:	ab03      	add	r3, sp, #12
 8016c9c:	9300      	str	r3, [sp, #0]
 8016c9e:	462a      	mov	r2, r5
 8016ca0:	4b0f      	ldr	r3, [pc, #60]	; (8016ce0 <_svfiprintf_r+0x1f8>)
 8016ca2:	a904      	add	r1, sp, #16
 8016ca4:	4638      	mov	r0, r7
 8016ca6:	f3af 8000 	nop.w
 8016caa:	1c42      	adds	r2, r0, #1
 8016cac:	4606      	mov	r6, r0
 8016cae:	d1d6      	bne.n	8016c5e <_svfiprintf_r+0x176>
 8016cb0:	89ab      	ldrh	r3, [r5, #12]
 8016cb2:	065b      	lsls	r3, r3, #25
 8016cb4:	f53f af2c 	bmi.w	8016b10 <_svfiprintf_r+0x28>
 8016cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016cba:	b01d      	add	sp, #116	; 0x74
 8016cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cc0:	ab03      	add	r3, sp, #12
 8016cc2:	9300      	str	r3, [sp, #0]
 8016cc4:	462a      	mov	r2, r5
 8016cc6:	4b06      	ldr	r3, [pc, #24]	; (8016ce0 <_svfiprintf_r+0x1f8>)
 8016cc8:	a904      	add	r1, sp, #16
 8016cca:	4638      	mov	r0, r7
 8016ccc:	f000 f87a 	bl	8016dc4 <_printf_i>
 8016cd0:	e7eb      	b.n	8016caa <_svfiprintf_r+0x1c2>
 8016cd2:	bf00      	nop
 8016cd4:	0801abbc 	.word	0x0801abbc
 8016cd8:	0801abc6 	.word	0x0801abc6
 8016cdc:	00000000 	.word	0x00000000
 8016ce0:	08016a31 	.word	0x08016a31
 8016ce4:	0801abc2 	.word	0x0801abc2

08016ce8 <_printf_common>:
 8016ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cec:	4616      	mov	r6, r2
 8016cee:	4699      	mov	r9, r3
 8016cf0:	688a      	ldr	r2, [r1, #8]
 8016cf2:	690b      	ldr	r3, [r1, #16]
 8016cf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016cf8:	4293      	cmp	r3, r2
 8016cfa:	bfb8      	it	lt
 8016cfc:	4613      	movlt	r3, r2
 8016cfe:	6033      	str	r3, [r6, #0]
 8016d00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016d04:	4607      	mov	r7, r0
 8016d06:	460c      	mov	r4, r1
 8016d08:	b10a      	cbz	r2, 8016d0e <_printf_common+0x26>
 8016d0a:	3301      	adds	r3, #1
 8016d0c:	6033      	str	r3, [r6, #0]
 8016d0e:	6823      	ldr	r3, [r4, #0]
 8016d10:	0699      	lsls	r1, r3, #26
 8016d12:	bf42      	ittt	mi
 8016d14:	6833      	ldrmi	r3, [r6, #0]
 8016d16:	3302      	addmi	r3, #2
 8016d18:	6033      	strmi	r3, [r6, #0]
 8016d1a:	6825      	ldr	r5, [r4, #0]
 8016d1c:	f015 0506 	ands.w	r5, r5, #6
 8016d20:	d106      	bne.n	8016d30 <_printf_common+0x48>
 8016d22:	f104 0a19 	add.w	sl, r4, #25
 8016d26:	68e3      	ldr	r3, [r4, #12]
 8016d28:	6832      	ldr	r2, [r6, #0]
 8016d2a:	1a9b      	subs	r3, r3, r2
 8016d2c:	42ab      	cmp	r3, r5
 8016d2e:	dc26      	bgt.n	8016d7e <_printf_common+0x96>
 8016d30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016d34:	1e13      	subs	r3, r2, #0
 8016d36:	6822      	ldr	r2, [r4, #0]
 8016d38:	bf18      	it	ne
 8016d3a:	2301      	movne	r3, #1
 8016d3c:	0692      	lsls	r2, r2, #26
 8016d3e:	d42b      	bmi.n	8016d98 <_printf_common+0xb0>
 8016d40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016d44:	4649      	mov	r1, r9
 8016d46:	4638      	mov	r0, r7
 8016d48:	47c0      	blx	r8
 8016d4a:	3001      	adds	r0, #1
 8016d4c:	d01e      	beq.n	8016d8c <_printf_common+0xa4>
 8016d4e:	6823      	ldr	r3, [r4, #0]
 8016d50:	68e5      	ldr	r5, [r4, #12]
 8016d52:	6832      	ldr	r2, [r6, #0]
 8016d54:	f003 0306 	and.w	r3, r3, #6
 8016d58:	2b04      	cmp	r3, #4
 8016d5a:	bf08      	it	eq
 8016d5c:	1aad      	subeq	r5, r5, r2
 8016d5e:	68a3      	ldr	r3, [r4, #8]
 8016d60:	6922      	ldr	r2, [r4, #16]
 8016d62:	bf0c      	ite	eq
 8016d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016d68:	2500      	movne	r5, #0
 8016d6a:	4293      	cmp	r3, r2
 8016d6c:	bfc4      	itt	gt
 8016d6e:	1a9b      	subgt	r3, r3, r2
 8016d70:	18ed      	addgt	r5, r5, r3
 8016d72:	2600      	movs	r6, #0
 8016d74:	341a      	adds	r4, #26
 8016d76:	42b5      	cmp	r5, r6
 8016d78:	d11a      	bne.n	8016db0 <_printf_common+0xc8>
 8016d7a:	2000      	movs	r0, #0
 8016d7c:	e008      	b.n	8016d90 <_printf_common+0xa8>
 8016d7e:	2301      	movs	r3, #1
 8016d80:	4652      	mov	r2, sl
 8016d82:	4649      	mov	r1, r9
 8016d84:	4638      	mov	r0, r7
 8016d86:	47c0      	blx	r8
 8016d88:	3001      	adds	r0, #1
 8016d8a:	d103      	bne.n	8016d94 <_printf_common+0xac>
 8016d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8016d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d94:	3501      	adds	r5, #1
 8016d96:	e7c6      	b.n	8016d26 <_printf_common+0x3e>
 8016d98:	18e1      	adds	r1, r4, r3
 8016d9a:	1c5a      	adds	r2, r3, #1
 8016d9c:	2030      	movs	r0, #48	; 0x30
 8016d9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016da2:	4422      	add	r2, r4
 8016da4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016da8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016dac:	3302      	adds	r3, #2
 8016dae:	e7c7      	b.n	8016d40 <_printf_common+0x58>
 8016db0:	2301      	movs	r3, #1
 8016db2:	4622      	mov	r2, r4
 8016db4:	4649      	mov	r1, r9
 8016db6:	4638      	mov	r0, r7
 8016db8:	47c0      	blx	r8
 8016dba:	3001      	adds	r0, #1
 8016dbc:	d0e6      	beq.n	8016d8c <_printf_common+0xa4>
 8016dbe:	3601      	adds	r6, #1
 8016dc0:	e7d9      	b.n	8016d76 <_printf_common+0x8e>
	...

08016dc4 <_printf_i>:
 8016dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016dc8:	7e0f      	ldrb	r7, [r1, #24]
 8016dca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016dcc:	2f78      	cmp	r7, #120	; 0x78
 8016dce:	4691      	mov	r9, r2
 8016dd0:	4680      	mov	r8, r0
 8016dd2:	460c      	mov	r4, r1
 8016dd4:	469a      	mov	sl, r3
 8016dd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016dda:	d807      	bhi.n	8016dec <_printf_i+0x28>
 8016ddc:	2f62      	cmp	r7, #98	; 0x62
 8016dde:	d80a      	bhi.n	8016df6 <_printf_i+0x32>
 8016de0:	2f00      	cmp	r7, #0
 8016de2:	f000 80d8 	beq.w	8016f96 <_printf_i+0x1d2>
 8016de6:	2f58      	cmp	r7, #88	; 0x58
 8016de8:	f000 80a3 	beq.w	8016f32 <_printf_i+0x16e>
 8016dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016df0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016df4:	e03a      	b.n	8016e6c <_printf_i+0xa8>
 8016df6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016dfa:	2b15      	cmp	r3, #21
 8016dfc:	d8f6      	bhi.n	8016dec <_printf_i+0x28>
 8016dfe:	a101      	add	r1, pc, #4	; (adr r1, 8016e04 <_printf_i+0x40>)
 8016e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016e04:	08016e5d 	.word	0x08016e5d
 8016e08:	08016e71 	.word	0x08016e71
 8016e0c:	08016ded 	.word	0x08016ded
 8016e10:	08016ded 	.word	0x08016ded
 8016e14:	08016ded 	.word	0x08016ded
 8016e18:	08016ded 	.word	0x08016ded
 8016e1c:	08016e71 	.word	0x08016e71
 8016e20:	08016ded 	.word	0x08016ded
 8016e24:	08016ded 	.word	0x08016ded
 8016e28:	08016ded 	.word	0x08016ded
 8016e2c:	08016ded 	.word	0x08016ded
 8016e30:	08016f7d 	.word	0x08016f7d
 8016e34:	08016ea1 	.word	0x08016ea1
 8016e38:	08016f5f 	.word	0x08016f5f
 8016e3c:	08016ded 	.word	0x08016ded
 8016e40:	08016ded 	.word	0x08016ded
 8016e44:	08016f9f 	.word	0x08016f9f
 8016e48:	08016ded 	.word	0x08016ded
 8016e4c:	08016ea1 	.word	0x08016ea1
 8016e50:	08016ded 	.word	0x08016ded
 8016e54:	08016ded 	.word	0x08016ded
 8016e58:	08016f67 	.word	0x08016f67
 8016e5c:	682b      	ldr	r3, [r5, #0]
 8016e5e:	1d1a      	adds	r2, r3, #4
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	602a      	str	r2, [r5, #0]
 8016e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016e68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016e6c:	2301      	movs	r3, #1
 8016e6e:	e0a3      	b.n	8016fb8 <_printf_i+0x1f4>
 8016e70:	6820      	ldr	r0, [r4, #0]
 8016e72:	6829      	ldr	r1, [r5, #0]
 8016e74:	0606      	lsls	r6, r0, #24
 8016e76:	f101 0304 	add.w	r3, r1, #4
 8016e7a:	d50a      	bpl.n	8016e92 <_printf_i+0xce>
 8016e7c:	680e      	ldr	r6, [r1, #0]
 8016e7e:	602b      	str	r3, [r5, #0]
 8016e80:	2e00      	cmp	r6, #0
 8016e82:	da03      	bge.n	8016e8c <_printf_i+0xc8>
 8016e84:	232d      	movs	r3, #45	; 0x2d
 8016e86:	4276      	negs	r6, r6
 8016e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e8c:	485e      	ldr	r0, [pc, #376]	; (8017008 <_printf_i+0x244>)
 8016e8e:	230a      	movs	r3, #10
 8016e90:	e019      	b.n	8016ec6 <_printf_i+0x102>
 8016e92:	680e      	ldr	r6, [r1, #0]
 8016e94:	602b      	str	r3, [r5, #0]
 8016e96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016e9a:	bf18      	it	ne
 8016e9c:	b236      	sxthne	r6, r6
 8016e9e:	e7ef      	b.n	8016e80 <_printf_i+0xbc>
 8016ea0:	682b      	ldr	r3, [r5, #0]
 8016ea2:	6820      	ldr	r0, [r4, #0]
 8016ea4:	1d19      	adds	r1, r3, #4
 8016ea6:	6029      	str	r1, [r5, #0]
 8016ea8:	0601      	lsls	r1, r0, #24
 8016eaa:	d501      	bpl.n	8016eb0 <_printf_i+0xec>
 8016eac:	681e      	ldr	r6, [r3, #0]
 8016eae:	e002      	b.n	8016eb6 <_printf_i+0xf2>
 8016eb0:	0646      	lsls	r6, r0, #25
 8016eb2:	d5fb      	bpl.n	8016eac <_printf_i+0xe8>
 8016eb4:	881e      	ldrh	r6, [r3, #0]
 8016eb6:	4854      	ldr	r0, [pc, #336]	; (8017008 <_printf_i+0x244>)
 8016eb8:	2f6f      	cmp	r7, #111	; 0x6f
 8016eba:	bf0c      	ite	eq
 8016ebc:	2308      	moveq	r3, #8
 8016ebe:	230a      	movne	r3, #10
 8016ec0:	2100      	movs	r1, #0
 8016ec2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016ec6:	6865      	ldr	r5, [r4, #4]
 8016ec8:	60a5      	str	r5, [r4, #8]
 8016eca:	2d00      	cmp	r5, #0
 8016ecc:	bfa2      	ittt	ge
 8016ece:	6821      	ldrge	r1, [r4, #0]
 8016ed0:	f021 0104 	bicge.w	r1, r1, #4
 8016ed4:	6021      	strge	r1, [r4, #0]
 8016ed6:	b90e      	cbnz	r6, 8016edc <_printf_i+0x118>
 8016ed8:	2d00      	cmp	r5, #0
 8016eda:	d04d      	beq.n	8016f78 <_printf_i+0x1b4>
 8016edc:	4615      	mov	r5, r2
 8016ede:	fbb6 f1f3 	udiv	r1, r6, r3
 8016ee2:	fb03 6711 	mls	r7, r3, r1, r6
 8016ee6:	5dc7      	ldrb	r7, [r0, r7]
 8016ee8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016eec:	4637      	mov	r7, r6
 8016eee:	42bb      	cmp	r3, r7
 8016ef0:	460e      	mov	r6, r1
 8016ef2:	d9f4      	bls.n	8016ede <_printf_i+0x11a>
 8016ef4:	2b08      	cmp	r3, #8
 8016ef6:	d10b      	bne.n	8016f10 <_printf_i+0x14c>
 8016ef8:	6823      	ldr	r3, [r4, #0]
 8016efa:	07de      	lsls	r6, r3, #31
 8016efc:	d508      	bpl.n	8016f10 <_printf_i+0x14c>
 8016efe:	6923      	ldr	r3, [r4, #16]
 8016f00:	6861      	ldr	r1, [r4, #4]
 8016f02:	4299      	cmp	r1, r3
 8016f04:	bfde      	ittt	le
 8016f06:	2330      	movle	r3, #48	; 0x30
 8016f08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016f0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016f10:	1b52      	subs	r2, r2, r5
 8016f12:	6122      	str	r2, [r4, #16]
 8016f14:	f8cd a000 	str.w	sl, [sp]
 8016f18:	464b      	mov	r3, r9
 8016f1a:	aa03      	add	r2, sp, #12
 8016f1c:	4621      	mov	r1, r4
 8016f1e:	4640      	mov	r0, r8
 8016f20:	f7ff fee2 	bl	8016ce8 <_printf_common>
 8016f24:	3001      	adds	r0, #1
 8016f26:	d14c      	bne.n	8016fc2 <_printf_i+0x1fe>
 8016f28:	f04f 30ff 	mov.w	r0, #4294967295
 8016f2c:	b004      	add	sp, #16
 8016f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f32:	4835      	ldr	r0, [pc, #212]	; (8017008 <_printf_i+0x244>)
 8016f34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016f38:	6829      	ldr	r1, [r5, #0]
 8016f3a:	6823      	ldr	r3, [r4, #0]
 8016f3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8016f40:	6029      	str	r1, [r5, #0]
 8016f42:	061d      	lsls	r5, r3, #24
 8016f44:	d514      	bpl.n	8016f70 <_printf_i+0x1ac>
 8016f46:	07df      	lsls	r7, r3, #31
 8016f48:	bf44      	itt	mi
 8016f4a:	f043 0320 	orrmi.w	r3, r3, #32
 8016f4e:	6023      	strmi	r3, [r4, #0]
 8016f50:	b91e      	cbnz	r6, 8016f5a <_printf_i+0x196>
 8016f52:	6823      	ldr	r3, [r4, #0]
 8016f54:	f023 0320 	bic.w	r3, r3, #32
 8016f58:	6023      	str	r3, [r4, #0]
 8016f5a:	2310      	movs	r3, #16
 8016f5c:	e7b0      	b.n	8016ec0 <_printf_i+0xfc>
 8016f5e:	6823      	ldr	r3, [r4, #0]
 8016f60:	f043 0320 	orr.w	r3, r3, #32
 8016f64:	6023      	str	r3, [r4, #0]
 8016f66:	2378      	movs	r3, #120	; 0x78
 8016f68:	4828      	ldr	r0, [pc, #160]	; (801700c <_printf_i+0x248>)
 8016f6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016f6e:	e7e3      	b.n	8016f38 <_printf_i+0x174>
 8016f70:	0659      	lsls	r1, r3, #25
 8016f72:	bf48      	it	mi
 8016f74:	b2b6      	uxthmi	r6, r6
 8016f76:	e7e6      	b.n	8016f46 <_printf_i+0x182>
 8016f78:	4615      	mov	r5, r2
 8016f7a:	e7bb      	b.n	8016ef4 <_printf_i+0x130>
 8016f7c:	682b      	ldr	r3, [r5, #0]
 8016f7e:	6826      	ldr	r6, [r4, #0]
 8016f80:	6961      	ldr	r1, [r4, #20]
 8016f82:	1d18      	adds	r0, r3, #4
 8016f84:	6028      	str	r0, [r5, #0]
 8016f86:	0635      	lsls	r5, r6, #24
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	d501      	bpl.n	8016f90 <_printf_i+0x1cc>
 8016f8c:	6019      	str	r1, [r3, #0]
 8016f8e:	e002      	b.n	8016f96 <_printf_i+0x1d2>
 8016f90:	0670      	lsls	r0, r6, #25
 8016f92:	d5fb      	bpl.n	8016f8c <_printf_i+0x1c8>
 8016f94:	8019      	strh	r1, [r3, #0]
 8016f96:	2300      	movs	r3, #0
 8016f98:	6123      	str	r3, [r4, #16]
 8016f9a:	4615      	mov	r5, r2
 8016f9c:	e7ba      	b.n	8016f14 <_printf_i+0x150>
 8016f9e:	682b      	ldr	r3, [r5, #0]
 8016fa0:	1d1a      	adds	r2, r3, #4
 8016fa2:	602a      	str	r2, [r5, #0]
 8016fa4:	681d      	ldr	r5, [r3, #0]
 8016fa6:	6862      	ldr	r2, [r4, #4]
 8016fa8:	2100      	movs	r1, #0
 8016faa:	4628      	mov	r0, r5
 8016fac:	f7e9 fd00 	bl	80009b0 <memchr>
 8016fb0:	b108      	cbz	r0, 8016fb6 <_printf_i+0x1f2>
 8016fb2:	1b40      	subs	r0, r0, r5
 8016fb4:	6060      	str	r0, [r4, #4]
 8016fb6:	6863      	ldr	r3, [r4, #4]
 8016fb8:	6123      	str	r3, [r4, #16]
 8016fba:	2300      	movs	r3, #0
 8016fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016fc0:	e7a8      	b.n	8016f14 <_printf_i+0x150>
 8016fc2:	6923      	ldr	r3, [r4, #16]
 8016fc4:	462a      	mov	r2, r5
 8016fc6:	4649      	mov	r1, r9
 8016fc8:	4640      	mov	r0, r8
 8016fca:	47d0      	blx	sl
 8016fcc:	3001      	adds	r0, #1
 8016fce:	d0ab      	beq.n	8016f28 <_printf_i+0x164>
 8016fd0:	6823      	ldr	r3, [r4, #0]
 8016fd2:	079b      	lsls	r3, r3, #30
 8016fd4:	d413      	bmi.n	8016ffe <_printf_i+0x23a>
 8016fd6:	68e0      	ldr	r0, [r4, #12]
 8016fd8:	9b03      	ldr	r3, [sp, #12]
 8016fda:	4298      	cmp	r0, r3
 8016fdc:	bfb8      	it	lt
 8016fde:	4618      	movlt	r0, r3
 8016fe0:	e7a4      	b.n	8016f2c <_printf_i+0x168>
 8016fe2:	2301      	movs	r3, #1
 8016fe4:	4632      	mov	r2, r6
 8016fe6:	4649      	mov	r1, r9
 8016fe8:	4640      	mov	r0, r8
 8016fea:	47d0      	blx	sl
 8016fec:	3001      	adds	r0, #1
 8016fee:	d09b      	beq.n	8016f28 <_printf_i+0x164>
 8016ff0:	3501      	adds	r5, #1
 8016ff2:	68e3      	ldr	r3, [r4, #12]
 8016ff4:	9903      	ldr	r1, [sp, #12]
 8016ff6:	1a5b      	subs	r3, r3, r1
 8016ff8:	42ab      	cmp	r3, r5
 8016ffa:	dcf2      	bgt.n	8016fe2 <_printf_i+0x21e>
 8016ffc:	e7eb      	b.n	8016fd6 <_printf_i+0x212>
 8016ffe:	2500      	movs	r5, #0
 8017000:	f104 0619 	add.w	r6, r4, #25
 8017004:	e7f5      	b.n	8016ff2 <_printf_i+0x22e>
 8017006:	bf00      	nop
 8017008:	0801abcd 	.word	0x0801abcd
 801700c:	0801abde 	.word	0x0801abde

08017010 <_free_r>:
 8017010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017012:	2900      	cmp	r1, #0
 8017014:	d044      	beq.n	80170a0 <_free_r+0x90>
 8017016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801701a:	9001      	str	r0, [sp, #4]
 801701c:	2b00      	cmp	r3, #0
 801701e:	f1a1 0404 	sub.w	r4, r1, #4
 8017022:	bfb8      	it	lt
 8017024:	18e4      	addlt	r4, r4, r3
 8017026:	f000 f913 	bl	8017250 <__malloc_lock>
 801702a:	4a1e      	ldr	r2, [pc, #120]	; (80170a4 <_free_r+0x94>)
 801702c:	9801      	ldr	r0, [sp, #4]
 801702e:	6813      	ldr	r3, [r2, #0]
 8017030:	b933      	cbnz	r3, 8017040 <_free_r+0x30>
 8017032:	6063      	str	r3, [r4, #4]
 8017034:	6014      	str	r4, [r2, #0]
 8017036:	b003      	add	sp, #12
 8017038:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801703c:	f000 b90e 	b.w	801725c <__malloc_unlock>
 8017040:	42a3      	cmp	r3, r4
 8017042:	d908      	bls.n	8017056 <_free_r+0x46>
 8017044:	6825      	ldr	r5, [r4, #0]
 8017046:	1961      	adds	r1, r4, r5
 8017048:	428b      	cmp	r3, r1
 801704a:	bf01      	itttt	eq
 801704c:	6819      	ldreq	r1, [r3, #0]
 801704e:	685b      	ldreq	r3, [r3, #4]
 8017050:	1949      	addeq	r1, r1, r5
 8017052:	6021      	streq	r1, [r4, #0]
 8017054:	e7ed      	b.n	8017032 <_free_r+0x22>
 8017056:	461a      	mov	r2, r3
 8017058:	685b      	ldr	r3, [r3, #4]
 801705a:	b10b      	cbz	r3, 8017060 <_free_r+0x50>
 801705c:	42a3      	cmp	r3, r4
 801705e:	d9fa      	bls.n	8017056 <_free_r+0x46>
 8017060:	6811      	ldr	r1, [r2, #0]
 8017062:	1855      	adds	r5, r2, r1
 8017064:	42a5      	cmp	r5, r4
 8017066:	d10b      	bne.n	8017080 <_free_r+0x70>
 8017068:	6824      	ldr	r4, [r4, #0]
 801706a:	4421      	add	r1, r4
 801706c:	1854      	adds	r4, r2, r1
 801706e:	42a3      	cmp	r3, r4
 8017070:	6011      	str	r1, [r2, #0]
 8017072:	d1e0      	bne.n	8017036 <_free_r+0x26>
 8017074:	681c      	ldr	r4, [r3, #0]
 8017076:	685b      	ldr	r3, [r3, #4]
 8017078:	6053      	str	r3, [r2, #4]
 801707a:	4421      	add	r1, r4
 801707c:	6011      	str	r1, [r2, #0]
 801707e:	e7da      	b.n	8017036 <_free_r+0x26>
 8017080:	d902      	bls.n	8017088 <_free_r+0x78>
 8017082:	230c      	movs	r3, #12
 8017084:	6003      	str	r3, [r0, #0]
 8017086:	e7d6      	b.n	8017036 <_free_r+0x26>
 8017088:	6825      	ldr	r5, [r4, #0]
 801708a:	1961      	adds	r1, r4, r5
 801708c:	428b      	cmp	r3, r1
 801708e:	bf04      	itt	eq
 8017090:	6819      	ldreq	r1, [r3, #0]
 8017092:	685b      	ldreq	r3, [r3, #4]
 8017094:	6063      	str	r3, [r4, #4]
 8017096:	bf04      	itt	eq
 8017098:	1949      	addeq	r1, r1, r5
 801709a:	6021      	streq	r1, [r4, #0]
 801709c:	6054      	str	r4, [r2, #4]
 801709e:	e7ca      	b.n	8017036 <_free_r+0x26>
 80170a0:	b003      	add	sp, #12
 80170a2:	bd30      	pop	{r4, r5, pc}
 80170a4:	200405fc 	.word	0x200405fc

080170a8 <sbrk_aligned>:
 80170a8:	b570      	push	{r4, r5, r6, lr}
 80170aa:	4e0e      	ldr	r6, [pc, #56]	; (80170e4 <sbrk_aligned+0x3c>)
 80170ac:	460c      	mov	r4, r1
 80170ae:	6831      	ldr	r1, [r6, #0]
 80170b0:	4605      	mov	r5, r0
 80170b2:	b911      	cbnz	r1, 80170ba <sbrk_aligned+0x12>
 80170b4:	f000 f8bc 	bl	8017230 <_sbrk_r>
 80170b8:	6030      	str	r0, [r6, #0]
 80170ba:	4621      	mov	r1, r4
 80170bc:	4628      	mov	r0, r5
 80170be:	f000 f8b7 	bl	8017230 <_sbrk_r>
 80170c2:	1c43      	adds	r3, r0, #1
 80170c4:	d00a      	beq.n	80170dc <sbrk_aligned+0x34>
 80170c6:	1cc4      	adds	r4, r0, #3
 80170c8:	f024 0403 	bic.w	r4, r4, #3
 80170cc:	42a0      	cmp	r0, r4
 80170ce:	d007      	beq.n	80170e0 <sbrk_aligned+0x38>
 80170d0:	1a21      	subs	r1, r4, r0
 80170d2:	4628      	mov	r0, r5
 80170d4:	f000 f8ac 	bl	8017230 <_sbrk_r>
 80170d8:	3001      	adds	r0, #1
 80170da:	d101      	bne.n	80170e0 <sbrk_aligned+0x38>
 80170dc:	f04f 34ff 	mov.w	r4, #4294967295
 80170e0:	4620      	mov	r0, r4
 80170e2:	bd70      	pop	{r4, r5, r6, pc}
 80170e4:	20040600 	.word	0x20040600

080170e8 <_malloc_r>:
 80170e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170ec:	1ccd      	adds	r5, r1, #3
 80170ee:	f025 0503 	bic.w	r5, r5, #3
 80170f2:	3508      	adds	r5, #8
 80170f4:	2d0c      	cmp	r5, #12
 80170f6:	bf38      	it	cc
 80170f8:	250c      	movcc	r5, #12
 80170fa:	2d00      	cmp	r5, #0
 80170fc:	4607      	mov	r7, r0
 80170fe:	db01      	blt.n	8017104 <_malloc_r+0x1c>
 8017100:	42a9      	cmp	r1, r5
 8017102:	d905      	bls.n	8017110 <_malloc_r+0x28>
 8017104:	230c      	movs	r3, #12
 8017106:	603b      	str	r3, [r7, #0]
 8017108:	2600      	movs	r6, #0
 801710a:	4630      	mov	r0, r6
 801710c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017110:	4e2e      	ldr	r6, [pc, #184]	; (80171cc <_malloc_r+0xe4>)
 8017112:	f000 f89d 	bl	8017250 <__malloc_lock>
 8017116:	6833      	ldr	r3, [r6, #0]
 8017118:	461c      	mov	r4, r3
 801711a:	bb34      	cbnz	r4, 801716a <_malloc_r+0x82>
 801711c:	4629      	mov	r1, r5
 801711e:	4638      	mov	r0, r7
 8017120:	f7ff ffc2 	bl	80170a8 <sbrk_aligned>
 8017124:	1c43      	adds	r3, r0, #1
 8017126:	4604      	mov	r4, r0
 8017128:	d14d      	bne.n	80171c6 <_malloc_r+0xde>
 801712a:	6834      	ldr	r4, [r6, #0]
 801712c:	4626      	mov	r6, r4
 801712e:	2e00      	cmp	r6, #0
 8017130:	d140      	bne.n	80171b4 <_malloc_r+0xcc>
 8017132:	6823      	ldr	r3, [r4, #0]
 8017134:	4631      	mov	r1, r6
 8017136:	4638      	mov	r0, r7
 8017138:	eb04 0803 	add.w	r8, r4, r3
 801713c:	f000 f878 	bl	8017230 <_sbrk_r>
 8017140:	4580      	cmp	r8, r0
 8017142:	d13a      	bne.n	80171ba <_malloc_r+0xd2>
 8017144:	6821      	ldr	r1, [r4, #0]
 8017146:	3503      	adds	r5, #3
 8017148:	1a6d      	subs	r5, r5, r1
 801714a:	f025 0503 	bic.w	r5, r5, #3
 801714e:	3508      	adds	r5, #8
 8017150:	2d0c      	cmp	r5, #12
 8017152:	bf38      	it	cc
 8017154:	250c      	movcc	r5, #12
 8017156:	4629      	mov	r1, r5
 8017158:	4638      	mov	r0, r7
 801715a:	f7ff ffa5 	bl	80170a8 <sbrk_aligned>
 801715e:	3001      	adds	r0, #1
 8017160:	d02b      	beq.n	80171ba <_malloc_r+0xd2>
 8017162:	6823      	ldr	r3, [r4, #0]
 8017164:	442b      	add	r3, r5
 8017166:	6023      	str	r3, [r4, #0]
 8017168:	e00e      	b.n	8017188 <_malloc_r+0xa0>
 801716a:	6822      	ldr	r2, [r4, #0]
 801716c:	1b52      	subs	r2, r2, r5
 801716e:	d41e      	bmi.n	80171ae <_malloc_r+0xc6>
 8017170:	2a0b      	cmp	r2, #11
 8017172:	d916      	bls.n	80171a2 <_malloc_r+0xba>
 8017174:	1961      	adds	r1, r4, r5
 8017176:	42a3      	cmp	r3, r4
 8017178:	6025      	str	r5, [r4, #0]
 801717a:	bf18      	it	ne
 801717c:	6059      	strne	r1, [r3, #4]
 801717e:	6863      	ldr	r3, [r4, #4]
 8017180:	bf08      	it	eq
 8017182:	6031      	streq	r1, [r6, #0]
 8017184:	5162      	str	r2, [r4, r5]
 8017186:	604b      	str	r3, [r1, #4]
 8017188:	4638      	mov	r0, r7
 801718a:	f104 060b 	add.w	r6, r4, #11
 801718e:	f000 f865 	bl	801725c <__malloc_unlock>
 8017192:	f026 0607 	bic.w	r6, r6, #7
 8017196:	1d23      	adds	r3, r4, #4
 8017198:	1af2      	subs	r2, r6, r3
 801719a:	d0b6      	beq.n	801710a <_malloc_r+0x22>
 801719c:	1b9b      	subs	r3, r3, r6
 801719e:	50a3      	str	r3, [r4, r2]
 80171a0:	e7b3      	b.n	801710a <_malloc_r+0x22>
 80171a2:	6862      	ldr	r2, [r4, #4]
 80171a4:	42a3      	cmp	r3, r4
 80171a6:	bf0c      	ite	eq
 80171a8:	6032      	streq	r2, [r6, #0]
 80171aa:	605a      	strne	r2, [r3, #4]
 80171ac:	e7ec      	b.n	8017188 <_malloc_r+0xa0>
 80171ae:	4623      	mov	r3, r4
 80171b0:	6864      	ldr	r4, [r4, #4]
 80171b2:	e7b2      	b.n	801711a <_malloc_r+0x32>
 80171b4:	4634      	mov	r4, r6
 80171b6:	6876      	ldr	r6, [r6, #4]
 80171b8:	e7b9      	b.n	801712e <_malloc_r+0x46>
 80171ba:	230c      	movs	r3, #12
 80171bc:	603b      	str	r3, [r7, #0]
 80171be:	4638      	mov	r0, r7
 80171c0:	f000 f84c 	bl	801725c <__malloc_unlock>
 80171c4:	e7a1      	b.n	801710a <_malloc_r+0x22>
 80171c6:	6025      	str	r5, [r4, #0]
 80171c8:	e7de      	b.n	8017188 <_malloc_r+0xa0>
 80171ca:	bf00      	nop
 80171cc:	200405fc 	.word	0x200405fc

080171d0 <_realloc_r>:
 80171d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171d4:	4680      	mov	r8, r0
 80171d6:	4614      	mov	r4, r2
 80171d8:	460e      	mov	r6, r1
 80171da:	b921      	cbnz	r1, 80171e6 <_realloc_r+0x16>
 80171dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80171e0:	4611      	mov	r1, r2
 80171e2:	f7ff bf81 	b.w	80170e8 <_malloc_r>
 80171e6:	b92a      	cbnz	r2, 80171f4 <_realloc_r+0x24>
 80171e8:	f7ff ff12 	bl	8017010 <_free_r>
 80171ec:	4625      	mov	r5, r4
 80171ee:	4628      	mov	r0, r5
 80171f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171f4:	f000 f838 	bl	8017268 <_malloc_usable_size_r>
 80171f8:	4284      	cmp	r4, r0
 80171fa:	4607      	mov	r7, r0
 80171fc:	d802      	bhi.n	8017204 <_realloc_r+0x34>
 80171fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017202:	d812      	bhi.n	801722a <_realloc_r+0x5a>
 8017204:	4621      	mov	r1, r4
 8017206:	4640      	mov	r0, r8
 8017208:	f7ff ff6e 	bl	80170e8 <_malloc_r>
 801720c:	4605      	mov	r5, r0
 801720e:	2800      	cmp	r0, #0
 8017210:	d0ed      	beq.n	80171ee <_realloc_r+0x1e>
 8017212:	42bc      	cmp	r4, r7
 8017214:	4622      	mov	r2, r4
 8017216:	4631      	mov	r1, r6
 8017218:	bf28      	it	cs
 801721a:	463a      	movcs	r2, r7
 801721c:	f7ff fbb8 	bl	8016990 <memcpy>
 8017220:	4631      	mov	r1, r6
 8017222:	4640      	mov	r0, r8
 8017224:	f7ff fef4 	bl	8017010 <_free_r>
 8017228:	e7e1      	b.n	80171ee <_realloc_r+0x1e>
 801722a:	4635      	mov	r5, r6
 801722c:	e7df      	b.n	80171ee <_realloc_r+0x1e>
	...

08017230 <_sbrk_r>:
 8017230:	b538      	push	{r3, r4, r5, lr}
 8017232:	4d06      	ldr	r5, [pc, #24]	; (801724c <_sbrk_r+0x1c>)
 8017234:	2300      	movs	r3, #0
 8017236:	4604      	mov	r4, r0
 8017238:	4608      	mov	r0, r1
 801723a:	602b      	str	r3, [r5, #0]
 801723c:	f7eb f93c 	bl	80024b8 <_sbrk>
 8017240:	1c43      	adds	r3, r0, #1
 8017242:	d102      	bne.n	801724a <_sbrk_r+0x1a>
 8017244:	682b      	ldr	r3, [r5, #0]
 8017246:	b103      	cbz	r3, 801724a <_sbrk_r+0x1a>
 8017248:	6023      	str	r3, [r4, #0]
 801724a:	bd38      	pop	{r3, r4, r5, pc}
 801724c:	20040604 	.word	0x20040604

08017250 <__malloc_lock>:
 8017250:	4801      	ldr	r0, [pc, #4]	; (8017258 <__malloc_lock+0x8>)
 8017252:	f000 b811 	b.w	8017278 <__retarget_lock_acquire_recursive>
 8017256:	bf00      	nop
 8017258:	20040608 	.word	0x20040608

0801725c <__malloc_unlock>:
 801725c:	4801      	ldr	r0, [pc, #4]	; (8017264 <__malloc_unlock+0x8>)
 801725e:	f000 b80c 	b.w	801727a <__retarget_lock_release_recursive>
 8017262:	bf00      	nop
 8017264:	20040608 	.word	0x20040608

08017268 <_malloc_usable_size_r>:
 8017268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801726c:	1f18      	subs	r0, r3, #4
 801726e:	2b00      	cmp	r3, #0
 8017270:	bfbc      	itt	lt
 8017272:	580b      	ldrlt	r3, [r1, r0]
 8017274:	18c0      	addlt	r0, r0, r3
 8017276:	4770      	bx	lr

08017278 <__retarget_lock_acquire_recursive>:
 8017278:	4770      	bx	lr

0801727a <__retarget_lock_release_recursive>:
 801727a:	4770      	bx	lr

0801727c <_init>:
 801727c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801727e:	bf00      	nop
 8017280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017282:	bc08      	pop	{r3}
 8017284:	469e      	mov	lr, r3
 8017286:	4770      	bx	lr

08017288 <_fini>:
 8017288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801728a:	bf00      	nop
 801728c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801728e:	bc08      	pop	{r3}
 8017290:	469e      	mov	lr, r3
 8017292:	4770      	bx	lr
